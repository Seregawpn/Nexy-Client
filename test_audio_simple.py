#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
server_path = Path(__file__).parent / "server"
sys.path.insert(0, str(server_path))

async def test_sentence(text: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    print(f"üó£Ô∏è –¢–ï–°–¢ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø: '{text}'")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: Edge TTS
    print("\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EDGE TTS")
    print("-" * 30)
    success_edge = await test_edge_tts_direct(text)
    
    # –¢–µ—Å—Ç 2: Azure TTS
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AZURE TTS") 
    print("-" * 30)
    success_azure = await test_azure_tts_direct(text)
    
    # –¢–µ—Å—Ç 3: macOS say
    print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MACOS SAY")
    print("-" * 30)
    success_macos = await test_macos_say_direct(text)
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¥–ª—è '{text[:30]}...':")
    print(f"   Edge TTS: {'‚úÖ' if success_edge else '‚ùå'}")
    print(f"   Azure TTS: {'‚úÖ' if success_azure else '‚ùå'}")
    print(f"   macOS say: {'‚úÖ' if success_macos else '‚ùå'}")
    
    return any([success_edge, success_azure, success_macos])

async def test_edge_tts_direct(text: str) -> bool:
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Edge TTS"""
    try:
        import edge_tts
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        import io
        
        print("‚úÖ Edge TTS –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        communicate = edge_tts.Communicate(text, "en-US-JennyNeural")
        audio_bytes = b""
        
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...")
        
        timeout_seconds = 10
        try:
            async with asyncio.timeout(timeout_seconds):
                async for chunk in communicate.stream():
                    if chunk["type"] == "audio":
                        audio_bytes += chunk["data"]
        except asyncio.TimeoutError:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç {timeout_seconds}s")
            return False
        
        if not audio_bytes:
            print("‚ùå –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(audio_bytes)} –±–∞–π—Ç")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
        seg = AudioSegment.from_file(io.BytesIO(audio_bytes))
        if seg.frame_rate != 48000:
            seg = seg.set_frame_rate(48000)
        if seg.channels != 1:
            seg = seg.set_channels(1)
        
        samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
        print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
        print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
        play_data = samples.astype(np.float32) / 32767.0
        sd.play(play_data, samplerate=48000)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        duration = len(samples) / 48000
        await asyncio.sleep(duration + 0.5)
        
        print("‚úÖ Edge TTS —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –ò–º–ø–æ—Ä—Ç –æ—à–∏–±–∫–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install edge-tts")
        return False
    except Exception as e:
        print(f"‚ùå Edge TTS –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_azure_tts_direct(text: str) -> bool:
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Azure TTS"""
    try:
        import azure.cognitiveservices.speech as speechsdk
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        import io
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config import Config
            if not Config.SPEECH_KEY or not Config.SPEECH_REGION:
                print("‚ùå Azure –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ config.env")
                return False
        except Exception:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return False
        
        print(f"‚úÖ Azure SDK –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"üîë –ö–ª—é—á: {Config.SPEECH_KEY[:10]}...")
        print(f"üìç –†–µ–≥–∏–æ–Ω: {Config.SPEECH_REGION}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Azure
        speech_config = speechsdk.SpeechConfig(
            subscription=Config.SPEECH_KEY,
            region=Config.SPEECH_REGION
        )
        speech_config.speech_synthesis_voice_name = "en-US-JennyNeural"
        speech_config.set_speech_synthesis_output_format(
            speechsdk.SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm
        )
        
        synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config)
        
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...")
        result = synthesizer.speak_text_async(text).get()
        
        if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            audio_data = result.audio_data
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
            audio_segment = AudioSegment.from_wav(io.BytesIO(audio_data))
            samples = np.array(audio_segment.get_array_of_samples()).astype(np.int16)
            
            print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
            play_data = samples.astype(np.float32) / 32767.0
            sd.play(play_data, samplerate=48000)
            
            duration = len(samples) / 48000
            await asyncio.sleep(duration + 0.5)
            
            print("‚úÖ Azure TTS —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå Azure TTS –æ—à–∏–±–∫–∞: {result.reason}")
            if result.error_details:
                print(f"   –î–µ—Ç–∞–ª–∏: {result.error_details}")
            return False
            
    except ImportError as e:
        print(f"‚ùå –ò–º–ø–æ—Ä—Ç –æ—à–∏–±–∫–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install azure-cognitiveservices-speech")
        return False
    except Exception as e:
        print(f"‚ùå Azure TTS –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_macos_say_direct(text: str) -> bool:
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç macOS say command"""
    try:
        import subprocess
        import tempfile
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        
        print("‚úÖ macOS say –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.aiff', delete=False) as temp_file:
            temp_path = temp_file.name
        
        try:
            print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ macOS say...")
            
            cmd = [
                'say',
                '-v', 'Samantha',
                '-r', '180',  # –°–∫–æ—Ä–æ—Å—Ç—å
                '-o', temp_path,
                text
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0 and os.path.exists(temp_path):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                seg = AudioSegment.from_file(temp_path)
                seg = seg.set_frame_rate(48000).set_channels(1)
                
                samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
                play_data = samples.astype(np.float32) / 32767.0
                sd.play(play_data, samplerate=48000)
                
                duration = len(samples) / 48000
                await asyncio.sleep(duration + 0.5)
                
                print("‚úÖ macOS say —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print(f"‚ùå macOS say –æ—à–∏–±–∫–∞: {result.stderr}")
                return False
                
        finally:
            try:
                os.unlink(temp_path)
            except:
                pass
                
    except subprocess.TimeoutExpired:
        print("‚è∞ macOS say —Ç–∞–π–º–∞—É—Ç")
        return False
    except Exception as e:
        print(f"‚ùå macOS say –æ—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ê–£–î–ò–û –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    default_text = "Hello, this is a test of text to speech generation."
    text = input(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è '{default_text}'): ").strip()
    
    if not text:
        text = default_text
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{text}'")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = await test_sentence(text)
    
    if success:
        print(f"\nüéâ –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –≤ config.env")
    else:
        print(f"\n‚ùå –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TTS —Å–µ—Ä–≤–∏—Å–æ–≤")
        
    print(f"\nüìö –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python configure_tts.py")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
