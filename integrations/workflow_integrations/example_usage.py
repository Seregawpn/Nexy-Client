#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StreamingWorkflowIntegration —Å –º–æ–¥—É–ª—è–º–∏
"""

import asyncio
import logging
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from modules.text_filtering import TextFilterManager
from modules.text_filtering.config import TextFilteringConfig
from modules.text_processing.core.text_processor import TextProcessor
from modules.audio_generation.core.audio_processor import AudioProcessor
from integrations.workflow_integrations.memory_workflow_integration import MemoryWorkflowIntegration

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from integrations.workflow_integrations.streaming_workflow_integration import StreamingWorkflowIntegration

logger = logging.getLogger(__name__)

async def create_streaming_workflow() -> StreamingWorkflowIntegration:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π StreamingWorkflowIntegration —Å –º–æ–¥—É–ª—è–º–∏
    
    Returns:
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    """
    try:
        # 1. –°–æ–∑–¥–∞—ë–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
        
        # –ú–æ–¥—É–ª—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        text_filter_config = TextFilteringConfig()
        text_filter_manager = TextFilterManager(text_filter_config)
        await text_filter_manager.initialize()
        
        # –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        text_processor = TextProcessor()
        await text_processor.initialize()
        
        # –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        audio_processor = AudioProcessor()
        await audio_processor.initialize()
        
        # –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é
        memory_workflow = MemoryWorkflowIntegration()
        await memory_workflow.initialize()
        
        # 2. –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –º–æ–¥—É–ª—è–º–∏
        logger.info("üîó –°–æ–∑–¥–∞–Ω–∏–µ StreamingWorkflowIntegration...")
        streaming_integration = StreamingWorkflowIntegration(
            text_processor=text_processor,
            audio_processor=audio_processor,
            memory_workflow=memory_workflow,
            text_filter_manager=text_filter_manager  # –ö–ª—é—á–µ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ!
        )
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        await streaming_integration.initialize()
        
        logger.info("‚úÖ StreamingWorkflowIntegration —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return streaming_integration
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è StreamingWorkflowIntegration: {e}")
        raise

async def example_usage():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    try:
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        streaming_integration = await create_streaming_workflow()
        
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        request_data = {
            'session_id': 'test_session',
            'hardware_id': 'test_hardware',
            'text': 'The file main.py contains version 12.10. Check config.json.',
            'screenshot': None
        }
        
        logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        async for result in streaming_integration.process_request_streaming(request_data):
            if result.get('success'):
                if 'text_response' in result:
                    logger.info(f"üìù Text: {result['text_response']}")
                if 'audio_chunk' in result:
                    logger.info(f"üîä Audio chunk: {len(result['audio_chunk'])} bytes")
            else:
                logger.error(f"‚ùå Error: {result.get('error')}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ: {e}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(example_usage())
