#!/usr/bin/env python3
"""
–ß–∏—Å—Ç—ã–π —Ç–µ—Å—Ç welcome message —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent / "client"))
sys.path.append(str(Path(__file__).parent / "server" / "modules" / "grpc_service"))

import grpc.aio

# –ò–º–ø–æ—Ä—Ç—ã protobuf
try:
    import streaming_pb2
    import streaming_pb2_grpc
    print("‚úÖ Protobuf –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ protobuf: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_welcome_message():
    """–¢–µ—Å—Ç welcome message —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ welcome message")
        print("=" * 60)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        server_address = "localhost:50051"
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {server_address}")
        
        async with grpc.aio.insecure_channel(server_address) as channel:
            stub = streaming_pb2_grpc.StreamingServiceStub(channel)
            
            # –°–æ–∑–¥–∞–µ–º welcome –∑–∞–ø—Ä–æ—Å —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            request = streaming_pb2.WelcomeRequest(
                text="Hi! This is a clean test of the welcome message.",
                session_id="clean_test_session"
            )
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome –∑–∞–ø—Ä–æ—Å...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã
            audio_chunks = []
            metadata = {}
            
            async for response in stub.GenerateWelcomeAudio(request, timeout=30):
                content = response.WhichOneof('content')
                
                if content == 'audio_chunk':
                    chunk = response.audio_chunk
                    if chunk.audio_data:
                        audio_bytes = bytes(chunk.audio_data)
                        if audio_bytes:
                            audio_chunks.append(audio_bytes)
                            print(f"üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫: {len(audio_bytes)} –±–∞–π—Ç")
                
                elif content == 'metadata':
                    metadata = {
                        'method': response.metadata.method,
                        'duration_sec': response.metadata.duration_sec,
                        'sample_rate': response.metadata.sample_rate,
                        'channels': response.metadata.channels,
                    }
                    print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: method={metadata['method']}, duration={metadata['duration_sec']:.1f}s, sample_rate={metadata['sample_rate']}")
                
                elif content == 'end_message':
                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {response.end_message}")
                    break
                
                elif content == 'error_message':
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.error_message}")
                    return False
            
            if audio_chunks:
                total_bytes = sum(len(chunk) for chunk in audio_chunks)
                print(f"üéâ –£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω–æ {len(audio_chunks)} —á–∞–Ω–∫–æ–≤, –≤—Å–µ–≥–æ {total_bytes} –±–∞–π—Ç –∞—É–¥–∏–æ")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
                with open("test_welcome_clean.wav", "wb") as f:
                    f.write(b''.join(audio_chunks))
                print("üíæ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ test_welcome_clean.wav")
                
                return True
            else:
                print("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = await test_welcome_message()
    
    print()
    print("=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢ WELCOME MESSAGE –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ùå –¢–ï–°–¢ WELCOME MESSAGE –ù–ï –ü–†–û–®–ï–õ")
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
