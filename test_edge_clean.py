#!/usr/bin/env python3
"""
–ß–∏—Å—Ç—ã–π —Ç–µ—Å—Ç Edge TTS –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ Edge TTS —Å–∞–º –ø–æ —Å–µ–±–µ
"""

import asyncio
import os

async def test_pure_edge_tts():
    """–ß–∏—Å—Ç—ã–π —Ç–µ—Å—Ç Edge TTS"""
    print("üó£Ô∏è –ß–ò–°–¢–´–ô –¢–ï–°–¢ EDGE TTS")
    print("=" * 40)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º Edge TTS –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞")
    print()
    
    try:
        import edge_tts
        print("‚úÖ Edge TTS –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Azure
        azure_vars = ['SPEECH_KEY', 'SPEECH_REGION', 'AZURE_SPEECH_KEY', 'AZURE_SPEECH_REGION']
        for var in azure_vars:
            if var in os.environ:
                print(f"üßπ –£–¥–∞–ª—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var}")
                del os.environ[var]
        
        text = "Hello, this is a clean test of Edge text to speech without any Azure keys."
        voice = "en-US-JennyNeural"
        
        print(f"üó£Ô∏è –¢–µ–∫—Å—Ç: '{text}'")
        print(f"üé§ –ì–æ–ª–æ—Å: {voice}")
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º communicate –æ–±—ä–µ–∫—Ç
        communicate = edge_tts.Communicate(text, voice)
        audio_bytes = b""
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        timeout_seconds = 10
        try:
            async with asyncio.timeout(timeout_seconds):
                async for chunk in communicate.stream():
                    if chunk["type"] == "audio":
                        audio_bytes += chunk["data"]
                    elif chunk["type"] == "WordBoundary":
                        # –ú–æ–∂–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                        pass
        except asyncio.TimeoutError:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç {timeout_seconds}s")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            return False
        
        if audio_bytes:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: {len(audio_bytes)} –±–∞–π—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            output_file = "test_edge_output.mp3"
            with open(output_file, 'wb') as f:
                f.write(audio_bytes)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_file}")
            
            # –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ system
            try:
                import subprocess
                print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ afplay...")
                subprocess.run(['afplay', output_file], timeout=10)
                print("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª
            try:
                os.unlink(output_file)
            except:
                pass
            
            return True
        else:
            print("‚ùå –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
            return False
            
    except ImportError:
        print("‚ùå Edge TTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install edge-tts")
        return False
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_edge_voices():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ Edge TTS"""
    print("\nüé§ –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–´–• –ì–û–õ–û–°–û–í")
    print("=" * 40)
    
    try:
        import edge_tts
        
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤...")
        voices = await edge_tts.list_voices()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
        en_voices = [v for v in voices if v['Locale'].startswith('en-US')][:10]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(en_voices)} –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤:")
        for i, voice in enumerate(en_voices, 1):
            name = voice['ShortName']
            gender = voice['Gender']
            print(f"   {i}. {name} ({gender})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
        return False

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        asyncio.run(test_pure_edge_tts())
        asyncio.run(test_edge_voices())
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
