#!/usr/bin/env python3
"""
Local Update Server for Testing
–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Sparkle
"""

import os
import sys
import json
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class UpdateRequestHandler(SimpleHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, *args, **kwargs):
        self.updates_dir = Path(__file__).parent / "updates"
        self.downloads_dir = self.updates_dir / "downloads"
        self.appcast_file = self.updates_dir / "appcast.xml"
        super().__init__(*args, directory=str(self.updates_dir), **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        logger.info(f"GET request: {path}")
        
        # AppCast XML
        if path == "/appcast.xml":
            self.serve_appcast()
        # API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        elif path == "/api/update/check":
            self.serve_update_check(parsed_path.query)
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (PKG, DMG)
        elif path.startswith("/downloads/"):
            self.serve_download(path)
        # –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        elif path == "/":
            self.serve_index()
        else:
            super().do_GET()
    
    def serve_appcast(self):
        """–û—Ç–¥–∞—á–∞ AppCast XML"""
        try:
            if self.appcast_file.exists():
                with open(self.appcast_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ó–∞–º–µ–Ω—è–µ–º localhost –Ω–∞ —Ç–µ–∫—É—â–∏–π IP
                content = content.replace("https://your-server.com", f"http://{self.server.server_name}:{self.server.server_port}")
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/xml; charset=utf-8')
                self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(content.encode('utf-8'))
            else:
                self.send_error(404, "AppCast not found")
        except Exception as e:
            logger.error(f"Error serving AppCast: {e}")
            self.send_error(500, "Internal Server Error")
    
    def serve_update_check(self, query_string):
        """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            query_params = parse_qs(query_string)
            current_version = query_params.get('current', ['1.70.0'])[0]
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            latest_version = "1.71.0"
            
            if self._compare_versions(latest_version, current_version) > 0:
                response = {
                    'update_available': True,
                    'latest_version': latest_version,
                    'short_version': latest_version,
                    'download_url': f"http://{self.server.server_name}:{self.server.server_port}/downloads/Nexy_AI_Voice_Assistant_v{latest_version}.pkg",
                    'release_notes': '–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
                    'title': f'Version {latest_version}',
                    'file_size': 61439100,
                    'pub_date': '2025-09-10T17:00:00Z'
                }
            else:
                response = {
                    'update_available': False,
                    'current_version': current_version
                }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            logger.error(f"Error in update check: {e}")
            self.send_error(500, "Internal Server Error")
    
    def serve_download(self, path):
        """–û—Ç–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            file_path = self.updates_dir / path[1:]  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π /
            
            if file_path.exists() and file_path.is_file():
                with open(file_path, 'rb') as f:
                    content = f.read()
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/octet-stream')
                self.send_header('Content-Disposition', f'attachment; filename="{file_path.name}"')
                self.send_header('Content-Length', str(len(content)))
                self.end_headers()
                self.wfile.write(content)
            else:
                self.send_error(404, "File not found")
        except Exception as e:
            logger.error(f"Error serving download: {e}")
            self.send_error(500, "Internal Server Error")
    
    def serve_index(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        html = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nexy Update Server</title>
    <style>
        body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f7; }}
        .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }}
        h1 {{ color: #1d1d1f; margin-bottom: 20px; }}
        .status {{ background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0; }}
        .endpoint {{ background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 10px 0; font-family: monospace; }}
        .download {{ background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 10px 0; }}
        a {{ color: #007AFF; text-decoration: none; }}
        a:hover {{ text-decoration: underline; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Nexy Update Server</h1>
        
        <div class="status">
            <h3>‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç</h3>
            <p>–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Sparkle</p>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> http://{self.server.server_name}:{self.server.server_port}</p>
        </div>
        
        <h3>üì° Endpoints:</h3>
        <div class="endpoint">
            <strong>AppCast:</strong> <a href="/appcast.xml">/appcast.xml</a>
        </div>
        <div class="endpoint">
            <strong>Update Check API:</strong> <a href="/api/update/check?current=1.70.0">/api/update/check?current=1.70.0</a>
        </div>
        
        <h3>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</h3>
        <div class="download">
            <strong>Nexy v1.71.0:</strong> <a href="/downloads/Nexy_AI_Voice_Assistant_v1.71.0.pkg">–°–∫–∞—á–∞—Ç—å PKG</a>
        </div>
        
        <h3>üîß –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
        <p>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ PKG —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É <code>updates/downloads/</code></p>
        <p>2. –û–±–Ω–æ–≤–∏—Ç–µ appcast.xml —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL</p>
        <p>3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
    </div>
</body>
</html>
        """
        
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def _compare_versions(self, v1, v2):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π"""
        v1_parts = [int(x) for x in v1.split('.')]
        v2_parts = [int(x) for x in v2.split('.')]
        
        max_len = max(len(v1_parts), len(v2_parts))
        v1_parts.extend([0] * (max_len - len(v1_parts)))
        v2_parts.extend([0] * (max_len - len(v2_parts)))
        
        return (v1_parts > v2_parts) - (v1_parts < v2_parts)
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logger.info(f"{self.address_string()} - {format % args}")

def main():
    """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    port = 8080
    host = 'localhost'
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    updates_dir = Path(__file__).parent / "updates"
    downloads_dir = updates_dir / "downloads"
    downloads_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    print(f"üì° –ê–¥—Ä–µ—Å: http://{host}:{port}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {updates_dir}")
    print(f"üì¶ Downloads: {downloads_dir}")
    print(f"üìÑ AppCast: {updates_dir / 'appcast.xml'}")
    print()
    print("üîß –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ PKG –≤: {downloads_dir}")
    print(f"   2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://{host}:{port}")
    print(f"   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AppCast: http://{host}:{port}/appcast.xml")
    print()
    print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    try:
        server = HTTPServer((host, port), UpdateRequestHandler)
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    main()

