#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import sys
import time
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / 'client'))

from unified_audio_system import get_global_unified_audio_system
from realtime_device_monitor import get_global_realtime_monitor, DeviceEvent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_realtime_monitoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        logger.info("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = {
            'switch_audio_path': '/opt/homebrew/bin/SwitchAudioSource',
            'device_priorities': {
                'airpods': 95,
                'beats': 90,
                'bluetooth_headphones': 85,
                'usb_headphones': 80,
                'speakers': 70,
                'microphone': 60,
                'virtual': 1
            },
            'virtual_device_keywords': ['blackhole', 'loopback', 'virtual'],
            'exclude_virtual_devices': True
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem
        audio_system = get_global_unified_audio_system(config)
        
        if not audio_system or not audio_system.is_initialized():
            logger.error("‚ùå UnifiedAudioSystem –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        logger.info("‚úÖ UnifiedAudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º RealtimeDeviceMonitor
        realtime_monitor = get_global_realtime_monitor()
        
        if not realtime_monitor.is_monitoring():
            logger.error("‚ùå RealtimeDeviceMonitor –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        logger.info("‚úÖ RealtimeDeviceMonitor –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_device = audio_system.get_current_device()
        logger.info(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")
        
        devices = audio_system.get_available_devices()
        logger.info(f"üì± –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        for device in devices:
            status = "üéß –¢–ï–ö–£–©–ï–ï" if device.is_default else "  "
            logger.info(f"{status} {device.name} (—Ç–∏–ø: {device.device_type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority})")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("")
        logger.info("üéß –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info("1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ AirPods –∏–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–∞—É—à–Ω–∏–∫–∏")
        logger.info("2. –û—Ç–∫–ª—é—á–∏—Ç–µ –∏—Ö")
        logger.info("3. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è")
        logger.info("")
        logger.info("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...")
        logger.info("   (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        start_time = time.time()
        while time.time() - start_time < 60:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                time.sleep(5)
                
                new_current_device = audio_system.get_current_device()
                if new_current_device != current_device:
                    logger.info(f"üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {current_device} ‚Üí {new_current_device}")
                    current_device = new_current_device
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {current_device} | –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ' if realtime_monitor.is_monitoring() else '‚ùå'}")
                
            except KeyboardInterrupt:
                logger.info("üõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
        
        logger.info("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_realtime_monitoring()
    sys.exit(0 if success else 1)
