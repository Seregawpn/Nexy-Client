"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Accessibility –∏ Input Monitoring –¥–ª—è macOS
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import logging
import subprocess
from typing import Dict, Any

logger = logging.getLogger(__name__)

class AccessibilityHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Accessibility –¥–ª—è macOS"""
    
    def __init__(self):
        self.bundle_id = "com.nexy.assistant"
    
    def check_accessibility_permission(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ Accessibility
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ tccutil
            result = subprocess.run([
                'tccutil', 'check', 'Accessibility', self.bundle_id
            ], capture_output=True, text=True, timeout=5)
            
            granted = result.returncode == 0
            
            if granted:
                logger.info("‚úÖ Accessibility permission granted")
            else:
                logger.warning("‚ö†Ô∏è Accessibility permission not granted")
            
            return granted
            
        except Exception as e:
            logger.error(f"‚ùå Error checking accessibility permission: {e}")
            return False
    
    def check_input_monitoring_permission(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ Input Monitoring
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ tccutil
            result = subprocess.run([
                'tccutil', 'check', 'ListenEvent', self.bundle_id
            ], capture_output=True, text=True, timeout=5)
            
            granted = result.returncode == 0
            
            if granted:
                logger.info("‚úÖ Input Monitoring permission granted")
            else:
                logger.warning("‚ö†Ô∏è Input Monitoring permission not granted")
            
            return granted
            
        except Exception as e:
            logger.error(f"‚ùå Error checking input monitoring permission: {e}")
            return False
    
    def open_accessibility_settings(self) -> bool:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Accessibility
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã
        """
        try:
            subprocess.run([
                'open', 'x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility'
            ], check=True)
            logger.info("‚úÖ Opened Accessibility settings")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error opening Accessibility settings: {e}")
            return False
    
    def open_input_monitoring_settings(self) -> bool:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Input Monitoring
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã
        """
        try:
            subprocess.run([
                'open', 'x-apple.systempreferences:com.apple.preference.security?Privacy_ListenEvent'
            ], check=True)
            logger.info("‚úÖ Opened Input Monitoring settings")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error opening Input Monitoring settings: {e}")
            return False
    
    def get_permission_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        """
        return {
            'accessibility': self.check_accessibility_permission(),
            'input_monitoring': self.check_input_monitoring_permission(),
            'bundle_id': self.bundle_id
        }
    
    def get_instructions(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        
        Returns:
            str: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        """
        return """
üîß –†–ê–ó–†–ï–®–ï–ù–ò–Ø –î–û–°–¢–£–ü–ù–û–°–¢–ò –ò –í–í–û–î–ê

1. Accessibility (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã):
   - –û—Ç–∫—Ä–æ–π—Ç–µ '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
   - –í—ã–±–µ—Ä–∏—Ç–µ '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø'
   - –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è Nexy AI Assistant

2. Input Monitoring (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–≤–æ–¥–∞):
   - –û—Ç–∫—Ä–æ–π—Ç–µ '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
   - –í—ã–±–µ—Ä–∏—Ç–µ '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–≤–æ–¥–∞'
   - –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è Nexy AI Assistant

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
open "x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility"
open "x-apple.systempreferences:com.apple.preference.security?Privacy_ListenEvent"
        """
