"""
macOS system_profiler bridge –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Hardware UUID
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ Hardware UUID
"""

import subprocess
import logging
from typing import Optional, Dict, Any
from ..core.types import HardwareIdError, HardwareIdNotFoundError

logger = logging.getLogger(__name__)


class SystemProfilerBridge:
    """Bridge –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å system_profiler –Ω–∞ macOS"""
    
    def __init__(self, timeout: int = 5):
        self.timeout = timeout
    
    def get_hardware_uuid(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç Hardware UUID —á–µ—Ä–µ–∑ system_profiler
        
        Returns:
            str: Hardware UUID –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            logger.debug("üîç –ü–æ–ª—É—á–∞–µ–º Hardware UUID —á–µ—Ä–µ–∑ system_profiler...")
            
            result = subprocess.run(
                ["system_profiler", "SPHardwareDataType"],
                capture_output=True,
                text=True,
                timeout=self.timeout
            )
            
            if result.returncode != 0:
                logger.error(f"‚ùå system_profiler –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                return None
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ system_profiler
            uuid = self._parse_hardware_uuid(result.stdout)
            
            if uuid:
                logger.info(f"‚úÖ Hardware UUID –ø–æ–ª—É—á–µ–Ω: {uuid}")
                return uuid
            else:
                logger.warning("‚ö†Ô∏è Hardware UUID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ system_profiler")
                return None
                
        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå system_profiler –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç {self.timeout} —Å–µ–∫—É–Ω–¥")
            return None
        except FileNotFoundError:
            logger.error("‚ùå system_profiler –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ macOS?)")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è system_profiler: {e}")
            return None
    
    def _parse_hardware_uuid(self, output: str) -> Optional[str]:
        """
        –ü–∞—Ä—Å–∏—Ç Hardware UUID –∏–∑ –≤—ã–≤–æ–¥–∞ system_profiler
        
        Args:
            output: –í—ã–≤–æ–¥ system_profiler
            
        Returns:
            str: Hardware UUID –∏–ª–∏ None
        """
        try:
            for line in output.split('\n'):
                line = line.strip()
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å Hardware UUID
                if 'Hardware UUID:' in line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
                    uuid_part = line.split(':', 1)[1].strip()
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
                    if self._is_valid_uuid_format(uuid_part):
                        logger.debug(f"üîç –ù–∞–π–¥–µ–Ω Hardware UUID: {uuid_part}")
                        return uuid_part
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID: {uuid_part}")
                        continue
            
            logger.debug("üîç Hardware UUID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ system_profiler")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Hardware UUID: {e}")
            return None
    
    def _is_valid_uuid_format(self, uuid: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç Hardware UUID
        
        Args:
            uuid: UUID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        """
        if not uuid:
            return False
        
        # Hardware UUID –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        parts = uuid.split('-')
        if len(parts) != 5:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        expected_lengths = [8, 4, 4, 4, 12]
        for i, part in enumerate(parts):
            if len(part) != expected_lengths[i]:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã - hex
            if not all(c in '0123456789ABCDEFabcdef' for c in part):
                return False
        
        return True
    
    def get_hardware_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ system_profiler
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        """
        try:
            logger.debug("üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏...")
            
            result = subprocess.run(
                ["system_profiler", "SPHardwareDataType"],
                capture_output=True,
                text=True,
                timeout=self.timeout
            )
            
            if result.returncode != 0:
                logger.error(f"‚ùå system_profiler –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                return {}
            
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
            hardware_info = self._parse_hardware_info(result.stdout)
            
            logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞")
            return hardware_info
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏: {e}")
            return {}
    
    def _parse_hardware_info(self, output: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –∏–∑ –≤—ã–≤–æ–¥–∞ system_profiler
        
        Args:
            output: –í—ã–≤–æ–¥ system_profiler
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        """
        hardware_info = {}
        
        try:
            for line in output.split('\n'):
                line = line.strip()
                
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    if key in ['Hardware UUID', 'Serial Number (system)', 'Model Name', 'Model Identifier']:
                        hardware_info[key] = value
                        logger.debug(f"üîç {key}: {value}")
            
            return hardware_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏: {e}")
            return {}
    
    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å system_profiler
        
        Returns:
            bool: True –µ—Å–ª–∏ system_profiler –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            result = subprocess.run(
                ["which", "system_profiler"],
                capture_output=True,
                text=True,
                timeout=2
            )
            
            return result.returncode == 0
            
        except Exception:
            return False
