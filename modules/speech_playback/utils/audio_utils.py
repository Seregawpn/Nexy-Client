"""
Audio Utils - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ

–û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
1. Resampling - –ø–µ—Ä–µ—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
2. Channel conversion - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
3. Audio normalization - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
4. Format conversion - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
"""

import logging
import numpy as np
from typing import Union, Optional
from scipy import signal

logger = logging.getLogger(__name__)

def resample_audio(audio_data: np.ndarray, target_sample_rate: int, original_sample_rate: int = 48000) -> np.ndarray:
    """
    –ü–µ—Ä–µ—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ
    
    Args:
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        target_sample_rate: –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        original_sample_rate: –ò—Å—Ö–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        
    Returns:
        –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        if original_sample_rate == target_sample_rate:
            return audio_data
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        ratio = target_sample_rate / original_sample_rate
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
        resampled_data = signal.resample(audio_data, int(len(audio_data) * ratio))
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
        if audio_data.dtype == np.int16:
            resampled_data = resampled_data.astype(np.int16)
        elif audio_data.dtype == np.float32:
            resampled_data = resampled_data.astype(np.float32)
        
        logger.debug(f"üîÑ Resampling: {original_sample_rate}Hz ‚Üí {target_sample_rate}Hz (ratio: {ratio:.3f})")
        
        return resampled_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ resampling: {e}")
        return audio_data

def convert_channels(audio_data: np.ndarray, target_channels: int) -> np.ndarray:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
    
    Args:
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (1D –∏–ª–∏ 2D –º–∞—Å—Å–∏–≤)
        target_channels: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        
    Returns:
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if len(audio_data.shape) == 2 and audio_data.shape[1] == target_channels:
            return audio_data
        
        # –ï—Å–ª–∏ –º–æ–Ω–æ (1D) –∏ –Ω—É–∂–µ–Ω –º–æ–Ω–æ
        if len(audio_data.shape) == 1 and target_channels == 1:
            return audio_data.reshape(-1, 1)
        
        # –ï—Å–ª–∏ –º–æ–Ω–æ (1D) –∏ –Ω—É–∂–µ–Ω —Å—Ç–µ—Ä–µ–æ
        if len(audio_data.shape) == 1 and target_channels == 2:
            return np.column_stack([audio_data, audio_data])
        
        # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ (2D) –∏ –Ω—É–∂–µ–Ω –º–æ–Ω–æ
        if len(audio_data.shape) == 2 and audio_data.shape[1] == 2 and target_channels == 1:
            return np.mean(audio_data, axis=1)
        
        # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ (2D) –∏ –Ω—É–∂–µ–Ω —Å—Ç–µ—Ä–µ–æ
        if len(audio_data.shape) == 2 and audio_data.shape[1] == 2 and target_channels == 2:
            return audio_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 2D –º–∞—Å—Å–∏–≤ –∫–∞–∫ –µ—Å—Ç—å
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ - –¥—É–±–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
        if len(audio_data.shape) == 1:
            mono_data = audio_data
        else:
            mono_data = audio_data[:, 0] if audio_data.shape[1] > 0 else audio_data.flatten()
        
        if target_channels == 1:
            return mono_data
        else:
            return np.column_stack([mono_data] * target_channels).flatten()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return audio_data

def normalize_audio(audio_data: np.ndarray, target_level: float = 0.8) -> np.ndarray:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ —É—Ä–æ–≤–Ω—é
    
    Args:
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        target_level: –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å (0.0 - 1.0)
        
    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        max_val = np.max(np.abs(audio_data))
        
        if max_val == 0:
            return audio_data
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        norm_factor = target_level / max_val
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        normalized_data = audio_data * norm_factor
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
        if audio_data.dtype == np.int16:
            normalized_data = np.clip(normalized_data, -32768, 32767).astype(np.int16)
        elif audio_data.dtype == np.float32:
            normalized_data = np.clip(normalized_data, -1.0, 1.0).astype(np.float32)
        
        logger.debug(f"üéµ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: max={max_val:.3f} ‚Üí {target_level:.3f} (factor: {norm_factor:.3f})")
        
        return normalized_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return audio_data

def apply_fade_in(audio_data: np.ndarray, fade_samples: int = 1000) -> np.ndarray:
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ fade-in —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    Args:
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        fade_samples: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –¥–ª—è fade-in
        
    Returns:
        –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —Å fade-in
    """
    try:
        if len(audio_data) <= fade_samples:
            return audio_data
        
        # –°–æ–∑–¥–∞–µ–º fade-in –º–∞—Å–∫—É
        fade_mask = np.linspace(0, 1, fade_samples)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –Ω–∞—á–∞–ª—É –¥–∞–Ω–Ω—ã—Ö
        if len(audio_data.shape) == 1:
            audio_data[:fade_samples] *= fade_mask
        else:
            audio_data[:fade_samples, :] *= fade_mask.reshape(-1, 1)
        
        logger.debug(f"üéµ Fade-in –ø—Ä–∏–º–µ–Ω–µ–Ω: {fade_samples} —Å—ç–º–ø–ª–æ–≤")
        
        return audio_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è fade-in: {e}")
        return audio_data

def apply_fade_out(audio_data: np.ndarray, fade_samples: int = 1000) -> np.ndarray:
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ fade-out —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    Args:
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        fade_samples: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –¥–ª—è fade-out
        
    Returns:
        –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —Å fade-out
    """
    try:
        if len(audio_data) <= fade_samples:
            return audio_data
        
        # –°–æ–∑–¥–∞–µ–º fade-out –º–∞—Å–∫—É
        fade_mask = np.linspace(1, 0, fade_samples)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–æ–Ω—Ü—É –¥–∞–Ω–Ω—ã—Ö
        if len(audio_data.shape) == 1:
            audio_data[-fade_samples:] *= fade_mask
        else:
            audio_data[-fade_samples:, :] *= fade_mask.reshape(-1, 1)
        
        logger.debug(f"üéµ Fade-out –ø—Ä–∏–º–µ–Ω–µ–Ω: {fade_samples} —Å—ç–º–ø–ª–æ–≤")
        
        return audio_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è fade-out: {e}")
        return audio_data

def detect_silence(audio_data: np.ndarray, threshold: float = 0.01) -> bool:
    """
    –î–µ—Ç–µ–∫—Ü–∏—è —Ç–∏—à–∏–Ω—ã –≤ –∞—É–¥–∏–æ
    
    Args:
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        threshold: –ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã
        
    Returns:
        True –µ—Å–ª–∏ —Ç–∏—à–∏–Ω–∞, False –µ—Å–ª–∏ –µ—Å—Ç—å –∑–≤—É–∫
    """
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º RMS (Root Mean Square)
        rms = np.sqrt(np.mean(audio_data.astype(np.float32) ** 2))
        
        is_silent = rms < threshold
        
        logger.debug(f"üîç –î–µ—Ç–µ–∫—Ü–∏—è —Ç–∏—à–∏–Ω—ã: RMS={rms:.6f}, threshold={threshold}, silent={is_silent}")
        
        return is_silent
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç–∏—à–∏–Ω—ã: {e}")
        return False

def trim_silence(audio_data: np.ndarray, silence_threshold: float = 0.01, 
                min_silence_duration: int = 1000) -> np.ndarray:
    """
    –û–±—Ä–µ–∑–∫–∞ —Ç–∏—à–∏–Ω—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    
    Args:
        audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        silence_threshold: –ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã
        min_silence_duration: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
        
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        if len(audio_data) == 0:
            return audio_data
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∑–≤—É–∫–∞
        rms = np.sqrt(np.mean(audio_data.astype(np.float32) ** 2, axis=1 if len(audio_data.shape) > 1 else 0))
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ-—Ç–∏—Ö–∏–π —Å—ç–º–ø–ª
        non_silent = rms > silence_threshold
        
        if not np.any(non_silent):
            # –ï—Å–ª–∏ –≤–µ—Å—å —Å–∏–≥–Ω–∞–ª —Ç–∏—Ö–∏–π
            return audio_data[:0] if len(audio_data.shape) == 1 else audio_data[:0, :]
        
        start_idx = np.argmax(non_silent)
        end_idx = len(non_silent) - np.argmax(non_silent[::-1])
        
        # –û–±—Ä–µ–∑–∞–µ–º
        trimmed_data = audio_data[start_idx:end_idx]
        
        logger.debug(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ —Ç–∏—à–∏–Ω—ã: {len(audio_data)} ‚Üí {len(trimmed_data)} —Å—ç–º–ø–ª–æ–≤")
        
        return trimmed_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ —Ç–∏—à–∏–Ω—ã: {e}")
        return audio_data
