"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import fcntl
import time
import json
import psutil
import tempfile
from typing import Optional
from pathlib import Path

from .types import InstanceStatus, LockInfo, InstanceManagerConfig

class InstanceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, config: InstanceManagerConfig):
        self.config = config
        self.lock_file = os.path.expanduser(config.lock_file)
        self.timeout_seconds = config.timeout_seconds
        self.pid_check = config.pid_check
        self.lock_fd = None
        
    async def check_single_instance(self, retry_count: int = 0) -> InstanceStatus:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π."""
        MAX_RETRIES = 2  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            lock_dir = os.path.dirname(self.lock_file)
            os.makedirs(lock_dir, exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π lock
            if os.path.exists(self.lock_file):
                # –£–°–ò–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: PID + –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                if await self._is_lock_valid():
                    return InstanceStatus.DUPLICATE
                else:
                    # Lock –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –æ—á–∏—â–∞–µ–º
                    cleaned = await self._cleanup_invalid_lock()
                    if not cleaned:
                        if retry_count < MAX_RETRIES and self._switch_to_fallback_lock():
                            return await self.check_single_instance(retry_count + 1)
                        return InstanceStatus.ERROR
            
            return InstanceStatus.SINGLE
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return InstanceStatus.ERROR
    
    async def acquire_lock(self, retry_count: int = 0) -> bool:
        """–ó–∞—Ö–≤–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å TOCTOU –∑–∞—â–∏—Ç–æ–π."""
        MAX_RETRIES = 2  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
        
        try:
            # TOCTOU –∑–∞—â–∏—Ç–∞: O_CREAT | O_EXCL
            self.lock_fd = os.open(self.lock_file, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
            fcntl.flock(self.lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            lock_info = {
                "pid": os.getpid(),
                "timestamp": time.time(),
                "bundle_id": "com.nexy.assistant",
                "process_name": "Nexy"
            }
            os.write(self.lock_fd, json.dumps(lock_info).encode())
            os.fsync(self.lock_fd)
            
            print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except FileExistsError:
            # –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if await self._is_lock_valid():
                return False  # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
            else:
                # –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π lock –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                cleaned = await self._cleanup_invalid_lock()
                if cleaned and retry_count < MAX_RETRIES:
                    return await self.acquire_lock(retry_count + 1)
                if retry_count < MAX_RETRIES and self._switch_to_fallback_lock():
                    return await self.acquire_lock(retry_count + 1)
                return False
                
        except (OSError, IOError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    async def release_lock(self) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        try:
            if self.lock_fd:
                fcntl.flock(self.lock_fd, fcntl.LOCK_UN)
                os.close(self.lock_fd)
                self.lock_fd = None
            
            if os.path.exists(self.lock_file):
                os.remove(self.lock_file)
            
            print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    async def _is_lock_valid(self) -> bool:
        """–£–°–ò–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        try:
            if not os.path.exists(self.lock_file):
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            mod_time = os.path.getmtime(self.lock_file)
            current_time = time.time()
            
            if (current_time - mod_time) > self.timeout_seconds:
                return False  # –£—Å—Ç–∞—Ä–µ–ª –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            try:
                with open(self.lock_file, 'r') as f:
                    lock_info = json.load(f)
            except (json.JSONDecodeError, IOError):
                return False  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
            if self.pid_check and 'pid' in lock_info:
                pid = lock_info['pid']
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
                    process = psutil.Process(pid)
                    cmdline = ' '.join(process.cmdline())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
                    # –í–∞—Ä–∏–∞–Ω—Ç—ã: Nexy.app, python3 main.py, Python debug_script.py, Python test_script.py
                    is_nexy_app = process.name() == "Nexy"
                    is_python_main = process.name() in ["python3", "Python"] and "main.py" in cmdline
                    is_debug_script = process.name() in ["python3", "Python"] and "debug_lock_validation.py" in cmdline
                    is_test_script = process.name() in ["python3", "Python"] and "test_duplicate_detection.py" in cmdline
                    
                    if not (is_nexy_app or is_python_main or is_debug_script or is_test_script):
                        return False  # –ù–µ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
                        
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ bundle_id –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç—ã
                    cmdline_check = ('com.nexy.assistant' in cmdline or 'main.py' in cmdline or 
                                   'debug_lock_validation.py' in cmdline or 'test_duplicate_detection.py' in cmdline)
                    
                    if not cmdline_check:
                        return False  # –ù–µ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    return False  # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ lock: {e}")
            return False
    
    async def _cleanup_invalid_lock(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        try:
            if os.path.exists(self.lock_file):
                try:
                    os.chmod(self.lock_file, 0o600)
                except Exception:
                    pass
                os.remove(self.lock_file)
            print("üßπ –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—á–∏—â–µ–Ω–∞")
            return True
        except PermissionError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞): {e}")
            print(f"üëâ –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {self.lock_file}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False

    def _switch_to_fallback_lock(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å lock-—Ñ–∞–π–ª–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ /tmp."""
        try:
            tmp_dir = Path(tempfile.gettempdir()) / "nexy"
            tmp_dir.mkdir(parents=True, exist_ok=True)
            fallback_path = tmp_dir / "nexy.lock"
            if fallback_path.exists():
                try:
                    fallback_path.unlink()
                except Exception:
                    pass
            print(f"‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º lock-—Ñ–∞–π–ª –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—É—Ç—å: {fallback_path}")
            self.lock_file = str(fallback_path)
            self.lock_fd = None
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å lock-—Ñ–∞–π–ª –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—É—Ç—å: {e}")
            return False
    
    async def get_lock_info(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."""
        try:
            if os.path.exists(self.lock_file):
                with open(self.lock_file, 'r') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
        return None
