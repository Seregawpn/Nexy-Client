"""
Manifest Provider - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞–º–∏ –≤–µ—Ä—Å–∏–π
"""

import json
import logging
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, Any, Optional, List

logger = logging.getLogger(__name__)


class ManifestProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞–º–∏ –≤–µ—Ä—Å–∏–π"""
    
    def __init__(self, config):
        self.config = config
        self.manifests_dir = Path(config.manifests_dir)
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ManifestProvider...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.manifests_dir.mkdir(parents=True, exist_ok=True)
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ManifestProvider: {e}")
            return False
    
    def create_manifest(self, version: str, build: int, artifact_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏
        
        Args:
            version: –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            build: –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
            artifact_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ
            
        Returns:
            Dict[str, Any]: –°–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
        """
        manifest = {
            "version": version,
            "build": build,
            "release_date": datetime.now(timezone.utc).isoformat(),
            "artifact": {
                "type": artifact_info.get("type", "dmg"),
                "url": artifact_info.get("url", ""),
                "size": artifact_info.get("size", 0),
                "sha256": artifact_info.get("sha256", ""),
                "arch": artifact_info.get("arch", self.config.default_arch),
                "min_os": artifact_info.get("min_os", self.config.default_min_os),
                "ed25519": artifact_info.get("ed25519", "")
            },
            "critical": artifact_info.get("critical", False),
            "auto_install": artifact_info.get("auto_install", True),
            "notes_url": artifact_info.get("notes_url", "")
        }
        
        return manifest
    
    def save_manifest(self, manifest: Dict[str, Any], filename: Optional[str] = None) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –≤ —Ñ–∞–π–ª
        
        Args:
            manifest: –ú–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if filename is None:
            version = manifest.get("version", "unknown")
            filename = f"manifest_{version}.json"
        
        file_path = self.manifests_dir / filename
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(manifest, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
            raise
    
    def load_manifest(self, filename: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            
        Returns:
            Optional[Dict[str, Any]]: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –∏–ª–∏ None
        """
        file_path = self.manifests_dir / filename
        
        if not file_path.exists():
            logger.warning(f"‚ö†Ô∏è –ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                manifest = json.load(f)
            
            logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
            return manifest
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ {file_path}: {e}")
            return None
    
    def get_latest_manifest(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        
        Returns:
            Optional[Dict[str, Any]]: –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –∏–ª–∏ None
        """
        try:
            manifest_files = list(self.manifests_dir.glob("manifest_*.json"))
            
            if not manifest_files:
                logger.info("üìÑ –ú–∞–Ω–∏—Ñ–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            manifest_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            latest_file = manifest_files[0]
            return self.load_manifest(latest_file.name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
            return None
    
    def get_all_manifests(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
        """
        manifests = []
        
        try:
            manifest_files = list(self.manifests_dir.glob("manifest_*.json"))
            
            for manifest_file in manifest_files:
                manifest = self.load_manifest(manifest_file.name)
                if manifest:
                    manifests.append(manifest)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å–±–æ—Ä–∫–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            manifests.sort(key=lambda x: x.get("build", 0), reverse=True)
            
            return manifests
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤: {e}")
            return []
    
    def validate_manifest(self, manifest: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        
        Args:
            manifest: –ú–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç –≤–∞–ª–∏–¥–µ–Ω
        """
        required_fields = ["version", "build", "artifact"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in required_fields:
            if field not in manifest:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º artifact
        artifact = manifest.get("artifact", {})
        artifact_required = ["type", "url", "size", "sha256"]
        
        for field in artifact_required:
            if field not in artifact:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ artifact: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        version = manifest.get("version", "")
        if not version or not isinstance(version, str):
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
        build = manifest.get("build", 0)
        if not isinstance(build, int) or build <= 0:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏")
            return False
        
        logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –≤–∞–ª–∏–¥–µ–Ω: {version} (build {build})")
        return True
    
    def update_manifest(self, filename: str, updates: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            updates: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            manifest = self.load_manifest(filename)
            if not manifest:
                return False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for key, value in updates.items():
                if key == "artifact" and isinstance(value, dict):
                    # –û–±–Ω–æ–≤–ª—è–µ–º artifact —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                    artifact = manifest.get("artifact", {})
                    artifact.update(value)
                    manifest["artifact"] = artifact
                else:
                    manifest[key] = value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–µ–ª–∏–∑–∞
            manifest["release_date"] = datetime.now(timezone.utc).isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
            self.save_manifest(manifest, filename)
            
            logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {filename}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ {filename}: {e}")
            return False
    
    def delete_manifest(self, filename: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            file_path = self.manifests_dir / filename
            
            if not file_path.exists():
                logger.warning(f"‚ö†Ô∏è –ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {file_path}")
                return False
            
            file_path.unlink()
            logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —É–¥–∞–ª–µ–Ω: {file_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ {filename}: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ManifestProvider...")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ManifestProvider: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            manifests_count = len(list(self.manifests_dir.glob("manifest_*.json")))
            latest_manifest = self.get_latest_manifest()
            
            return {
                "status": "running",
                "provider": "manifest",
                "manifests_dir": str(self.manifests_dir),
                "manifests_count": manifests_count,
                "latest_version": latest_manifest.get("version") if latest_manifest else None,
                "latest_build": latest_manifest.get("build") if latest_manifest else None
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ManifestProvider: {e}")
            return {
                "status": "error",
                "provider": "manifest",
                "error": str(e)
            }



