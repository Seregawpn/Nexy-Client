"""
Version Provider - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –∏ —Å–±–æ—Ä–∫–∞–º–∏
"""

import logging
import re
from typing import Dict, Any, Optional, List, Tuple
from pathlib import Path

logger = logging.getLogger(__name__)


class VersionProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –∏ —Å–±–æ—Ä–∫–∞–º–∏"""
    
    def __init__(self, config):
        self.config = config
        self.version_pattern = re.compile(r'^(\d+)\.(\d+)\.(\d+)$')
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VersionProvider...")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VersionProvider: {e}")
            return False
    
    def parse_version(self, version_string: str) -> Tuple[int, int, int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            version_string: –°—Ç—Ä–æ–∫–∞ –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.2.3")
            
        Returns:
            Tuple[int, int, int]: (major, minor, patch)
            
        Raises:
            ValueError: –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        """
        match = self.version_pattern.match(version_string)
        if not match:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {version_string}")
        
        major, minor, patch = map(int, match.groups())
        return major, minor, patch
    
    def version_to_build(self, version: str) -> int:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
        
        –§–æ—Ä–º—É–ª–∞: major * 10000 + minor * 100 + patch
        
        Args:
            version: –°—Ç—Ä–æ–∫–∞ –≤–µ—Ä—Å–∏–∏
            
        Returns:
            int: –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
        """
        major, minor, patch = self.parse_version(version)
        return major * 10000 + minor * 100 + patch
    
    def build_to_version(self, build: int) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–±–æ—Ä–∫–∏ –≤ –≤–µ—Ä—Å–∏—é
        
        Args:
            build: –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
            
        Returns:
            str: –°—Ç—Ä–æ–∫–∞ –≤–µ—Ä—Å–∏–∏
        """
        major = build // 10000
        minor = (build % 10000) // 100
        patch = build % 100
        
        return f"{major}.{minor}.{patch}"
    
    def compare_versions(self, version1: str, version2: str) -> int:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
        
        Args:
            version1: –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è
            version2: –í—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è
            
        Returns:
            int: -1 –µ—Å–ª–∏ version1 < version2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã, 1 –µ—Å–ª–∏ version1 > version2
        """
        try:
            v1_tuple = self.parse_version(version1)
            v2_tuple = self.parse_version(version2)
            
            if v1_tuple < v2_tuple:
                return -1
            elif v1_tuple > v2_tuple:
                return 1
            else:
                return 0
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π: {version1} vs {version2}")
            return 0
    
    def is_newer_version(self, current_version: str, new_version: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª–µ–µ –Ω–æ–≤–æ–π
        
        Args:
            current_version: –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
            new_version: –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª–µ–µ –Ω–æ–≤–∞—è
        """
        return self.compare_versions(new_version, current_version) > 0
    
    def get_version_info(self, version: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
        
        Args:
            version: –°—Ç—Ä–æ–∫–∞ –≤–µ—Ä—Å–∏–∏
            
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        """
        try:
            major, minor, patch = self.parse_version(version)
            build = self.version_to_build(version)
            
            return {
                "version": version,
                "major": major,
                "minor": minor,
                "patch": patch,
                "build": build,
                "is_valid": True
            }
        except ValueError:
            return {
                "version": version,
                "major": 0,
                "minor": 0,
                "patch": 0,
                "build": 0,
                "is_valid": False
            }
    
    def get_default_version(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.config.default_version
    
    def get_default_build(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–±–æ—Ä–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.config.default_build
    
    def validate_version(self, version: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏
        
        Args:
            version: –°—Ç—Ä–æ–∫–∞ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            self.parse_version(version)
            return True
        except ValueError:
            return False
    
    def get_version_history(self, manifest_dir: str, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
        
        Args:
            manifest_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞–º–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—Å–∏–π
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π
        """
        versions = []
        
        try:
            manifest_path = Path(manifest_dir)
            if not manifest_path.exists():
                return versions
            
            # –ò—â–µ–º JSON —Ñ–∞–π–ª—ã –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
            for manifest_file in manifest_path.glob("*.json"):
                try:
                    import json
                    with open(manifest_file, 'r', encoding='utf-8') as f:
                        manifest = json.load(f)
                    
                    version_info = self.get_version_info(manifest.get("version", ""))
                    if version_info["is_valid"]:
                        versions.append({
                            "version": version_info["version"],
                            "build": version_info["build"],
                            "file": manifest_file.name,
                            "release_date": manifest.get("release_date"),
                            "critical": manifest.get("critical", False)
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ {manifest_file}: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å–±–æ—Ä–∫–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            versions.sort(key=lambda x: x["build"], reverse=True)
            
            return versions[:limit]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π: {e}")
            return versions
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VersionProvider...")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VersionProvider: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return {
            "status": "running",
            "provider": "version",
            "default_version": self.get_default_version(),
            "default_build": self.get_default_build()
        }



