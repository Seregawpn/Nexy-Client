"""
Artifact Provider - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import hashlib
import logging
from pathlib import Path
from typing import Dict, Any, Optional, List

logger = logging.getLogger(__name__)


class ArtifactProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, config):
        self.config = config
        self.downloads_dir = Path(config.downloads_dir)
        self.supported_types = ["dmg", "pkg", "zip", "app"]
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ArtifactProvider...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é downloads –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.downloads_dir.mkdir(parents=True, exist_ok=True)
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ArtifactProvider: {e}")
            return False
    
    def calculate_sha256(self, file_path: str) -> str:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            str: SHA256 —Ö–µ—à –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        sha256_hash = hashlib.sha256()
        
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    sha256_hash.update(chunk)
            
            return sha256_hash.hexdigest()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è SHA256 –¥–ª—è {file_path}: {e}")
            return ""
    
    def get_file_info(self, file_path: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        """
        try:
            path = Path(file_path)
            
            if not path.exists():
                return {
                    "exists": False,
                    "error": "File not found"
                }
            
            stat = path.stat()
            
            return {
                "exists": True,
                "filename": path.name,
                "size": stat.st_size,
                "sha256": self.calculate_sha256(file_path),
                "type": self._detect_file_type(file_path),
                "created": stat.st_ctime,
                "modified": stat.st_mtime
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return {
                "exists": False,
                "error": str(e)
            }
    
    def _detect_file_type(self, file_path: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            str: –¢–∏–ø —Ñ–∞–π–ª–∞
        """
        path = Path(file_path)
        extension = path.suffix.lower()
        
        type_mapping = {
            ".dmg": "dmg",
            ".pkg": "pkg",
            ".zip": "zip",
            ".app": "app"
        }
        
        return type_mapping.get(extension, "unknown")
    
    def is_supported_type(self, file_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        
        Args:
            file_type: –¢–∏–ø —Ñ–∞–π–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        return file_type.lower() in self.supported_types
    
    def get_artifact_url(self, filename: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            str: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        base_url = f"http://{self.config.host}:{self.config.port}"
        return f"{base_url}/downloads/{filename}"
    
    def list_artifacts(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        """
        artifacts = []
        
        try:
            for file_path in self.downloads_dir.iterdir():
                if file_path.is_file():
                    file_info = self.get_file_info(str(file_path))
                    
                    if file_info["exists"]:
                        artifact_info = {
                            "filename": file_info["filename"],
                            "size": file_info["size"],
                            "sha256": file_info["sha256"],
                            "type": file_info["type"],
                            "url": self.get_artifact_url(file_info["filename"]),
                            "created": file_info["created"],
                            "modified": file_info["modified"]
                        }
                        
                        artifacts.append(artifact_info)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            artifacts.sort(key=lambda x: x["modified"], reverse=True)
            
            return artifacts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {e}")
            return []
    
    def find_artifact_by_sha256(self, sha256: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –ø–æ SHA256 —Ö–µ—à—É
        
        Args:
            sha256: SHA256 —Ö–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            Optional[Dict[str, Any]]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ –∏–ª–∏ None
        """
        try:
            artifacts = self.list_artifacts()
            
            for artifact in artifacts:
                if artifact["sha256"].lower() == sha256.lower():
                    return artifact
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –ø–æ SHA256: {e}")
            return None
    
    def validate_artifact(self, file_path: str, expected_sha256: Optional[str] = None) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            expected_sha256: –û–∂–∏–¥–∞–µ–º—ã–π SHA256 —Ö–µ—à
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            file_info = self.get_file_info(file_path)
            
            if not file_info["exists"]:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if not self.is_supported_type(file_info["type"]):
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_info['type']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHA256 –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if expected_sha256:
                actual_sha256 = file_info["sha256"]
                if actual_sha256.lower() != expected_sha256.lower():
                    logger.error(f"‚ùå SHA256 –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–µ–º—ã–π: {expected_sha256}, –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {actual_sha256}")
                    return False
            
            logger.info(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –≤–∞–ª–∏–¥–µ–Ω: {file_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ {file_path}: {e}")
            return False
    
    def create_artifact_info(self, file_path: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ
        """
        try:
            file_info = self.get_file_info(file_path)
            
            if not file_info["exists"]:
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            return {
                "type": file_info["type"],
                "url": self.get_artifact_url(file_info["filename"]),
                "size": file_info["size"],
                "sha256": file_info["sha256"],
                "arch": self.config.default_arch,
                "min_os": self.config.default_min_os
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ {file_path}: {e}")
            raise
    
    def cleanup_old_artifacts(self, keep_count: int = 5) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        
        Args:
            keep_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        try:
            artifacts = self.list_artifacts()
            
            if len(artifacts) <= keep_count:
                logger.info(f"üìÅ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –º–µ–Ω—å—à–µ {keep_count}, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return 0
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            artifacts_to_remove = artifacts[keep_count:]
            removed_count = 0
            
            for artifact in artifacts_to_remove:
                try:
                    file_path = self.downloads_dir / artifact["filename"]
                    file_path.unlink()
                    removed_count += 1
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {artifact['filename']}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ {artifact['filename']}: {e}")
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
            return removed_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {e}")
            return 0
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ArtifactProvider...")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ArtifactProvider: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            artifacts = self.list_artifacts()
            total_size = sum(artifact["size"] for artifact in artifacts)
            
            return {
                "status": "running",
                "provider": "artifact",
                "downloads_dir": str(self.downloads_dir),
                "artifacts_count": len(artifacts),
                "total_size_bytes": total_size,
                "total_size_mb": round(total_size / (1024 * 1024), 2),
                "supported_types": self.supported_types
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ArtifactProvider: {e}")
            return {
                "status": "error",
                "provider": "artifact",
                "error": str(e)
            }



