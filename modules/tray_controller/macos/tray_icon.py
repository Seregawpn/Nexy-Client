"""
macOS —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è
"""

import os
import tempfile
from typing import Optional
from ..core.tray_types import TrayStatus, TrayIconGenerator

try:
    from PIL import Image, ImageDraw  # type: ignore
    _PIL_AVAILABLE = True
except Exception:
    _PIL_AVAILABLE = False


class MacOSTrayIcon:
    """macOS —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è"""
    
    def __init__(self, status: TrayStatus = TrayStatus.SLEEPING, size: int = 16):
        self.status = status
        self.size = size
        self.icon_generator = TrayIconGenerator()
        self._temp_files = []
        self._current_icon_path: Optional[str] = None
    
    def create_icon_file(self, status: TrayStatus) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏ –¥–ª—è macOS (PNG)."""
        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PNG-—Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(
                suffix='.png',
                delete=False,
                dir=tempfile.gettempdir()
            )
            temp_path = temp_file.name
            temp_file.close()

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å—É–Ω–∫–∞ (retina-friendly: —Ä–µ–Ω–¥–µ—Ä–∏–º –≤ 2x —Ä–∞–∑–º–µ—Ä–∞)
            scale = 2
            w = h = max(16, self.size) * scale
            radius = int(min(w, h) * 0.45)
            cx = cy = int(min(w, h) / 2)

            # –¶–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            icon = self.icon_generator.create_circle_icon(status, self.size)
            color = icon.color or "#808080"
            
            # üéØ TRAY DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
            print(f"üéØ TRAY DEBUG: create_icon_file –≤—ã–∑–≤–∞–Ω –¥–ª—è status={status}")
            print(f"üéØ TRAY DEBUG: generated color={color}, PIL_available={_PIL_AVAILABLE}")

            if not _PIL_AVAILABLE:
                # Fallback: —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å (–∏–∫–æ–Ω–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è)
                with open(temp_path, 'wb') as f:
                    pass
            else:
                # –†–∏—Å—É–µ–º –∫—Ä—É–≥ –≤ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–º PNG
                img = Image.new("RGBA", (w, h), (0, 0, 0, 0))
                draw = ImageDraw.Draw(img)
                bbox = [cx - radius, cy - radius, cx + radius, cy + radius]
                draw.ellipse(bbox, fill=color)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG (—É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è)
                img.save(temp_path, format="PNG", optimize=True)

            self._temp_files.append(temp_path)
            self._current_icon_path = temp_path
            return temp_path

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏: {e}")
            return ""
    
    def update_status(self, status: TrayStatus) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∫–æ–Ω–∫–∏"""
        try:
            self.status = status
            new_icon_path = self.create_icon_file(status)
            
            if new_icon_path and new_icon_path != self._current_icon_path:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏–∫–æ–Ω–∫—É
                if self._current_icon_path and os.path.exists(self._current_icon_path):
                    try:
                        os.unlink(self._current_icon_path)
                    except:
                        pass
                
                self._current_icon_path = new_icon_path
                return True
            
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∫–æ–Ω–∫–∏: {e}")
            return False
    
    def get_icon_path(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –∏–∫–æ–Ω–∫–µ"""
        return self._current_icon_path
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for temp_file in self._temp_files:
            try:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
            except:
                pass
        self._temp_files.clear()
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
        self.cleanup()









