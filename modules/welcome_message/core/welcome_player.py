"""
Welcome Player ‚Äî –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
"""

import logging
from typing import Optional, Callable, Dict, Any
import numpy as np

from .types import WelcomeConfig, WelcomeState, WelcomeResult
from .audio_generator import WelcomeAudioGenerator

logger = logging.getLogger(__name__)


class WelcomePlayer:
    """–ü–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, config: WelcomeConfig):
        self.config = config
        self.state = WelcomeState.IDLE
        self.audio_generator = WelcomeAudioGenerator(config)
        
        # –ö–æ–ª–ª–±–µ–∫–∏
        self._on_started: Optional[Callable[[], None]] = None
        self._on_completed: Optional[Callable[[WelcomeResult], None]] = None
        self._on_error: Optional[Callable[[str], None]] = None
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self._last_audio: Optional[np.ndarray] = None
        self._last_metadata: Optional[Dict[str, Any]] = None
    
    def set_callbacks(
        self,
        on_started: Optional[Callable[[], None]] = None,
        on_completed: Optional[Callable[[WelcomeResult], None]] = None,
        on_error: Optional[Callable[[str], None]] = None
    ):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–±–µ–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
        self._on_started = on_started
        self._on_completed = on_completed
        self._on_error = on_error
    
    async def play_welcome(self) -> WelcomeResult:
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Returns:
            WelcomeResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        """
        try:
            logger.info("üéµ [WELCOME_PLAYER] –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
            self.state = WelcomeState.LOADING
            self._last_audio = None
            self._last_metadata = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
            if not self.config.enabled:
                error_msg = "–ú–æ–¥—É–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                logger.info(f"üîá [WELCOME_PLAYER] {error_msg}")
                self.state = WelcomeState.ERROR
                
                result = WelcomeResult(
                    success=False,
                    method="none",
                    duration_sec=0.0,
                    error=error_msg
                )
                
                if self._on_error:
                    self._on_error(error_msg)
                if self._on_completed:
                    self._on_completed(result)
                
                return result
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ
            if self._on_started:
                self._on_started()
            
            if not self.config.use_server:
                error_msg = "–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                logger.error(f"‚ùå [WELCOME_PLAYER] {error_msg}")
                self.state = WelcomeState.ERROR

                result = WelcomeResult(
                    success=False,
                    method="none",
                    duration_sec=0.0,
                    error=error_msg
                )

                if self._on_error:
                    self._on_error(error_msg)
                if self._on_completed:
                    self._on_completed(result)

                return result

            server_result = await self._play_server_audio()
            if server_result.success:
                logger.info("‚úÖ [WELCOME_PLAYER] –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                self.state = WelcomeState.COMPLETED
                if self._on_completed:
                    self._on_completed(server_result)
                return server_result

            error_msg = server_result.error or "–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å"
            logger.error(f"‚ùå [WELCOME_PLAYER] {error_msg}")
            self.state = WelcomeState.ERROR
            
            result = WelcomeResult(
                success=False,
                method="none",
                duration_sec=0.0,
                error=error_msg
            )
            
            if self._on_error:
                self._on_error(error_msg)
            if self._on_completed:
                self._on_completed(result)
            
            return result
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}"
            logger.error(f"‚ùå [WELCOME_PLAYER] {error_msg}")
            self.state = WelcomeState.ERROR
            
            result = WelcomeResult(
                success=False,
                method="error",
                duration_sec=0.0,
                error=error_msg
            )
            
            if self._on_error:
                self._on_error(error_msg)
            if self._on_completed:
                self._on_completed(result)
            
            return result
    
    async def _play_server_audio(self) -> WelcomeResult:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            audio_data = await self.audio_generator.generate_server_audio(self.config.text)
            if audio_data is None:
                return WelcomeResult(
                    success=False,
                    method="server",
                    duration_sec=0.0,
                    error="–°–µ—Ä–≤–µ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                )

            server_metadata = self.audio_generator.get_last_server_metadata()
            sample_rate = server_metadata.get('sample_rate', self.config.sample_rate)
            channels = server_metadata.get('channels', self.config.channels)

            total_samples = int(audio_data.size if hasattr(audio_data, 'size') else len(audio_data))
            if audio_data.ndim > 1:
                frame_count = audio_data.shape[0]
            else:
                frame_count = total_samples // max(1, channels)
            duration_sec = frame_count / float(sample_rate)

            metadata = {
                "sample_rate": sample_rate,
                "channels": channels,
                "samples": total_samples,
                "frames": frame_count,
                "method": server_metadata.get('method', 'server'),
                "duration_sec": server_metadata.get('duration_sec', duration_sec),
            }

            self._last_audio = audio_data
            self._last_metadata = metadata

            return WelcomeResult(
                success=True,
                method="server",
                duration_sec=duration_sec,
                metadata=metadata
            )

        except Exception as e:
            return WelcomeResult(
                success=False,
                method="server",
                duration_sec=0.0,
                error=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"
            )

    
    def get_audio_data(self) -> Optional[np.ndarray]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        return self._last_audio

    def get_audio_metadata(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ"""
        return self._last_metadata
    
    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤ –ª–∏ –ø–ª–µ–µ—Ä –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é"""
        return self.state in [WelcomeState.IDLE, WelcomeState.COMPLETED]
    
    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞"""
        self.state = WelcomeState.IDLE
        self._last_audio = None
        self._last_metadata = None
