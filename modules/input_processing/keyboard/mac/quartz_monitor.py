"""
–ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è macOS —á–µ—Ä–µ–∑ Quartz CGEventTap.

API —Å–æ–≤–º–µ—Å—Ç–∏–º —Å KeyboardMonitor: register_callback, set_loop, start_monitoring, stop_monitoring, get_status.
"""

import asyncio
import logging
import threading
import time
from typing import Optional, Callable, Dict, Any

try:
    from Quartz import (
        CGEventTapCreate,
        CGEventTapEnable,
        CFRunLoopAddSource,
        CFRunLoopGetCurrent,
        CFRunLoopGetMain,
        CFRunLoopRunInMode,
        CFRunLoopSourceInvalidate,
        CFMachPortCreateRunLoopSource,
        kCGHIDEventTap,
        kCGHeadInsertEventTap,
        kCGEventTapOptionListenOnly,
        kCGEventKeyDown,
        kCGEventKeyUp,
        kCFRunLoopCommonModes,
        kCFRunLoopDefaultMode,
        CGEventGetIntegerValueField,
        kCGKeyboardEventKeycode,
    )
    QUARTZ_AVAILABLE = True
except Exception as e:  # pragma: no cover
    QUARTZ_AVAILABLE = False

from ..types import KeyEvent, KeyEventType, KeyboardConfig

logger = logging.getLogger(__name__)


class QuartzKeyboardMonitor:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ macOS —á–µ—Ä–µ–∑ Quartz Event Tap."""

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ key_to_monitor -> keycode (US). –°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª.
    KEYCODES = {
        "space": 49,
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: enter(36), esc(53), shift(56/60), ctrl(59/62), alt(58/61)
    }

    def __init__(self, config: KeyboardConfig):
        self.config = config
        self.key_to_monitor = config.key_to_monitor
        self.short_press_threshold = config.short_press_threshold
        self.long_press_threshold = config.long_press_threshold
        self.event_cooldown = config.event_cooldown
        self.hold_check_interval = config.hold_check_interval

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_monitoring = False
        self.key_pressed = False
        self.press_start_time: Optional[float] = None
        self.last_event_time = 0.0
        self._long_sent = False

        # –ü–æ—Ç–æ–∫–∏
        self.hold_monitor_thread: Optional[threading.Thread] = None
        self.stop_event = threading.Event()
        self.state_lock = threading.RLock()

        # Callbacks
        self.event_callbacks: Dict[KeyEventType, Callable] = {}

        # Async loop –¥–ª—è async-–∫–æ–ª–±—ç–∫–æ–≤
        self._loop: Optional[asyncio.AbstractEventLoop] = None

        # Quartz –æ–±—ä–µ–∫—Ç—ã
        self._tap = None
        self._tap_source = None

        # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        self.keyboard_available = QUARTZ_AVAILABLE
        if not QUARTZ_AVAILABLE:
            logger.warning("‚ö†Ô∏è Quartz –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–∞—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω")

        # –¶–µ–ª–µ–≤–æ–π keycode
        self._target_keycode = self.KEYCODES.get(self.key_to_monitor, None)
        if self._target_keycode is None:
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è Quartz: {self.key_to_monitor}")
            self.keyboard_available = False

    def register_callback(self, event_type, callback: Callable):
        if isinstance(event_type, str):
            try:
                event_type = KeyEventType(event_type)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                return
        self.event_callbacks[event_type] = callback
        logger.debug(f"QuartzMonitor: callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {event_type}")

    def set_loop(self, loop: asyncio.AbstractEventLoop):
        self._loop = loop
        logger.debug("QuartzMonitor: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω event loop –¥–ª—è async-–∫–æ–ª–±—ç–∫–æ–≤")

    def start_monitoring(self) -> bool:
        if not self.keyboard_available:
            logger.warning("‚ö†Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π Quartz-–º–æ–Ω–∏—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        if self.is_monitoring:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        try:
            # –°–æ–∑–¥–∞–µ–º Event Tap
            def _tap_callback(proxy, event_type, event, refcon):
                try:
                    logger.debug(f"üîç Quartz tap –≤—ã–∑–≤–∞–Ω: event_type={event_type}")

                    if event_type not in (kCGEventKeyDown, kCGEventKeyUp):
                        return event

                    keycode = CGEventGetIntegerValueField(event, kCGKeyboardEventKeycode)
                    logger.debug(f"üîç Keycode={keycode}, target={self._target_keycode}")

                    if keycode != self._target_keycode:
                        return event

                    logger.info(f"‚úÖ –¶–µ–ª–µ–≤–∞—è –∫–ª–∞–≤–∏—à–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! keycode={keycode}")

                    now = time.time()

                    # cooldown
                    if now - self.last_event_time < self.event_cooldown:
                        return event

                    if event_type == kCGEventKeyDown:
                        logger.info("üîΩ Quartz tap: keyDown detected for target key")
                        with self.state_lock:
                            if self.key_pressed:
                                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä
                                return event
                            self.key_pressed = True
                            self.press_start_time = now
                            self._long_sent = False

                        # PRESS
                        ev = KeyEvent(
                            key=self.key_to_monitor,
                            event_type=KeyEventType.PRESS,
                            timestamp=now,
                        )
                        self._trigger_event(KeyEventType.PRESS, 0.0, ev)
                    else:  # kCGEventKeyUp
                        logger.debug("Quartz tap: keyUp detected for target key")
                        with self.state_lock:
                            if not self.key_pressed:
                                return event
                            duration = now - (self.press_start_time or now)
                            self.key_pressed = False
                            self.press_start_time = None
                            self.last_event_time = now
                            # –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ LONG_PRESS ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ RELEASE
                            event_type_out = (
                                KeyEventType.SHORT_PRESS if duration < self.short_press_threshold else KeyEventType.RELEASE
                            )

                        ev = KeyEvent(
                            key=self.key_to_monitor,
                            event_type=event_type_out,
                            timestamp=now,
                            duration=duration,
                        )
                        self._trigger_event(event_type_out, duration, ev)

                    return event
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tap callback: {e}")
                    return event

            self._tap = CGEventTapCreate(
                kCGHIDEventTap,
                kCGHeadInsertEventTap,
                kCGEventTapOptionListenOnly,
                (1 << kCGEventKeyDown) | (1 << kCGEventKeyUp),
                _tap_callback,
                None,
            )

            if not self._tap:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CGEventTap ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Accessibility/Input Monitoring")
                self.keyboard_available = False
                return False

            self._tap_source = CFMachPortCreateRunLoopSource(None, self._tap, 0)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω—ã–π run loop (AppKit)
            # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ callback, –∏–Ω–∞—á–µ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω GC
            self._tap_callback = _tap_callback  # type: ignore[attr-defined]
            CFRunLoopAddSource(CFRunLoopGetMain(), self._tap_source, kCFRunLoopDefaultMode)
            CGEventTapEnable(self._tap, True)
            logger.info(f"QuartzMonitor: CGEventTap –≤–∫–ª—é—á–µ–Ω –¥–ª—è keycode={self._target_keycode}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è (–¥–ª—è long press)
            self.stop_event.clear()
            self.hold_monitor_thread = threading.Thread(
                target=self._run_hold_monitor,
                name="QuartzHoldMonitor",
                daemon=True,
            )
            self.hold_monitor_thread.start()

            self.is_monitoring = True
            logger.info("üéπ Quartz-–º–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Quartz-–º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
            self.is_monitoring = False
            return False

    def stop_monitoring(self):
        if not self.is_monitoring:
            return
        try:
            self.is_monitoring = False
            self.stop_event.set()
            if self.hold_monitor_thread and self.hold_monitor_thread.is_alive():
                self.hold_monitor_thread.join(timeout=2.0)

            if self._tap_source:
                try:
                    CFRunLoopSourceInvalidate(self._tap_source)
                except Exception:
                    pass
                self._tap_source = None

            if self._tap:
                try:
                    CGEventTapEnable(self._tap, False)
                except Exception:
                    pass
                self._tap = None

            logger.info("üõë Quartz-–º–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Quartz-–º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")

    def _run_hold_monitor(self):
        while not self.stop_event.is_set():
            try:
                with self.state_lock:
                    if self.key_pressed and self.press_start_time:
                        duration = time.time() - self.press_start_time
                        if not self._long_sent and duration >= self.long_press_threshold:
                            ev = KeyEvent(
                                key=self.key_to_monitor,
                                event_type=KeyEventType.LONG_PRESS,
                                timestamp=time.time(),
                                duration=duration,
                            )
                            self._trigger_event(KeyEventType.LONG_PRESS, duration, ev)
                            self._long_sent = True
                time.sleep(self.hold_check_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {e}")
                time.sleep(0.1)

    def _trigger_event(self, event_type: KeyEventType, duration: float, event: Optional[KeyEvent] = None):
        try:
            callback = self.event_callbacks.get(event_type)
            if not callback:
                return
            if event is None:
                event = KeyEvent(
                    key=self.key_to_monitor,
                    event_type=event_type,
                    timestamp=time.time(),
                    duration=duration,
                )

            threading.Thread(target=lambda: self._run_callback(callback, event), daemon=True).start()
            logger.debug(f"QuartzMonitor: _trigger_event {event_type.value}, duration={duration:.3f}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è: {e}")

    def _run_callback(self, callback: Callable, event: KeyEvent):
        try:
            import inspect
            if inspect.iscoroutinefunction(callback):
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π loop —á–µ—Ä–µ–∑ run_coroutine_threadsafe
                # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ø–∞–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π EventBus
                if self._loop:
                    try:
                        future = asyncio.run_coroutine_threadsafe(callback(event), self._loop)
                        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        # future.result(timeout=5.0)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ async callback –≤ loop: {e}")
                else:
                    # Fallback: –µ—Å–ª–∏ loop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –Ω–æ–≤–æ–º loop
                    logger.warning("‚ö†Ô∏è Loop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π (—Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –Ω–µ –¥–æ–π—Ç–∏ –¥–æ EventBus)")
                    asyncio.run(callback(event))
            else:
                callback(event)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è callback: {e}")

    def get_status(self) -> Dict[str, Any]:
        with self.state_lock:
            return {
                "is_monitoring": self.is_monitoring,
                "key_pressed": self.key_pressed,
                "keyboard_available": self.keyboard_available,
                "fallback_mode": False,
                "config": {
                    "key": self.key_to_monitor,
                    "short_press_threshold": self.short_press_threshold,
                    "long_press_threshold": self.long_press_threshold,
                },
                "callbacks_registered": len(self.event_callbacks),
                "backend": "quartz",
            }
