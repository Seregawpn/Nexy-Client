syntax = "proto3";

package streaming;

// Сервис для стриминга аудио и текста
service StreamingService {
  // Стриминг аудио и текста в ответ на промпт
  rpc StreamAudio(StreamRequest) returns (stream StreamResponse);
  
  // Генерация приветственного аудио на сервере
  rpc GenerateWelcomeAudio(WelcomeRequest) returns (stream WelcomeResponse);
  
  // ПРИНУДИТЕЛЬНОЕ прерывание активной сессии на сервере
  rpc InterruptSession(InterruptRequest) returns (InterruptResponse);
}

// Запрос на стриминг
message StreamRequest {
  string prompt = 1;           // Текстовая команда пользователя
  optional string screenshot = 2;       // Base64 WebP скриншот экрана (опционально)
  optional int32 screen_width = 3;     // Ширина экрана
  optional int32 screen_height = 4;    // Высота экрана
  string hardware_id = 5;      // Уникальный Hardware ID оборудования (обязательно)
  optional string session_id = 6;      // ID сессии для отслеживания (опционально)
}

// Ответ стриминга
message StreamResponse {
  oneof content {
    string text_chunk = 1;     // Текстовый чанк
    AudioChunk audio_chunk = 2; // Аудио чанк
    string end_message = 3;    // Сообщение о завершении
    string error_message = 4;  // Сообщение об ошибке
  }
}

// Запрос на генерацию приветственного аудио
message WelcomeRequest {
  string text = 1;             // Текст приветствия
  optional string session_id = 2; // Идентификатор сессии (опционально)
  optional string voice = 3;      // Пользовательский голос (опционально)
  optional string language = 4;   // Язык/локаль приветствия
}

// Ответ генерации приветствия
message WelcomeResponse {
  oneof content {
    AudioChunk audio_chunk = 1;      // Аудио данные чанком
    WelcomeMetadata metadata = 2;    // Метаданные о сессии генерации
    string end_message = 3;          // Сообщение о завершении стрима
    string error_message = 4;        // Сообщение об ошибке
  }
}

// Метаданные приветствия
message WelcomeMetadata {
  string method = 1;          // Метод генерации (например, "server")
  double duration_sec = 2;    // Оценочная длительность воспроизведения
  int32 sample_rate = 3;      // Частота дискретизации
  int32 channels = 4;         // Количество каналов
}

// Аудио чанк
message AudioChunk {
  bytes audio_data = 1;        // Аудио данные
  string dtype = 2;            // Тип данных (например, 'int16')
  repeated int32 shape = 3;    // Форма массива
}

// Запрос на прерывание сессии
message InterruptRequest {
  string hardware_id = 1;      // Hardware ID для прерывания
}

// Ответ на прерывание сессии
message InterruptResponse {
  bool success = 1;            // Успешность операции
  repeated string interrupted_sessions = 2;  // Список прерванных сессий
  string message = 3;          // Сообщение о результате
}
