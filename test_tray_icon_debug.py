#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
"""

import asyncio
import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ client –º–æ–¥—É–ª—è–º
client_path = Path(__file__).parent / "client"
sys.path.insert(0, str(client_path))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_tray_icon_switching():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è"""
    print("üß™ –¢–ï–°–¢: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from integration.core.event_bus import EventBus
        from integration.core.state_manager import ApplicationStateManager
        from integration.core.error_handler import ErrorHandler
        from integrations.tray_controller_integration import TrayControllerIntegration
        from modules.mode_management import AppMode
        from modules.tray_controller.core.tray_types import TrayStatus
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        event_bus = EventBus()
        state_manager = ApplicationStateManager()
        error_handler = ErrorHandler()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º EventBus –∫ StateManager
        state_manager.attach_event_bus(event_bus)
        print("‚úÖ StateManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ EventBus")
        
        # –°–æ–∑–¥–∞–µ–º TrayControllerIntegration
        tray_integration = TrayControllerIntegration(
            event_bus=event_bus,
            state_manager=state_manager,
            error_handler=error_handler
        )
        print("‚úÖ TrayControllerIntegration —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º (–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é)
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TrayControllerIntegration...")
        success = await tray_integration.initialize()
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayControllerIntegration")
            return False
        print("‚úÖ TrayControllerIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤
        print(f"\nüó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤: {tray_integration.mode_to_status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        print("\nüß™ –¢–ï–°–¢ 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ SLEEPING ‚Üí LISTENING")
        print("-" * 40)
        state_manager.set_mode(AppMode.LISTENING)
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await asyncio.sleep(0.1)
        
        print("\nüß™ –¢–ï–°–¢ 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ LISTENING ‚Üí PROCESSING")
        print("-" * 40)
        state_manager.set_mode(AppMode.PROCESSING)
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await asyncio.sleep(0.1)
        
        print("\nüß™ –¢–ï–°–¢ 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ PROCESSING ‚Üí SLEEPING")
        print("-" * 40)
        state_manager.set_mode(AppMode.SLEEPING)
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await asyncio.sleep(0.1)
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_icon_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫"""
    print("\nüé® –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫")
    print("=" * 50)
    
    try:
        from modules.tray_controller.core.tray_types import TrayStatus, TrayIconGenerator
        from modules.tray_controller.macos.tray_icon import MacOSTrayIcon
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TrayIconGenerator
        generator = TrayIconGenerator()
        
        for status in [TrayStatus.SLEEPING, TrayStatus.LISTENING, TrayStatus.PROCESSING]:
            print(f"\nüîç –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {status.value}:")
            icon = generator.create_circle_icon(status, 16)
            print(f"  Status: {icon.status}")
            print(f"  Color: {icon.color}")
            print(f"  Type: {icon.icon_type}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º MacOSTrayIcon
        print(f"\nüñºÔ∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫:")
        mac_icon = MacOSTrayIcon()
        
        for status in [TrayStatus.SLEEPING, TrayStatus.LISTENING, TrayStatus.PROCESSING]:
            print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è {status.value}:")
            icon_path = mac_icon.create_icon_file(status)
            if icon_path:
                print(f"  ‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {icon_path}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if os.path.exists(icon_path):
                    file_size = os.path.getsize(icon_path)
                    print(f"  üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                else:
                    print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_event_bus():
    """–¢–µ—Å—Ç EventBus"""
    print("\nüì° –¢–ï–°–¢: EventBus –ø—É–±–ª–∏–∫–∞—Ü–∏—è/–ø–æ–¥–ø–∏—Å–∫–∞")
    print("=" * 50)
    
    try:
        from integration.core.event_bus import EventBus, EventPriority
        
        event_bus = EventBus()
        received_events = []
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        async def test_handler(event):
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event}")
            received_events.append(event)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
        await event_bus.subscribe("test.mode_changed", test_handler, EventPriority.HIGH)
        print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ test.mode_changed —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        test_data = {"mode": "test_mode", "data": "test_data"}
        await event_bus.publish("test.mode_changed", test_data)
        print(f"üì§ –°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {test_data}")
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if received_events:
            print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {received_events[0]}")
            return True
        else:
            print("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ EventBus: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í –ò–ö–û–ù–ö–ò –¢–†–ï–Ø")
    print("=" * 60)
    
    # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ client
    os.chdir(client_path)
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –¢–µ—Å—Ç 1: EventBus
    success1 = await test_event_bus()
    
    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫
    success2 = await test_icon_generation()
    
    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π)
    success3 = await test_tray_icon_switching()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"  EventBus: {'‚úÖ PASS' if success1 else '‚ùå FAIL'}")
    print(f"  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫: {'‚úÖ PASS' if success2 else '‚ùå FAIL'}")
    print(f"  –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫: {'‚úÖ PASS' if success3 else '‚ùå FAIL'}")
    
    if all([success1, success2, success3]):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ UI –∏–ª–∏ macOS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    else:
        print("\nüîç –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    return all([success1, success2, success3])

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
