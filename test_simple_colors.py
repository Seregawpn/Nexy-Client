#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ü–≤–µ—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫ - –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ client –º–æ–¥—É–ª—è–º
client_path = Path(__file__).parent / "client"
sys.path.insert(0, str(client_path))

def test_colors():
    """–¢–µ—Å—Ç —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
    print("üé® –ü–†–û–°–¢–û–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
        from modules.tray_controller.core.tray_types import TrayStatus, TrayIconGenerator
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
        statuses = [TrayStatus.SLEEPING, TrayStatus.LISTENING, TrayStatus.PROCESSING]
        expected_colors = {
            TrayStatus.SLEEPING: "#808080",     # –°–µ—Ä—ã–π
            TrayStatus.LISTENING: "#007AFF",    # –°–∏–Ω–∏–π  
            TrayStatus.PROCESSING: "#FF9500"    # –ñ–µ–ª—Ç—ã–π
        }
        
        generator = TrayIconGenerator()
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤:")
        for status in statuses:
            print(f"\nüìç –°—Ç–∞—Ç—É—Å: {status}")
            print(f"   Enum value: {status.value}")
            print(f"   Type: {type(status)}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É
            icon = generator.create_circle_icon(status, 16)
            
            print(f"   Generated color: {icon.color}")
            print(f"   Expected color: {expected_colors[status]}")
            
            if icon.color == expected_colors[status]:
                print(f"   ‚úÖ –¶–≤–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ô")
            else:
                print(f"   ‚ùå –¶–≤–µ—Ç –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô!")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PIL
        try:
            from PIL import Image, ImageDraw
            pil_available = True
            print(f"\nüñºÔ∏è PIL –¥–æ—Å—Ç—É–ø–µ–Ω: ‚úÖ –î–ê")
        except ImportError:
            pil_available = False
            print(f"\nüñºÔ∏è PIL –¥–æ—Å—Ç—É–ø–µ–Ω: ‚ùå –ù–ï–¢")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_enum_comparison():
    """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è enum'–æ–≤"""
    print("\nüî¨ –¢–ï–°–¢: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ enum –∑–Ω–∞—á–µ–Ω–∏–π")
    print("=" * 50)
    
    try:
        from modules.tray_controller.core.tray_types import TrayStatus
        from modules.mode_management import AppMode
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
        mode_to_status = {
            AppMode.SLEEPING: TrayStatus.SLEEPING,
            AppMode.LISTENING: TrayStatus.LISTENING,
            AppMode.PROCESSING: TrayStatus.PROCESSING,
        }
        
        print("üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤:")
        for app_mode, tray_status in mode_to_status.items():
            print(f"   {app_mode} ‚Üí {tray_status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_modes = [AppMode.SLEEPING, AppMode.LISTENING, AppMode.PROCESSING]
        
        print(f"\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ:")
        for mode in test_modes:
            found = mode in mode_to_status
            status = mode_to_status.get(mode, "NOT_FOUND")
            print(f"   {mode} in mapping: {found} ‚Üí {status}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–´–• –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    success1 = test_colors()
    success2 = test_enum_comparison()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  –¢–µ—Å—Ç —Ü–≤–µ—Ç–æ–≤: {'‚úÖ PASS' if success1 else '‚ùå FAIL'}")
    print(f"  –¢–µ—Å—Ç enum'–æ–≤: {'‚úÖ PASS' if success2 else '‚ùå FAIL'}")
    
    if success1 and success2:
        print("\nüéâ –ë–ê–ó–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–ê–ï–¢!")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ —Å–æ–±—ã—Ç–∏—è—Ö –∏–ª–∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    else:
        print("\nüîç –ù–ê–ô–î–ï–ù–´ –ë–ê–ó–û–í–´–ï –ü–†–û–ë–õ–ï–ú–´!")
