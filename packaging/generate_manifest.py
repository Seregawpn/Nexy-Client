#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Nexy
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SHA256 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ Ed25519 –ø–æ–¥–ø–∏—Å—å
"""

import json
import hashlib
import base64
import os
import sys
from datetime import datetime
from pathlib import Path

def sha256_checksum(file_path: str) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(1024*1024), b""):  # –ß–∏—Ç–∞–µ–º –ø–æ 1MB
            sha256_hash.update(chunk)
    return sha256_hash.hexdigest()

def sign_file_ed25519(file_path: str, private_key_path: str) -> str:
    """–ü–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞ Ed25519 –∫–ª—é—á–æ–º"""
    try:
        from nacl.signing import SigningKey
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        with open(private_key_path, "rb") as f:
            signing_key = SigningKey(f.read())
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, "rb") as f:
            file_data = f.read()
            signature = signing_key.sign(file_data).signature
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –≤ base64
        return base64.b64encode(signature).decode('utf-8')
        
    except ImportError:
        print("‚ö†Ô∏è PyNaCl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Ed25519 –ø–æ–¥–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return ""
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Ed25519 –ø–æ–¥–ø–∏—Å–∏: {e}")
        return ""

def generate_manifest(dmg_path: str, version: str, build: int, private_key_path: str = None) -> dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    if not os.path.exists(dmg_path):
        raise FileNotFoundError(f"DMG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dmg_path}")
    
    print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ DMG: {dmg_path}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(dmg_path)
    print(f"üìè –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç ({file_size/1024/1024:.1f} MB)")
    
    # –í—ã—á–∏—Å–ª—è–µ–º SHA256
    print("üîç –í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256...")
    sha256_hash = sha256_checksum(dmg_path)
    print(f"üîí SHA256: {sha256_hash[:16]}...")
    
    # Ed25519 –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
    ed25519_signature = ""
    if private_key_path and os.path.exists(private_key_path):
        print("üîë –°–æ–∑–¥–∞–Ω–∏–µ Ed25519 –ø–æ–¥–ø–∏—Å–∏...")
        ed25519_signature = sign_file_ed25519(dmg_path, private_key_path)
        if ed25519_signature:
            print(f"‚úÖ Ed25519: {ed25519_signature[:16]}...")
        else:
            print("‚ùå Ed25519 –ø–æ–¥–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å")
    else:
        print("‚ö†Ô∏è Ed25519 –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    manifest = {
        "version": version,
        "build": build,
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "artifact": {
            "type": "dmg",
            "url": f"https://api.nexy.ai/updates/Nexy-{version}.dmg",
            "size": file_size,
            "sha256": sha256_hash,
            "ed25519": ed25519_signature
        },
        "requirements": {
            "min_macos": "11.0",
            "architecture": "arm64"
        },
        "changelog": [
            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ü–≤–µ—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ –º–µ–Ω—é-–±–∞—Ä–µ",
            "–£–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"
        ],
        "security": {
            "verification_methods": ["sha256", "codesign"] + (["ed25519"] if ed25519_signature else []),
            "signed_by": "Developer ID Application: Sergiy Zasorin (5NKLL2CLB9)",
            "notarized": True
        }
    }
    
    return manifest

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 4:
        print("üìã –ì–ï–ù–ï–†–ê–¢–û–† –ú–ê–ù–ò–§–ï–°–¢–ê NEXY")
        print("===========================")
        print("")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 generate_manifest.py <dmg_path> <version> <build> [private_key_path]")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python3 generate_manifest.py dist/Nexy.dmg 1.71.0 171")
        print("  python3 generate_manifest.py dist/Nexy.dmg 1.71.0 171 private_key.pem")
        print("")
        sys.exit(1)
    
    dmg_path = sys.argv[1]
    version = sys.argv[2]
    build = int(sys.argv[3])
    private_key_path = sys.argv[4] if len(sys.argv) > 4 else None
    
    print("üîß –ì–ï–ù–ï–†–ê–¢–û–† –ú–ê–ù–ò–§–ï–°–¢–ê NEXY")
    print("===========================")
    print(f"üì¶ DMG: {dmg_path}")
    print(f"üè∑Ô∏è –í–µ—Ä—Å–∏—è: {version}")
    print(f"üî¢ –ë–∏–ª–¥: {build}")
    print(f"üîë Ed25519 –∫–ª—é—á: {private_key_path if private_key_path else '–ù–µ—Ç'}")
    print("")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        manifest = generate_manifest(dmg_path, version, build, private_key_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        os.makedirs("dist", exist_ok=True)
        manifest_path = "dist/manifest.json"
        
        with open(manifest_path, "w", encoding="utf-8") as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
        
        print("")
        print("‚úÖ –ú–ê–ù–ò–§–ï–°–¢ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
        print("===========================")
        print(f"üìÅ –§–∞–π–ª: {manifest_path}")
        print(f"üè∑Ô∏è –í–µ—Ä—Å–∏—è: {manifest['version']}")
        print(f"üîí SHA256: {manifest['artifact']['sha256'][:16]}...")
        print(f"üîë Ed25519: {'–î–∞' if manifest['artifact']['ed25519'] else '–ù–µ—Ç'}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {manifest['artifact']['size']:,} –±–∞–π—Ç")
        print(f"üåê URL: {manifest['artifact']['url']}")
        print("")
        print("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞:")
        print(json.dumps(manifest, indent=2, ensure_ascii=False))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()