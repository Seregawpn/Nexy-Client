#!/usr/bin/env python3
"""
–¢–µ—Å—Ç UnifiedAudioSystem - –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
"""

import sys
import time
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / 'client'))

from unified_audio_system import get_global_unified_audio_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_unified_audio_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç UnifiedAudioSystem"""
    try:
        logger.info("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UnifiedAudioSystem...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = {
            'switch_audio_path': '/opt/homebrew/bin/SwitchAudioSource',
            'device_priorities': {
                'airpods': 95,
                'beats': 90,
                'bluetooth_headphones': 85,
                'usb_headphones': 80,
                'speakers': 70,
                'microphone': 60,
                'virtual': 1
            },
            'virtual_device_keywords': ['blackhole', 'loopback', 'virtual'],
            'exclude_virtual_devices': True
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        audio_system = get_global_unified_audio_system(config)
        
        if not audio_system:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UnifiedAudioSystem")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if not audio_system.is_initialized():
            logger.error("‚ùå UnifiedAudioSystem –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        logger.info("‚úÖ UnifiedAudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        current_device = audio_system.get_current_device()
        logger.info(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        current_info = audio_system.get_current_device_info()
        if current_info:
            logger.info(f"   –¢–∏–ø: {current_info.device_type.value}")
            logger.info(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {current_info.priority}")
            logger.info(f"   PortAudio output: {current_info.portaudio_output_index}")
            logger.info(f"   PortAudio input: {current_info.portaudio_input_index}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = audio_system.get_available_devices()
        logger.info(f"üì± –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        for device in devices:
            status = "üéß –¢–ï–ö–£–©–ï–ï" if device.is_default else "  "
            virtual_mark = "üîß –í–ò–†–¢–£–ê–õ–¨–ù–û–ï" if device.device_type.value == 'virtual' else ""
            logger.info(f"{status} {device.name} (—Ç–∏–ø: {device.device_type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority}) {virtual_mark}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        real_devices = [d for d in devices 
                       if d.device_type.value != 'virtual' 
                       and d.device_type.value != 'microphone'
                       and 'microphone' not in d.name.lower()]
        
        if real_devices:
            best_device = max(real_devices, key=lambda d: d.priority)
            logger.info(f"üéØ –õ—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_device.priority})")
            
            if best_device.name != current_device:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
                success = audio_system.switch_to_device(best_device.name)
                if success:
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            else:
                logger.info("‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º PortAudio –∏–Ω–¥–µ–∫—Å—ã
        output_idx, input_idx = audio_system.get_portaudio_indices()
        logger.info(f"üîä PortAudio –∏–Ω–¥–µ–∫—Å—ã - Output: {output_idx}, Input: {input_idx}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç UnifiedAudioSystem –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UnifiedAudioSystem: {e}")
        return False

if __name__ == "__main__":
    success = test_unified_audio_system()
    sys.exit(0 if success else 1)
