#!/usr/bin/env python3
"""
Text utilities for server components
Common functions for text processing across the server
"""

import re
from typing import List


def clean_text(text: str) -> str:
    """
    Cleans text by removing extra whitespace and normalizing
    ORIGINAL SPECIFIC CONDITIONS PRESERVED
    """
    if not text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (ORIGINAL CONDITION)
    text = ' '.join(text.split())
    
    # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å (ORIGINAL CONDITION)
    text = re.sub(r'[^\w\s\.\,\!\?\-\:\;\(\)\[\]\{\}\"\']', '', text)
    
    return text.strip()


def split_into_sentences(text: str) -> List[str]:
    """
    Splits text into sentences for streaming - ORIGINAL IMPROVED VERSION
    
    This is the unified function used by both TextProcessor and AudioGenerator
    ORIGINAL SPECIFIC CONDITIONS PRESERVED
    """
    if not text:
        return []
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç (ORIGINAL CONDITION)
    text = clean_text(text)
    
    # üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–¢–¢–ï–†–ù –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ORIGINAL CONDITIONS)
    # –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Å–ª—É—á–∞–µ–≤:
    # - –¢–æ—á–∫–∏ (.)
    # - –í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ (!)
    # - –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ (?)
    # - –ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ (...)
    # - –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ (!?, ?!)
    # - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    # - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä
    
    # –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ORIGINAL PATTERN)
    # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è + –ø—Ä–æ–±–µ–ª + –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞/—Ü–∏—Ñ—Ä–∞
    # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è + –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
    # 3. –ü–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞: –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è + –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞/—Ü–∏—Ñ—Ä–∞
    sentence_pattern = r'(?<=[.!?])\s*(?=[A-Z–ê-–Ø0-9])|(?<=[.!?])\s*$'
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (ORIGINAL LOGIC)
    sentences = re.split(sentence_pattern, text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ORIGINAL LOGIC)
    result = []
    for i, sentence in enumerate(sentences):
        sentence = sentence.strip()
        if sentence:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (ORIGINAL CONDITION)
            if i < len(sentences) - 1:
                # –ò—â–µ–º –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ (ORIGINAL CONDITION)
                if not any(sentence.endswith(ending) for ending in ['.', '!', '?', '...', '?!', '!?']):
                    sentence += '.'
            result.append(sentence)
    
    return result


def is_sentence_complete(text: str) -> bool:
    """
    Checks if a sentence is complete
    ORIGINAL SPECIFIC CONDITIONS PRESERVED
    """
    if not text or not text.strip():
        return False
    
    text = text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–Ω–∞–∫–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ORIGINAL CONDITION)
    sentence_endings = ['.', '!', '?', '...', '?!', '!?']
    return any(text.endswith(ending) for ending in sentence_endings)
