# Nexy Server Development Rules

## 1. Базовый контекст
Перед изменениями обнови контекст по ключевым файлам:
- `Docs/PRODUCT_CONCEPT.md` — пользовательские сценарии и режимы
- `Docs/ARCHITECTURE_OVERVIEW.md` — связь модулей и интеграций
- `Docs/PACKAGING_FINAL_GUIDE.md` и `client/modules/*/MACOS_PACKAGING_GUIDE.md` — пайплайн сборки и подписи
- `Docs/CURRENT_STATUS_REPORT.md` — актуальные истории и фичи
- `Docs/GLOBAL_DELIVERY_PLAN.md` — требования к доставке и Azure VM
- `Docs/GO_TO_MARKET_BETA_PLAN_RU.md` — план выхода на рынок

## 2. Среда и запуск
- Python 3.11+, разворачивай в отдельном `venv`; зависимости — `server/requirements.txt`
- Точка входа: `python server/main.py` (aiohttp health-check 8080, gRPC 50051, update-сервер 8081 при доступности)
- Перед запуском загрузи переменные окружения из `server/config.env`
- Для регенерации gRPC артефактов используй:
  ```bash
  cd server/modules/grpc_service
  python -m grpc_tools.protoc \
      -I. \
      --python_out=. \
      --grpc_python_out=. \
      streaming.proto
  ```
- Health-check `/health` и `/status` должны оставаться доступными для Azure Container Apps

## 3. Архитектурный каркас
- `server/modules/` — чистые модули (text_processing, audio_generation, session_management, database, memory_management, interrupt_handling, text_filtering, update, grpc_service)
- `server/integrations/`
  - `core/` — универсальные интерфейсы (`UniversalModuleInterface`, `UniversalGrpcIntegration`, `UniversalProviderInterface`, `UniversalFallbackManager`)
  - `service_integrations/` — обвязка gRPC (`GrpcServiceIntegration`, `ModuleCoordinatorIntegration`)
  - `workflow_integrations/` — сценарные пайплайны (streaming, memory, interrupt и т.д.)
- gRPC менеджер собирает активные модули через Module Coordinator; прямых вызовов между модулями быть не должно
- Модули считаются стабильными; расширяем их конфигурацией, провайдерами или событиями. Новый модуль/интеграция допускается только когда нужного поведения нет и нельзя разумно добавить его в существующие блоки. В таком случае документируй мотивацию и зависимости в `Docs/ARCHITECTURE_OVERVIEW.md` и обновляй конфиг/тесты.

## 4. Паттерны модулей и интеграций
- Каждый модуль наследует `UniversalModuleInterface`: реализуй `initialize`, `process`, `cleanup`, обновляй `ModuleStatus`
- Интеграции наследуют `UniversalGrpcIntegration` или профильные базовые классы; вся координация идёт через них
- Влияние на выполнение пайплайнов фиксируй через workflow-интеграции, а не внутри модулей
- Fallback-логика и провайдеры подключаются через `UniversalFallbackManager`

## 5. gRPC контракт и взаимодействие с клиентом
- Любые правки `streaming.proto` → регенерация `streaming_pb2*.py`, обновление клиента, запись изменений в CHANGELOG/документацию
- Поддерживай обратную совместимость; если невозможна — объяви версию и уведомь клиентскую команду
- Тестируй новые методы и поля вместе с клиентом (минимум локальный smoke-тест)

## 6. Конфигурация и секреты
- Основные настройки: `server/config/unified_config_example.yaml` и `server/config/unified_config.py`
- Ожидаемые переменные берутся из `.env`/`config.env`; секреты (API-ключи, токены) храним вне репозитория
- Новые параметры документируй в `Docs/ARCHITECTURE_OVERVIEW.md` и добавляй в пример конфигурации
- Не создавай рассыпанные YAML/JSON; используй существующие загрузчики

## 7. Логирование и мониторинг
- Единый формат: `%(asctime)s - %(name)s - %(levelname)s - %(message)s`
- Обязательно логируй старт/остановку сервисов, сигналы обновлений, ошибки gRPC и статусы модулей
- Не допускается логирование PII и секретов
- При расширении логгирования используй стандартный `logging` и централизованные настройки из `main.py`
- Система мониторинга: используй `server/monitoring/` для отслеживания производительности и ошибок
- Масштабирование: сервер настроен на 100 пользователей с оптимизированными параметрами

## 8. Тестирование
- Для каждого модуля есть сценарий тестирования (например, `python modules/text_processing/test_text_processing.py`)
- Сохраняй последовательность тестов, указанную в гиде, чтобы не нарушить зависимости
- Для регрессии gRPC сервиса используй `modules/grpc_service/test_grpc_service.py`
- При добавлении модулей/интеграций обеспечь отдельный тестовый скрипт и обнови гайд

## 9. Чеклист изменений
**Перед началом**
- Проверь актуальность модульного плана и зависимостей между модулями
- Уточни, затрагивает ли задача gRPC контракт или конфиг, и подготовь план уведомления клиента
- Обнови `config.env`/секреты локально (не коммить)

**Во время**
- Соблюдай разделение: бизнес-логика в модулях, координация в интеграциях
- Не нарушай статусы модулей (инициализация → ready → processing → cleanup)
- При необходимости fallback/провайдера — используй `UniversalProviderInterface`
- Поддерживай чистое async-API, избегай блокирующих вызовов

**После**
- Прогоняй релевантные модульные тесты + smoke gRPC (`modules/grpc_service/test_grpc_service.py`)
- Проверь, что health-checkи и статусы модулей возвращают ожидаемые данные
- Обнови документацию/планы, если тронул архитектуру, контракты или конфиг
- Синхронизируй изменения с клиентской командой, если есть новые поля/события

## 10. Наблюдаемые риски
- Несогласованные правки `streaming.proto`
- Отключение health-check (Azure Container Apps остановит сервис)
- Вмешательство в последовательность инициализации Module Coordinator
- Утечка секретов через коммиты или логи
- Отсутствие тестов/обновления гида после изменений

## 11. Напоминание
Все серверные изменения должны оставаться совместимыми с актуальной клиентской реализацией и не ломать уже завершённые модули. При сомнениях — синхронизируйся с владельцем клиентской части до мержа.
