#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π keyboard.long_press ‚Üí voice.recording_start
"""

import sys
import asyncio
import logging

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_event_flow():
    print("\n" + "="*60)
    print("–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    print("="*60)

    try:
        from integration.core.event_bus import EventBus, EventPriority

        bus = EventBus()
        bus.attach_loop(asyncio.get_running_loop())

        print("‚úÖ EventBus —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ loop")

        # –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        events_received = {
            "keyboard.long_press": 0,
            "voice.recording_start": 0,
            "mode.request": 0
        }

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        async def on_keyboard_long_press(event):
            events_received["keyboard.long_press"] += 1
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: keyboard.long_press (–≤—Å–µ–≥–æ: {events_received['keyboard.long_press']})")

        async def on_voice_recording_start(event):
            events_received["voice.recording_start"] += 1
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: voice.recording_start (–≤—Å–µ–≥–æ: {events_received['voice.recording_start']})")

        async def on_mode_request(event):
            events_received["mode.request"] += 1
            data = event.get("data", {})
            target = data.get("target")
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: mode.request ‚Üí {target} (–≤—Å–µ–≥–æ: {events_received['mode.request']})")

        # –ü–æ–¥–ø–∏—Å–∫–∏
        await bus.subscribe("keyboard.long_press", on_keyboard_long_press, EventPriority.HIGH)
        await bus.subscribe("voice.recording_start", on_voice_recording_start, EventPriority.HIGH)
        await bus.subscribe("mode.request", on_mode_request, EventPriority.MEDIUM)

        print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
        print("\nüì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è keyboard.long_press...")

        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await bus.publish("keyboard.long_press", {
            "timestamp": 123456.789,
            "duration": 1.5
        })

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        await asyncio.sleep(0.2)

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for event_name, count in events_received.items():
            emoji = "‚úÖ" if count > 0 else "‚ùå"
            print(f"{emoji} {event_name}: {count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        if events_received["keyboard.long_press"] > 0:
            print("\n‚úÖ EventBus –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("\n‚ùå EventBus –ù–ï –¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–±—ã—Ç–∏—è!")
            return False

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_full_integration():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ integration –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("="*60)

    try:
        from integration.core.event_bus import EventBus
        from integration.core.state_manager import ApplicationStateManager, AppMode
        from integration.core.error_handler import ErrorHandler
        from integration.integrations.voice_recognition_integration import (
            VoiceRecognitionIntegration,
            VoiceRecognitionConfig
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        bus = EventBus()
        bus.attach_loop(asyncio.get_running_loop())

        state_manager = ApplicationStateManager(bus)
        error_handler = ErrorHandler(bus)

        # –°–æ–∑–¥–∞–µ–º VoiceRecognition —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π
        config = VoiceRecognitionConfig(simulate=True)
        voice_recognition = VoiceRecognitionIntegration(
            bus, state_manager, error_handler, config
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        await voice_recognition.initialize()
        await voice_recognition.start()

        print("‚úÖ VoiceRecognitionIntegration –∑–∞–ø—É—â–µ–Ω–∞")

        # –°—á–µ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        recognition_started = [False]

        async def on_recognition_started(event):
            recognition_started[0] = True
            print("üì® voice.recognition_started –ø–æ–ª—É—á–µ–Ω–æ!")

        await bus.subscribe("voice.recognition_started", on_recognition_started)

        # –ü—É–±–ª–∏–∫—É–µ–º voice.recording_start
        print("\nüì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è voice.recording_start...")
        await bus.publish("voice.recording_start", {
            "session_id": 123456.789,
            "source": "test"
        })

        await asyncio.sleep(0.2)

        # –ü—É–±–ª–∏–∫—É–µ–º voice.recording_stop
        print("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è voice.recording_stop...")
        await bus.publish("voice.recording_stop", {
            "session_id": 123456.789,
            "source": "test"
        })

        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2.0)

        if recognition_started[0]:
            print("\n‚úÖ VoiceRecognition –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–±—ã—Ç–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("\n‚ùå VoiceRecognition –ù–ï –Ω–∞—á–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ!")
            return False

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    print("\nüîçüîçüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–¢–û–ö–ê –°–û–ë–´–¢–ò–ô üîçüîçüîç\n")

    results = {}

    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
    results["EventBus –±–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"] = await test_event_flow()

    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è VoiceRecognition
    results["VoiceRecognition –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"] = await test_full_integration()

    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)

    for test_name, result in results.items():
        emoji = "‚úÖ" if result else "‚ùå"
        print(f"{emoji} {test_name}: {'PASSED' if result else 'FAILED'}")

    failed_count = sum(1 for r in results.values() if not r)

    print("\n" + "="*60)
    if failed_count == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ EventBus –∏–ª–∏ VoiceRecognition")
    else:
        print(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: {failed_count}")
    print("="*60)

    return 0 if failed_count == 0 else 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
