"""
EventBus - –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
"""

import asyncio
import logging
from typing import Dict, List, Callable, Any, Optional
from enum import Enum

logger = logging.getLogger(__name__)

class EventPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–æ–±—ã—Ç–∏–π"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4

class EventBus:
    """–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self):
        self.subscribers: Dict[str, List[Dict[str, Any]]] = {}
        self.event_history: List[Dict[str, Any]] = []
        self.max_history = 1000
        self._loop: Optional[asyncio.AbstractEventLoop] = None
        # –°–æ–±—ã—Ç–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–π):
        # –ø—É–±–ª–∏–∫—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∫ –∑–∞–¥–∞—á–∏ –∏ –Ω–µ await'–∏–º –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        self._fast_events = {"app.mode_changed", "app.state_changed"}
    
    def attach_loop(self, loop: Optional[asyncio.AbstractEventLoop] = None):
        """–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π event loop –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ª—é–±—ã—Ö –ø–æ—Ç–æ–∫–æ–≤."""
        try:
            self._loop = loop or asyncio.get_running_loop()
            logger.debug(f"EventBus: attached loop={id(self._loop)} running={self._loop.is_running() if self._loop else False}")
        except Exception:
            self._loop = None
        
    async def subscribe(self, event_type: str, callback: Callable, priority: EventPriority = EventPriority.MEDIUM):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
        try:
            if event_type not in self.subscribers:
                self.subscribers[event_type] = []
            
            subscriber = {
                "callback": callback,
                "priority": priority,
                "event_type": event_type
            }
            
            self.subscribers[event_type].append(subscriber)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º)
            self.subscribers[event_type].sort(key=lambda x: x["priority"].value, reverse=True)
            
            logger.info(f"üìù –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {event_type} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.name})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event_type}: {e}")
    
    async def unsubscribe(self, event_type: str, callback: Callable):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è"""
        try:
            if event_type in self.subscribers:
                self.subscribers[event_type] = [
                    sub for sub in self.subscribers[event_type] 
                    if sub["callback"] != callback
                ]
                
                if not self.subscribers[event_type]:
                    del self.subscribers[event_type]
                
                logger.info(f"üìù –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: {event_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
    
    async def publish(self, event_type: str, data: Dict[str, Any] = None):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            if data is None:
                data = {}
            
            event = {
                "type": event_type,
                "data": data,
                "timestamp": asyncio.get_event_loop().time()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.event_history.append(event)
            if len(self.event_history) > self.max_history:
                self.event_history.pop(0)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            subs_cnt = len(self.subscribers.get(event_type, []))
            if event_type == "app.mode_changed":
                logger.info(f"EventBus: '{event_type}' ‚Üí subscribers={subs_cnt}, data={data}")
            logger.debug(f"EventBus: dispatch '{event_type}' to {subs_cnt} subscriber(s)")
            if event_type in self.subscribers:
                for subscriber in self.subscribers[event_type]:
                    cb = subscriber["callback"]
                    try:
                        if asyncio.iscoroutinefunction(cb):
                            # –ë—ã—Å—Ç—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è: –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                            if event_type in self._fast_events:
                                try:
                                    if self._loop and self._loop.is_running() and self._loop != asyncio.get_event_loop():
                                        fut = asyncio.run_coroutine_threadsafe(cb(event), self._loop)
                                        logger.debug(f"EventBus: scheduled (fast) async on main loop '{event_type}': {cb} -> {fut}")
                                    else:
                                        asyncio.create_task(cb(event))
                                        logger.debug(f"EventBus: create_task (fast) for '{event_type}': {cb}")
                                except Exception:
                                    # last resort ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å inline, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–æ–±—ã—Ç–∏–µ
                                    await cb(event)
                            else:
                                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∂–Ω—é—é —Å–µ–º–∞–Ω—Ç–∏–∫—É
                                if self._loop and self._loop.is_running() and self._loop != asyncio.get_event_loop():
                                    fut = asyncio.run_coroutine_threadsafe(cb(event), self._loop)
                                    logger.debug(f"EventBus: scheduled async callback on main loop for '{event_type}': {cb} -> {fut}")
                                else:
                                    logger.debug(f"EventBus: awaiting async callback inline for '{event_type}': {cb}")
                                    await cb(event)
                        else:
                            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é (–±—ã—Å—Ç—Ä–æ –∏ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
                            logger.debug(f"EventBus: calling sync callback for '{event_type}': {cb}")
                            cb(event)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")

            logger.debug(f"üì¢ –°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {event_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
    
    def get_event_history(self, event_type: str = None, limit: int = 100) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π"""
        try:
            if event_type:
                filtered_history = [
                    event for event in self.event_history 
                    if event["type"] == event_type
                ]
            else:
                filtered_history = self.event_history
            
            return filtered_history[-limit:]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    def get_subscribers_count(self, event_type: str = None) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            if event_type:
                return len(self.subscribers.get(event_type, []))
            else:
                return sum(len(subs) for subs in self.subscribers.values())
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å EventBus"""
        return {
            "subscribers_count": self.get_subscribers_count(),
            "event_types": list(self.subscribers.keys()),
            "history_size": len(self.event_history),
            "max_history": self.max_history
        }
