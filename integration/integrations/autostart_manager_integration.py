"""
AutostartManagerIntegration - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º
–ü–æ—Å–∫–æ–ª—å–∫—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ PKG LaunchAgent, —ç—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å
"""

import asyncio
import logging
import os
from dataclasses import dataclass
from typing import Optional, Dict, Any

from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager
from integration.core.error_handler import ErrorHandler

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

logger = logging.getLogger(__name__)

@dataclass
class AutostartManagerIntegrationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AutostartManagerIntegration"""
    check_interval: float = 60.0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    monitor_enabled: bool = True
    auto_repair: bool = False  # –ù–µ —á–∏–Ω–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - PKG —É–ø—Ä–∞–≤–ª—è–µ—Ç

class AutostartManagerIntegration:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è autostart_manager
    
    –í–ê–ñ–ù–û: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ PKG LaunchAgent!
    –≠—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å, –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç.
    """
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: Dict[str, Any] = None):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = config or {}
        self.config = AutostartManagerIntegrationConfig(
            check_interval=config.get('check_interval', 60.0),
            monitor_enabled=config.get('monitor_enabled', True),
            auto_repair=config.get('auto_repair', False)
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.is_running = False
        self._monitor_task: Optional[asyncio.Task] = None
        
        logger.info("AutostartManagerIntegration created (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ LaunchAgent)")
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutostartManagerIntegration")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.LOW)
            await self.event_bus.subscribe("autostart.check_status", self._on_check_status, EventPriority.MEDIUM)
            
            self.is_initialized = True
            logger.info("‚úÖ AutostartManagerIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AutostartManagerIntegration: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_initialized:
                logger.error("‚ùå AutostartManagerIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if self.is_running:
                logger.warning("‚ö†Ô∏è AutostartManagerIntegration —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ AutostartManagerIntegration")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
            await self._check_autostart_status()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if self.config.monitor_enabled:
                self._monitor_task = asyncio.create_task(self._monitor_autostart())
            
            self.is_running = True
            logger.info("‚úÖ AutostartManagerIntegration –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AutostartManagerIntegration: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_running:
                return True
            
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AutostartManagerIntegration")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self._monitor_task and not self._monitor_task.done():
                self._monitor_task.cancel()
                try:
                    await self._monitor_task
                except asyncio.CancelledError:
                    pass
            
            self.is_running = False
            logger.info("‚úÖ AutostartManagerIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AutostartManagerIntegration: {e}")
            return False
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üì± App startup - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
            await self._check_autostart_status()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ app.startup: {e}")
    
    async def _on_check_status(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            await self._check_autostart_status()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _check_autostart_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º LaunchAgent
            launch_agent_path = os.path.expanduser("~/Library/LaunchAgents/com.nexy.assistant.plist")
            launch_agent_exists = os.path.exists(launch_agent_path)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—É—Å
            status_data = {
                "launch_agent_exists": launch_agent_exists,
                "launch_agent_path": launch_agent_path,
                "method": "launch_agent",
                "managed_by": "PKG installer"
            }
            
            await self.event_bus.publish("autostart.status_checked", status_data)
            
            if launch_agent_exists:
                logger.info("‚úÖ LaunchAgent –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è LaunchAgent –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def _monitor_autostart(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        try:
            while self.is_running:
                await self._check_autostart_status()
                await asyncio.sleep(self.config.check_interval)
                
        except asyncio.CancelledError:
            logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
