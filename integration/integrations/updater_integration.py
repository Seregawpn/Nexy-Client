"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å EventBus
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
from typing import Dict, Any

from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager
from modules.updater import Updater
from modules.updater.config import UpdaterConfig
from config.updater_manager import get_updater_manager

logger = logging.getLogger(__name__)

class UpdaterIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, config: Dict[str, Any]):
        self.event_bus = event_bus
        self.state_manager = state_manager
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.updater_manager = get_updater_manager()
        updater_config_data = self.updater_manager.get_updater_config()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        updater_config = UpdaterConfig(
            enabled=updater_config_data.enabled,
            manifest_url=self.updater_manager.get_manifest_url(),
            check_interval=updater_config_data.check_interval,
            check_on_startup=updater_config_data.check_on_startup,
            auto_install=updater_config_data.auto_install,
            public_key=updater_config_data.security.get("public_key", ""),
            timeout=updater_config_data.network.get("timeout", 30),
            retries=updater_config_data.network.get("retries", 3),
            show_notifications=updater_config_data.ui.get("show_notifications", True),
            auto_download=updater_config_data.ui.get("auto_download", True)
        )
        
        self.updater = Updater(updater_config)
        self.check_task = None
        self.is_running = False
        # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥–æ–º/ENV
        # –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ ~/Applications (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–∏—Å—Ç–µ–º–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ /Applications)
        self._migrate_mode: str = "never"
        self._migrate_on_start: bool = False
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UpdaterIntegration...")
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ /Applications)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers()
            
            logger.info("‚úÖ UpdaterIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UpdaterIntegration: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.updater.config.enabled:
                logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—É—Å–∫ UpdaterIntegration - –æ—Ç–∫–ª—é—á–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ UpdaterIntegration...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if self.updater.config.check_on_startup:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
                if await self._can_update():
                    if self.updater.update():
                        return True  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            self.check_task = asyncio.create_task(self._check_loop())
            
            self.is_running = True
            logger.info("‚úÖ UpdaterIntegration –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UpdaterIntegration: {e}")
            return False
    
    async def _check_loop(self):
        """–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
                if await self._can_update():
                    if self.updater.update():
                        return  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.updater.config.check_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _can_update(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è"""
        current_mode = self.state_manager.get_current_mode()
        if current_mode in ["LISTENING", "PROCESSING"]:
            return False
        return True
    
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.MEDIUM)
        await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
        await self.event_bus.subscribe("updater.check_manual", self._on_manual_check, EventPriority.HIGH)
        await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.LOW)
    
    async def _on_app_startup(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ UpdaterIntegration")
    
    async def _on_app_shutdown(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ UpdaterIntegration")
        await self.stop()
    
    async def _on_manual_check(self, event_data):
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        logger.info("üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        if await self._can_update():
            self.updater.update()
    
    async def _on_mode_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        new_mode = event_data.get("mode")
        logger.info(f"–†–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_mode}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        if self.check_task:
            self.check_task.cancel()
        self.is_running = False
        logger.info("‚úÖ UpdaterIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


    def _should_migrate_on_start(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (/Applications)."""
        return False

    def _is_in_user_applications(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ª–∏ –±–∞–Ω–¥–ª –≤ ~/Applications."""
        try:
            p = Path(sys.argv[0]).resolve()
            home_apps = Path.home() / "Applications"
            return str(p).startswith(str(home_apps))
        except Exception:
            return False

    def _is_running_from_app_bundle(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –∫–∞–∫ .app (PyInstaller –±–∞–Ω–¥–ª), –∏ –Ω–µ –∏–∑ ~/Applications.
        –°—Ü–µ–Ω–∞—Ä–∏–∏: –∑–∞–ø—É—Å–∫ –∏–∑ DMG (/Volumes/...), –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ ‚Äî –¥–∞; –∑–∞–ø—É—Å–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ ‚Äî –Ω–µ—Ç.
        """
        try:
            exe_path = Path(sys.argv[0]).resolve()
            s = str(exe_path)
            if ".app/Contents/MacOS" in s or s.endswith("/MacOS/Nexy"):
                # .app –±–∞–Ω–¥–ª
                return not self._is_in_user_applications()
            # –ó–∞–ø—É—Å–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ / –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ ‚Äî –Ω–µ –º–∏–≥—Ä–∏—Ä—É–µ–º
            return False
        except Exception:
            return False
