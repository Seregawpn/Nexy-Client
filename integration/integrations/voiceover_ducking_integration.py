"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VoiceOver Ducking
–¢–æ–Ω–∫–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ VoiceOverController –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å EventBus
"""
import asyncio
import logging
from typing import Any, Dict, Optional

from integration.core.base_integration import BaseIntegration
from modules.voiceover_control.core.controller import VoiceOverController, VoiceOverControlSettings

logger = logging.getLogger(__name__)


class VoiceOverDuckingIntegration(BaseIntegration):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VoiceOver Ducking —á–µ—Ä–µ–∑ EventBus."""

    def __init__(self, event_bus, state_manager, error_handler, config=None):
        super().__init__(event_bus, state_manager, error_handler, "voiceover_ducking")
        self.config = config or {}
        self.controller = None
        self._initialized = False

    async def _do_initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VoiceOver Ducking."""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VoiceOverDuckingIntegration...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            settings = VoiceOverControlSettings(**self.config)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            self.controller = VoiceOverController(settings)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if not await self.controller.initialize():
                logger.error("VoiceOverDuckingIntegration: Failed to initialize controller")
                return False
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.subscribe("app.mode_changed", self.handle_mode_change)
            await self.event_bus.subscribe("keyboard.press", self.handle_keyboard_press)
            await self.event_bus.subscribe("app.shutdown", self.handle_shutdown)
            
            self._initialized = True
            logger.info("‚úÖ VoiceOverDuckingIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as exc:
            logger.error("Failed to initialize VoiceOverDuckingIntegration: %s", exc)
            return False

    async def _do_start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
        if not self._initialized:
            logger.error("VoiceOverDuckingIntegration: Not initialized")
            return False
        
        try:
            logger.info("üöÄ VoiceOverDuckingIntegration –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as exc:
            logger.error("Failed to start VoiceOverDuckingIntegration: %s", exc)
            return False

    async def _do_stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
        try:
            if self.controller:
                await self.controller.shutdown()
            logger.info("üõë VoiceOverDuckingIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as exc:
            logger.error("Failed to stop VoiceOverDuckingIntegration: %s", exc)
            return False

    async def handle_mode_change(self, event: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            if not self.controller:
                return
            
            mode_data = event.get("data", {})
            mode = mode_data.get("mode")
            
            if not mode:
                logger.warning("VoiceOverDuckingIntegration: No mode in event data")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ VoiceOver –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞
            await self.controller.update_voiceover_status()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
            await self.controller.apply_mode(mode.value)
            logger.debug("VoiceOverDuckingIntegration: Applied mode %s", mode.value)
            
        except Exception as exc:
            await self.error_handler.handle_error(exc, "handle_mode_change")

    async def handle_keyboard_press(self, event: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –¥–ª—è ducking."""
        try:
            if not self.controller:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ ducking –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏
            if self.controller.settings.engage_on_keyboard_events:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ VoiceOver –ø–µ—Ä–µ–¥ ducking
                await self.controller.update_voiceover_status()
                await self.controller.duck(reason="keyboard.press")
                logger.debug("VoiceOverDuckingIntegration: Ducking on keyboard press")
                
        except Exception as exc:
            await self.error_handler.handle_error(exc, "handle_keyboard_press")

    async def handle_shutdown(self, event: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            if self.controller:
                await self.controller.shutdown()
                logger.info("VoiceOverDuckingIntegration: Shutdown completed")
                
        except Exception as exc:
            await self.error_handler.handle_error(exc, "handle_shutdown")

    async def manual_duck(self, reason: str = "manual") -> bool:
        """–†—É—á–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ VoiceOver."""
        try:
            if not self.controller:
                logger.error("VoiceOverDuckingIntegration: Controller not initialized")
                return False
            
            return await self.controller.duck(reason=reason)
            
        except Exception as exc:
            await self.error_handler.handle_error(exc, "manual_duck")
            return False

    async def manual_release(self, force: bool = False) -> bool:
        """–†—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ VoiceOver."""
        try:
            if not self.controller:
                logger.error("VoiceOverDuckingIntegration: Controller not initialized")
                return False
            
            await self.controller.release(force=force)
            return True
            
        except Exception as exc:
            await self.error_handler.handle_error(exc, "manual_release")
            return False

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
        return {
            "initialized": self._initialized,
            "controller_available": self.controller is not None,
            "config": self.config,
            "enabled": self.config.get("enabled", True)
        }
