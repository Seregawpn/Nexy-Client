"""
Permissions Integration
–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è PermissionManager —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ EventBus
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from modules.permissions import PermissionManager, PermissionType, PermissionStatus, PermissionResult
from modules.permissions.core.types import PermissionEvent, PermissionConfig

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.unified_config_loader import UnifiedConfigLoader

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

logger = logging.getLogger(__name__)

# macOS —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
try:
    from AppKit import NSBundle
    from Quartz import AXIsProcessTrustedWithOptions, kAXTrustedCheckOptionPrompt
    from AVFoundation import AVCaptureDevice, AVMediaTypeAudio
    from PyObjCTools import AppHelper
    MACOS_IMPORTS_AVAILABLE = True
except ImportError:
    MACOS_IMPORTS_AVAILABLE = False
    logger.warning("macOS —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º PermissionConfig –∏–∑ –º–æ–¥—É–ª—è

class PermissionsIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è PermissionManager —Å EventBus –∏ ApplicationStateManager"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: Optional[PermissionConfig] = None):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ unified_config.yaml
        unified_config = UnifiedConfigLoader()
        if config is None:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è –∏–∑ unified_config
            config_data = unified_config._load_config()
            perm_cfg = config_data['integrations']['permissions']
            
            config = PermissionConfig(
                required_permissions=[
                    PermissionType.MICROPHONE,
                    PermissionType.SCREEN_CAPTURE,
                    PermissionType.NETWORK
                ],  # –ò–∑ –º–æ–¥—É–ª—è
                check_interval=perm_cfg.get('check_interval', 30.0),
                auto_open_preferences=perm_cfg.get('auto_open_preferences', True),
                show_instructions=perm_cfg.get('show_instructions', True)
            )
        
        self.config = config
        
        # PermissionManager (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
        self.permission_manager: Optional[PermissionManager] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.is_initialized = False
        self.is_running = False
        self.is_monitoring = False
        
        # –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        self.permission_statuses: Dict[PermissionType, PermissionStatus] = {}
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–´ - –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú –ù–ò–ß–ï–ì–û)
        self.critical_permissions = set()  # –ü—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ - –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–∞–∂–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–µ–π —Å–æ–±—ã—Ç–∏–π)
        self._app_blocked: Optional[bool] = None
        # –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∞–≤
        self._request_in_progress: bool = False
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PermissionsIntegration...")
            
            # –°–æ–∑–¥–∞–µ–º PermissionManager (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
            self.permission_manager = PermissionManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PermissionManager
            success = await self.permission_manager.initialize()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PermissionManager")
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            logger.info("üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
            await self._check_all_permissions()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks –¥–ª—è PermissionManager (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º add_callback - –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ PermissionManager
            
            self.is_initialized = True
            logger.info("‚úÖ PermissionsIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PermissionsIntegration: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_initialized:
                logger.error("PermissionsIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if self.is_running:
                logger.warning("PermissionsIntegration —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ PermissionsIntegration...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å, –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤)
            await self._check_all_permissions()
            
            # –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é
            # if self.config.auto_open_preferences and not self._request_in_progress:
            #     await self._request_required_permissions()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.permission_manager.start_monitoring()
            self.is_monitoring = True
            
            self.is_running = True
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            await self.event_bus.publish("permissions.integration_ready", {
                "integration": "permissions",
                "status": "running",
                "permissions": self.permission_statuses
            })
            
            logger.info("‚úÖ PermissionsIntegration –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PermissionsIntegration: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_running:
                logger.warning("PermissionsIntegration –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PermissionsIntegration...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.is_monitoring:
                await self.permission_manager.stop_monitoring()
                self.is_monitoring = False
            
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if self.permission_manager:
                await self.permission_manager.cleanup()
            
            self.is_running = False
            
            logger.info("‚úÖ PermissionsIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PermissionsIntegration: {e}")
            return False
    
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.HIGH)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
            await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.MEDIUM)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            await self.event_bus.subscribe("permissions.check_required", self._on_check_required, EventPriority.HIGH)
            await self.event_bus.subscribe("permissions.request_required", self._on_request_required, EventPriority.HIGH)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π PermissionsIntegration –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def _check_all_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
            
            results = await self.permission_manager.check_all_permissions()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤
            for perm_type, result in results.items():
                self.permission_statuses[perm_type] = result.status
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                await self.event_bus.publish("permissions.status_checked", {
                    "permission": perm_type.value,
                    "status": result.status.value,
                    "success": result.success,
                    "message": result.message
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            await self._check_critical_permissions()
            
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
    
    async def _request_required_permissions(self):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        try:
            logger.info("üìù –ó–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
            if self._request_in_progress:
                logger.info("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            self._request_in_progress = True

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if MACOS_IMPORTS_AVAILABLE:
                await self._request_permissions_sequential()

            results = await self.permission_manager.request_required_permissions()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤
            for perm_type, result in results.items():
                self.permission_statuses[perm_type] = result.status
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                await self.event_bus.publish("permissions.requested", {
                    "permission": perm_type.value,
                    "status": result.status.value,
                    "success": result.success,
                    "message": result.message
                })
            
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        finally:
            self._request_in_progress = False
    
    async def _request_permissions_sequential(self):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∞–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ UI.
        –ü–æ—Ä—è–¥–æ–∫: Microphone ‚Üí ScreenCapture ‚Üí Accessibility/InputMonitoring (deep-link –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ).
        """
        try:
            import asyncio
            import subprocess

            logger.info("üîî –°—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∞–≤...")

            # 1) Microphone (completion handler, UI thread)
            mic_future: asyncio.Future = asyncio.get_event_loop().create_future()

            def _mic_request():
                try:
                    def mic_handler(granted):
                        try:
                            if not mic_future.done():
                                mic_future.set_result(bool(granted))
                        except Exception as e:
                            if not mic_future.done():
                                mic_future.set_exception(e)
                    AVCaptureDevice.requestAccessForMediaType_completionHandler_(AVMediaTypeAudio, mic_handler)
                except Exception as e:
                    if not mic_future.done():
                        mic_future.set_exception(e)

            AppHelper.callAfter(_mic_request)
            mic_granted = await mic_future
            logger.info(f"üé§ Microphone: {'granted' if mic_granted else 'denied'}")
            # –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            # if not mic_granted:
            #     subprocess.run(["open", "x-apple.systempreferences:com.apple.preference.security?Privacy_Microphone"], check=False)

            # 2) Screen Capture (blocking call, prefer main thread, but acceptable via worker)
            try:
                from Quartz import CGPreflightScreenCaptureAccess, CGRequestScreenCaptureAccess
            except Exception as e:
                logger.warning(f"Quartz ScreenCapture API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                CGPreflightScreenCaptureAccess = None
                CGRequestScreenCaptureAccess = None

            if CGPreflightScreenCaptureAccess and CGRequestScreenCaptureAccess:
                has_sc = bool(CGPreflightScreenCaptureAccess())
                if not has_sc:
                    logger.info("üì∏ ScreenCapture not granted ‚Üí requesting...")
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å loop
                    sc_granted = await asyncio.to_thread(CGRequestScreenCaptureAccess)
                    logger.info(f"üì∏ ScreenCapture: {'granted' if sc_granted else 'denied'}")
                    # –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    # if not sc_granted:
                    #     subprocess.run(["open", "x-apple.systempreferences:com.apple.preference.security?Privacy_ScreenCapture"], check=False)

            # 3) Accessibility (prompt, no completion)
            try:
                logger.info("‚ôø –ü—Ä–æ–≤–µ—Ä–∫–∞ Accessibility...")
                trusted = bool(AXIsProcessTrustedWithOptions({kAXTrustedCheckOptionPrompt: False}))  # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º prompt
                # –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                # if not trusted:
                #     subprocess.run(["open", "x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility"], check=False)
                #     subprocess.run(["open", "x-apple.systempreferences:com.apple.preference.security?Privacy_ListenEvent"], check=False)
            except Exception as e:
                logger.warning(f"Accessibility request error: {e}")

            logger.info("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∞–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∞–≤: {e}")
    
    async def _check_critical_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        try:
            critical_granted = True
            
            for perm_type in self.critical_permissions:
                status = self.permission_statuses.get(perm_type, PermissionStatus.NOT_DETERMINED)
                if status != PermissionStatus.GRANTED:
                    critical_granted = False
                    break
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            await self.event_bus.publish("permissions.critical_status", {
                "all_granted": critical_granted,
                "permissions": {
                    perm.value: self.permission_statuses.get(perm, PermissionStatus.NOT_DETERMINED).value
                    for perm in self.critical_permissions
                }
            })
            
            # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–µ–π: –≤—ã–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if not critical_granted:
                if self._app_blocked is not True:
                    await self._block_application()
                    self._app_blocked = True
            else:
                if self._app_blocked is not False:
                    await self._unblock_application()
                    self._app_blocked = False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
    
    async def _block_application(self):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        try:
            logger.warning("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ
            await self.event_bus.publish("mode.request", {
                "target": AppMode.SLEEPING,
                "source": "permissions"
            })
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await self.event_bus.publish("permissions.app_blocked", {
                "reason": "missing_critical_permissions",
                "permissions": {
                    perm.value: self.permission_statuses.get(perm, PermissionStatus.NOT_DETERMINED).value
                    for perm in self.critical_permissions
                }
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _unblock_application(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            logger.info("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await self.event_bus.publish("permissions.app_unblocked", {
                "reason": "all_critical_permissions_granted",
                "permissions": {
                    perm.value: self.permission_statuses.get(perm, PermissionStatus.NOT_DETERMINED).value
                    for perm in self.critical_permissions
                }
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π EventBus
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ PermissionsIntegration")
            await self._check_all_permissions()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_app_shutdown(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ PermissionsIntegration")
            await self.stop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # EventBus —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ dict
            if isinstance(event, dict):
                data = event.get("data") or {}
                new_mode = data.get("mode")
            else:
                data = getattr(event, "data", {}) or {}
                new_mode = data.get("mode")

            printable_mode = getattr(new_mode, "value", None) or str(new_mode)
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –≤ PermissionsIntegration: {printable_mode}")
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if new_mode == AppMode.LISTENING:
                await self._check_critical_permissions()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
    
    async def _on_check_required(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        try:
            logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            await self._check_all_permissions()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    async def _on_request_required(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        try:
            logger.info("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            await self._request_required_permissions()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
    
    def _on_permission_changed(self, event: PermissionEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç PermissionManager"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.permission_statuses[event.permission] = event.new_status
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            asyncio.create_task(self.event_bus.publish("permissions.changed", {
                "permission": event.permission.value,
                "old_status": event.old_status.value,
                "new_status": event.new_status.value,
                "timestamp": event.timestamp
            }))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            asyncio.create_task(self._check_critical_permissions())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "is_monitoring": self.is_monitoring,
            "permission_manager": {
                "initialized": self.permission_manager is not None,
                "monitoring": self.is_monitoring
            },
            "permissions": {
                perm.value: status.value 
                for perm, status in self.permission_statuses.items()
            },
            "critical_permissions": {
                perm.value: self.permission_statuses.get(perm, PermissionStatus.NOT_DETERMINED).value
                for perm in self.critical_permissions
            },
            "config": {
                "check_interval": self.config.check_interval,
                "auto_open_preferences": self.config.auto_open_preferences,
                "show_instructions": self.config.show_instructions,
                "required_permissions": [p.value for p in self.config.required_permissions]
            }
        }
    
    async def check_permission(self, permission_type: PermissionType) -> PermissionResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        if not self.permission_manager:
            return PermissionResult(
                success=False,
                permission=permission_type,
                status=PermissionStatus.ERROR,
                message="PermissionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            )
        
        return await self.permission_manager.check_permission(permission_type)
    
    async def request_permission(self, permission_type: PermissionType) -> PermissionResult:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        if not self.permission_manager:
            return PermissionResult(
                success=False,
                permission=permission_type,
                status=PermissionStatus.ERROR,
                message="PermissionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            )
        
        return await self.permission_manager.request_permission(permission_type)
    
    def are_critical_permissions_granted(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        for perm_type in self.critical_permissions:
            status = self.permission_statuses.get(perm_type, PermissionStatus.NOT_DETERMINED)
            if status != PermissionStatus.GRANTED:
                return False
        return True
    
    async def _request_all_required_permissions(self):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        try:
            if not self.permission_manager:
                logger.error("‚ùå PermissionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            logger.info("üîê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            required_permissions = self.config.required_permissions if self.config else [
                PermissionType.MICROPHONE,
                PermissionType.SCREEN_CAPTURE,
                PermissionType.NETWORK
            ]
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            for permission_type in required_permissions:
                logger.info(f"üîê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {permission_type.value}")
                result = await self.permission_manager.request_permission(permission_type)
                
                if result.success:
                    logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {permission_type.value} –ø–æ–ª—É—á–µ–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {permission_type.value} –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ: {result.message}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
            
            logger.info("‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
