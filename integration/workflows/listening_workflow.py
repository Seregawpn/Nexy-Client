"""
ListeningWorkflow - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º LISTENING
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –¥–µ–±–∞—É–Ω—Å, —Ç–∞–π–º–∞—É—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime, timedelta

from .base_workflow import BaseWorkflow, WorkflowState, AppMode
from integration.core.event_bus import EventPriority

logger = logging.getLogger(__name__)

class ListeningWorkflow(BaseWorkflow):
    """
    Workflow –¥–ª—è —Ä–µ–∂–∏–º–∞ LISTENING.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –î–µ–±–∞—É–Ω—Å –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    - –£–º–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
    - –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏
    """
    
    def __init__(self, event_bus):
        super().__init__(event_bus, "ListeningWorkflow")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.debounce_threshold = 0.3  # —Å–µ–∫—É–Ω–¥ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ LISTENING
        self.max_listening_duration = 30.0  # —Å–µ–∫—É–Ω–¥ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.silence_timeout = 5.0  # —Å–µ–∫—É–Ω–¥ - —Ç–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.listening_start_time: Optional[datetime] = None
        self.last_voice_activity: Optional[datetime] = None
        self.debounce_task: Optional[asyncio.Task] = None
        self.timeout_task: Optional[asyncio.Task] = None
        
    async def _setup_subscriptions(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–µ–∂–∏–º–∞ LISTENING"""
        # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        await self.event_bus.subscribe(
            "voice.recording_start", 
            self._on_recording_start, 
            EventPriority.HIGH
        )
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        await self.event_bus.subscribe(
            "voice.recording_stop", 
            self._on_recording_stop, 
            EventPriority.HIGH
        )
        
        # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        await self.event_bus.subscribe(
            "keyboard.short_press", 
            self._on_interrupt_request, 
            EventPriority.CRITICAL
        )
        
        await self.event_bus.subscribe(
            "interrupt.request", 
            self._on_interrupt_request, 
            EventPriority.CRITICAL
        )
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤
        await self.event_bus.subscribe(
            "app.mode_changed", 
            self._on_mode_changed, 
            EventPriority.MEDIUM
        )
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        await self.event_bus.subscribe(
            "voice.activity_detected", 
            self._on_voice_activity, 
            EventPriority.LOW
        )
    
    async def _on_start(self):
        """–ó–∞–ø—É—Å–∫ workflow'–∞"""
        logger.info("üé§ ListeningWorkflow: –≥–æ—Ç–æ–≤ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è")
    
    async def _on_recording_start(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏"""
        if not self.is_active():
            return
            
        try:
            data = event.get("data", {})
            session_id = data.get("session_id")
            
            logger.info(f"üé§ ListeningWorkflow: –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏, session_id={session_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.current_session_id = session_id
            self.listening_start_time = datetime.now()
            self.last_voice_activity = datetime.now()
            self.state = WorkflowState.ACTIVE
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–±–∞—É–Ω—Å –ø—Ä–æ–≤–µ—Ä–∫—É
            if self.debounce_task and not self.debounce_task.done():
                self.debounce_task.cancel()
            
            self.debounce_task = self._create_task(
                self._debounce_check(session_id), 
                "debounce_check"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.timeout_task and not self.timeout_task.done():
                self.timeout_task.cancel()
                
            self.timeout_task = self._create_task(
                self._timeout_monitor(session_id), 
                "timeout_monitor"
            )
            
        except Exception as e:
            logger.error(f"‚ùå ListeningWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ recording_start - {e}")
    
    async def _on_recording_stop(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            data = event.get("data", {})
            session_id = data.get("session_id")
            
            logger.info(f"üé§ ListeningWorkflow: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏, session_id={session_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
            if self.current_session_id and session_id != self.current_session_id:
                logger.debug(f"üé§ ListeningWorkflow: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥—Ä—É–≥–æ–π —Å–µ—Å—Å–∏–∏")
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            await self._cancel_monitoring_tasks()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            if self.listening_start_time:
                duration = (datetime.now() - self.listening_start_time).total_seconds()
                logger.info(f"üé§ ListeningWorkflow: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ {duration:.2f}—Å")
                
                if duration < self.debounce_threshold:
                    logger.warning(f"üé§ ListeningWorkflow: –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ({duration:.2f}—Å), –≤–æ–∑–º–æ–∂–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ")
                    # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ PROCESSING –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
                    await self._return_to_sleeping("short_recording")
                    return
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ PROCESSING –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç—Å—è InputProcessingIntegration
            # –ú—ã —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            logger.info(f"üé§ ListeningWorkflow: –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–µ–º PROCESSING")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._reset_state()
            
        except Exception as e:
            logger.error(f"‚ùå ListeningWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ recording_stop - {e}")
    
    async def _on_interrupt_request(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        if not self.is_active() or not self.current_session_id:
            return
            
        try:
            data = event.get("data", {})
            reason = data.get("reason", "user_interrupt")
            
            logger.info(f"üé§ ListeningWorkflow: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, reason={reason}")
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            await self._cancel_monitoring_tasks()
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING
            await self._return_to_sleeping(reason)
            
        except Exception as e:
            logger.error(f"‚ùå ListeningWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - {e}")
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        try:
            data = event.get("data", {})
            new_mode = data.get("mode")
            
            if hasattr(new_mode, 'value'):
                mode_value = new_mode.value
            else:
                mode_value = str(new_mode).lower()
            
            logger.debug(f"üé§ ListeningWorkflow: —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode_value}")
            
            # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ LISTENING - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if mode_value != "listening" and self.state == WorkflowState.ACTIVE:
                logger.info(f"üé§ ListeningWorkflow: –≤—ã—à–ª–∏ –∏–∑ LISTENING, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                await self._cancel_monitoring_tasks()
                self._reset_state()
                
        except Exception as e:
            logger.error(f"‚ùå ListeningWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ mode_changed - {e}")
    
    async def _on_voice_activity(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞"""
        if self.state == WorkflowState.ACTIVE:
            self.last_voice_activity = datetime.now()
            logger.debug("üé§ ListeningWorkflow: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    
    async def _debounce_check(self, session_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–±–∞—É–Ω—Å–∞ - –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π"""
        try:
            # –ñ–¥–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            await asyncio.sleep(self.debounce_threshold)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            if self.current_session_id != session_id:
                return
                
            logger.debug(f"üé§ ListeningWorkflow: –¥–µ–±–∞—É–Ω—Å –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            
        except asyncio.CancelledError:
            logger.debug(f"üé§ ListeningWorkflow: –¥–µ–±–∞—É–Ω—Å –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        except Exception as e:
            logger.error(f"‚ùå ListeningWorkflow: –æ—à–∏–±–∫–∞ –¥–µ–±–∞—É–Ω—Å–∞ - {e}")
    
    async def _timeout_monitor(self, session_id: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        try:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            await asyncio.sleep(self.max_listening_duration)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            if self.current_session_id != session_id:
                return
                
            logger.warning(f"üé§ ListeningWorkflow: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç ({self.max_listening_duration}—Å)")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å
            await self.event_bus.publish("voice.recording_stop", {
                "session_id": session_id,
                "reason": "max_duration_timeout"
            })
            
        except asyncio.CancelledError:
            logger.debug(f"üé§ ListeningWorkflow: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        except Exception as e:
            logger.error(f"‚ùå ListeningWorkflow: –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∞–π–º–∞—É—Ç–∞ - {e}")
    
    async def _cancel_monitoring_tasks(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        if self.debounce_task and not self.debounce_task.done():
            self.debounce_task.cancel()
            
        if self.timeout_task and not self.timeout_task.done():
            self.timeout_task.cancel()
    
    async def _return_to_sleeping(self, reason: str):
        """–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING"""
        try:
            logger.info(f"üé§ ListeningWorkflow: –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING, reason={reason}")
            
            await self._publish_mode_request(
                AppMode.SLEEPING, 
                f"listening_cancelled_{reason}",
                priority=80  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–º–µ–Ω
            )
            
            self._reset_state()
            
        except Exception as e:
            logger.error(f"‚ùå ListeningWorkflow: –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ SLEEPING - {e}")
    
    def _reset_state(self):
        """–°–±—Ä–æ—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.current_session_id = None
        self.listening_start_time = None
        self.last_voice_activity = None
        self.state = WorkflowState.IDLE
    
    def get_listening_duration(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        if self.listening_start_time:
            return (datetime.now() - self.listening_start_time).total_seconds()
        return None
    
    def get_status(self) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å workflow'–∞"""
        base_status = super().get_status()
        base_status.update({
            "listening_duration": self.get_listening_duration(),
            "last_voice_activity": self.last_voice_activity.isoformat() if self.last_voice_activity else None,
            "debounce_active": self.debounce_task is not None and not self.debounce_task.done(),
            "timeout_monitoring": self.timeout_task is not None and not self.timeout_task.done()
        })
        return base_status
