"""
TrayController Integration
–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è TrayController —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ EventBus
–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π (–ù–ï –¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É!)
from modules.tray_controller import TrayController, TrayStatus, TrayConfig
from modules.tray_controller.core.tray_types import TrayEvent

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.unified_config_loader import UnifiedConfigLoader

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory
from PyObjCTools import AppHelper
import rumps

logger = logging.getLogger(__name__)

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º TrayConfig –∏–∑ –º–æ–¥—É–ª—è

class TrayControllerIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TrayController —Å EventBus –∏ ApplicationStateManager"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: Optional[TrayConfig] = None):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ unified_config.yaml
        unified_config = UnifiedConfigLoader()
        if config is None:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è –∏–∑ unified_config (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
            config_data = unified_config._load_config()
            integrations_cfg = (config_data.get('integrations') or {})
            tray_cfg = (integrations_cfg.get('tray_controller') or {})
            tray_basic = (config_data.get('tray') or {})

            icon_size = tray_cfg.get('icon_size', tray_basic.get('icon_size', 18))
            show_status_in_menu = tray_cfg.get('show_status_in_menu', True)
            enable_notifications = tray_cfg.get('enable_notifications', tray_basic.get('show_notifications', True))
            debug_mode = tray_cfg.get('debug_mode', (config_data.get('app') or {}).get('debug', False))

            config = TrayConfig(
                icon_size=icon_size,
                show_status=show_status_in_menu,  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
                show_menu=True,  # –ò–∑ –º–æ–¥—É–ª—è
                enable_click_events=True,  # –ò–∑ –º–æ–¥—É–ª—è
                enable_right_click=True,  # –ò–∑ –º–æ–¥—É–ª—è
                auto_hide=False,  # –ò–∑ –º–æ–¥—É–ª—è
                animation_speed=0.5,  # –ò–∑ –º–æ–¥—É–ª—è
                menu_font_size=13,  # –ò–∑ –º–æ–¥—É–ª—è
                enable_sound=enable_notifications,  # –ú–∞–ø–ø–∏–Ω–≥
                debug_mode=debug_mode
            )
        
        self.config = config
        
        # TrayController (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
        self.tray_controller: Optional[TrayController] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.is_initialized = False
        self.is_running = False
        # –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ—è (–ø—Ä—è–º–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ UI-—Ç—Ä–µ–¥–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞)
        self._desired_status: Optional[TrayStatus] = None
        self._ui_timer: Optional[rumps.Timer] = None
        self._ui_timer_started: bool = False
        self._ui_dirty: bool = False
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã —Ç—Ä–µ—è
        self.mode_to_status = {
            AppMode.SLEEPING: TrayStatus.SLEEPING,
            AppMode.LISTENING: TrayStatus.LISTENING,
            AppMode.PROCESSING: TrayStatus.PROCESSING,
        }
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TrayControllerIntegration...")
            
            # –°–æ–∑–¥–∞–µ–º TrayController (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
            self.tray_controller = TrayController()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TrayController
            success = await self.tray_controller.initialize()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayController")
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers()
            
            self.is_initialized = True
            logger.info("‚úÖ TrayControllerIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayControllerIntegration: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_initialized:
                logger.error("TrayControllerIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if self.is_running:
                logger.warning("TrayControllerIntegration —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ TrayControllerIntegration...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º TrayController
            success = await self.tray_controller.start()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TrayController")
                return False
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self._sync_with_app_mode()
            
            self.is_running = True
            
            # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∫–æ–Ω–∫–∏
            self._ui_timer = None

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            await self.event_bus.publish("tray.integration_ready", {
                "integration": "tray_controller",
                "status": "running"
            })
            
            logger.info("‚úÖ TrayControllerIntegration –∑–∞–ø—É—â–µ–Ω")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—É–Ω–∫—Ç—É Quit
            try:
                if self.tray_controller and hasattr(self.tray_controller, 'set_event_callback'):
                    self.tray_controller.set_event_callback("quit_clicked", self._on_tray_quit)
            except Exception:
                pass
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TrayControllerIntegration: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_running:
                logger.warning("TrayControllerIntegration –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TrayControllerIntegration...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI-—Ç–∞–π–º–µ—Ä
            self.stop_ui_timer()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TrayController
            if self.tray_controller:
                success = await self.tray_controller.stop()
                if not success:
                    logger.warning("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrayController")
            
            self.is_running = False
            
            logger.info("‚úÖ TrayControllerIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrayControllerIntegration: {e}")
            return False
    
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            logger.info(f"üéØ TRAY DEBUG: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ app.mode_changed —Å–æ–±—ã—Ç–∏–µ")
            await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.HIGH)
            logger.info(f"üéØ TRAY DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ app.mode_changed —É—Å–ø–µ—à–Ω–∞")
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.HIGH)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await self.event_bus.subscribe("keyboard.long_press", self._on_keyboard_event, EventPriority.MEDIUM)
            await self.event_bus.subscribe("keyboard.release", self._on_keyboard_event, EventPriority.MEDIUM)
            await self.event_bus.subscribe("keyboard.short_press", self._on_keyboard_event, EventPriority.MEDIUM)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞/—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
            await self.event_bus.subscribe("voice.mic_opened", self._on_voice_mic_opened, EventPriority.HIGH)
            await self.event_bus.subscribe("voice.mic_closed", self._on_voice_mic_closed, EventPriority.HIGH)
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
            await self.event_bus.subscribe("audio.device_switched", self._on_audio_device_switched, EventPriority.MEDIUM)
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–Ω–∞–ø—à–æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            await self.event_bus.subscribe("audio.device_snapshot", self._on_audio_device_snapshot, EventPriority.MEDIUM)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π TrayControllerIntegration –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: {e}")

    async def _on_tray_quit(self, event_type: str, data: Dict[str, Any]):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é Quit."""
        try:
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.event_bus.publish("tray.quit_clicked", {"source": "tray.quit"})
        except Exception:
            pass
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–æ–¥—É–ª—å TrayController (—Å–º. _on_quit_clicked)
    
    async def _sync_with_app_mode(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            current_mode = self.state_manager.get_current_mode()
            if current_mode in self.mode_to_status:
                target_status = self.mode_to_status[current_mode]
                self._desired_status = target_status
                
                logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {current_mode.value} ‚Üí {target_status.value}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _update_tray_status(self, status: TrayStatus):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è"""
        try:
            if not self.tray_controller or not self.is_running:
                return
            
            success = await self.tray_controller.update_status(status)
            if success:
                logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å —Ç—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω: {status.value}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                human = {
                    TrayStatus.SLEEPING: "Sleeping",
                    TrayStatus.LISTENING: "Listening",
                    TrayStatus.PROCESSING: "Processing",
                }.get(status, status.value.title())
                await self.tray_controller.update_menu_status_text(human)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ—è: {status.value}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π EventBus (–ù–ï –¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –º–æ–¥—É–ª—è!)
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # üéØ TRAY DEBUG: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"üéØ TRAY DEBUG: _on_mode_changed –í–´–ó–í–ê–ù!")
            logger.info(f"üéØ TRAY DEBUG: event type={type(event)}, event={event}")
            
            data = (event.get("data") or {}) if isinstance(event, dict) else {}
            new_mode = data.get("mode")
            logger.info(f"üéØ TRAY DEBUG: data={data}")
            logger.info(f"üéØ TRAY DEBUG: new_mode={new_mode} (type: {type(new_mode)})")
            logger.info(f"üéØ TRAY DEBUG: mode_to_status={self.mode_to_status}")
            logger.info(f"üéØ TRAY DEBUG: new_mode in mapping? {new_mode in self.mode_to_status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –æ—Ç–¥–µ–ª—å–Ω–æ
            for key in self.mode_to_status.keys():
                logger.info(f"üéØ TRAY DEBUG: key={key} (type: {type(key)}), equals new_mode? {key == new_mode}")
            
            if new_mode in self.mode_to_status:
                target_status = self.mode_to_status[new_mode]
                logger.debug(f"TrayIntegration: mapping mode -> status: {new_mode} -> {target_status}")
                # –§–∏–∫—Å–∏—Ä—É–µ–º –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤ UI-–ø–æ—Ç–æ–∫–µ
                self._desired_status = target_status
                self._ui_dirty = True
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                await self.event_bus.publish("tray.status_updated", {
                    "status": target_status.value,
                    "mode": new_mode.value,
                    "integration": "tray_controller"
                })
                
                logger.info(f"üîÑ –†–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω: {new_mode.value} ‚Üí {target_status.value}")
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º UI-–ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ AppHelper.callAfter
                try:
                    AppHelper.callAfter(self._apply_status_ui, target_status)
                except Exception:
                    pass
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
    
    async def _on_keyboard_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            if isinstance(event, dict):
                event_type = event.get("type", "unknown")
            else:
                event_type = getattr(event, 'event_type', 'unknown')
            
            logger.info(f"‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ TrayControllerIntegration: {event_type}")
            
            # Push-to-talk: —Ä–µ–∂–∏–º—ã –º–µ–Ω—è—é—Ç—Å—è –≤ InputProcessingIntegration
            # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º/–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            import traceback
            logger.debug(f"–°—Ç–µ–∫—Ç—Ä–µ–π—Å: {traceback.format_exc()}")

    async def _on_voice_mic_opened(self, event):
        """–ù–µ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ –Ω–∞–ø—Ä—è–º—É—é: –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã –æ—Å—Ç–∞—ë—Ç—Å—è app.mode_changed"""
        try:
            await self.event_bus.publish("tray.status_updated", {
                "status": getattr(self._desired_status, 'value', None),
                "reason": "voice.mic_opened",
                "integration": "tray_controller"
            })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ voice.mic_opened: {e}")

    async def _on_voice_mic_closed(self, event):
        """–ù–µ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ –Ω–∞–ø—Ä—è–º—É—é: –≤—Å—ë —á–µ—Ä–µ–∑ app.mode_changed"""
        try:
            mode = self.state_manager.get_current_mode()
            await self.event_bus.publish("tray.status_updated", {
                "status": getattr(self._desired_status, 'value', None),
                "mode": getattr(mode, 'value', str(mode)),
                "reason": "voice.mic_closed",
                "integration": "tray_controller"
            })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ voice.mic_closed: {e}")

    def _apply_status_ui(self, status: TrayStatus):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ UI –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á–µ—Ä–µ–∑ AppHelper.callAfter)."""
        try:
            # –í—ã–∑–æ–≤ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ UI-–ø–æ—Ç–æ–∫–µ
            AppHelper.callAfter(self._apply_status_ui_sync, status)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è UI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def _apply_status_ui_sync(self, status: TrayStatus):
        """–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI. –î–û–õ–ñ–ù–û –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º UI-–ø–æ—Ç–æ–∫–µ."""
        logger.info(f"üéØ TRAY DEBUG: _apply_status_ui_sync –í–´–ó–í–ê–ù! status={status} (type: {type(status)})")
        if not self.tray_controller or not self.tray_controller.tray_menu or not self.tray_controller.tray_icon:
            logger.error(
                "üéØ TRAY DEBUG: UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã! tray_controller=%s, tray_menu=%s, tray_icon=%s",
                bool(self.tray_controller),
                bool(self.tray_controller.tray_menu if self.tray_controller else False),
                bool(self.tray_controller.tray_icon if self.tray_controller else False),
            )
            return
        try:
            icon_path = self.tray_controller.tray_icon.create_icon_file(status)
            if not icon_path:
                logger.error("_apply_status_ui_sync: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É")
                return
            self.tray_controller.tray_menu.update_icon(icon_path)
            human_names = {
                TrayStatus.SLEEPING: "Sleeping",
                TrayStatus.LISTENING: "Listening",
                TrayStatus.PROCESSING: "Processing",
            }
            human = human_names.get(status, status.value.title())
            self.tray_controller.tray_menu.update_status_text(human)
            prev_status = getattr(self.tray_controller, 'current_status', None)
            self.tray_controller.current_status = status
            self._ui_dirty = False
            prev_value = getattr(prev_status, 'value', str(prev_status)) if prev_status else 'None'
            logger.info(f"‚úÖ Tray UI applied: {prev_value} -> {status.value}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _apply_status_ui_sync: {e}")

    async def _on_audio_device_switched(self, event):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ."""
        try:
            data = (event or {}).get("data", {})
            to_device = data.get("to_device") or data.get("device") or "Unknown"
            device_type = data.get("device_type", "output")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é "Output: ..."
            if self.tray_controller:
                await self.tray_controller.update_menu_output_device(to_device)
                # –ù–µ–Ω–∞–≤—è–∑—á–∏–≤–∞—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–±–µ–∑ –∑–≤—É–∫–∞)
                await self.tray_controller.show_notification(
                    title="Audio device switched",
                    message=f"Now using: {to_device}",
                    subtitle=device_type
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ audio.device_switched: {e}")

    async def _on_audio_device_snapshot(self, event):
        """–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –º–µ–Ω—é –Ω–∞ —Å—Ç–∞—Ä—Ç–µ."""
        try:
            data = (event or {}).get("data", {})
            cur = data.get("current_device") or "Unknown"
            if self.tray_controller:
                await self.tray_controller.update_menu_output_device(cur)
        except Exception as e:
            logger.debug(f"Failed to handle audio.device_snapshot in tray: {e}")

    # ---------- UI helper (runs in main rumps thread via Timer) ----------
    def _ui_tick(self, _timer):
        """UI-—Ç–∞–π–º–µ—Ä: –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∫–æ–Ω–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ rumps"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
            if not self.tray_controller:
                logger.debug("UI tick: tray_controller –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            if not self.tray_controller.tray_menu:
                logger.debug("UI tick: tray_menu –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            if not self.tray_controller.tray_icon:
                logger.debug("UI tick: tray_icon –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
            desired = self._desired_status
            if not desired:
                logger.debug("UI tick: _desired_status –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current = getattr(self.tray_controller, 'current_status', None)
            try:
                logger.debug(f"UI tick: current={getattr(current,'value','None')}, desired={getattr(desired,'value','None')}")
            except Exception:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            dirty = getattr(self, '_ui_dirty', False)
            if (current == desired) and (not dirty):
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if not hasattr(self, '_ui_tick_debug_count'):
                    self._ui_tick_debug_count = 0
                if self._ui_tick_debug_count < 3:
                    logger.debug(f"UI tick: —Å—Ç–∞—Ç—É—Å —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω ({desired.value}), dirty={dirty}")
                    self._ui_tick_debug_count += 1
                return
            
            logger.debug(f"UI tick: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ {getattr(current,'value','None')} -> {desired.value}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É
            try:
                icon_path = self.tray_controller.tray_icon.create_icon_file(desired)
                if not icon_path:
                    logger.error("‚ùå UI tick: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É")
                    return
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –≤ UI
                self.tray_controller.tray_menu.update_icon(icon_path)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω—é
                human_names = {
                    TrayStatus.SLEEPING: "Sleeping",
                    TrayStatus.LISTENING: "Listening", 
                    TrayStatus.PROCESSING: "Processing",
                }
                human = human_names.get(desired, desired.value.title())
                self.tray_controller.tray_menu.update_status_text(human)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
                prev_status = getattr(self.tray_controller, 'current_status', None)
                self.tray_controller.current_status = desired
                self._ui_dirty = False
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                prev_value = getattr(prev_status, 'value', str(prev_status)) if prev_status else 'None'
                logger.info(f"‚úÖ Tray UI applied: {prev_value} -> {desired.value}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                if hasattr(self, '_ui_tick_debug_count'):
                    self._ui_tick_debug_count = 0
                
            except Exception as e:
                logger.error(f"‚ùå UI tick: –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
                import traceback
                logger.debug(f"UI tick stacktrace: {traceback.format_exc()}")
                
        except Exception as e:
            logger.error(f"‚ùå UI tick: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            logger.debug(f"UI tick critical stacktrace: {traceback.format_exc()}")
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ TrayControllerIntegration")
            await self._sync_with_app_mode()
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º UI-–ø–æ—Ç–æ–∫–µ
            try:
                mode = self.state_manager.get_current_mode()
                status = self.mode_to_status.get(mode)
                if status:
                    AppHelper.callAfter(self._apply_status_ui, status)
            except Exception:
                pass
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_app_shutdown(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ TrayControllerIntegration")
            await self.stop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "tray_controller": {
                "initialized": self.tray_controller is not None,
                "running": self.tray_controller.is_running if self.tray_controller else False,
                "current_status": self.tray_controller.current_status.value if self.tray_controller else None
            },
            "config": {
                "icon_size": self.config.icon_size,
                "show_status_in_menu": self.config.show_status_in_menu,
                "enable_notifications": self.config.enable_notifications,
                "auto_update_status": self.config.auto_update_status,
                "debug_mode": self.config.debug_mode
            }
        }
    
    def get_app(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.tray_controller:
            return self.tray_controller.get_app()
        return None
    
    def start_ui_timer(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å UI-—Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ app.run() - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ rumps"""
        try:
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
            if self._ui_timer and not self._ui_timer_started:
                try:
                    self._ui_timer.start()
                    self._ui_timer_started = True
                except Exception:
                    pass
            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UI-—Ç–∞–π–º–µ—Ä–∞: {e}")
    
    def stop_ui_timer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UI-—Ç–∞–π–º–µ—Ä"""
        try:
            if self._ui_timer and getattr(self._ui_timer, 'is_alive', lambda: False)():
                self._ui_timer.stop()
                self._ui_timer_started = False
                logger.info("‚èπÔ∏è UI-—Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ UI-—Ç–∞–π–º–µ—Ä–∞: {e}")
