"""
ProcessingWorkflow - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º PROCESSING
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É: capture ‚Üí grpc ‚Üí playback ‚Üí sleeping
"""

import asyncio
import logging
from typing import Dict, Any, Optional, Set
from datetime import datetime, timedelta
from enum import Enum

from .base_workflow import BaseWorkflow, WorkflowState, AppMode
from integration.core.event_bus import EventPriority

logger = logging.getLogger(__name__)

class ProcessingStage(Enum):
    """–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∂–∏–º–µ PROCESSING"""
    STARTING = "starting"
    CAPTURING = "capturing"
    SENDING_GRPC = "sending_grpc"
    PLAYING_AUDIO = "playing_audio"
    COMPLETING = "completing"

class ProcessingWorkflow(BaseWorkflow):
    """
    Workflow –¥–ª—è —Ä–µ–∂–∏–º–∞ PROCESSING.
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    1. –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (ScreenshotCaptureIntegration)
    2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ gRPC —Å–µ—Ä–≤–µ—Ä (GrpcClientIntegration) 
    3. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (SpeechPlaybackIntegration)
    4. –í–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING
    
    –ö–õ–Æ–ß–ï–í–ê–Ø –û–°–û–ë–ï–ù–ù–û–°–¢–¨: –ñ–¥–µ—Ç –†–ï–ê–õ–¨–ù–´–• —Å–æ–±—ã—Ç–∏–π –≤–º–µ—Å—Ç–æ —Ç–∞–π–º–∞—É—Ç–æ–≤!
    """
    
    def __init__(self, event_bus):
        super().__init__(event_bus, "ProcessingWorkflow")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.stage_timeout = 30.0  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø
        self.total_timeout = 300.0  # —Å–µ–∫—É–Ω–¥ –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç (5 –º–∏–Ω—É—Ç)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏
        self.current_stage = ProcessingStage.STARTING
        self.stage_start_time: Optional[datetime] = None
        self.processing_start_time: Optional[datetime] = None
        self.completed_stages: Set[ProcessingStage] = set()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.stage_timeout_task: Optional[asyncio.Task] = None
        self.total_timeout_task: Optional[asyncio.Task] = None
        
        # –§–ª–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.screenshot_captured = False
        self.grpc_completed = False
        self.playback_completed = False
        self.interrupted = False
    
    async def _setup_subscriptions(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ü–µ–ø–æ—á–∫–∏ PROCESSING"""
        
        # === –í–•–û–î –í PROCESSING ===
        await self.event_bus.subscribe(
            "app.mode_changed", 
            self._on_mode_changed, 
            EventPriority.HIGH
        )
        
        # === –≠–¢–ê–ü 1: –ó–ê–•–í–ê–¢ –°–ö–†–ò–ù–®–û–¢–ê ===
        await self.event_bus.subscribe(
            "screenshot.captured", 
            self._on_screenshot_captured, 
            EventPriority.HIGH
        )
        
        await self.event_bus.subscribe(
            "screenshot.error", 
            self._on_screenshot_error, 
            EventPriority.HIGH
        )
        
        # === –≠–¢–ê–ü 2: GRPC –ó–ê–ü–†–û–° ===
        await self.event_bus.subscribe(
            "grpc.request_started", 
            self._on_grpc_started, 
            EventPriority.HIGH
        )
        
        await self.event_bus.subscribe(
            "grpc.request_completed", 
            self._on_grpc_completed, 
            EventPriority.HIGH
        )
        
        await self.event_bus.subscribe(
            "grpc.request_failed", 
            self._on_grpc_failed, 
            EventPriority.HIGH
        )
        
        # === –≠–¢–ê–ü 3: –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï ===
        await self.event_bus.subscribe(
            "playback.started", 
            self._on_playback_started, 
            EventPriority.HIGH
        )
        
        await self.event_bus.subscribe(
            "playback.completed", 
            self._on_playback_completed, 
            EventPriority.HIGH
        )
        
        await self.event_bus.subscribe(
            "playback.failed", 
            self._on_playback_failed, 
            EventPriority.HIGH
        )
        
        # === –ü–†–ï–†–´–í–ê–ù–ò–Ø ===
        await self.event_bus.subscribe(
            "keyboard.short_press", 
            self._on_interrupt_request, 
            EventPriority.CRITICAL
        )
        
        await self.event_bus.subscribe(
            "interrupt.request", 
            self._on_interrupt_request, 
            EventPriority.CRITICAL
        )
    
    async def _on_start(self):
        """–ó–∞–ø—É—Å–∫ workflow'–∞"""
        logger.info("‚öôÔ∏è ProcessingWorkflow: –≥–æ—Ç–æ–≤ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        try:
            data = event.get("data", {})
            new_mode = data.get("mode")
            session_id = data.get("session_id")
            
            if hasattr(new_mode, 'value'):
                mode_value = new_mode.value
            else:
                mode_value = str(new_mode).lower()
            
            logger.debug(f"‚öôÔ∏è ProcessingWorkflow: —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode_value}")
            
            if mode_value == "processing":
                # –ù–ê–ß–ò–ù–ê–ï–ú –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —Ü–µ–ø–æ—á–∫–∏ PROCESSING
                await self._start_processing_chain(session_id)
                
            elif self.state == WorkflowState.ACTIVE and mode_value != "processing":
                # –í—ã—à–ª–∏ –∏–∑ PROCESSING - –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
                logger.info(f"‚öôÔ∏è ProcessingWorkflow: –≤—ã—à–ª–∏ –∏–∑ PROCESSING, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é")
                await self._cleanup_processing()
                
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ mode_changed - {e}")
    
    async def _start_processing_chain(self, session_id: Optional[str]):
        """–ù–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏ PROCESSING"""
        try:
            logger.info(f"‚öôÔ∏è ProcessingWorkflow: –ù–ê–ß–ê–õ–û —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏, session_id={session_id}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.current_session_id = session_id
            self.current_stage = ProcessingStage.STARTING
            self.processing_start_time = datetime.now()
            self.stage_start_time = datetime.now()
            self.state = WorkflowState.ACTIVE
            
            # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤
            self.completed_stages.clear()
            self.screenshot_captured = False
            self.grpc_completed = False
            self.playback_completed = False
            self.interrupted = False
            
            # –ó–∞–ø—É—Å–∫ –æ–±—â–µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
            if self.total_timeout_task and not self.total_timeout_task.done():
                self.total_timeout_task.cancel()
                
            self.total_timeout_task = self._create_task(
                self._total_timeout_monitor(session_id), 
                "total_timeout"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –∑–∞—Ö–≤–∞—Ç–∞
            await self._transition_to_stage(ProcessingStage.CAPTURING)
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ü–µ–ø–æ—á–∫–∏ - {e}")
            await self._handle_error("start_chain_error")
    
    async def _transition_to_stage(self, new_stage: ProcessingStage):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É —ç—Ç–∞–ø—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            old_stage = self.current_stage
            self.current_stage = new_stage
            self.stage_start_time = datetime.now()
            
            logger.info(f"‚öôÔ∏è ProcessingWorkflow: –ø–µ—Ä–µ—Ö–æ–¥ {old_stage.value} ‚Üí {new_stage.value}")
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π stage timeout
            if self.stage_timeout_task and not self.stage_timeout_task.done():
                self.stage_timeout_task.cancel()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π stage timeout
            self.stage_timeout_task = self._create_task(
                self._stage_timeout_monitor(new_stage), 
                f"stage_timeout_{new_stage.value}"
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            if old_stage != ProcessingStage.STARTING:
                self.completed_stages.add(old_stage)
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —ç—Ç–∞–ø—É {new_stage.value} - {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –≠–¢–ê–ü–ê 1: –°–ö–†–ò–ù–®–û–¢ ===
    
    async def _on_screenshot_captured(self, event):
        """–°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"""
        if not self._is_relevant_event(event):
            return
            
        try:
            data = event.get("data", {})
            session_id = data.get("session_id")
            screenshot_path = data.get("path")
            
            logger.info(f"üì∏ ProcessingWorkflow: —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω, path={screenshot_path}")
            
            self.screenshot_captured = True
            
            if self.current_stage == ProcessingStage.CAPTURING:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ gRPC
                await self._transition_to_stage(ProcessingStage.SENDING_GRPC)
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ screenshot.captured - {e}")
    
    async def _on_screenshot_error(self, event):
        """–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        if not self._is_relevant_event(event):
            return
            
        try:
            data = event.get("data", {})
            error = data.get("error", "unknown")
            
            logger.error(f"üì∏ ProcessingWorkflow: –æ—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ - {error}")
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (graceful degradation)
            self.screenshot_captured = False
            
            if self.current_stage == ProcessingStage.CAPTURING:
                logger.info("üì∏ ProcessingWorkflow: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                await self._transition_to_stage(ProcessingStage.SENDING_GRPC)
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ screenshot.error - {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –≠–¢–ê–ü–ê 2: GRPC ===
    
    async def _on_grpc_started(self, event):
        """gRPC –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç"""
        if not self._is_relevant_event(event):
            return
            
        try:
            logger.info("üåê ProcessingWorkflow: gRPC –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ grpc.request_started - {e}")
    
    async def _on_grpc_completed(self, event):
        """gRPC –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"""
        if not self._is_relevant_event(event):
            return
            
        try:
            logger.info("üåê ProcessingWorkflow: gRPC –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            self.grpc_completed = True
            
            if self.current_stage == ProcessingStage.SENDING_GRPC:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é (–µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å)
                if not self.playback_completed:
                    await self._transition_to_stage(ProcessingStage.PLAYING_AUDIO)
                else:
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ø–æ—á–∫—É
                    await self._complete_processing_chain()
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ grpc.request_completed - {e}")
    
    async def _on_grpc_failed(self, event):
        """gRPC –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π"""
        if not self._is_relevant_event(event):
            return
            
        try:
            data = event.get("data", {})
            error = data.get("error", "unknown")
            
            logger.error(f"üåê ProcessingWorkflow: gRPC –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π - {error}")
            
            self.grpc_completed = False
            await self._handle_error(f"grpc_error_{error}")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ grpc.request_failed - {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –≠–¢–ê–ü–ê 3: –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï ===
    
    async def _on_playback_started(self, event):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å"""
        if not self._is_relevant_event(event):
            return
            
        try:
            logger.info("üîä ProcessingWorkflow: –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")
            
            if self.current_stage != ProcessingStage.PLAYING_AUDIO:
                await self._transition_to_stage(ProcessingStage.PLAYING_AUDIO)
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ playback.started - {e}")
    
    async def _on_playback_completed(self, event):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ö–õ–Æ–ß–ï–í–û–ï –°–û–ë–´–¢–ò–ï!"""
        if not self._is_relevant_event(event):
            return
            
        try:
            logger.info("üîä ProcessingWorkflow: –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ó–ê–í–ï–†–®–ï–ù–û - –≥–æ—Ç–æ–≤—ã –∫ SLEEPING!")
            
            self.playback_completed = True
            
            # –ï—Å–ª–∏ gRPC —Ç–æ–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω - –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å—é —Ü–µ–ø–æ—á–∫—É
            if self.grpc_completed:
                await self._complete_processing_chain()
            else:
                logger.info("üîä ProcessingWorkflow: –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è gRPC...")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ playback.completed - {e}")
    
    async def _on_playback_failed(self, event):
        """–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if not self._is_relevant_event(event):
            return
            
        try:
            data = event.get("data", {})
            error = data.get("error", "unknown")
            
            logger.error(f"üîä ProcessingWorkflow: –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è - {error}")
            
            self.playback_completed = False
            await self._handle_error(f"playback_error_{error}")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ playback.failed - {e}")
    
    # === –ü–†–ï–†–´–í–ê–ù–ò–Ø ===
    
    async def _on_interrupt_request(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        if not self.is_active() or self.interrupted:
            return
            
        try:
            data = event.get("data", {})
            reason = data.get("reason", "user_interrupt")
            
            logger.info(f"‚öôÔ∏è ProcessingWorkflow: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ü–†–ï–†–´–í–ê–ù–ò–Ø, reason={reason}, stage={self.current_stage.value}")
            
            self.interrupted = True
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã
            await self._cancel_timeout_tasks()
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await self._cancel_active_processes()
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING
            await self._return_to_sleeping("interrupted")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - {e}")
    
    async def _cancel_active_processes(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ –ï–î–ò–ù–´–ô –∫–∞–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        try:
            session_id = self.current_session_id
            
            # –û—Ç–º–µ–Ω—è–µ–º gRPC –∑–∞–ø—Ä–æ—Å
            if not self.grpc_completed:
                logger.info("‚öôÔ∏è ProcessingWorkflow: –æ—Ç–º–µ–Ω—è–µ–º gRPC –∑–∞–ø—Ä–æ—Å")
                await self.event_bus.publish("grpc.request_cancel", {
                    "session_id": session_id,
                    "reason": "user_interrupt"
                })
            
            # –ï–î–ò–ù–´–ô –∫–∞–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ - –ø—É–±–ª–∏–∫—É–µ–º playback.cancelled
            if not self.playback_completed:
                logger.info("‚öôÔ∏è ProcessingWorkflow: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ï–î–ò–ù–´–ô –∫–∞–Ω–∞–ª")
                await self.event_bus.publish("playback.cancelled", {
                    "session_id": session_id,
                    "reason": "user_interrupt",
                    "source": "processing_workflow"
                })
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - {e}")
    
    # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –¶–ï–ü–û–ß–ö–ò ===
    
    async def _complete_processing_chain(self):
        """–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            duration = (datetime.now() - self.processing_start_time).total_seconds() if self.processing_start_time else 0
            
            logger.info(f"‚úÖ ProcessingWorkflow: —Ü–µ–ø–æ—á–∫–∞ –ó–ê–í–ï–†–®–ï–ù–ê —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f}—Å")
            logger.info(f"üìä ProcessingWorkflow: —Å–∫—Ä–∏–Ω—à–æ—Ç={self.screenshot_captured}, gRPC={self.grpc_completed}, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ={self.playback_completed}")
            
            await self._transition_to_stage(ProcessingStage.COMPLETING)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
            await self._return_to_sleeping("completed")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ - {e}")
    
    async def _handle_error(self, error_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ —Ü–µ–ø–æ—á–∫–µ"""
        try:
            logger.error(f"‚ùå ProcessingWorkflow: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ {error_type} –Ω–∞ —ç—Ç–∞–ø–µ {self.current_stage.value}")
            
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            await self._cancel_timeout_tasks()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
            await self._return_to_sleeping(f"error_{error_type}")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ - {e}")
    
    async def _return_to_sleeping(self, reason: str):
        """–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING"""
        try:
            logger.info(f"‚öôÔ∏è ProcessingWorkflow: –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING, reason={reason}")
            
            await self._publish_mode_request(
                AppMode.SLEEPING, 
                f"processing_{reason}",
                priority=90  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            )
            
            await self._cleanup_processing()
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ SLEEPING - {e}")
    
    async def _cleanup_processing(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã
            await self._cancel_timeout_tasks()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.current_session_id = None
            self.current_stage = ProcessingStage.STARTING
            self.processing_start_time = None
            self.stage_start_time = None
            self.completed_stages.clear()
            self.state = WorkflowState.IDLE
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            self.screenshot_captured = False
            self.grpc_completed = False
            self.playback_completed = False
            self.interrupted = False
            
            logger.debug("‚öôÔ∏è ProcessingWorkflow: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ - {e}")
    
    # === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –¢–ê–ô–ú–ê–£–¢–´ ===
    
    async def _stage_timeout_monitor(self, stage: ProcessingStage):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–∞ —ç—Ç–∞–ø–∞"""
        try:
            await asyncio.sleep(self.stage_timeout)
            
            if self.current_stage == stage and not self.interrupted:
                logger.warning(f"‚è∞ ProcessingWorkflow: —Ç–∞–π–º–∞—É—Ç —ç—Ç–∞–ø–∞ {stage.value} ({self.stage_timeout}—Å)")
                await self._handle_error(f"stage_timeout_{stage.value}")
                
        except asyncio.CancelledError:
            logger.debug(f"‚öôÔ∏è ProcessingWorkflow: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ç–∞–ø–∞ {stage.value} –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç—Ç–∞–ø–∞ - {e}")
    
    async def _total_timeout_monitor(self, session_id: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—â–µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞"""
        try:
            await asyncio.sleep(self.total_timeout)
            
            if self.current_session_id == session_id and not self.interrupted:
                logger.warning(f"‚è∞ ProcessingWorkflow: –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç ({self.total_timeout}—Å)")
                await self._handle_error("total_timeout")
                
        except asyncio.CancelledError:
            logger.debug(f"‚öôÔ∏è ProcessingWorkflow: –æ–±—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå ProcessingWorkflow: –æ—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - {e}")
    
    async def _cancel_timeout_tasks(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        if self.stage_timeout_task and not self.stage_timeout_task.done():
            self.stage_timeout_task.cancel()
            
        if self.total_timeout_task and not self.total_timeout_task.done():
            self.total_timeout_task.cancel()
    
    # === –£–¢–ò–õ–ò–¢–´ ===
    
    def _is_relevant_event(self, event) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è"""
        if not self.is_active():
            return False
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ—Å—Å–∏–∏
        data = event.get("data", {})
        event_session = data.get("session_id")
        
        if self.current_session_id and event_session:
            return event_session == self.current_session_id
            
        return True
    
    def get_processing_duration(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.processing_start_time:
            return (datetime.now() - self.processing_start_time).total_seconds()
        return None
    
    def get_stage_duration(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        if self.stage_start_time:
            return (datetime.now() - self.stage_start_time).total_seconds()
        return None
    
    def get_status(self) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å workflow'–∞"""
        base_status = super().get_status()
        base_status.update({
            "current_stage": self.current_stage.value,
            "processing_duration": self.get_processing_duration(),
            "stage_duration": self.get_stage_duration(),
            "completed_stages": [stage.value for stage in self.completed_stages],
            "screenshot_captured": self.screenshot_captured,
            "grpc_completed": self.grpc_completed,
            "playback_completed": self.playback_completed,
            "interrupted": self.interrupted
        })
        return base_status
