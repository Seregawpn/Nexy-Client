"""
ApplicationStateManager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import logging
from typing import Dict, Any, Optional
import threading

"""
NOTE: AppMode is imported from the centralized mode_management module to avoid
duplication and desynchronization. This keeps a single source of truth for
application modes across all integrations.
"""
try:
    # Preferred: top-level import (packaged or PYTHONPATH includes modules)
    from mode_management import AppMode  # type: ignore
except Exception:
    try:
        # Fallback: explicit modules path if repository layout is used
        from modules.mode_management import AppMode  # type: ignore
    except Exception:
        # Last-resort minimal inline enum to not break local tools; values match
        # the centralized one. Should not be used in production.
        from enum import Enum
        class AppMode(Enum):
            SLEEPING = "sleeping"
            LISTENING = "listening"
            PROCESSING = "processing"

logger = logging.getLogger(__name__)

class ApplicationStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.current_mode = AppMode.SLEEPING
        self.previous_mode = None
        self.mode_history = []
        self.state_data = {}
        # EventBus (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω). –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º.
        self._event_bus = None
        self._loop = None  # –æ—Å–Ω–æ–≤–Ω–æ–π asyncio loop, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏—è

    def attach_event_bus(self, event_bus):
        """–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å EventBus –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        self._event_bus = event_bus
        try:
            import asyncio
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π running loop –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            self._loop = asyncio.get_running_loop()
            logger.debug(f"StateManager: attached EventBus with loop={id(self._loop)} running={self._loop.is_running() if self._loop else False}")
        except Exception:
            self._loop = None
        
    def set_mode(self, mode: AppMode):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if self.current_mode != mode:
                self.previous_mode = self.current_mode
                self.current_mode = mode
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.mode_history.append({
                    "mode": mode,
                    "previous_mode": self.previous_mode,
                    "timestamp": self._get_timestamp()
                })
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                if len(self.mode_history) > 100:
                    self.mode_history.pop(0)
                
                logger.info(f"üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {self.previous_mode.value} ‚Üí {mode.value}")

                # üéØ TRAY DEBUG: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ª–æ–≥ –ü–ï–†–ï–î –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
                logger.info(f"üéØ TRAY DEBUG: set_mode() –≥–æ—Ç–æ–≤ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å app.mode_changed: {mode}")
                logger.info(f"üéØ TRAY DEBUG: EventBus –ø–æ–¥–∫–ª—é—á–µ–Ω: {self._event_bus is not None}")

                # –ü—É–±–ª–∏–∫—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ EventBus –ø–æ–¥–∫–ª—é—á–µ–Ω)
                if self._event_bus is not None:
                    try:
                        import asyncio
                        # –í—Å–µ–≥–¥–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ loop, –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –≤ EventBus
                        loop = getattr(self._event_bus, "_loop", None)
                        logger.info(
                            f"üîÑ StateManager: –Ω–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π (EventBus –ø–æ–¥–∫–ª—é—á–µ–Ω, eb_loop={id(loop) if loop else None})"
                        )

                        async def _publish_changes():
                            logger.info(
                                f"üéØ TRAY DEBUG: StateManager –ø—É–±–ª–∏–∫—É–µ—Ç app.mode_changed: {mode} (type: {type(mode)})"
                            )
                            event_data = {"mode": mode}
                            logger.info(f"üéØ TRAY DEBUG: StateManager event_data: {event_data}")
                            await self._event_bus.publish("app.mode_changed", event_data)
                            logger.info("üéØ TRAY DEBUG: StateManager app.mode_changed –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
                            try:
                                subscribers = getattr(self._event_bus, 'subscribers', {}).get("app.mode_changed", [])
                                logger.info(
                                    f"üéØ TRAY DEBUG: StateManager –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ app.mode_changed: {len(subscribers)}"
                                )
                            except Exception:
                                pass
                            logger.info(
                                f"üîÑ StateManager: -> publish app.state_changed: {self.previous_mode} -> {mode}"
                            )
                            await self._event_bus.publish("app.state_changed", {
                                "old_mode": self.previous_mode,
                                "new_mode": mode
                            })

                        # –ï—Å–ª–∏ —É EventBus –µ—Å—Ç—å –∂–∏–≤–æ–π loop ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –Ω—ë–º
                        if loop is not None and getattr(loop, 'is_running', lambda: False)():
                            logger.info("üîÑ StateManager: –ø—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ run_coroutine_threadsafe –Ω–∞ loop EventBus (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)")
                            # –ù–µ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É UI-—Å–∏–≥–Ω–∞–ª–æ–≤
                            asyncio.run_coroutine_threadsafe(_publish_changes(), loop)
                        else:
                            logger.info("üîÑ StateManager: –ø—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ asyncio.run (fallback)")
                            asyncio.run(_publish_changes())
                        logger.info("‚úÖ StateManager: —Å–æ–±—ã—Ç–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        logger.error(f"‚ùå StateManager: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
                        import traceback
                        logger.error(f"‚ùå StateManager: Traceback: {traceback.format_exc()}")
                else:
                    logger.warning(f"‚ö†Ô∏è StateManager: EventBus –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–±—ã—Ç–∏—è –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞: {e}")
    
    def get_current_mode(self) -> AppMode:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º"""
        return self.current_mode
    
    def get_previous_mode(self) -> Optional[AppMode]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º"""
        return self.previous_mode
    
    def set_state_data(self, key: str, value: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            self.state_data[key] = value
            logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {key}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def get_state_data(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return self.state_data.get(key, default)
    
    def get_mode_history(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∂–∏–º–æ–≤"""
        return self.mode_history[-limit:]
    
    def _get_timestamp(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π timestamp"""
        import time
        return time.time()
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return {
            "current_mode": self.current_mode.value,
            "previous_mode": self.previous_mode.value if self.previous_mode else None,
            "mode_history_size": len(self.mode_history),
            "state_data_keys": list(self.state_data.keys())
        }
