#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
server_path = Path(__file__).parent / "server"
sys.path.insert(0, str(server_path))

async def test_edge_tts_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç Edge TTS"""
    print("üó£Ô∏è –¢–ï–°–¢ EDGE TTS")
    print("=" * 30)
    
    test_text = "Hello, this is a test of Edge text to speech."
    
    try:
        import edge_tts
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        import io
        
        print("‚úÖ Edge TTS –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é: '{test_text}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        communicate = edge_tts.Communicate(test_text, "en-US-JennyNeural")
        audio_bytes = b""
        
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        
        timeout_seconds = 10
        try:
            async with asyncio.timeout(timeout_seconds):
                async for chunk in communicate.stream():
                    if chunk["type"] == "audio":
                        audio_bytes += chunk["data"]
        except asyncio.TimeoutError:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç {timeout_seconds}s")
            return False
        except Exception as e:
            print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
            return False
        
        if not audio_bytes:
            print("‚ùå –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(audio_bytes)} –±–∞–π—Ç")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
        try:
            seg = AudioSegment.from_file(io.BytesIO(audio_bytes))
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {seg.frame_rate}Hz, {seg.channels}ch, {len(seg)}ms")
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            if seg.frame_rate != 48000:
                seg = seg.set_frame_rate(48000)
            if seg.channels != 1:
                seg = seg.set_channels(1)
            
            samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
            print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            max_val = np.max(np.abs(samples))
            rms = np.sqrt(np.mean(samples.astype(np.float32) ** 2))
            print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ: max={max_val}, rms={rms:.1f}")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sounddevice...")
            play_data = samples.astype(np.float32) / 32767.0
            sd.play(play_data, samplerate=48000)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            duration = len(samples) / 48000
            await asyncio.sleep(duration + 1.0)
            
            print("‚úÖ Edge TTS —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return False
        
    except ImportError as e:
        print(f"‚ùå Edge TTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Edge TTS: {e}")
        return False

async def test_azure_tts_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç Azure TTS"""
    print("\nüá∫üá∏ –¢–ï–°–¢ AZURE TTS")
    print("=" * 30)
    
    test_text = "Hello, this is a test of Azure text to speech."
    
    try:
        import azure.cognitiveservices.speech as speechsdk
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        import io
        
        print("‚úÖ Azure SDK –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config import Config
            if not Config.SPEECH_KEY or not Config.SPEECH_REGION:
                print("‚ùå Azure –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ server/config.env")
                print("üí° –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫–∏:")
                print("   SPEECH_KEY=–≤–∞—à_–∫–ª—é—á")
                print("   SPEECH_REGION=–≤–∞—à_—Ä–µ–≥–∏–æ–Ω")
                return False
                
            print(f"üîë –ö–ª—é—á: {Config.SPEECH_KEY[:10]}...")
            print(f"üìç –†–µ–≥–∏–æ–Ω: {Config.SPEECH_REGION}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
        
        print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é: '{test_text}'")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Azure
        speech_config = speechsdk.SpeechConfig(
            subscription=Config.SPEECH_KEY,
            region=Config.SPEECH_REGION
        )
        speech_config.speech_synthesis_voice_name = "en-US-JennyNeural"
        speech_config.set_speech_synthesis_output_format(
            speechsdk.SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm
        )
        
        synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config)
        
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Azure...")
        result = synthesizer.speak_text_async(test_text).get()
        
        if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            audio_data = result.audio_data
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
            audio_segment = AudioSegment.from_wav(io.BytesIO(audio_data))
            samples = np.array(audio_segment.get_array_of_samples()).astype(np.int16)
            
            print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            max_val = np.max(np.abs(samples))
            rms = np.sqrt(np.mean(samples.astype(np.float32) ** 2))
            print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ: max={max_val}, rms={rms:.1f}")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sounddevice...")
            play_data = samples.astype(np.float32) / 32767.0
            sd.play(play_data, samplerate=48000)
            
            duration = len(samples) / 48000
            await asyncio.sleep(duration + 1.0)
            
            print("‚úÖ Azure TTS —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            return True
        else:
            print(f"‚ùå Azure TTS –æ—à–∏–±–∫–∞: {result.reason}")
            if result.error_details:
                print(f"   –î–µ—Ç–∞–ª–∏: {result.error_details}")
            return False
            
    except ImportError as e:
        print(f"‚ùå Azure SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install azure-cognitiveservices-speech")
        return False
    except Exception as e:
        print(f"‚ùå Azure TTS –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_macos_say_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç macOS say"""
    print("\nüçé –¢–ï–°–¢ MACOS SAY")
    print("=" * 30)
    
    test_text = "Hello, this is a test of macOS text to speech."
    
    try:
        import subprocess
        import tempfile
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        
        print("‚úÖ macOS say –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é: '{test_text}'")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.aiff', delete=False) as temp_file:
            temp_path = temp_file.name
        
        try:
            print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ macOS say...")
            
            cmd = [
                'say',
                '-v', 'Samantha',
                '-r', '180',  # –°–∫–æ—Ä–æ—Å—Ç—å
                '-o', temp_path,
                test_text
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0 and os.path.exists(temp_path):
                print(f"‚úÖ macOS say —É—Å–ø–µ—à–Ω–æ")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                seg = AudioSegment.from_file(temp_path)
                print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {seg.frame_rate}Hz, {seg.channels}ch, {len(seg)}ms")
                
                seg = seg.set_frame_rate(48000).set_channels(1)
                samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
                
                print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                max_val = np.max(np.abs(samples))
                rms = np.sqrt(np.mean(samples.astype(np.float32) ** 2))
                print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ: max={max_val}, rms={rms:.1f}")
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
                play_data = samples.astype(np.float32) / 32767.0
                sd.play(play_data, samplerate=48000)
                
                duration = len(samples) / 48000
                await asyncio.sleep(duration + 1.0)
                
                print("‚úÖ macOS say —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
                return True
            else:
                print(f"‚ùå macOS say –æ—à–∏–±–∫–∞: {result.stderr}")
                return False
                
        finally:
            try:
                os.unlink(temp_path)
            except:
                pass
                
    except subprocess.TimeoutExpired:
        print("‚è∞ macOS say —Ç–∞–π–º–∞—É—Ç")
        return False
    except Exception as e:
        print(f"‚ùå macOS say –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_current_fallback():
    """–¢–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ fallback"""
    print("\nüéõÔ∏è –¢–ï–°–¢ –¢–ï–ö–£–©–ï–ì–û FALLBACK (–ü–†–û–ë–õ–ï–ú–ù–´–ô)")
    print("=" * 30)
    
    test_text = "This should be speech but will be a tone."
    
    try:
        import sounddevice as sd
        import numpy as np
        
        print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é sine-wave –¥–ª—è: '{test_text}'")
        
        # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –º–µ—Ç–æ–¥
        sr = 48000
        duration_sec = min(3.5, max(0.6, 0.05 * len(test_text.strip())))
        t = np.linspace(0, duration_sec, int(sr * duration_sec), endpoint=False, dtype=np.float32)
        freq = 440.0
        envelope = np.minimum(1.0, np.linspace(0, 1.0, int(0.1 * sr)))
        envelope = np.pad(envelope, (0, len(t) - len(envelope)), constant_values=(0, 1.0))
        wave = 0.2 * np.sin(2 * np.pi * freq * t) * envelope
        audio = np.asarray(wave * 32767, dtype=np.int16)
        
        print(f"üéµ Sine-wave: {len(audio)} —Å—ç–º–ø–ª–æ–≤, {duration_sec:.1f}s")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ù–ï —Ä–µ—á—å, –∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–æ–Ω 440Hz!")
        print("‚ö†Ô∏è –ò–º–µ–Ω–Ω–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–≥–¥–∞ TTS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
        print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ fallback...")
        play_data = audio.astype(np.float32) / 32767.0
        sd.play(play_data, samplerate=48000)
        
        await asyncio.sleep(duration_sec + 1.0)
        
        print("‚ùå –í–æ—Ç –ø–æ—á–µ–º—É –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö —à—É–º –≤–º–µ—Å—Ç–æ —Ä–µ—á–∏!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback —Ç–µ—Å—Ç–∞: {e}")
        return False

async def main():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤"""
    print("üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –í–°–ï–• TTS –ú–ï–¢–û–î–û–í")
    print("=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É: 'Hello, this is a test of text to speech.'")
    print("=" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç 1: Edge TTS
    try:
        success = await test_edge_tts_auto()
        results['Edge TTS'] = success
    except Exception as e:
        print(f"‚ùå Edge TTS –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        results['Edge TTS'] = False
    
    # –¢–µ—Å—Ç 2: Azure TTS
    try:
        success = await test_azure_tts_auto()
        results['Azure TTS'] = success
    except Exception as e:
        print(f"‚ùå Azure TTS –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        results['Azure TTS'] = False
    
    # –¢–µ—Å—Ç 3: macOS say
    try:
        success = await test_macos_say_auto()
        results['macOS say'] = success
    except Exception as e:
        print(f"‚ùå macOS say –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        results['macOS say'] = False
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π fallback
    try:
        await test_current_fallback()
        results['Sine Fallback'] = True
    except Exception as e:
        print(f"‚ùå Fallback –æ—à–∏–±–∫–∞: {e}")
        results['Sine Fallback'] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 40)
    
    working_methods = []
    for method, success in results.items():
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if success else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"üé§ {method:<15} {status}")
        if success and method != 'Sine Fallback':
            working_methods.append(method)
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if working_methods:
        print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ TTS: {', '.join(working_methods)}")
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {working_methods[0]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        if 'Azure TTS' in working_methods:
            print(f"\nüîß –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Azure TTS:")
            print(f"   1. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ SPEECH_KEY –∏ SPEECH_REGION –≤ server/config.env")
            print(f"   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
        elif 'Edge TTS' in working_methods:
            print(f"\nüîß –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Edge TTS:")
            print(f"   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: USE_EDGE_TTS=true –≤ server/config.env")
            print(f"   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
        elif 'macOS say' in working_methods:
            print(f"\nüîß –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è macOS say:")
            print(f"   1. –ù—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ audio_generator.py")
            print(f"   2. –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    else:
        print(f"‚ùå –ù–∏ –æ–¥–∏–Ω TTS –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π")
    
    if results.get('Sine Fallback'):
        print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° –®–£–ú–û–ú:")
        print(f"   Sine-wave fallback —Å–æ–∑–¥–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–æ–Ω –≤–º–µ—Å—Ç–æ —Ä–µ—á–∏")
        print(f"   –ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö —Å–ª—ã—à–µ–Ω —à—É–º!")

async def test_edge_tts_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç Edge TTS"""
    print("üó£Ô∏è –¢–ï–°–¢ EDGE TTS")
    print("=" * 30)
    
    test_text = "Hello, this is a test of Edge text to speech."
    
    try:
        import edge_tts
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        import io
        
        print("‚úÖ Edge TTS –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é: '{test_text}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        communicate = edge_tts.Communicate(test_text, "en-US-JennyNeural")
        audio_bytes = b""
        
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        
        timeout_seconds = 10
        try:
            async with asyncio.timeout(timeout_seconds):
                async for chunk in communicate.stream():
                    if chunk["type"] == "audio":
                        audio_bytes += chunk["data"]
        except asyncio.TimeoutError:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç {timeout_seconds}s")
            return False
        except Exception as e:
            print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
            return False
        
        if not audio_bytes:
            print("‚ùå –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(audio_bytes)} –±–∞–π—Ç")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
        try:
            seg = AudioSegment.from_file(io.BytesIO(audio_bytes))
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {seg.frame_rate}Hz, {seg.channels}ch, {len(seg)}ms")
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            if seg.frame_rate != 48000:
                seg = seg.set_frame_rate(48000)
            if seg.channels != 1:
                seg = seg.set_channels(1)
            
            samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
            print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            max_val = np.max(np.abs(samples))
            rms = np.sqrt(np.mean(samples.astype(np.float32) ** 2))
            print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ: max={max_val}, rms={rms:.1f}")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sounddevice...")
            play_data = samples.astype(np.float32) / 32767.0
            sd.play(play_data, samplerate=48000)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            duration = len(samples) / 48000
            await asyncio.sleep(duration + 1.0)
            
            print("‚úÖ Edge TTS —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return False
        
    except ImportError as e:
        print(f"‚ùå Edge TTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Edge TTS: {e}")
        return False

async def test_azure_tts_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç Azure TTS"""
    print("\nüá∫üá∏ –¢–ï–°–¢ AZURE TTS")
    print("=" * 30)
    
    test_text = "Hello, this is a test of Azure text to speech."
    
    try:
        import azure.cognitiveservices.speech as speechsdk
        from pydub import AudioSegment
        import sounddevice as sd
        import numpy as np
        import io
        
        print("‚úÖ Azure SDK –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config import Config
            if not Config.SPEECH_KEY or not Config.SPEECH_REGION:
                print("‚ùå Azure –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ server/config.env")
                print("üí° –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫–∏:")
                print("   SPEECH_KEY=–≤–∞—à_–∫–ª—é—á")
                print("   SPEECH_REGION=–≤–∞—à_—Ä–µ–≥–∏–æ–Ω")
                return False
                
            print(f"üîë –ö–ª—é—á: {Config.SPEECH_KEY[:10]}...")
            print(f"üìç –†–µ–≥–∏–æ–Ω: {Config.SPEECH_REGION}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
        
        print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é: '{test_text}'")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Azure
        speech_config = speechsdk.SpeechConfig(
            subscription=Config.SPEECH_KEY,
            region=Config.SPEECH_REGION
        )
        speech_config.speech_synthesis_voice_name = "en-US-JennyNeural"
        speech_config.set_speech_synthesis_output_format(
            speechsdk.SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm
        )
        
        synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config)
        
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Azure...")
        result = synthesizer.speak_text_async(test_text).get()
        
        if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            audio_data = result.audio_data
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
            audio_segment = AudioSegment.from_wav(io.BytesIO(audio_data))
            samples = np.array(audio_segment.get_array_of_samples()).astype(np.int16)
            
            print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            max_val = np.max(np.abs(samples))
            rms = np.sqrt(np.mean(samples.astype(np.float32) ** 2))
            print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ: max={max_val}, rms={rms:.1f}")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sounddevice...")
            play_data = samples.astype(np.float32) / 32767.0
            sd.play(play_data, samplerate=48000)
            
            duration = len(samples) / 48000
            await asyncio.sleep(duration + 1.0)
            
            print("‚úÖ Azure TTS —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            return True
        else:
            print(f"‚ùå Azure TTS –æ—à–∏–±–∫–∞: {result.reason}")
            if result.error_details:
                print(f"   –î–µ—Ç–∞–ª–∏: {result.error_details}")
            return False
            
    except ImportError as e:
        print(f"‚ùå Azure SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install azure-cognitiveservices-speech")
        return False
    except Exception as e:
        print(f"‚ùå Azure TTS –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
