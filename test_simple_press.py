#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: –Ω–∞–∂–∏–º–∞–µ–º –ø—Ä–æ–±–µ–ª –∏ —Å–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π
"""

import asyncio
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def main():
    print("\n" + "="*60)
    print("–ü–†–û–°–¢–û–ô –¢–ï–°–¢: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞")
    print("="*60)
    print("\n‚ö†Ô∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("1. –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å—Ç–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("2. –ù–∞–∂–º–∏—Ç–µ –∏ –£–î–ï–†–ñ–ò–í–ê–ô–¢–ï –ü–†–û–ë–ï–õ ~2 —Å–µ–∫—É–Ω–¥—ã")
    print("3. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–µ–ª")
    print("4. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π")
    print("\n" + "="*60)

    from integration.core.event_bus import EventBus, EventPriority
    from modules.input_processing.keyboard.types import KeyboardConfig
    from integration.integrations.input_processing_integration import (
        InputProcessingIntegration,
        InputProcessingConfig
    )
    from integration.core.state_manager import ApplicationStateManager
    from integration.core.error_handler import ErrorHandler

    # –°–æ–∑–¥–∞–µ–º EventBus
    bus = EventBus()
    bus.attach_loop(asyncio.get_running_loop())

    # –¢—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π
    events_log = []

    async def log_event(event):
        event_type = event.get("type")
        data = event.get("data", {})
        events_log.append((event_type, data))
        print(f"\nüì® –°–û–ë–´–¢–ò–ï: {event_type}")
        if data:
            for key, value in data.items():
                print(f"   {key}: {value}")

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –í–°–ï –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    await bus.subscribe("keyboard.press", log_event, EventPriority.LOW)
    await bus.subscribe("keyboard.long_press", log_event, EventPriority.LOW)
    await bus.subscribe("keyboard.short_press", log_event, EventPriority.LOW)
    await bus.subscribe("keyboard.release", log_event, EventPriority.LOW)
    await bus.subscribe("voice.recording_start", log_event, EventPriority.LOW)
    await bus.subscribe("voice.recording_stop", log_event, EventPriority.LOW)
    await bus.subscribe("mode.request", log_event, EventPriority.LOW)
    await bus.subscribe("app.mode_changed", log_event, EventPriority.LOW)

    print("‚úÖ EventBus –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã\n")

    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    state_manager = ApplicationStateManager()
    state_manager.attach_event_bus(bus)

    error_handler = ErrorHandler(bus)

    # –°–æ–∑–¥–∞–µ–º InputProcessing
    keyboard_config = KeyboardConfig(
        key_to_monitor="space",
        short_press_threshold=0.6,
        long_press_threshold=2.0
    )

    input_config = InputProcessingConfig(
        keyboard_config=keyboard_config,
        enable_keyboard_monitoring=True,
        auto_start=True
    )

    input_integration = InputProcessingIntegration(
        bus, state_manager, error_handler, input_config
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    await input_integration.initialize()
    await input_integration.start()

    print("\nüéπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω")
    print("‚å®Ô∏è –ù–ê–ñ–ú–ò–¢–ï –ò –£–î–ï–†–ñ–ò–í–ê–ô–¢–ï –ü–†–û–ë–ï–õ ~2 –°–ï–ö–£–ù–î–´, –ó–ê–¢–ï–ú –û–¢–ü–£–°–¢–ò–¢–ï")
    print("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥...")
    print("-" * 60)

    # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await asyncio.sleep(15)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await input_integration.stop()

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
    print("="*60)

    if events_log:
        for i, (event_type, data) in enumerate(events_log, 1):
            print(f"\n{i}. {event_type}")
            if data:
                for key, value in data.items():
                    print(f"   {key}: {value}")
    else:
        print("\n‚ùå –°–û–ë–´–¢–ò–Ø –ù–ï –ü–û–õ–£–ß–ï–ù–´!")

    print("\n" + "="*60)

    # –ê–Ω–∞–ª–∏–∑
    event_types = [e[0] for e in events_log]

    expected_sequence = [
        "keyboard.press",
        "keyboard.long_press",
        "voice.recording_start",
        "mode.request",
        "keyboard.release",
        "voice.recording_stop",
        "mode.request"
    ]

    print("\nüìã –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò:")
    for expected in expected_sequence:
        if expected in event_types:
            print(f"‚úÖ {expected} - –ø–æ–ª—É—á–µ–Ω–æ")
        else:
            print(f"‚ùå {expected} - –ù–ï –ø–æ–ª—É—á–µ–Ω–æ")

    print("\n" + "="*60)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
