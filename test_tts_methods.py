#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Azure TTS, Edge TTS –∏ fallback –º–µ—Ç–æ–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ
"""

import asyncio
import logging
import sys
import os
import tempfile
import time
from pathlib import Path
from typing import Optional, Dict, Any
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –º–æ–¥—É–ª—è–º
server_path = Path(__file__).parent / "server"
sys.path.insert(0, str(server_path))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TTSTestSuite:
    """–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –≤—Å–µ—Ö TTS –º–µ—Ç–æ–¥–æ–≤"""
    
    def __init__(self):
        self.test_phrases = [
            "Hello, this is a test of text to speech.",
            "How are you doing today?", 
            "The weather is nice outside.",
            "Testing audio quality and clarity.",
            "This is a longer sentence to test the quality of speech synthesis with multiple words and phrases."
        ]
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        self.results = {}
        
    async def test_all_methods(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã TTS"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TTS –ú–ï–¢–û–î–û–í")
        print("=" * 60)
        
        methods = [
            ("Azure TTS", self.test_azure_tts),
            ("Edge TTS", self.test_edge_tts),
            ("macOS Say", self.test_macos_say),
            ("Sine Fallback", self.test_sine_fallback)
        ]
        
        for method_name, test_func in methods:
            print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {method_name}")
            print("-" * 40)
            
            try:
                success = await test_func()
                self.results[method_name] = {
                    'success': success,
                    'status': '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'
                }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {method_name}: {e}")
                self.results[method_name] = {
                    'success': False,
                    'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}',
                    'error': str(e)
                }
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._print_final_report()
    
    async def test_azure_tts(self) -> bool:
        """–¢–µ—Å—Ç Azure Speech Services"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Azure SDK
            try:
                import azure.cognitiveservices.speech as speechsdk
                from config import Config
                
                if not Config.SPEECH_KEY or not Config.SPEECH_REGION:
                    print("‚ö†Ô∏è Azure –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ config.env")
                    return False
                    
                print(f"‚úÖ Azure SDK –¥–æ—Å—Ç—É–ø–µ–Ω")
                print(f"üìç –†–µ–≥–∏–æ–Ω: {Config.SPEECH_REGION}")
                print(f"üîë –ö–ª—é—á: {Config.SPEECH_KEY[:10]}...")
                
            except ImportError:
                print("‚ùå Azure SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            speech_config = speechsdk.SpeechConfig(
                subscription=Config.SPEECH_KEY,
                region=Config.SPEECH_REGION
            )
            speech_config.speech_synthesis_voice_name = "en-US-JennyNeural"
            speech_config.set_speech_synthesis_output_format(
                speechsdk.SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm
            )
            
            synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config)
            
            test_text = self.test_phrases[0]
            print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é: '{test_text}'")
            
            result = synthesizer.speak_text_async(test_text).get()
            
            if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
                audio_data = result.audio_data
                print(f"‚úÖ Azure TTS —É—Å–ø–µ—à–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                audio_segment = AudioSegment.from_wav(io.BytesIO(audio_data))
                samples = np.array(audio_segment.get_array_of_samples()).astype(np.int16)
                
                print(f"üéµ –ê—É–¥–∏–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {audio_segment.frame_rate}Hz, {audio_segment.channels}ch")
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await self._play_audio_samples(samples, "Azure TTS")
                return True
                
            else:
                print(f"‚ùå Azure TTS –æ—à–∏–±–∫–∞: {result.reason}")
                if result.error_details:
                    print(f"   –î–µ—Ç–∞–ª–∏: {result.error_details}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Azure TTS: {e}")
            return False
    
    async def test_edge_tts(self) -> bool:
        """–¢–µ—Å—Ç Edge TTS"""
        try:
            import edge_tts
            from pydub import AudioSegment
            import io
            
            print(f"‚úÖ Edge TTS –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            test_text = self.test_phrases[0]
            print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é: '{test_text}'")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞
            voices_to_test = [
                "en-US-JennyNeural",
                "en-US-AriaNeural", 
                "en-US-GuyNeural"
            ]
            
            for voice in voices_to_test:
                print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å: {voice}")
                
                try:
                    communicate = edge_tts.Communicate(test_text, voice)
                    audio_bytes = b""
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    timeout_seconds = 10
                    
                    async with asyncio.timeout(timeout_seconds):
                        async for chunk in communicate.stream():
                            if chunk["type"] == "audio":
                                audio_bytes += chunk["data"]
                    
                    if audio_bytes:
                        print(f"‚úÖ Edge TTS ({voice}): {len(audio_bytes)} –±–∞–π—Ç")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
                        try:
                            seg = AudioSegment.from_file(io.BytesIO(audio_bytes))
                            if seg.frame_rate != 48000:
                                seg = seg.set_frame_rate(48000)
                            if seg.channels != 1:
                                seg = seg.set_channels(1)
                            
                            samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
                            print(f"üéµ –ê—É–¥–∏–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {seg.frame_rate}Hz, {seg.channels}ch")
                            
                            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            await self._play_audio_samples(samples, f"Edge TTS ({voice})")
                            return True
                            
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Edge TTS: {e}")
                            continue
                    else:
                        print(f"‚ùå Edge TTS ({voice}): –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        
                except asyncio.TimeoutError:
                    print(f"‚è∞ Edge TTS ({voice}): —Ç–∞–π–º–∞—É—Ç {timeout_seconds}s")
                    continue
                except Exception as e:
                    print(f"‚ùå Edge TTS ({voice}) –æ—à–∏–±–∫–∞: {e}")
                    continue
            
            return False
            
        except ImportError:
            print("‚ùå Edge TTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Edge TTS: {e}")
            return False
    
    async def test_macos_say(self) -> bool:
        """–¢–µ—Å—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ macOS say command"""
        try:
            import subprocess
            
            test_text = self.test_phrases[0]
            print(f"üó£Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ macOS say: '{test_text}'")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.aiff', delete=False) as temp_file:
                temp_path = temp_file.name
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ say
                cmd = [
                    'say', 
                    '-v', 'Samantha',  # –ì–æ–ª–æ—Å
                    '-r', '200',       # –°–∫–æ—Ä–æ—Å—Ç—å (—Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
                    '-o', temp_path,   # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                    test_text
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0 and os.path.exists(temp_path):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    from pydub import AudioSegment
                    
                    seg = AudioSegment.from_file(temp_path)
                    print(f"‚úÖ macOS say: {len(seg)}ms, {seg.frame_rate}Hz, {seg.channels}ch")
                    
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    if seg.frame_rate != 48000:
                        seg = seg.set_frame_rate(48000)
                    if seg.channels != 1:
                        seg = seg.set_channels(1)
                    
                    samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
                    print(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤")
                    
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await self._play_audio_samples(samples, "macOS say")
                    
                    return True
                else:
                    print(f"‚ùå macOS say –æ—à–∏–±–∫–∞: {result.stderr}")
                    return False
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_path)
                except:
                    pass
                    
        except subprocess.TimeoutExpired:
            print("‚è∞ macOS say: —Ç–∞–π–º–∞—É—Ç")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ macOS say: {e}")
            return False
    
    async def test_sine_fallback(self) -> bool:
        """–¢–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ sine-wave fallback"""
        try:
            test_text = self.test_phrases[0]
            print(f"üéõÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é sine-wave –¥–ª—è: '{test_text}'")
            
            # –¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π)
            sr = 48000
            duration_sec = min(3.5, max(0.6, 0.05 * len(test_text.strip())))
            t = np.linspace(0, duration_sec, int(sr * duration_sec), endpoint=False, dtype=np.float32)
            freq = 440.0
            envelope = np.minimum(1.0, np.linspace(0, 1.0, int(0.1 * sr)))
            envelope = np.pad(envelope, (0, len(t) - len(envelope)), constant_values=(0, 1.0))
            wave = 0.2 * np.sin(2 * np.pi * freq * t) * envelope
            audio = np.asarray(wave * 32767, dtype=np.int16)
            
            print(f"üéµ Sine-wave: {len(audio)} —Å—ç–º–ø–ª–æ–≤, {duration_sec:.1f}s")
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ù–ï —Ä–µ—á—å, –∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–æ–Ω!")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
            await self._play_audio_samples(audio, "Sine Fallback (–ü–†–û–ë–õ–ï–ú–ù–´–ô)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ sine fallback: {e}")
            return False
    
    async def _play_audio_samples(self, samples: np.ndarray, method_name: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ —Å—ç–º–ø–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            import sounddevice as sd
            
            print(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {method_name}...")
            print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(samples) / 48000:.1f}s")
            print(f"   –°—ç–º–ø–ª–æ–≤: {len(samples)}")
            print(f"   –§–æ—Ä–º–∞—Ç: {samples.dtype}")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if samples.dtype == np.int16:
                play_data = samples.astype(np.float32) / 32767.0
            else:
                play_data = samples
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            sd.play(play_data, samplerate=48000, channels=1)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            duration = len(samples) / 48000
            await asyncio.sleep(duration + 0.5)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"‚ùì –ö–∞—á–µ—Å—Ç–≤–æ {method_name}: [1-5] –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è {method_name}: {e}")
    
    def _print_final_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TTS")
        print("=" * 60)
        
        for method, result in self.results.items():
            status = result['status']
            print(f"üé§ {method:<20} {status}")
            if 'error' in result:
                print(f"   –û—à–∏–±–∫–∞: {result['error']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        working_methods = [name for name, result in self.results.items() if result['success']]
        
        if working_methods:
            print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã: {', '.join(working_methods)}")
            print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {working_methods[0]}")
        else:
            print(f"‚ùå –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

class AzureTTSTester:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Azure TTS"""
    
    def __init__(self):
        self.voices = [
            "en-US-JennyNeural",
            "en-US-AriaNeural", 
            "en-US-GuyNeural",
            "en-US-DavisNeural",
            "en-US-AmberNeural"
        ]
    
    async def test_azure_comprehensive(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Azure TTS"""
        print("üá∫üá∏ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AZURE TTS")
        print("=" * 50)
        
        try:
            import azure.cognitiveservices.speech as speechsdk
            from config import Config
            
            if not Config.SPEECH_KEY or not Config.SPEECH_REGION:
                print("‚ùå Azure –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ server/config.env:")
                print("   SPEECH_KEY=–≤–∞—à_–∫–ª—é—á")
                print("   SPEECH_REGION=–≤–∞—à_—Ä–µ–≥–∏–æ–Ω")
                return False
            
            print(f"üîë –ö–ª—é—á: {Config.SPEECH_KEY[:10]}...")
            print(f"üìç –†–µ–≥–∏–æ–Ω: {Config.SPEECH_REGION}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≥–æ–ª–æ—Å
            for voice in self.voices:
                print(f"\nüé§ –¢–µ—Å—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å: {voice}")
                
                try:
                    speech_config = speechsdk.SpeechConfig(
                        subscription=Config.SPEECH_KEY,
                        region=Config.SPEECH_REGION
                    )
                    speech_config.speech_synthesis_voice_name = voice
                    speech_config.set_speech_synthesis_output_format(
                        speechsdk.SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm
                    )
                    
                    synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config)
                    
                    test_text = "Hello, this is a test of Azure text to speech."
                    result = synthesizer.speak_text_async(test_text).get()
                    
                    if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
                        audio_data = result.audio_data
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                        from pydub import AudioSegment
                        audio_segment = AudioSegment.from_wav(io.BytesIO(audio_data))
                        samples = np.array(audio_segment.get_array_of_samples()).astype(np.int16)
                        
                        import sounddevice as sd
                        play_data = samples.astype(np.float32) / 32767.0
                        sd.play(play_data, samplerate=48000)
                        await asyncio.sleep(len(samples) / 48000 + 0.5)
                        
                        print(f"   üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤")
                        
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.reason}")
                        if result.error_details:
                            print(f"   –î–µ—Ç–∞–ª–∏: {result.error_details}")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–∞ {voice}: {e}")
                    continue
            
            return True
            
        except ImportError as e:
            print(f"‚ùå –ò–º–ø–æ—Ä—Ç –æ—à–∏–±–∫–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Azure: {e}")
            return False

class EdgeTTSTester:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Edge TTS"""
    
    async def test_edge_comprehensive(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Edge TTS"""
        print("üó£Ô∏è –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EDGE TTS")
        print("=" * 50)
        
        try:
            import edge_tts
            
            print("‚úÖ Edge TTS –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
            try:
                voices = await edge_tts.list_voices()
                en_voices = [v for v in voices if v['Locale'].startswith('en-US')][:5]
                print(f"üé§ –ù–∞–π–¥–µ–Ω–æ {len(en_voices)} –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤")
                
                for voice in en_voices:
                    name = voice['ShortName']
                    gender = voice['Gender']
                    print(f"   {name} ({gender})")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤: {e}")
                en_voices = [{'ShortName': 'en-US-JennyNeural'}]
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            test_text = "Hello, this is a comprehensive test of Edge text to speech."
            
            for voice_info in en_voices[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥–æ–ª–æ—Å–∞
                voice_name = voice_info['ShortName']
                print(f"\nüé§ –¢–µ—Å—Ç–∏—Ä—É—é: {voice_name}")
                
                try:
                    communicate = edge_tts.Communicate(test_text, voice_name)
                    audio_bytes = b""
                    
                    timeout_seconds = 15
                    start_time = time.time()
                    
                    async with asyncio.timeout(timeout_seconds):
                        async for chunk in communicate.stream():
                            if chunk["type"] == "audio":
                                audio_bytes += chunk["data"]
                    
                    generation_time = time.time() - start_time
                    
                    if audio_bytes:
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(audio_bytes)} –±–∞–π—Ç –∑–∞ {generation_time:.1f}s")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
                        from pydub import AudioSegment
                        import io
                        
                        seg = AudioSegment.from_file(io.BytesIO(audio_bytes))
                        if seg.frame_rate != 48000:
                            seg = seg.set_frame_rate(48000)
                        if seg.channels != 1:
                            seg = seg.set_channels(1)
                        
                        samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
                        print(f"   üéµ –ê—É–¥–∏–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/48000:.1f}s")
                        
                        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                        import sounddevice as sd
                        play_data = samples.astype(np.float32) / 32767.0
                        sd.play(play_data, samplerate=48000)
                        await asyncio.sleep(len(samples) / 48000 + 0.5)
                        
                        print(f"   üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ")
                        return True
                        
                    else:
                        print(f"   ‚ùå –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
                        
                except asyncio.TimeoutError:
                    print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç {timeout_seconds}s")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                    continue
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Edge TTS: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ TTS –¢–ï–°–¢–û–í–´–ô –ú–û–î–£–õ–¨")
    print("=" * 60)
    print("–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏")
    print("–∏ –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã.")
    print("=" * 60)
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤")
    print("2. –¢–æ–ª—å–∫–æ Azure TTS")
    print("3. –¢–æ–ª—å–∫–æ Edge TTS") 
    print("4. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
    print("5. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
    
    if choice == "1":
        tester = TTSTestSuite()
        await tester.test_all_methods()
    elif choice == "2":
        tester = AzureTTSTester()
        await tester.test_azure_comprehensive()
    elif choice == "3":
        tester = EdgeTTSTester()
        await tester.test_edge_comprehensive()
    elif choice == "4":
        await quick_test()
    elif choice == "5":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    print("\n‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢")
    print("-" * 30)
    
    text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ").strip()
    if not text:
        text = "Hello, this is a quick test."
    
    print(f"üó£Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é: '{text}'")
    
    # –ü—Ä–æ–±—É–µ–º Edge TTS
    try:
        import edge_tts
        from pydub import AudioSegment
        import sounddevice as sd
        import io
        
        communicate = edge_tts.Communicate(text, "en-US-JennyNeural")
        audio_bytes = b""
        
        async for chunk in communicate.stream():
            if chunk["type"] == "audio":
                audio_bytes += chunk["data"]
        
        if audio_bytes:
            seg = AudioSegment.from_file(io.BytesIO(audio_bytes))
            seg = seg.set_frame_rate(48000).set_channels(1)
            samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
            
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤")
            print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
            
            play_data = samples.astype(np.float32) / 32767.0
            sd.play(play_data, samplerate=48000)
            await asyncio.sleep(len(samples) / 48000 + 0.5)
            
            print("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
