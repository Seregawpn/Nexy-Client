#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç Audio Device Manager –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
"""

import asyncio
import time
import signal
import sys
from typing import Optional, List
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
try:
    from audio_device_manager import (
        AudioDeviceManager, 
        AudioDevice, 
        DeviceType, 
        DeviceStatus,
        DeviceChange,
        DevicePriority
    )
    print("‚úÖ –ú–æ–¥—É–ª—å audio_device_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class LiveInteractiveTester:
    def __init__(self):
        self.manager: Optional[AudioDeviceManager] = None
        self.running = False
        self.device_changes = []
        self.last_devices: List[AudioDevice] = []
        self.start_time = None
        
    async def setup_manager(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AudioDeviceManager...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.manager = AudioDeviceManager()
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
            if not hasattr(self.manager.config, 'auto_switch_enabled'):
                from audio_device_manager.core.types import AudioDeviceManagerConfig
                self.manager.config = AudioDeviceManagerConfig(auto_switch_enabled=True)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏
            self.manager.set_device_changed_callback(self.on_device_changed)
            self.manager.set_device_switched_callback(self.on_device_switched)
            
            print("‚úÖ AudioDeviceManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False
    
    def on_device_changed(self, change: DeviceChange):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for device in change.added:
            event_type = "–ü–û–î–ö–õ–Æ–ß–ï–ù–û"
            device_type_icon = "üéß" if device.channels == 2 else "üîä"
            if device.type.value == "input":
                device_type_icon = "üé§"
            
            print(f"\n{'='*60}")
            print(f"üîî [{timestamp}] –£–°–¢–†–û–ô–°–¢–í–û {event_type}!")
            print(f"{device_type_icon} {device.name}")
            print(f"   –¢–∏–ø: {device.type.value}")
            print(f"   –ö–∞–Ω–∞–ª—ã: {device.channels} ({'–Ω–∞—É—à–Ω–∏–∫–∏' if device.channels == 2 else '–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ'})")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value}")
            print(f"   –°—Ç–∞—Ç—É—Å: {device.status.value}")
            print(f"{'='*60}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.device_changes.append({
                'timestamp': timestamp,
                'device_name': device.name,
                'event_type': event_type,
                'device_type': device.type.value,
                'channels': device.channels,
                'is_connected': True
            })
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
            if device.channels == 2 and device.type.value == "output":
                print(f"üéß –ù–ê–£–®–ù–ò–ö–ò '{device.name}' –ü–û–î–ö–õ–Æ–ß–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for device in change.removed:
            event_type = "–û–¢–ö–õ–Æ–ß–ï–ù–û"
            device_type_icon = "üéß" if device.channels == 2 else "üîä"
            if device.type.value == "input":
                device_type_icon = "üé§"
            
            print(f"\n{'='*60}")
            print(f"üîî [{timestamp}] –£–°–¢–†–û–ô–°–¢–í–û {event_type}!")
            print(f"{device_type_icon} {device.name}")
            print(f"   –¢–∏–ø: {device.type.value}")
            print(f"   –ö–∞–Ω–∞–ª—ã: {device.channels} ({'–Ω–∞—É—à–Ω–∏–∫–∏' if device.channels == 2 else '–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ'})")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value}")
            print(f"   –°—Ç–∞—Ç—É—Å: {device.status.value}")
            print(f"{'='*60}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.device_changes.append({
                'timestamp': timestamp,
                'device_name': device.name,
                'event_type': event_type,
                'device_type': device.type.value,
                'channels': device.channels,
                'is_connected': False
            })
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
            if device.channels == 2 and device.type.value == "output":
                print(f"üéß –ù–ê–£–®–ù–ò–ö–ò '{device.name}' –û–¢–ö–õ–Æ–ß–ï–ù–´! –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏.")
    
    def on_device_switched(self, from_device: AudioDevice, to_device: AudioDevice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        
        print(f"\nüîÑ [{timestamp}] –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print(f"   –°: {from_device.name if from_device else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print(f"   –ù–∞: {to_device.name}")
        print(f"   –ö–∞–Ω–∞–ª—ã: {to_device.channels} ({'–Ω–∞—É—à–Ω–∏–∫–∏' if to_device.channels == 2 else '–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ'})")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {to_device.priority.value}")
        
        self.device_changes.append({
            'timestamp': timestamp,
            'action': 'device_switched',
            'from_device': from_device.name if from_device else 'Unknown',
            'to_device': to_device.name,
            'channels': to_device.channels
        })
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.manager.start()
            self.running = True
            self.start_time = time.time()
            
            print("‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            print("\n" + "="*70)
            print("üéß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢ –ù–ê–£–®–ù–ò–ö–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
            print("="*70)
            print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
            print("   1. üéß –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏ (Bluetooth –∏–ª–∏ –ø—Ä–æ–≤–æ–¥–Ω—ã–µ)")
            print("   2. üéß –û—Ç–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏")
            print("   3. üéß –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–Ω–æ–≤–∞")
            print("   4. üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            print("   5. ‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("="*70)
            print("‚ö° –°–ò–°–¢–ï–ú–ê –ë–£–î–ï–¢ –ú–ì–ù–û–í–ï–ù–ù–û –û–ë–ù–ê–†–£–ñ–ò–í–ê–¢–¨ –ò–ó–ú–ï–ù–ï–ù–ò–Ø!")
            print("="*70)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    async def show_current_devices(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            devices = await self.manager.get_available_devices()
            self.last_devices = devices
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            current_device = await self.manager.get_current_device()
            
            print(f"\nüì± –¢–ï–ö–£–©–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê ({len(devices)}):")
            print("-" * 60)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            if current_device:
                print(f"üéØ –ê–ö–¢–ò–í–ù–û–ï –£–°–¢–†–û–ô–°–¢–í–û:")
                channels_icon = "üéß" if current_device.channels == 2 else "üîä"
                if current_device.type.value == "input":
                    channels_icon = "üé§"
                print(f"   ‚≠ê {channels_icon} {current_device.name}")
                print(f"      –¢–∏–ø: {current_device.type.value} | –ö–∞–Ω–∞–ª—ã: {current_device.channels} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {current_device.priority.value}")
                print("-" * 60)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            print("üìã –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê:")
            for device in devices:
                status_icon = "üü¢" if device.is_available else "üî¥"
                is_active = "‚≠ê –ê–ö–¢–ò–í–ù–û" if current_device and device.id == current_device.id else "  "
                channels_icon = "üéß" if device.channels == 2 else "üîä"
                if device.type.value == "input":
                    channels_icon = "üé§"
                
                print(f"   {status_icon} {is_active} {channels_icon} {device.name}")
                print(f"      –¢–∏–ø: {device.type.value} | –ö–∞–Ω–∞–ª—ã: {device.channels} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    async def show_live_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            metrics = self.manager.get_metrics()
            runtime = time.time() - self.start_time if self.start_time else 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            current_device = await self.manager.get_current_device()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ
            if not current_device:
                devices = await self.manager.get_available_devices()
                if devices:
                    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                    output_devices = [d for d in devices if d.type.value == "output" and d.is_available]
                    if output_devices:
                        current_device = min(output_devices, key=lambda x: x.priority.value)
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                        self.manager.current_device = current_device
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò:")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f}—Å")
            print(f"   üì± –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {metrics.total_devices}")
            print(f"   üü¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {metrics.available_devices}")
            print(f"   üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {metrics.total_switches}")
            print(f"   üìù –°–æ–±—ã—Ç–∏–π: {len(self.device_changes)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if current_device:
                channels_type = "–Ω–∞—É—à–Ω–∏–∫–∏" if current_device.channels == 2 else "–¥–∏–Ω–∞–º–∏–∫–∏"
                if current_device.type.value == "input":
                    channels_type = "–º–∏–∫—Ä–æ—Ñ–æ–Ω"
                print(f"   üéØ –ê–∫—Ç–∏–≤–Ω–æ: {current_device.name} ({channels_type})")
            else:
                print(f"   üéØ –ê–∫—Ç–∏–≤–Ω–æ: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def show_events_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–æ–±—ã—Ç–∏–π"""
        if not self.device_changes:
            print("\nüìù –°–æ–±—ã—Ç–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return
        
        print(f"\nüìù –°–í–û–î–ö–ê –°–û–ë–´–¢–ò–ô ({len(self.device_changes)}):")
        print("-" * 60)
        
        for event in self.device_changes[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
            if 'action' in event and event['action'] == 'device_switched':
                print(f"   [{event['timestamp']}] üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï: {event['from_device']} ‚Üí {event['to_device']}")
            else:
                event_icon = "üéß" if event.get('channels', 1) == 2 else "üîä"
                print(f"   [{event['timestamp']}] {event_icon} {event['event_type']}: {event['device_name']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—É—à–Ω–∏–∫–∞–º
        headphone_events = [e for e in self.device_changes if e.get('channels') == 2]
        if headphone_events:
            print(f"\nüéß –°–û–ë–´–¢–ò–Ø –ù–ê–£–®–ù–ò–ö–û–í ({len(headphone_events)}):")
            for event in headphone_events:
                event_icon = "üéß" if event['event_type'] == "–ü–û–î–ö–õ–Æ–ß–ï–ù–û" else "‚ùå"
                print(f"   [{event['timestamp']}] {event_icon} {event['event_type']}: {event['device_name']}")
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.manager and self.running:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            try:
                await self.manager.stop()
                self.running = False
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print(f"\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        asyncio.create_task(self.stop_monitoring())
        sys.exit(0)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢ AUDIO DEVICE MANAGER")
    print("‚ö° –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    print("=" * 50)
    
    tester = LiveInteractiveTester()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, tester.signal_handler)
    signal.signal(signal.SIGTERM, tester.signal_handler)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if not await tester.setup_manager():
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        await tester.show_current_devices()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if not await tester.start_monitoring():
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        last_stats_time = time.time()
        
        while tester.running:
            await asyncio.sleep(0.1)  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏
            
            # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if time.time() - last_stats_time >= 5:
                await tester.show_live_stats()
                last_stats_time = time.time()
        
    except KeyboardInterrupt:
        print("\n\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–≤–æ–¥–∫–∞
        await tester.stop_monitoring()
        await tester.show_events_summary()
        print("\nüéâ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())
