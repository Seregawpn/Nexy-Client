#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í TEST –ü–ê–ü–ö–ï
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ types.Part.from_bytes –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
"""

import os
import asyncio
import base64
from PIL import Image, ImageDraw
import io
from google import genai
from google.genai import types

async def test_image_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í TEST –ü–ê–ü–ö–ï")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not os.environ.get("GEMINI_API_KEY"):
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GEMINI_API_KEY")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {os.environ.get('GEMINI_API_KEY')[:10]}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = genai.Client(
            http_options={"api_version": "v1beta"},
            api_key=os.environ.get("GEMINI_API_KEY"),
        )
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = types.LiveConnectConfig(
            response_modalities=["TEXT"],
            media_resolution="MEDIA_RESOLUTION_MEDIUM",
            tools=[
                types.Tool(
                    google_search=types.GoogleSearch()
                )
            ]
        )
        
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print("\nüé® –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        img = Image.new('RGB', (100, 100), color='red')
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ
        draw.ellipse([25, 25, 75, 75], fill='blue')
        draw.rectangle([10, 10, 30, 30], fill='green')
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:")
        print(f"   - –†–∞–∑–º–µ—Ä: {img.width}x{img.height} –ø–∏–∫—Å–µ–ª–µ–π")
        print(f"   - –¶–≤–µ—Ç–∞: –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω, —Å–∏–Ω–∏–π –∫—Ä—É–≥, –∑–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JPEG
        jpeg_buffer = io.BytesIO()
        img.save(jpeg_buffer, format='JPEG', quality=85)
        jpeg_buffer.seek(0)
        jpeg_data = jpeg_buffer.read()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        screenshot_base64 = base64.b64encode(jpeg_data).decode('utf-8')
        
        print(f"   - JPEG —Ä–∞–∑–º–µ—Ä: {len(jpeg_data)} –±–∞–π—Ç")
        print(f"   - Base64 –¥–ª–∏–Ω–∞: {len(screenshot_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        img.save("test_image.jpg", "JPEG", quality=95)
        print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ 'test_image.jpg'")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ Part.from_bytes
        print("\nüß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ Part.from_bytes")
        try:
            part = types.Part.from_bytes(
                data=jpeg_data,
                mime_type="image/jpeg"
            )
            print("‚úÖ Part.from_bytes —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   - –¢–∏–ø: {type(part)}")
            print(f"   - –ê—Ç—Ä–∏–±—É—Ç—ã: {dir(part)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Part.from_bytes: {e}")
            return False
        
        # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Live API
        print("\nüß™ –¢–ï–°–¢ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Live API")
        try:
            async with client.aio.live.connect(model="models/gemini-2.5-flash-live-preview", config=config) as session:
                print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç
                content_parts = [
                    types.Part.from_bytes(
                        data=jpeg_data,
                        mime_type="image/jpeg"
                    ),
                    types.Part.from_text(text="–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                ]
                
                print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Part.from_bytes...")
                await session.send_client_content(
                    turns=types.Content(
                        role='user',
                        parts=content_parts
                    ),
                    turn_complete=True
                )
                print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                print("üîÑ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç...")
                turn = session.receive()
                async for response in turn:
                    if hasattr(response, 'text') and response.text:
                        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response.text}")
                        break
                
                print("‚úÖ –¢–ï–°–¢ 2 –£–°–ü–ï–®–ï–ù!")
                return True
                
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 2 –ü–†–û–í–ê–õ–ï–ù: {e}")
            print(f"   - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            import traceback
            traceback.print_exc()
            return False
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_image_upload()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª 'test_image.jpg' –∏ –æ—Ç–≤–µ—Ç Live API")
    else:
        print("‚ùå –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–û–í–ê–õ–ò–õ–°–Ø")

if __name__ == "__main__":
    asyncio.run(main())
