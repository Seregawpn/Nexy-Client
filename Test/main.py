"""
## Documentation
Quickstart: https://github.com/google-gemini/cookbook/blob/main/quickstarts/Get_started_LiveAPI.py

## Setup

To install the dependencies for this script, run:

```
pip install -r requirements.txt
```

## Environment Variables
Set your Gemini API key:
export GEMINI_API_KEY="your_api_key_here"
"""

import os
import asyncio
import base64
import io
import traceback

import PIL.Image
import mss

import argparse

from google import genai
from google.genai import types

MODEL = "models/gemini-2.5-flash-live-preview"

DEFAULT_MODE = "screen"

client = genai.Client(
    http_options={"api_version": "v1beta"},
    api_key=os.environ.get("GEMINI_API_KEY"),
)

CONFIG = types.LiveConnectConfig(
    response_modalities=[
        "TEXT",
    ],
    media_resolution="MEDIA_RESOLUTION_MEDIUM",  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    context_window_compression=types.ContextWindowCompressionConfig(
        trigger_tokens=25600,
        sliding_window=types.SlidingWindow(target_tokens=12800),
    ),
    # –í–∫–ª—é—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫
    tools=[
        types.Tool(
            google_search=types.GoogleSearch()
        )
    ]
)


class ScreenAssistant:
    def __init__(self, mode=DEFAULT_MODE):
        self.mode = mode
        self.session = None

    def _get_screen(self):
        """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Gemini"""
        try:
            sct = mss.mss()
            monitor = sct.monitors[0]
            
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = sct.grab(monitor)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
            image_bytes = mss.tools.to_png(screenshot.rgb, screenshot.size)
            img = PIL.Image.open(io.BytesIO(image_bytes))
            
            # –°–∂–∏–º–∞–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            img.thumbnail([1024, 1024])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JPEG
            image_io = io.BytesIO()
            img.save(image_io, format="jpeg", quality=85)
            image_io.seek(0)
            
            image_bytes = image_io.read()
            return {
                "mime_type": "image/jpeg", 
                "data": base64.b64encode(image_bytes).decode('utf-8'),
                "raw_bytes": image_bytes
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None

    async def send_message_with_screenshot(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º —ç–∫—Ä–∞–Ω–∞"""
        try:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            print("–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞...")
            screenshot = self._get_screen()
            
            if screenshot is None:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await self.session.send_client_content(
                    turns=types.Content(
                        role='user',
                        parts=[types.Part(text=text)]
                    ),
                    turn_complete=True
                )
            else:
                print("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Ç–µ–∫—Å—Ç –í–ú–ï–°–¢–ï –≤ –æ–¥–Ω–æ–º Content –æ–±—ä–µ–∫—Ç–µ
                await self.session.send_client_content(
                    turns=types.Content(
                        role='user',
                        parts=[
                            types.Part.from_bytes(
                                data=screenshot["raw_bytes"],
                                mime_type=screenshot["mime_type"]
                            ),
                            types.Part.from_text(text=text)
                        ]
                    ),
                    turn_complete=True
                )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_text_only(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        try:
            await self.session.send_client_content(
                turns=types.Content(
                    role='user',
                    parts=[types.Part.from_text(text=text)]
                ),
                turn_complete=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")

    async def receive_response(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini —á–∞–Ω–∫–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            turn = self.session.receive()
            async for response in turn:
                if hasattr(response, 'text') and response.text:
                    print(response.text, end="", flush=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                if hasattr(response, 'tool_calls') and response.tool_calls:
                    for tool_call in response.tool_calls:
                        print(f"\nüîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫: {tool_call.function.name}")
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

    async def send_text(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
        print("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤! –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        
        while True:
            try:
                text = await asyncio.to_thread(
                    input,
                    "\n–°–æ–æ–±—â–µ–Ω–∏–µ > ",
                )
                
                if text.lower() == "q":
                    print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                    break
                    
                if text.strip():
                    print(f"\n–û—Ç–ø—Ä–∞–≤–ª—è—é: {text}")
                    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º: —Å–∫—Ä–∏–Ω—à–æ—Ç + —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    if "–Ω–æ–≤–æ—Å—Ç–∏" in text.lower() or "–ø–æ–∏—Å–∫" in text.lower():
                        # –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–ø–æ–∏—Å–∫)
                        await self.send_text_only(text)
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                        await self.send_message_with_screenshot(text)
                    await self.receive_response()
                    print("\n" + "="*50)
                else:
                    print("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    
            except KeyboardInterrupt:
                print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if not os.environ.get("GEMINI_API_KEY"):
            print("–û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GEMINI_API_KEY")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export GEMINI_API_KEY='your_key_here'")
            return

        try:
            async with client.aio.live.connect(model=MODEL, config=CONFIG) as session:
                self.session = session
                print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini Live API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–æ–¥–µ–ª—å: {MODEL})")
                print(f"–†–µ–∂–∏–º: {self.mode}")
                
                await self.send_text()
                
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            traceback.print_exc()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Gemini Live API - –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏")
    parser.add_argument(
        "--mode",
        type=str,
        default=DEFAULT_MODE,
        help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ screen)",
        choices=["screen"],
    )
    
    args = parser.parse_args()
    
    if args.mode != "screen":
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º 'screen'")
        args.mode = "screen"
    
    main = ScreenAssistant(mode=args.mode)
    asyncio.run(main.run())
