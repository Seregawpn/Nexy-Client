#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç Audio Device Manager –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
"""

import asyncio
import time
import signal
import sys
from typing import Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
try:
    from audio_device_manager import (
        AudioDeviceManager, 
        create_default_audio_device_manager,
        AudioDevice, 
        DeviceType, 
        DeviceStatus,
        DeviceChange
    )
    print("‚úÖ –ú–æ–¥—É–ª—å audio_device_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class LiveAudioDeviceTester:
    def __init__(self):
        self.manager: Optional[AudioDeviceManager] = None
        self.running = False
        self.device_changes = []
        self.connection_events = []
        
    async def setup_manager(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AudioDeviceManager...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            config = {
                'auto_switch_enabled': True,
                'monitoring_interval': 1.0,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                'device_priorities': {
                    'bluetooth_headphones': 1,
                    'wired_headphones': 2,
                    'external_speakers': 3,
                    'builtin_speakers': 4
                }
            }
            
            self.manager = create_audio_device_manager(config)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏
            self.manager.register_device_change_callback("live_tester", self.on_device_changed)
            self.manager.register_device_switch_callback("live_tester", self.on_device_switched)
            
            print("‚úÖ AudioDeviceManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False
    
    def on_device_changed(self, change: DeviceChange):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        timestamp = time.strftime("%H:%M:%S")
        event_type = "–ü–û–î–ö–õ–Æ–ß–ï–ù–û" if change.is_connected else "–û–¢–ö–õ–Æ–ß–ï–ù–û"
        
        print(f"\nüîî [{timestamp}] –£–°–¢–†–û–ô–°–¢–í–û {event_type}:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {change.device.name}")
        print(f"   –¢–∏–ø: {change.device.type.value}")
        print(f"   ID: {change.device.id}")
        print(f"   –°—Ç–∞—Ç—É—Å: {change.device.status.value}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        self.device_changes.append({
            'timestamp': timestamp,
            'device_name': change.device.name,
            'event_type': event_type,
            'device_type': change.device.type.value,
            'is_connected': change.is_connected
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–∞—É—à–Ω–∏–∫–∏?
        if any(keyword in change.device.name.lower() for keyword in 
               ['airpods', 'headphone', '–Ω–∞—É—à–Ω–∏–∫', 'bluetooth', 'wireless']):
            print(f"   üéß –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ê–£–®–ù–ò–ö–ò!")
            self.connection_events.append({
                'timestamp': timestamp,
                'action': 'headphones_detected' if change.is_connected else 'headphones_disconnected',
                'device_name': change.device.name
            })
    
    def on_device_switched(self, from_device: AudioDevice, to_device: AudioDevice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        timestamp = time.strftime("%H:%M:%S")
        
        print(f"\nüîÑ [{timestamp}] –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê:")
        print(f"   –°: {from_device.name if from_device else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print(f"   –ù–∞: {to_device.name}")
        print(f"   –¢–∏–ø: {to_device.type.value}")
        
        self.connection_events.append({
            'timestamp': timestamp,
            'action': 'device_switched',
            'from_device': from_device.name if from_device else 'Unknown',
            'to_device': to_device.name
        })
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.manager.start_monitoring()
            self.running = True
            
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            print("\n" + "="*60)
            print("üéß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–£–®–ù–ò–ö–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
            print("="*60)
            print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
            print("   1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏ (Bluetooth –∏–ª–∏ –ø—Ä–æ–≤–æ–¥–Ω—ã–µ)")
            print("   2. –û—Ç–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏")
            print("   3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–Ω–æ–≤–∞")
            print("   4. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("="*60)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    async def show_current_devices(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            devices = await self.manager.get_available_devices()
            print(f"\nüì± –¢–ï–ö–£–©–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê ({len(devices)}):")
            
            for i, device in enumerate(devices, 1):
                status_icon = "üü¢" if device.is_available else "üî¥"
                default_icon = "‚≠ê" if device.is_default else "  "
                print(f"   {i}. {status_icon} {default_icon} {device.name}")
                print(f"      –¢–∏–ø: {device.type.value} | ID: {device.id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    async def show_metrics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            metrics = self.manager.get_metrics()
            print(f"\nüìä –ú–ï–¢–†–ò–ö–ò:")
            print(f"   –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {metrics.total_devices}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {metrics.available_devices}")
            print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {metrics.unavailable_devices}")
            print(f"   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {metrics.total_switches}")
            print(f"   –û—à–∏–±–æ–∫: {metrics.total_errors}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def show_events_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–æ–±—ã—Ç–∏–π"""
        if not self.device_changes:
            print("\nüìù –°–æ–±—ã—Ç–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return
        
        print(f"\nüìù –°–í–û–î–ö–ê –°–û–ë–´–¢–ò–ô ({len(self.device_changes)}):")
        for event in self.device_changes[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
            print(f"   [{event['timestamp']}] {event['event_type']}: {event['device_name']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—É—à–Ω–∏–∫–∞–º
        headphone_events = [e for e in self.connection_events if 'headphones' in e['action']]
        if headphone_events:
            print(f"\nüéß –°–û–ë–´–¢–ò–Ø –ù–ê–£–®–ù–ò–ö–û–í ({len(headphone_events)}):")
            for event in headphone_events:
                print(f"   [{event['timestamp']}] {event['action']}: {event['device_name']}")
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.manager and self.running:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            try:
                await self.manager.stop_monitoring()
                self.running = False
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print(f"\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        asyncio.create_task(self.stop_monitoring())
        sys.exit(0)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢ AUDIO DEVICE MANAGER")
    print("=" * 50)
    
    tester = LiveAudioDeviceTester()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, tester.signal_handler)
    signal.signal(signal.SIGTERM, tester.signal_handler)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if not await tester.setup_manager():
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        await tester.show_current_devices()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if not await tester.start_monitoring():
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        while tester.running:
            await asyncio.sleep(1)
            
            # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if len(tester.device_changes) > 0 and len(tester.device_changes) % 10 == 0:
                await tester.show_metrics()
        
    except KeyboardInterrupt:
        print("\n\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–≤–æ–¥–∫–∞
        await tester.stop_monitoring()
        await tester.show_events_summary()
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())
