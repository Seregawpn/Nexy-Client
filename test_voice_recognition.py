#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VoiceRecognitionIntegration –∏ push-to-talk –ª–æ–≥–∏–∫–∏
"""

import asyncio
import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "client"))

from integration.core.event_bus import EventBus
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler
from integration.integrations.voice_recognition_integration import VoiceRecognitionIntegration, VoiceRecognitionIntegrationConfig

async def test_voice_recognition():
    """–¢–µ—Å—Ç VoiceRecognitionIntegration"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VoiceRecognitionIntegration...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    event_bus = EventBus()
    state_manager = ApplicationStateManager()
    error_handler = ErrorHandler()
    
    # –°–æ–∑–¥–∞–µ–º VoiceRecognitionIntegration
    config = VoiceRecognitionIntegrationConfig(
        enabled=True,
        simulation_mode=True,
        simulation_delay=2.0,  # 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
        simulation_success_rate=1.0,  # 100% —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π
        language="en-US"
    )
    
    voice_integration = VoiceRecognitionIntegration(
        event_bus=event_bus,
        state_manager=state_manager,
        error_handler=error_handler,
        config=config
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    success = await voice_integration.initialize()
    if not success:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    print("üöÄ –ó–∞–ø—É—Å–∫...")
    success = await voice_integration.start()
    if not success:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
        return False
    
    print("‚úÖ VoiceRecognitionIntegration –∑–∞–ø—É—â–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    print("\nüé≠ –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    session_id = "test-session-001"
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
    await event_bus.publish("voice.recording_start", {
        "session_id": session_id,
        "source": "keyboard",
        "timestamp": time.time()
    })
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ voice.recording_start (—Å–µ—Å—Å–∏—è: {session_id})")
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await asyncio.sleep(3.0)
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
    await event_bus.publish("voice.recording_stop", {
        "session_id": session_id,
        "source": "keyboard",
        "timestamp": time.time()
    })
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ voice.recording_stop (—Å–µ—Å—Å–∏—è: {session_id})")
    
    # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
    await asyncio.sleep(1.0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = voice_integration.get_status()
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {status}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    await voice_integration.stop()
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True

async def test_push_to_talk_flow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ push-to-talk —Ü–∏–∫–ª–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ push-to-talk —Ü–∏–∫–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    event_bus = EventBus()
    state_manager = ApplicationStateManager()
    error_handler = ErrorHandler()
    
    # –°–æ–∑–¥–∞–µ–º VoiceRecognitionIntegration
    config = VoiceRecognitionIntegrationConfig(
        enabled=True,
        simulation_mode=True,
        simulation_delay=1.5,
        simulation_success_rate=0.8,
        language="en-US"
    )
    
    voice_integration = VoiceRecognitionIntegration(
        event_bus=event_bus,
        state_manager=state_manager,
        error_handler=error_handler,
        config=config
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    await voice_integration.initialize()
    await voice_integration.start()
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    events_received = []
    
    async def on_mode_changed(event):
        data = event.get("data", {})
        old_mode = data.get("old_mode")
        new_mode = data.get("new_mode")
        events_received.append(f"mode_changed: {old_mode} -> {new_mode}")
        print(f"üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {old_mode} -> {new_mode}")
    
    async def on_recognition_completed(event):
        data = event.get("data", {})
        session_id = data.get("session_id")
        text = data.get("text")
        events_received.append(f"recognition_completed: {session_id} - '{text}'")
        print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {session_id} - '{text}'")
    
    async def on_recognition_failed(event):
        data = event.get("data", {})
        session_id = data.get("session_id")
        error = data.get("error")
        events_received.append(f"recognition_failed: {session_id} - {error}")
        print(f"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ: {session_id} - {error}")
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    await event_bus.subscribe("app.mode_changed", on_mode_changed)
    await event_bus.subscribe("voice.recognition_completed", on_recognition_completed)
    await event_bus.subscribe("voice.recognition_failed", on_recognition_failed)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º push-to-talk
    print("\nüéØ –°–∏–º—É–ª—è—Ü–∏—è push-to-talk:")
    print("1. –ù–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞ (PRESS) -> LISTENING")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state_manager.set_mode(AppMode.SLEEPING)
    print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_manager.get_current_mode()}")
    
    # –ù–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞
    session_id = "ptt-test-001"
    await event_bus.publish("voice.recording_start", {
        "session_id": session_id,
        "source": "keyboard",
        "timestamp": time.time()
    })
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ LISTENING
    state_manager.set_mode(AppMode.LISTENING)
    print(f"   –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è: {state_manager.get_current_mode()}")
    
    # –ñ–¥–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    print("2. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    await asyncio.sleep(2.0)
    
    # –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞
    print("3. –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞ (RELEASE)")
    await event_bus.publish("voice.recording_stop", {
        "session_id": session_id,
        "source": "keyboard",
        "timestamp": time.time()
    })
    
    # –ñ–¥–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("4. –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    await asyncio.sleep(1.0)
    
    print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_manager.get_current_mode()}")
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:")
    for event in events_received:
        print(f"   - {event}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await voice_integration.stop()
    
    print("‚úÖ Push-to-talk —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ VoiceRecognitionIntegration\n")
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        success1 = await test_voice_recognition()
        
        # –¢–µ—Å—Ç 2: Push-to-talk —Ü–∏–∫–ª
        success2 = await test_push_to_talk_flow()
        
        if success1 and success2:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            return False
            
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(main())
