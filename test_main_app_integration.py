#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UnifiedAudioSystem —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""

import sys
import time
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / 'client'))

from audio_player import AudioPlayer
from unified_audio_system import get_global_unified_audio_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_main_app_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    try:
        logger.info("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º...")
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioPlayer (–∫–∞–∫ –≤ main.py)
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioPlayer...")
        audio_player = AudioPlayer(sample_rate=48000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UnifiedAudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not audio_player.audio_manager:
            logger.error("‚ùå UnifiedAudioSystem –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ AudioPlayer")
            return False
        
        logger.info("‚úÖ AudioPlayer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å UnifiedAudioSystem")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        audio_system = audio_player.audio_manager
        
        if not audio_system.is_initialized():
            logger.error("‚ùå UnifiedAudioSystem –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        logger.info("‚úÖ UnifiedAudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_device = audio_system.get_current_device()
        logger.info(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")
        
        devices = audio_system.get_available_devices()
        logger.info(f"üì± –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        for device in devices:
            status = "üéß –¢–ï–ö–£–©–ï–ï" if device.is_default else "  "
            logger.info(f"{status} {device.name} (—Ç–∏–ø: {device.device_type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority})")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º PortAudio –∏–Ω–¥–µ–∫—Å—ã
        output_idx, input_idx = audio_system.get_portaudio_indices()
        logger.info(f"üîä PortAudio –∏–Ω–¥–µ–∫—Å—ã - Output: {output_idx}, Input: {input_idx}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        real_devices = [d for d in devices 
                       if d.device_type.value != 'virtual' 
                       and d.device_type.value != 'microphone'
                       and 'microphone' not in d.name.lower()]
        
        if real_devices:
            best_device = max(real_devices, key=lambda d: d.priority)
            logger.info(f"üéØ –õ—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_device.priority})")
            
            if best_device.name != current_device:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
                success = audio_system.switch_to_device(best_device.name)
                if success:
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            else:
                logger.info("‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º RealtimeDeviceMonitor
        realtime_monitor = audio_system._realtime_monitor
        if realtime_monitor and realtime_monitor.is_monitoring():
            logger.info("‚úÖ RealtimeDeviceMonitor –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è RealtimeDeviceMonitor –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        
        # 7. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("")
        logger.info("üéß –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        logger.info("üìã –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        logger.info("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        logger.info("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        logger.info("  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        logger.info("  ‚úÖ –ï–¥–∏–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        logger.info("")
        logger.info("üéß –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
        logger.info("  1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ/–æ—Ç–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏")
        logger.info("  2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è")
        logger.info("  3. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è")
        logger.info("")
        logger.info("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥...")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        start_time = time.time()
        while time.time() - start_time < 30:
            try:
                time.sleep(5)
                
                new_current_device = audio_system.get_current_device()
                if new_current_device != current_device:
                    logger.info(f"üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {current_device} ‚Üí {new_current_device}")
                    current_device = new_current_device
                
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {current_device} | –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ' if realtime_monitor and realtime_monitor.is_monitoring() else '‚ùå'}")
                
            except KeyboardInterrupt:
                logger.info("üõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
        
        # 8. –û—á–∏—Å—Ç–∫–∞
        logger.info("üîÑ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        audio_player.cleanup()
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = test_main_app_integration()
    sys.exit(0 if success else 1)
