#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä TTS –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è Nexy
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É Azure TTS, Edge TTS –∏ fallback –º–µ—Ç–æ–¥–∞–º–∏
"""

import os
import sys
from pathlib import Path

def configure_azure_tts():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Azure Speech Services"""
    print("üá∫üá∏ –ù–ê–°–¢–†–û–ô–ö–ê AZURE SPEECH SERVICES")
    print("=" * 50)
    print("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://portal.azure.com/")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å 'Speech Services'")
    print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ —Ä–µ–≥–∏–æ–Ω")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    speech_key = input("–í–≤–µ–¥–∏—Ç–µ SPEECH_KEY (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    speech_region = input("–í–≤–µ–¥–∏—Ç–µ SPEECH_REGION (–Ω–∞–ø—Ä–∏–º–µ—Ä, eastus): ").strip()
    
    if speech_key and speech_region:
        # –û–±–Ω–æ–≤–ª—è–µ–º config.env
        config_path = Path(__file__).parent / "server" / "config.env"
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π config
        lines = []
        if config_path.exists():
            with open(config_path, 'r') as f:
                lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
        updated_lines = []
        speech_key_found = False
        speech_region_found = False
        
        for line in lines:
            if line.startswith('SPEECH_KEY=') or line.startswith('# SPEECH_KEY='):
                updated_lines.append(f'SPEECH_KEY={speech_key}\n')
                speech_key_found = True
            elif line.startswith('SPEECH_REGION=') or line.startswith('# SPEECH_REGION='):
                updated_lines.append(f'SPEECH_REGION={speech_region}\n')
                speech_region_found = True
            else:
                updated_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if not speech_key_found:
            updated_lines.append(f'SPEECH_KEY={speech_key}\n')
        if not speech_region_found:
            updated_lines.append(f'SPEECH_REGION={speech_region}\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(config_path, 'w') as f:
            f.writelines(updated_lines)
        
        print(f"‚úÖ Azure TTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ {config_path}")
        return True
    else:
        print("‚è≠Ô∏è Azure TTS –ø—Ä–æ–ø—É—â–µ–Ω")
        return False

def configure_edge_tts():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Edge TTS"""
    print("üó£Ô∏è –ù–ê–°–¢–†–û–ô–ö–ê EDGE TTS")
    print("=" * 50)
    print("Edge TTS - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å Microsoft")
    print("–ù–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–µ–π, —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
    print()
    
    # –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
    voices = [
        "en-US-JennyNeural",
        "en-US-AriaNeural",
        "en-US-GuyNeural", 
        "en-US-DavisNeural",
        "en-US-AmberNeural"
    ]
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
    for i, voice in enumerate(voices, 1):
        print(f"{i}. {voice}")
    
    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å (1-{len(voices)}) –∏–ª–∏ Enter –¥–ª—è JennyNeural: ").strip()
    
    if choice.isdigit() and 1 <= int(choice) <= len(voices):
        selected_voice = voices[int(choice) - 1]
    else:
        selected_voice = voices[0]  # JennyNeural –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –û–±–Ω–æ–≤–ª—è–µ–º config.env
    config_path = Path(__file__).parent / "server" / "config.env"
    
    lines = []
    if config_path.exists():
        with open(config_path, 'r') as f:
            lines = f.readlines()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Edge TTS
    updated_lines = []
    for line in lines:
        if line.startswith('EDGE_TTS_VOICE='):
            updated_lines.append(f'EDGE_TTS_VOICE={selected_voice}\n')
        elif line.startswith('USE_EDGE_TTS='):
            updated_lines.append('USE_EDGE_TTS=true\n')
        else:
            updated_lines.append(line)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(config_path, 'w') as f:
        f.writelines(updated_lines)
    
    print(f"‚úÖ Edge TTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {selected_voice}")
    return True

def disable_all_tts():
    """–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ TTS (—Ç–æ–ª—å–∫–æ fallback)"""
    print("üîá –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –í–°–ï–• TTS")
    print("=" * 50)
    print("–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π fallback")
    print("‚ö†Ô∏è –í–º–µ—Å—Ç–æ —Ä–µ—á–∏ –±—É–¥—É—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ beep'—ã")
    print()
    
    confirm = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ (yes/no): ").strip().lower()
    if confirm in ['yes', 'y', '–¥–∞', '–¥']:
        # –û–±–Ω–æ–≤–ª—è–µ–º config.env
        config_path = Path(__file__).parent / "server" / "config.env"
        
        lines = []
        if config_path.exists():
            with open(config_path, 'r') as f:
                lines = f.readlines()
        
        updated_lines = []
        for line in lines:
            if line.startswith('USE_EDGE_TTS='):
                updated_lines.append('USE_EDGE_TTS=false\n')
            elif line.startswith('SPEECH_KEY='):
                updated_lines.append('# SPEECH_KEY=–æ—Ç–∫–ª—é—á–µ–Ω\n')
            elif line.startswith('SPEECH_REGION='):
                updated_lines.append('# SPEECH_REGION=–æ—Ç–∫–ª—é—á–µ–Ω\n')
            else:
                updated_lines.append(line)
        
        with open(config_path, 'w') as f:
            f.writelines(updated_lines)
        
        print("‚úÖ –í—Å–µ TTS –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return True
    else:
        print("‚è≠Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return False

def show_current_config():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é TTS"""
    print("üìã –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø TTS")
    print("=" * 50)
    
    config_path = Path(__file__).parent / "server" / "config.env"
    
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª config.env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(config_path, 'r') as f:
        lines = f.readlines()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    tts_settings = {}
    for line in lines:
        line = line.strip()
        if '=' in line and not line.startswith('#'):
            key, value = line.split('=', 1)
            if key in ['USE_EDGE_TTS', 'EDGE_TTS_VOICE', 'SPEECH_KEY', 'SPEECH_REGION']:
                tts_settings[key] = value
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
    use_edge = tts_settings.get('USE_EDGE_TTS', 'false').lower() == 'true'
    has_azure = bool(tts_settings.get('SPEECH_KEY')) and bool(tts_settings.get('SPEECH_REGION'))
    
    print("üé§ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã TTS:")
    
    if has_azure:
        print(f"‚úÖ Azure Speech Services")
        print(f"   –ö–ª—é—á: {tts_settings.get('SPEECH_KEY', '–ù–ï–¢')[:10]}...")
        print(f"   –†–µ–≥–∏–æ–Ω: {tts_settings.get('SPEECH_REGION', '–ù–ï–¢')}")
    else:
        print(f"‚ùå Azure Speech Services (–Ω–µ—Ç –∫–ª—é—á–µ–π)")
    
    if use_edge:
        print(f"‚úÖ Edge TTS")
        print(f"   –ì–æ–ª–æ—Å: {tts_settings.get('EDGE_TTS_VOICE', 'en-US-JennyNeural')}")
    else:
        print(f"‚ùå Edge TTS (–æ—Ç–∫–ª—é—á–µ–Ω)")
    
    if not has_azure and not use_edge:
        print(f"‚ö†Ô∏è –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π fallback (sine-wave)")
    
    print(f"\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
    if has_azure:
        print(f"1. Azure TTS (–æ—Å–Ω–æ–≤–Ω–æ–π)")
        if use_edge:
            print(f"2. Edge TTS (fallback)")
            print(f"3. Sine-wave (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)")
        else:
            print(f"2. Sine-wave (fallback)")
    elif use_edge:
        print(f"1. Edge TTS (–æ—Å–Ω–æ–≤–Ω–æ–π)")
        print(f"2. Sine-wave (fallback)")
    else:
        print(f"1. Sine-wave (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π)")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞"""
    while True:
        print("\nüéµ –ö–û–ù–§–ò–ì–£–†–ê–¢–û–† TTS –î–õ–Ø NEXY")
        print("=" * 40)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Azure TTS")
        print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Edge TTS")
        print("4. –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ TTS")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("6. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-6): ").strip()
        
        if choice == "1":
            show_current_config()
        elif choice == "2":
            configure_azure_tts()
        elif choice == "3":
            configure_edge_tts()
        elif choice == "4":
            disable_all_tts()
        elif choice == "5":
            print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: python test_tts_methods.py")
        elif choice == "6":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
