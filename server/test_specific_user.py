#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import sys
sys.path.append('.')

from database.database_manager import DatabaseManager

async def test_specific_user():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    try:
        print("üß† –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞–º—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        db_manager = DatabaseManager()
        await asyncio.to_thread(db_manager.connect)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_hardware_id = "test_user_memory_cycle_123"
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_hardware_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        memory_data = await asyncio.to_thread(
            db_manager.get_user_memory, 
            test_hardware_id
        )
        
        print(f"üìã –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: '{memory_data.get('short', '–ù–µ—Ç')}'")
        print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: '{memory_data.get('long', '–ù–µ—Ç')}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_data = await asyncio.to_thread(
            db_manager.get_user_by_hardware_id, 
            test_hardware_id
        )
        
        if user_data:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:")
            print(f"   ID: {user_data.get('id', 'N/A')}")
            print(f"   Hardware ID Hash: {user_data.get('hardware_id_hash', 'N/A')}")
            print(f"   Short Term Memory: '{user_data.get('short_term_memory', '–ù–µ—Ç')}'")
            print(f"   Long Term Memory: '{user_data.get('long_term_memory', '–ù–µ—Ç')}'")
            print(f"   Memory Updated At: {user_data.get('memory_updated_at', 'N/A')}")
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_specific_user())
