#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π –ø–∞–º—è—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
sys.path.append('.')

from database.database_manager import DatabaseManager

async def check_all_memory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é –ø–∞–º—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        print("üß† –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å—é –ø–∞–º—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        db_manager = DatabaseManager()
        await asyncio.to_thread(db_manager.connect)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏
        all_memory = await asyncio.to_thread(db_manager.get_users_with_active_memory, 100)
        
        if all_memory:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_memory)} –∑–∞–ø–∏—Å–µ–π –ø–∞–º—è—Ç–∏:")
            print("=" * 60)
            
            for i, record in enumerate(all_memory, 1):
                print(f"\nüìã –ó–∞–ø–∏—Å—å {i}:")
                print(f"   Hardware ID: {record.get('hardware_id_hash', 'N/A')}")
                print(f"   –†–∞–∑–º–µ—Ä –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: {record.get('short_memory_size', '–ù–µ—Ç')} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –†–∞–∑–º–µ—Ä –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: {record.get('long_memory_size', '–ù–µ—Ç')} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {record.get('updated_at', 'N/A')}")
                print("-" * 40)
        else:
            print("‚ö†Ô∏è –ü–∞–º—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_all_memory())
