#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import sys
sys.path.append('.')

from database.database_manager import DatabaseManager

async def cleanup_test_memory():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–º—è—Ç—å"""
    
    try:
        print("üßπ –û—á–∏—â–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–º—è—Ç—å...")
        
        db_manager = DatabaseManager()
        await asyncio.to_thread(db_manager.connect)
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        test_users = [
            "test_user_memory_cycle_123",
            "test_user_123", 
            "clean_user_test_456"
        ]
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(test_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        cleaned_count = 0
        
        for hardware_id in test_users:
            print(f"\nüîç –û—á–∏—â–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {hardware_id}")
            
            try:
                # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
                success = await asyncio.to_thread(
                    db_manager.update_user_memory,
                    hardware_id,
                    "",  # –ü—É—Å—Ç–∞—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
                    ""   # –ü—É—Å—Ç–∞—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
                )
                
                if success:
                    print(f"‚úÖ –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hardware_id} –æ—á–∏—â–µ–Ω–∞")
                    cleaned_count += 1
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hardware_id}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {hardware_id}: {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:")
        print(f"   –û—á–∏—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cleaned_count}/{len(test_users)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüß† –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏...")
        
        for hardware_id in test_users:
            memory_data = await asyncio.to_thread(
                db_manager.get_user_memory, 
                hardware_id
            )
            
            short_memory = memory_data.get('short', '')
            long_memory = memory_data.get('long', '')
            
            if not short_memory and not long_memory:
                print(f"‚úÖ {hardware_id}: –ø–∞–º—è—Ç—å –ø—É—Å—Ç–∞")
            else:
                print(f"‚ö†Ô∏è {hardware_id}: –ø–∞–º—è—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")
                print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: '{short_memory}'")
                print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: '{long_memory}'")
        
        print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        if cleaned_count == len(test_users):
            print("‚úÖ –í—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –ø–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(cleanup_test_memory())
