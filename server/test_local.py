#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ HTTP –∏ gRPC —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import asyncio
import aiohttp
import time

async def test_http_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 80"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP —Å–µ—Ä–≤–µ—Ä...")
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await asyncio.sleep(2)
    
    try:
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç health endpoint
            async with session.get('http://localhost:80/health') as response:
                if response.status == 200:
                    text = await response.text()
                    print(f"‚úÖ Health check: {text}")
                else:
                    print(f"‚ùå Health check failed: {response.status}")
            
            # –¢–µ—Å—Ç root endpoint
            async with session.get('http://localhost:80/') as response:
                if response.status == 200:
                    text = await response.text()
                    print(f"‚úÖ Root endpoint: {text}")
                else:
                    print(f"‚ùå Root endpoint failed: {response.status}")
                    
            # –¢–µ—Å—Ç status endpoint
            async with session.get('http://localhost:80/status') as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Status endpoint: {data}")
                else:
                    print(f"‚ùå Status endpoint failed: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå HTTP —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    await test_http_server()
    
    print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main())
