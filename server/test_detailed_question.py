#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –ø–∞–º—è—Ç–∏
"""

import asyncio
import os
import sys
sys.path.append('.')

from text_processor import TextProcessor
from database.database_manager import DatabaseManager

async def test_detailed_question():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ–π –ø–∞–º—è—Ç–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.environ.get("GEMINI_API_KEY"):
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        text_processor = TextProcessor()
        db_manager = DatabaseManager()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.to_thread(db_manager.connect)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DatabaseManager –≤ TextProcessor
        text_processor.set_database_manager(db_manager)
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é
        test_hardware_id = "clean_user_test_456"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
        print("\nüß† –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        memory_data = await asyncio.to_thread(
            db_manager.get_user_memory, 
            test_hardware_id
        )
        
        print(f"üß† –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å:")
        print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('short', '–ù–µ—Ç')}")
        print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('long', '–ù–µ—Ç')}")
        
        # üîß –¢–ï–°–¢: –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        print("\nüìù –¢–ï–°–¢: –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        print("=" * 50)
        
        question = "–†–∞—Å—Å–∫–∞–∂–∏ –æ–±–æ –º–Ω–µ: –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç, —á–µ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å, –æ—Ç–∫—É–¥–∞ —è –∏ —á—Ç–æ —è –ª—é–±–ª—é?"
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_chunks = []
        async for chunk in text_processor.generate_response_stream(
            prompt=question,
            hardware_id=test_hardware_id,
            screenshot_base64=None
        ):
            response_chunks.append(chunk)
            print(f"üì¶ –ß–∞–Ω–∫: {chunk}")
        
        full_response = " ".join(response_chunks)
        print(f"\nü§ñ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {full_response}")
        
        # üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–º—è
        name_found = False
        if "–°–µ—Ä–≥–µ–π" in full_response or "Sergei" in full_response:
            print("‚úÖ –ò–º—è '–°–µ—Ä–≥–µ–π' –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
            name_found = True
        else:
            print("‚ùå –ò–º—è '–°–µ—Ä–≥–µ–π' –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession_found = False
        if any(word in full_response.lower() for word in ["—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "developer", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "programmer"]):
            print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
            profession_found = True
        else:
            print("‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        location_found = False
        if any(word in full_response for word in ["–ú–æ—Å–∫–≤–∞", "Moscow"]):
            print("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
            location_found = True
        else:
            print("‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        preferences_found = False
        if "Python" in full_response:
            print("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (Python) –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
            preferences_found = True
        else:
            print("‚ùå –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüìä –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:")
        total_found = sum([name_found, profession_found, location_found, preferences_found])
        
        if total_found == 4:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –í—Å—è –ø–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        elif total_found >= 3:
            print("‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞")
        elif total_found >= 2:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ß–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ü–∞–º—è—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        
        print(f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–º—è—Ç–∏: {total_found}/4")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_detailed_question())
