"""
Universal compliance —Ç–µ—Å—Ç—ã –¥–ª—è Memory Management Module

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥—É–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:
- UniversalProviderInterface
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª—è
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ API
"""

import pytest
from unittest.mock import Mock

from ..core.memory_manager import MemoryManager
from ..providers.memory_analyzer import MemoryAnalyzer
from ...integration.core.universal_provider_interface import UniversalProviderInterface


class TestUniversalCompliance:
    """–¢–µ—Å—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"""
    
    def test_memory_manager_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã MemoryManager"""
        manager = MemoryManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(manager, 'get_memory_context')
        assert hasattr(manager, 'analyze_conversation')
        assert hasattr(manager, 'update_memory_background')
        assert hasattr(manager, 'is_available')
        assert hasattr(manager, 'set_database_manager')
        assert hasattr(manager, 'cleanup_expired_memory')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –º–µ—Ç–æ–¥–æ–≤
        assert callable(manager.get_memory_context)
        assert callable(manager.analyze_conversation)
        assert callable(manager.update_memory_background)
        assert callable(manager.is_available)
        assert callable(manager.set_database_manager)
        assert callable(manager.cleanup_expired_memory)
    
    def test_memory_analyzer_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã MemoryAnalyzer"""
        with pytest.raises(ImportError):  # –ù–µ—Ç API –∫–ª—é—á–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
            MemoryAnalyzer("test_key")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞—Å—Å–∞
        assert hasattr(MemoryAnalyzer, '__init__')
        assert hasattr(MemoryAnalyzer, 'analyze_conversation')
        assert hasattr(MemoryAnalyzer, 'is_available')
        assert hasattr(MemoryAnalyzer, '_parse_analysis_response')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –º–µ—Ç–æ–¥–æ–≤
        assert callable(MemoryAnalyzer.__init__)
        assert callable(MemoryAnalyzer.analyze_conversation)
        assert callable(MemoryAnalyzer.is_available)
        assert callable(MemoryAnalyzer._parse_analysis_response)
    
    def test_config_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from ..config import MemoryConfig
        
        config = MemoryConfig()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        assert hasattr(config, 'gemini_api_key')
        assert hasattr(config, 'max_short_term_memory_size')
        assert hasattr(config, 'max_long_term_memory_size')
        assert hasattr(config, 'memory_timeout')
        assert hasattr(config, 'analysis_timeout')
        assert hasattr(config, 'memory_analysis_model')
        assert hasattr(config, 'memory_analysis_temperature')
        assert hasattr(config, 'memory_analysis_prompt')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(config, 'get_config_dict')
        assert hasattr(config, 'validate_config')
        assert callable(config.get_config_dict)
        assert callable(config.validate_config)
    
    def test_module_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from .. import MemoryManager, MemoryAnalyzer
        from ..core import MemoryManager as CoreMemoryManager
        from ..providers import MemoryAnalyzer as ProviderMemoryAnalyzer
        
        assert MemoryManager is CoreMemoryManager
        assert MemoryAnalyzer is ProviderMemoryAnalyzer
    
    def test_async_methods(self):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        import asyncio
        import inspect
        
        manager = MemoryManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        async_methods = [
            'get_memory_context',
            'analyze_conversation', 
            'update_memory_background',
            'cleanup_expired_memory'
        ]
        
        for method_name in async_methods:
            method = getattr(manager, method_name)
            assert inspect.iscoroutinefunction(method), f"Method {method_name} should be async"
    
    def test_error_handling_patterns(self):
        """–¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        manager = MemoryManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ graceful degradation
        # –ú–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        assert manager.is_available() is False  # –ë–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ë–î
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        import asyncio
        
        async def test_error_handling():
            context = await manager.get_memory_context("test")
            assert isinstance(context, str)  # –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
            
            short, long = await manager.analyze_conversation("test", "test")
            assert isinstance(short, str)  # –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
            assert isinstance(long, str)   # –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
            
            # –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            await manager.update_memory_background("test", "test", "test")
            
            result = await manager.cleanup_expired_memory(24)
            assert isinstance(result, int)  # –í—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ
        
        asyncio.run(test_error_handling())
    
    def test_config_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from ..config import MemoryConfig
        
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        with pytest.MonkeyPatch().context() as m:
            m.setenv('GEMINI_API_KEY', 'test_key')
            config = MemoryConfig()
            assert config.validate_config() is True
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        with pytest.MonkeyPatch().context() as m:
            m.delenv('GEMINI_API_KEY', raising=False)
            config = MemoryConfig()
            assert config.validate_config() is False
    
    def test_config_dict_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è"""
        from ..config import MemoryConfig
        
        with pytest.MonkeyPatch().context() as m:
            m.setenv('GEMINI_API_KEY', 'test_key')
            config = MemoryConfig()
            config_dict = config.get_config_dict()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π
            required_keys = [
                'GEMINI_API_KEY',
                'MAX_SHORT_TERM_MEMORY_SIZE',
                'MAX_LONG_TERM_MEMORY_SIZE',
                'MEMORY_TIMEOUT',
                'ANALYSIS_TIMEOUT',
                'MEMORY_ANALYSIS_MODEL',
                'MEMORY_ANALYSIS_TEMPERATURE',
                'MEMORY_ANALYSIS_PROMPT'
            ]
            
            for key in required_keys:
                assert key in config_dict, f"Key {key} missing from config dict"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
            assert isinstance(config_dict['GEMINI_API_KEY'], str)
            assert isinstance(config_dict['MAX_SHORT_TERM_MEMORY_SIZE'], int)
            assert isinstance(config_dict['MAX_LONG_TERM_MEMORY_SIZE'], int)
            assert isinstance(config_dict['MEMORY_TIMEOUT'], float)
            assert isinstance(config_dict['ANALYSIS_TIMEOUT'], float)
            assert isinstance(config_dict['MEMORY_ANALYSIS_MODEL'], str)
            assert isinstance(config_dict['MEMORY_ANALYSIS_TEMPERATURE'], float)
            assert isinstance(config_dict['MEMORY_ANALYSIS_PROMPT'], str)
    
    def test_memory_context_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏"""
        manager = MemoryManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏
        expected_sections = [
            "MEMORY CONTEXT",
            "SHORT-TERM MEMORY",
            "LONG-TERM MEMORY", 
            "MEMORY USAGE INSTRUCTIONS"
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        test_context = """
üß† MEMORY CONTEXT (for response context):

üìã SHORT-TERM MEMORY (current session):
Test short-term memory

üìö LONG-TERM MEMORY (user information):
Test long-term memory

üí° MEMORY USAGE INSTRUCTIONS:
- Use short-term memory to understand current conversation context
- Use long-term memory for response personalization (name, preferences, important details)
- If memory is not relevant to current request - ignore it
- Memory should complement the answer, not replace it
- Priority: current request > short-term memory > long-term memory
        """
        
        for section in expected_sections:
            assert section in test_context, f"Section {section} missing from memory context"
    
    def test_memory_analysis_response_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        expected_format = "SHORT_TERM: [content]\nLONG_TERM: [content]"
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_response = """
        SHORT_TERM: User is discussing Python programming
        LONG_TERM: User is a software developer
        """
        
        assert "SHORT_TERM:" in test_response
        assert "LONG_TERM:" in test_response
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        lines = test_response.strip().split('\n')
        short_line = next((line for line in lines if line.strip().startswith('SHORT_TERM:')), None)
        long_line = next((line for line in lines if line.strip().startswith('LONG_TERM:')), None)
        
        assert short_line is not None
        assert long_line is not None
    
    def test_logging_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import logging
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤
        manager = MemoryManager()
        
        # –õ–æ–≥–≥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        assert hasattr(manager, '__class__')
        assert manager.__class__.__module__ is not None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger = logging.getLogger('modules.memory_management.core.memory_manager')
        assert logger is not None
    
    def test_documentation_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        import os
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        docs_path = os.path.join(os.path.dirname(__file__), '..', 'docs')
        assert os.path.exists(docs_path)
        
        integration_guide_path = os.path.join(docs_path, 'INTEGRATION_GUIDE.md')
        assert os.path.exists(integration_guide_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        with open(integration_guide_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        required_sections = [
            "# üß† Memory Management Module",
            "## üìã –û–±–∑–æ—Ä",
            "## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "## üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TextProcessor",
            "## ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        ]
        
        for section in required_sections:
            assert section in content, f"Section {section} missing from documentation"
