"""
Memory Manager - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–º—è—Ç—å—é

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è LLM
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Database Module
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º TextProcessor
"""

import asyncio
import logging
from typing import Dict, Optional, Tuple

from ..config import MemoryConfig
from ..providers.memory_analyzer import MemoryAnalyzer

logger = logging.getLogger(__name__)

class MemoryManager:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–º—è—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º TextProcessor –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –ª–æ–≥–∏–∫–∏.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ –∂–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç TextProcessor.
    """
    
    def __init__(self, db_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryManager.
        
        Args:
            db_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        """
        self.config = MemoryConfig()
        self.db_manager = db_manager
        self.memory_analyzer = None
        self.is_initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryManager"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MemoryAnalyzer –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API –∫–ª—é—á
            if self.config.gemini_api_key and self.config.validate_config():
                try:
                    self.memory_analyzer = MemoryAnalyzer(self.config.gemini_api_key)
                    logger.info("‚úÖ MemoryAnalyzer initialized successfully")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è MemoryAnalyzer initialization failed: {e}")
                    self.memory_analyzer = None
            else:
                logger.warning("‚ö†Ô∏è MemoryAnalyzer not initialized - missing API key or invalid config")
            
            self.is_initialized = True
            logger.info("‚úÖ MemoryManager initialized successfully")
            return True
        except Exception as e:
            logger.error(f"‚ùå MemoryManager initialization failed: {e}")
            raise
    
    def set_database_manager(self, db_manager):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç DatabaseManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é.
        
        Args:
            db_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º TextProcessor.
        """
        self.db_manager = db_manager
        logger.info("‚úÖ DatabaseManager set in MemoryManager")
    
    async def get_memory_context(self, hardware_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è LLM.
        
        Args:
            hardware_id: –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–º–µ–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ text_processor.py (—Å—Ç—Ä–æ–∫–∏ 254-282)
        """
        if not hardware_id or not self.db_manager:
            return ""
        
        try:
            # –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
            memory_data = await asyncio.wait_for(
                asyncio.to_thread(self.db_manager.get_user_memory, hardware_id),
                timeout=self.config.memory_timeout
            )
            
            if memory_data.get('short') or memory_data.get('long'):
                memory_context = f"""
üß† MEMORY CONTEXT (for response context):

üìã SHORT-TERM MEMORY (current session):
{memory_data.get('short', 'No short-term memory')}

üìö LONG-TERM MEMORY (user information):
{memory_data.get('long', 'No long-term memory')}

üí° MEMORY USAGE INSTRUCTIONS:
- Use short-term memory to understand current conversation context
- Use long-term memory for response personalization (name, preferences, important details)
- If memory is not relevant to current request - ignore it
- Memory should complement the answer, not replace it
- Priority: current request > short-term memory > long-term memory
                """
                
                logger.info(f"üß† Memory obtained for {hardware_id}: short-term ({len(memory_data.get('short', ''))} chars), long-term ({len(memory_data.get('long', ''))} chars)")
                return memory_context
            else:
                logger.info(f"üß† No memory found for {hardware_id}")
                return ""
                    
        except asyncio.TimeoutError:
            logger.warning(f"‚ö†Ô∏è Memory retrieval timeout for {hardware_id}")
            return ""
        except Exception as e:
            logger.error(f"‚ùå Error getting memory context for {hardware_id}: {e}")
            return ""
    
    async def analyze_conversation(self, prompt: str, response: str) -> Tuple[str, str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏.
        
        Args:
            prompt: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (short_memory, long_memory)
            
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–º–µ–Ω—è–µ—Ç –≤—ã–∑–æ–≤ memory_analyzer.analyze_conversation()
        """
        if not self.memory_analyzer:
            logger.debug("üß† MemoryAnalyzer not available - skipping memory analysis")
            return "", ""
        
        try:
            return await self.memory_analyzer.analyze_conversation(prompt, response)
        except Exception as e:
            logger.error(f"‚ùå Error analyzing conversation: {e}")
            return "", ""
    
    async def update_memory_background(self, hardware_id: str, prompt: str, response: str):
        """
        –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            hardware_id: –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prompt: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–º–µ–Ω—è–µ—Ç _update_memory_background() –∏–∑ text_processor.py
        """
        try:
            logger.debug(f"üîÑ Starting background memory update for {hardware_id}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            short_memory, long_memory = await self.analyze_conversation(prompt, response)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
            if short_memory or long_memory:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if not self.db_manager:
                    logger.warning("‚ö†Ô∏è DatabaseManager is not set in MemoryManager; skipping memory update")
                    return
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                success = await asyncio.to_thread(
                    self.db_manager.update_user_memory,
                    hardware_id,
                    short_memory,
                    long_memory
                )
                
                if success:
                    logger.info(f"‚úÖ Memory for {hardware_id} updated: short-term ({len(short_memory)} chars), long-term ({len(long_memory)} chars)")
                else:
                    logger.warning(f"‚ö†Ô∏è Could not update memory for {hardware_id}")
            else:
                logger.debug(f"üß† No information found for {hardware_id} to remember")
                
        except Exception as e:
            logger.error(f"‚ùå Error in background memory update for {hardware_id}: {e}")
            # –ù–ï –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    
    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è –ø–∞–º—è—Ç–∏.
        
        Returns:
            True –µ—Å–ª–∏ –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
        """
        return self.memory_analyzer is not None and self.db_manager is not None
    
    async def cleanup_expired_memory(self, hours: int = 24) -> int:
        """
        –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å.
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –ø–∞–º—è—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        if not self.db_manager:
            return 0
        
        try:
            return await asyncio.to_thread(
                self.db_manager.cleanup_expired_short_term_memory,
                hours
            )
        except Exception as e:
            logger.error(f"‚ùå Error cleaning up expired memory: {e}")
            return 0
