"""
–ü—Ä–æ–≤–∞–π–¥–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
"""

import time
import logging
import sys
import os
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '../../../../'))

from integrations.core.universal_provider_interface import UniversalProviderInterface, ProviderStatus

logger = logging.getLogger(__name__)

class GlobalFlagProvider(UniversalProviderInterface):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        super().__init__("global_flag_provider", 1, config)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        self.global_interrupt_flag = False
        self.interrupt_hardware_id: Optional[str] = None
        self.interrupt_timestamp: Optional[float] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.flag_set_count = 0
        self.flag_reset_count = 0
        self.last_interrupt_time: Optional[float] = None
        
        logger.info("Global Flag Provider created")
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("Initializing Global Flag Provider...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._reset_flags()
            
            self.is_initialized = True
            self.status = ProviderStatus.HEALTHY
            
            logger.info("Global Flag Provider initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"Failed to initialize Global Flag Provider: {e}")
            self.report_error(str(e))
            return False
    
    async def process(self, input_data: Any) -> Any:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–æ–≤
        
        Args:
            input_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            operation = input_data.get("operation", "get_status")
            
            if operation == "set_interrupt_flag":
                return await self.set_interrupt_flag(input_data.get("hardware_id", ""))
            elif operation == "reset_flags":
                return await self.reset_flags()
            elif operation == "check_flag":
                return self.check_interrupt_flag(input_data.get("hardware_id", ""))
            elif operation == "get_status":
                return self.get_flag_status()
            else:
                logger.warning(f"Unknown operation: {operation}")
                return {"success": False, "error": f"Unknown operation: {operation}"}
                
        except Exception as e:
            logger.error(f"Error processing flag request: {e}")
            self.report_error(str(e))
            return {"success": False, "error": str(e)}
    
    async def set_interrupt_flag(self, hardware_id: str) -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        
        Args:
            hardware_id: ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞
        """
        try:
            start_time = time.time()
            
            self.global_interrupt_flag = True
            self.interrupt_hardware_id = hardware_id
            self.interrupt_timestamp = start_time
            self.last_interrupt_time = start_time
            
            self.flag_set_count += 1
            self.report_success()
            
            end_time = time.time()
            set_time = (end_time - start_time) * 1000
            
            logger.warning(f"üö® Global interrupt flag set for {hardware_id} in {set_time:.1f}ms")
            
            return {
                "success": True,
                "hardware_id": hardware_id,
                "timestamp": start_time,
                "set_time_ms": set_time
            }
            
        except Exception as e:
            logger.error(f"Error setting interrupt flag for {hardware_id}: {e}")
            self.report_error(str(e))
            return {"success": False, "error": str(e)}
    
    async def reset_flags(self) -> Dict[str, Any]:
        """
        –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–æ–≤
        """
        try:
            start_time = time.time()
            
            old_hardware_id = self.interrupt_hardware_id
            
            self._reset_flags()
            
            self.flag_reset_count += 1
            self.report_success()
            
            end_time = time.time()
            reset_time = (end_time - start_time) * 1000
            
            logger.info(f"‚úÖ Global interrupt flags reset (was: {old_hardware_id}) in {reset_time:.1f}ms")
            
            return {
                "success": True,
                "old_hardware_id": old_hardware_id,
                "timestamp": start_time,
                "reset_time_ms": reset_time
            }
            
        except Exception as e:
            logger.error(f"Error resetting interrupt flags: {e}")
            self.report_error(str(e))
            return {"success": False, "error": str(e)}
    
    def check_interrupt_flag(self, hardware_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        
        Args:
            hardware_id: ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –°—Ç–∞—Ç—É—Å —Ñ–ª–∞–≥–∞
        """
        try:
            should_interrupt = (
                self.global_interrupt_flag and 
                self.interrupt_hardware_id == hardware_id
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            timeout_expired = False
            if self.interrupt_timestamp:
                current_time = time.time()
                timeout = self.config.get("interrupt_timeout", 5.0)
                timeout_expired = current_time - self.interrupt_timestamp > timeout
            
            if timeout_expired:
                logger.warning(f"Interrupt timeout for {hardware_id}, flag should be reset")
                should_interrupt = False
            
            return {
                "should_interrupt": should_interrupt,
                "global_flag": self.global_interrupt_flag,
                "interrupt_hardware_id": self.interrupt_hardware_id,
                "timeout_expired": timeout_expired,
                "timestamp": time.time()
            }
            
        except Exception as e:
            logger.error(f"Error checking interrupt flag: {e}")
            self.report_error(str(e))
            return {"should_interrupt": False, "error": str(e)}
    
    def get_flag_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–ª–∞–≥–æ–≤
        
        Returns:
            –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤
        """
        try:
            return {
                "global_interrupt_flag": self.global_interrupt_flag,
                "interrupt_hardware_id": self.interrupt_hardware_id,
                "interrupt_timestamp": self.interrupt_timestamp,
                "flag_set_count": self.flag_set_count,
                "flag_reset_count": self.flag_reset_count,
                "last_interrupt_time": self.last_interrupt_time,
                "uptime": time.time() - (self.last_interrupt_time or time.time())
            }
            
        except Exception as e:
            logger.error(f"Error getting flag status: {e}")
            self.report_error(str(e))
            return {"error": str(e)}
    
    def _reset_flags(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–æ–≤"""
        self.global_interrupt_flag = False
        self.interrupt_hardware_id = None
        self.interrupt_timestamp = None
    
    async def cleanup(self) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("Cleaning up Global Flag Provider...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            self._reset_flags()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.flag_set_count = 0
            self.flag_reset_count = 0
            self.last_interrupt_time = None
            
            self.is_initialized = False
            self.status = ProviderStatus.STOPPED
            
            logger.info("Global Flag Provider cleaned up successfully")
            return True
            
        except Exception as e:
            logger.error(f"Error cleaning up Global Flag Provider: {e}")
            self.report_error(str(e))
            return False
