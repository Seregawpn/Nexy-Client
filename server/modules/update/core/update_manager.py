"""
Update Manager - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä Update Module
"""

import asyncio
import logging
from typing import Dict, Any, Optional, AsyncGenerator
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '../../../integrations/core'))

from integrations.core.universal_module_interface import UniversalModuleInterface, ModuleStatus
from ..config import UpdateConfig
from ..providers.version_provider import VersionProvider
from ..providers.manifest_provider import ManifestProvider
from ..providers.artifact_provider import ArtifactProvider
from ..providers.update_server_provider import UpdateServerProvider

logger = logging.getLogger(__name__)


class UpdateManager(UniversalModuleInterface):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä Update Module"""
    
    def __init__(self, config: Optional[UpdateConfig] = None):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è UniversalModuleInterface
        config_dict = (config or UpdateConfig()).to_dict()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        super().__init__(name="update", config=config_dict)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = config or UpdateConfig()
        
        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        self.version_provider = None
        self.manifest_provider = None
        self.artifact_provider = None
        self.update_server_provider = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = None
        self.total_requests = 0
        self.total_downloads = 0
        self.total_errors = 0
        
        # –°—Ç–∞—Ç—É—Å
        self.is_running = False
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UpdateManager...")
            
            if not self.config.enabled:
                logger.info("‚è≠Ô∏è Update Module –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                self.is_initialized = True
                self.set_status(ModuleStatus.READY)
                return True
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self.config.is_valid():
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Update Module")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            await self._initialize_providers()
            
            self.is_initialized = True
            logger.info("‚úÖ UpdateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UpdateManager: {e}")
            return False
    
    async def _initialize_providers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        try:
            # VersionProvider
            self.version_provider = VersionProvider(self.config)
            if not await self.version_provider.initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VersionProvider")
            
            # ManifestProvider
            self.manifest_provider = ManifestProvider(self.config)
            if not await self.manifest_provider.initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ManifestProvider")
            
            # ArtifactProvider
            self.artifact_provider = ArtifactProvider(self.config)
            if not await self.artifact_provider.initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ArtifactProvider")
            
            # UpdateServerProvider
            self.update_server_provider = UpdateServerProvider(
                self.config,
                self.manifest_provider,
                self.artifact_provider,
                self.version_provider
            )
            if not await self.update_server_provider.initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UpdateServerProvider")
            
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            raise
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ UpdateManager...")
            
            if not self.is_initialized:
                logger.error("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if not self.config.enabled:
                logger.info("‚è≠Ô∏è Update Module –æ—Ç–∫–ª—é—á–µ–Ω")
                return True
            
            if self.is_running:
                logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            if not self.update_server_provider:
                logger.error("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            if not await self.update_server_provider.start_server():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞")
                return False
            
            self.is_running = True
            self.start_time = asyncio.get_event_loop().time()
            
            logger.info("‚úÖ UpdateManager –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UpdateManager: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ UpdateManager...")
            
            if not self.is_running:
                logger.info("‚ÑπÔ∏è –ú–æ–¥—É–ª—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            if self.update_server_provider:
                await self.update_server_provider.stop_server()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            if self.version_provider:
                await self.version_provider.stop()
            if self.manifest_provider:
                await self.manifest_provider.stop()
            if self.artifact_provider:
                await self.artifact_provider.stop()
            if self.update_server_provider:
                await self.update_server_provider.stop()
            
            self.is_running = False
            logger.info("‚úÖ UpdateManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ UpdateManager: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è"""
        try:
            uptime = 0
            if self.start_time:
                uptime = asyncio.get_event_loop().time() - self.start_time
            
            status = {
                "status": "running" if self.is_running else "stopped",
                "module": "update",
                "enabled": self.config.enabled,
                "initialized": self.is_initialized,
                "uptime_seconds": uptime,
                "statistics": {
                    "total_requests": self.total_requests,
                    "total_downloads": self.total_downloads,
                    "total_errors": self.total_errors
                },
                "providers": {}
            }
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            if self.version_provider:
                status["providers"]["version"] = self.version_provider.get_status()
            if self.manifest_provider:
                status["providers"]["manifest"] = self.manifest_provider.get_status()
            if self.artifact_provider:
                status["providers"]["artifact"] = self.artifact_provider.get_status()
            if self.update_server_provider:
                status["providers"]["update_server"] = self.update_server_provider.get_status()
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "status": "error",
                "module": "update",
                "error": str(e)
            }
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏—è–º–∏
    def create_version_manifest(self, version: str, artifact_path: str, **kwargs) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        
        Args:
            version: –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            artifact_path: –ü—É—Ç—å –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Optional[Dict[str, Any]]: –°–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –∏–ª–∏ None
        """
        try:
            if not self.is_running:
                logger.error("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return None
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é
            if not self.version_provider.validate_version(version):
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è: {version}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ
            artifact_info = self.artifact_provider.create_artifact_info(artifact_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            artifact_info.update(kwargs)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
            build = self.version_provider.version_to_build(version)
            manifest = self.manifest_provider.create_manifest(version, build, artifact_info)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
            filename = f"manifest_{version}.json"
            self.manifest_provider.save_manifest(manifest, filename)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}")
            return manifest
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}: {e}")
            return None
    
    def get_latest_version(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"""
        try:
            latest_manifest = self.manifest_provider.get_latest_manifest()
            return latest_manifest.get("version") if latest_manifest else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏: {e}")
            return None
    
    def get_version_history(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π"""
        try:
            return self.manifest_provider.get_all_manifests()[:limit]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π: {e}")
            return []
    
    def cleanup_old_artifacts(self, keep_count: int = 5) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        try:
            return self.artifact_provider.cleanup_old_artifacts(keep_count)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {e}")
            return 0
    
    def validate_artifact(self, file_path: str, expected_sha256: Optional[str] = None) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""
        try:
            return self.artifact_provider.validate_artifact(file_path, expected_sha256)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ {file_path}: {e}")
            return False
    
    def get_artifact_info(self, file_path: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ"""
        try:
            return self.artifact_provider.get_file_info(file_path)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ {file_path}: {e}")
            return None
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è"""
        try:
            uptime = 0
            if self.start_time:
                uptime = asyncio.get_event_loop().time() - self.start_time
            
            return {
                "uptime_seconds": uptime,
                "uptime_formatted": self._format_uptime(uptime),
                "total_requests": self.total_requests,
                "total_downloads": self.total_downloads,
                "total_errors": self.total_errors,
                "success_rate": self._calculate_success_rate(),
                "is_running": self.is_running,
                "enabled": self.config.enabled
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "error": str(e)
            }
    
    def _format_uptime(self, uptime_seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            hours = int(uptime_seconds // 3600)
            minutes = int((uptime_seconds % 3600) // 60)
            seconds = int(uptime_seconds % 60)
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        except Exception:
            return "00:00:00"
    
    def _calculate_success_rate(self) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            total_operations = self.total_requests + self.total_downloads
            if total_operations == 0:
                return 100.0
            
            successful_operations = total_operations - self.total_errors
            return round((successful_operations / total_operations) * 100, 2)
        except Exception:
            return 0.0
    
    async def process(self, input_data: Dict[str, Any]) -> AsyncGenerator[Dict[str, Any], None]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç—Å—è UniversalModuleInterface)
        
        Args:
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Yields:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –î–ª—è Update Module process –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ,
            # —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ HTTP —Å–µ—Ä–≤–µ—Ä
            logger.debug(f"UpdateManager.process –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {input_data}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
            yield {
                "status": "processed",
                "module": "update",
                "message": "Update Module —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞",
                "data": input_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process: {e}")
            yield {
                "status": "error",
                "module": "update",
                "error": str(e),
                "data": input_data
            }
    
    async def cleanup(self) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–æ–¥—É–ª—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è UniversalModuleInterface)
        
        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ UpdateManager...")
            
            # –í—ã–∑—ã–≤–∞–µ–º stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.stop()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            if self.start_time:
                self.start_time = None
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.total_requests = 0
            self.total_downloads = 0
            self.total_errors = 0
            
            logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã UpdateManager –æ—á–∏—â–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ UpdateManager: {e}")
            return False
