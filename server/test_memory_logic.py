#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞
"""

import sys
sys.path.append('.')

from memory_analyzer import MemoryAnalyzer

def test_memory_extraction_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MemoryAnalyzer –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API
    analyzer = MemoryAnalyzer.__new__(MemoryAnalyzer)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    test_cases = [
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SHORT/LONG MEMORY",
            "response": """SHORT MEMORY: User introduced themselves as Sergei, developer from Moscow
LONG MEMORY: User's name is Sergei, they are a developer from Moscow""",
            "expected_short": "User introduced themselves as Sergei, developer from Moscow",
            "expected_long": "User's name is Sergei, they are a developer from Moscow"
        },
        {
            "name": "–§–æ—Ä–º–∞—Ç —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º",
            "response": """SHORT MEMORY: Current conversation about user introduction
LONG MEMORY: Sergei is a developer from Moscow""",
            "expected_short": "Current conversation about user introduction",
            "expected_long": "Sergei is a developer from Moscow"
        },
        {
            "name": "–§–æ—Ä–º–∞—Ç –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è",
            "response": """SHORT MEMORY User mentioned their name and profession
LONG MEMORY User's name is Sergei""",
            "expected_short": "",
            "expected_long": ""
        },
        {
            "name": "–°–º–µ—à–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
            "response": """Here's the analysis:
SHORT MEMORY: User introduced themselves
LONG MEMORY: User's name is Sergei""",
            "expected_short": "User introduced themselves",
            "expected_long": "User's name is Sergei"
        },
        {
            "name": "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç",
            "response": "No memory updates needed",
            "expected_short": "",
            "expected_long": ""
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"üìù –û—Ç–≤–µ—Ç: {test_case['response'][:100]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        short_memory, long_memory = analyzer._extract_memory_from_response(test_case['response'])
        
        print(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: '{short_memory}'")
        print(f"üìö –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: '{long_memory}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        short_correct = short_memory == test_case['expected_short']
        long_correct = long_memory == test_case['expected_long']
        
        if short_correct and long_correct:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
            if not short_correct:
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_case['expected_short']}'")
            if not long_correct:
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_case['expected_long']}'")
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º:")
    print("1. MemoryAnalyzer –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'SHORT MEMORY:' –∏ 'LONG MEMORY:'")
    print("2. –ï—Å–ª–∏ Gemini –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–∞–º—è—Ç—å –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è")
    print("3. –ù—É–∂–Ω–æ –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç, –ª–∏–±–æ —É–ª—É—á—à–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç MemoryAnalyzer, —á—Ç–æ–±—ã Gemini –≤–æ–∑–≤—Ä–∞—â–∞–ª –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    print("2. –î–æ–±–∞–≤–∏—Ç—å fallback –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
    print("3. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Gemini")

if __name__ == "__main__":
    test_memory_extraction_logic()
