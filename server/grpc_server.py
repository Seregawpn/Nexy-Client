import asyncio
import logging
import grpc
from concurrent.futures import ThreadPoolExecutor
import sys
import os
import numpy as np
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streaming_pb2
import streaming_pb2_grpc
from config import Config
from text_processor import TextProcessor
from audio_generator import AudioGenerator
from database.database_manager import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class StreamingServicer(streaming_pb2_grpc.StreamingServiceServicer):
    """gRPC —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self):
        self.text_processor = TextProcessor()
        self.audio_generator = AudioGenerator()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db_url = Config.get_database_url()
            self.db_manager = DatabaseManager(db_url)
            if self.db_manager.connect():
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                self.db_manager = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db_manager = None

    def StreamAudio(self, request, context):
        """–°—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ LangChain streaming"""
        prompt = request.prompt
        screenshot_base64 = request.screenshot if request.HasField('screenshot') else None
        screen_width = request.screen_width if request.HasField('screen_width') else 0
        screen_height = request.screen_height if request.HasField('screen_height') else 0
        hardware_id = request.hardware_id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç: {prompt}")
        logger.info(f"Hardware ID: {hardware_id}")
        
        if screenshot_base64:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {screen_width}x{screen_height} –ø–∏–∫—Å–µ–ª–µ–π, {len(screenshot_base64)} —Å–∏–º–≤–æ–ª–æ–≤ Base64")
        else:
            logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        
        try:
            # –ê–°–ò–ù–•–†–û–ù–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Hardware ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
            if hardware_id and self.db_manager:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–µ—Ç–æ–¥
                screen_info_for_db = {}
                if screen_width > 0 and screen_height > 0:
                    screen_info_for_db = {
                        'width': screen_width,
                        'height': screen_height
                    }
                self._process_hardware_id_async(hardware_id, prompt, screenshot_base64, screen_info_for_db)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º LangChain streaming –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            logger.info("–ó–∞–ø—É—Å–∫–∞—é LangChain streaming —á–µ—Ä–µ–∑ Gemini...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ
                screen_info = {}
                if screen_width > 0 and screen_height > 0:
                    screen_info = {
                        'width': screen_width,
                        'height': screen_height
                    }
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
                async def collect_tokens():
                    tokens = []
                    async for token in self.text_processor.generate_response_stream(
                        prompt, 
                        screenshot_base64, 
                        screen_info
                    ):
                        if token and token.strip():
                            tokens.append(token)
                    return tokens
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                tokens = loop.run_until_complete(collect_tokens())
                
                if not tokens:
                    logger.error("LangChain –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω—ã")
                    error_response = streaming_pb2.StreamResponse(
                        error_message="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
                    )
                    yield error_response
                    return
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç LangChain Gemini")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
                for token in tokens:
                    if token and token.strip():
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç—É
                        text_response = streaming_pb2.StreamResponse(
                            text_chunk=token
                        )
                        yield text_response
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                        try:
                            audio_chunks = self.audio_generator.generate_audio_sync(token)
                            
                            if audio_chunks:
                                logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(audio_chunks)} –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {token[:30]}...")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞—É–¥–∏–æ —á–∞–Ω–∫
                                for audio_chunk in audio_chunks:
                                    audio_response = streaming_pb2.StreamResponse(
                                        audio_chunk=streaming_pb2.AudioChunk(
                                            audio_data=audio_chunk.tobytes(),
                                            dtype=str(audio_chunk.dtype),
                                            shape=list(audio_chunk.shape)
                                        )
                                    )
                                    yield audio_response
                            else:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {token[:30]}...")
                                
                        except Exception as audio_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {audio_error}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É–¥–∏–æ
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                end_response = streaming_pb2.StreamResponse(
                    end_message="–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
                )
                yield end_response
                    
                logger.info("LangChain streaming –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.")
                
            finally:
                loop.close()
                
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ LangChain streaming: {e}")
            error_response = streaming_pb2.StreamResponse(
                error_message=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}"
            )
            yield error_response
    
    def _process_hardware_id_async(self, hardware_id: str, prompt: str, screenshot_base64: str = None, screen_info: dict = None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Hardware ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            import threading
            
            def process_in_thread():
                try:
                    if not self.db_manager:
                        logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hardware ID")
                        return
                    
                    logger.info(f"üÜî –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Hardware ID: {hardware_id[:16]}...")
                    logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: {prompt[:50]}...")
                    
                    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = self.db_manager.get_user_by_hardware_id(hardware_id)
                    if not user:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_metadata = {
                            "hardware_id": hardware_id,
                            "first_command": prompt,
                            "created_via": "gRPC"
                        }
                        user_id = self.db_manager.create_user(hardware_id, user_metadata)
                        if user_id:
                            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
                        else:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                            return
                    else:
                        user_id = user['id']
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
                    
                    # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    session_metadata = {
                        "prompt": prompt,
                        "has_screenshot": bool(screenshot_base64),
                        "screen_resolution": f"{screen_info.get('width', 0)}x{screen_info.get('height', 0)}" if screen_info else "unknown"
                    }
                    session_id = self.db_manager.create_session(user_id, session_metadata)
                    if not session_id:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
                        return
                    
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
                    
                    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    command_metadata = {
                        "prompt_length": len(prompt),
                        "has_screenshot": bool(screenshot_base64),
                        "screen_info": screen_info or {}
                    }
                    command_id = self.db_manager.create_command(session_id, prompt, command_metadata)
                    if not command_id:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
                        return
                    
                    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {command_id}")
                    
                    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if screenshot_base64:
                        screenshot_metadata = {
                            "base64_length": len(screenshot_base64),
                            "screen_resolution": f"{screen_info.get('width', 0)}x{screen_info.get('height', 0)}" if screen_info else "unknown",
                            "format": "webp_base64"
                        }
                        screenshot_id = self.db_manager.create_screenshot(session_id, screenshot_metadata)
                        if screenshot_id:
                            logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_id}")
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
                    
                    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    performance_metadata = {
                        "command_processing": {
                            "prompt_length": len(prompt),
                            "has_screenshot": bool(screenshot_base64),
                            "timestamp": str(datetime.now())
                        }
                    }
                    metric_id = self.db_manager.create_performance_metric(session_id, "command_processing", performance_metadata)
                    if metric_id:
                        logger.info(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metric_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hardware ID: {e}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    if self.db_manager:
                        try:
                            self.db_manager.create_error_log(
                                session_id=None,
                                error_type="hardware_id_processing",
                                error_message=str(e),
                                metadata={"hardware_id": hardware_id[:16]}
                            )
                        except:
                            pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=process_in_thread, daemon=True)
            thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hardware ID: {e}")

def serve():
    """–ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not Config.validate():
            logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return
        
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")
        
        # –°–æ–∑–¥–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
        server = grpc.server(ThreadPoolExecutor(max_workers=Config.MAX_WORKERS))
        streaming_pb2_grpc.add_StreamingServiceServicer_to_server(StreamingServicer(), server)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_address = f"{Config.GRPC_HOST}:{Config.GRPC_PORT}"
        server.add_insecure_port(server_address)
        server.start()
        
        logger.info(f"gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {server_address}")
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        server.wait_for_termination()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    serve()
