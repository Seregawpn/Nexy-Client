import asyncio
import logging
import grpc.aio              
from concurrent.futures import ThreadPoolExecutor
import sys                     
import os
import numpy as np
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Protobuf —Ñ–∞–π–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ streaming.proto
import streaming_pb2
import streaming_pb2_grpc
from config import Config
from text_processor import TextProcessor
from audio_generator import AudioGenerator
from database.database_manager import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def _get_dtype_string(dtype) -> str:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç numpy dtype –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è protobuf"""
    if hasattr(dtype, 'name'):
        return dtype.name  # np.int16 -> 'int16'
    dtype_str = str(dtype)
    if dtype_str == '<i2':
        return 'int16'
    elif dtype_str == '<f4':
        return 'float32'
    elif dtype_str == '<f8':
        return 'float64'
    return dtype_str

class StreamingServicer(streaming_pb2_grpc.StreamingServiceServicer):
    """gRPC —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    
    def __init__(self):
        self.text_processor = TextProcessor()
        self.audio_generator = AudioGenerator()
        
        # –ö–†–ò–¢–ò–ß–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.active_sessions = {}  # {session_id: {'task': task, 'cancelled': False}}
        self.session_counter = 0
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ì–õ–û–ë–ê–õ–¨–ù–´–ô —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –ú–ì–ù–û–í–ï–ù–ù–û–ô –æ—Ç–º–µ–Ω—ã
        self.global_interrupt_flag = False
        self.interrupt_hardware_id = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db_url = Config.get_database_url()
            self.db_manager = DatabaseManager(db_url)
            if self.db_manager.connect():
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DatabaseManager –≤ TextProcessor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é
                self.text_processor.set_database_manager(self.db_manager)
                logger.info("‚úÖ DatabaseManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ TextProcessor")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                self.db_manager = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db_manager = None

    async def StreamAudio(self, request, context):
        """
        –ê–°–ò–ù–•–†–û–ù–ù–´–ô —Å—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–º–ø—Ç.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç async for –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞ –∏ –∞—É–¥–∏–æ.
        """
        stream_start_time = asyncio.get_event_loop().time()
        logger.info(f"üö® StreamAudio() –Ω–∞—á–∞—Ç –≤ {stream_start_time:.3f}")
        
        prompt = request.prompt
        screenshot_base64 = request.screenshot if request.HasField('screenshot') else None
        screen_width = request.screen_width if request.HasField('screen_width') else 0
        screen_height = request.screen_height if request.HasField('screen_height') else 0
        hardware_id = request.hardware_id
        
        logger.info(f"   üìù –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        logger.info(f"   üÜî Hardware ID: {hardware_id[:20] if hardware_id else 'None'}...")
        logger.info(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {'–î–∞' if screenshot_base64 else '–ù–µ—Ç'}")
        
        # üîπ –°–ø–µ—Ü-—Ä–µ–∂–∏–º: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–º–∏–Ω—É–µ–º LLM/–ë–î, —Å—Ä–∞–∑—É TTS)
        if isinstance(prompt, str) and prompt.startswith("__GREETING__:"):
            greeting_text = prompt.split(":", 1)[1].strip()
            logger.info(f"üé¨ –†–µ–∂–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –¢–µ–∫—Å—Ç: {greeting_text[:100]}...")
            try:
                audio_chunk_complete = await self.audio_generator.generate_audio(greeting_text)
                if audio_chunk_complete is not None and len(audio_chunk_complete) > 0:
                    yield streaming_pb2.StreamResponse(
                        audio_chunk=streaming_pb2.AudioChunk(
                            audio_data=audio_chunk_complete.tobytes(),
                            dtype=_get_dtype_string(audio_chunk_complete.dtype),
                            shape=list(audio_chunk_complete.shape)
                        )
                    )
                yield streaming_pb2.StreamResponse(end_message="greeting_done")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
                yield streaming_pb2.StreamResponse(error_message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            return
        
        # –ö–†–ò–¢–ò–ß–ù–û: —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        session_id = f"session_{self.session_counter}_{hardware_id[:8] if hardware_id else 'unknown'}"
        self.session_counter += 1
        
        # –ö–†–ò–¢–ò–ß–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        if self.interrupt_hardware_id == hardware_id:
            self.global_interrupt_flag = False
            self.interrupt_hardware_id = None
            logger.info(f"üîÑ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ {hardware_id}")
        
        logger.info(f"üöÄ –ù–û–í–ê–Ø –°–ï–°–°–ò–Ø {session_id}: {prompt}")
        logger.info(f"Hardware ID: {hardware_id}")
        
        if screenshot_base64:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {screen_width}x{screen_height} –ø–∏–∫—Å–µ–ª–µ–π, {len(screenshot_base64)} —Å–∏–º–≤–æ–ª–æ–≤ Base64")
        else:
            logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
            self.active_sessions[session_id] = {'cancelled': False, 'start_time': asyncio.get_event_loop().time()}
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è")
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ë–î (–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É)
            if hardware_id and self.db_manager:
                screen_info_for_db = {'width': screen_width, 'height': screen_height} if screen_width > 0 else {}
                asyncio.create_task(self._process_hardware_id(hardware_id, prompt, screenshot_base64, screen_info_for_db))
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Gemini Live API streaming –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}...")
            
            screen_info = {'width': screen_width, 'height': screen_height} if screen_width > 0 else {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π hardware_id –¥–ª—è –ø–∞–º—è—Ç–∏
            text_generator = self.text_processor.generate_response_stream(
                prompt=prompt, 
                hardware_id=hardware_id,
                screenshot_base64=screenshot_base64,
                # –ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ñ–ª–∞–≥—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                interrupt_checker=lambda: (self.global_interrupt_flag and self.interrupt_hardware_id == hardware_id)
            )
            
            # –°—Ç—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞ —Å—Ç—Ä–∏–º–∏–º –∞—É–¥–∏–æ
            iteration_count = 0
            logger.info(f"   üîÑ –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            
            async for text_chunk in text_generator:
                iteration_count += 1
                chunk_time = asyncio.get_event_loop().time()
                logger.info(f"   üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞–Ω–∫ {iteration_count} –≤ {chunk_time:.3f}")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                if self.global_interrupt_flag and self.interrupt_hardware_id == hardware_id:
                    logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù –¥–ª—è {hardware_id} - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ –¢–ï–ö–°–¢–ê!")
                    logger.info(f"   üö´ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–µ {iteration_count} - –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ —Ç–µ–∫—Å—Ç–∞")
                    break
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
                if session_id in self.active_sessions and self.active_sessions[session_id]['cancelled']:
                    logger.warning(f"üö® –°–µ—Å—Å–∏—è {session_id} –û–¢–ú–ï–ù–ï–ù–ê - –ø—Ä–µ—Ä—ã–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞!")
                    break
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º gRPC –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–º–µ–Ω—É
                try:
                    if hasattr(context, 'cancelled') and context.cancelled():
                        logger.warning(f"üö® gRPC –∑–∞–¥–∞—á–∞ –û–¢–ú–ï–ù–ï–ù–ê –≤ —Ü–∏–∫–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}!")
                        break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ gRPC –æ—Ç–º–µ–Ω—ã –≤ —Ü–∏–∫–ª–µ —Ç–µ–∫—Å—Ç–∞: {e}")
                    pass
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                if self.global_interrupt_flag and self.interrupt_hardware_id == hardware_id:
                    logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù –¥–ª—è {hardware_id} - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –í–°–ï!")
                    break
                
                # –ö–†–ò–¢–ò–ß–ù–û: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –ö–ê–ñ–î–û–ô –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if iteration_count % 1 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–ê–ñ–î–£–Æ –∏—Ç–µ—Ä–∞—Ü–∏—é!
                    if self.global_interrupt_flag and self.interrupt_hardware_id == hardware_id:
                        logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù –¥–ª—è {hardware_id} - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –í–°–ï!")
                        break
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
                if session_id in self.active_sessions and self.active_sessions[session_id]['cancelled']:
                    logger.warning(f"üö® –°–µ—Å—Å–∏—è {session_id} –û–¢–ú–ï–ù–ï–ù–ê - –ø—Ä–µ—Ä—ã–≤–∞—é —Å—Ç—Ä–∏–º–∏–Ω–≥!")
                    break
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cancel (–∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞) - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    if hasattr(context, 'cancelled') and context.cancelled():
                        logger.warning(f"üö® gRPC –∑–∞–¥–∞—á–∞ –û–¢–ú–ï–ù–ï–ù–ê –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}!")
                        break
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è gRPC: {e}")
                    pass
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if iteration_count % 3 == 0:
                    logger.info(f"üîç –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: –∏—Ç–µ—Ä–∞—Ü–∏—è {iteration_count}")
                    if session_id in self.active_sessions and self.active_sessions[session_id]['cancelled']:
                        logger.warning(f"üö® –°–µ—Å—Å–∏—è {session_id} –û–¢–ú–ï–ù–ï–ù–ê –Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ!")
                        break
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è)
                current_time = asyncio.get_event_loop().time()
                session_start_time = self.active_sessions[session_id]['start_time']
                if current_time - session_start_time > 30.0:  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                    logger.warning(f"üö® –°–µ—Å—Å–∏—è {session_id} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (30s) - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é!")
                    break
                
                if text_chunk and text_chunk.strip():
                    # –ö–†–ò–¢–ò–ß–ù–û: –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                    if self.global_interrupt_flag and self.interrupt_hardware_id == hardware_id:
                        logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù –¥–ª—è {hardware_id} - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ –ê–£–î–ò–û!")
                        break
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∞—É–¥–∏–æ
                    if session_id in self.active_sessions and self.active_sessions[session_id]['cancelled']:
                        logger.warning(f"üö® –°–µ—Å—Å–∏—è {session_id} –û–¢–ú–ï–ù–ï–ù–ê - –ø—Ä–µ—Ä—ã–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ!")
                        break
                    
                    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞–Ω–∫ –∫–ª–∏–µ–Ω—Ç—É (–æ—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä LangChain)
                    clean_text_chunk = text_chunk
                    if text_chunk.startswith("__LANGCHAIN_TEXT_ONLY__:"):
                        clean_text_chunk = text_chunk.replace("__LANGCHAIN_TEXT_ONLY__:", "", 1)
                    
                    yield streaming_pb2.StreamResponse(text_chunk=clean_text_chunk)
                    
                    # 2. üöÄ –ü–û–¢–û–ö–û–í–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    # üîÑ –ü–†–û–í–ï–†–Ø–ï–ú: –µ—Å–ª–∏ —ç—Ç–æ LangChain fallback (TEXT_ONLY), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ
                    if text_chunk.startswith("__LANGCHAIN_TEXT_ONLY__:"):
                        logger.info(f"   üîÑ [GRPC_SERVER] LangChain fallback detected - –ø—Ä–æ–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –¥–ª—è —á–∞–Ω–∫–∞ {iteration_count}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        yield streaming_pb2.StreamResponse(audio_chunk=streaming_pb2.AudioChunk(
                            audio_data=b"",
                            dtype="int16",
                            shape=[0]
                        ))
                        continue
                    
                    try:
                        logger.info(f"   üéµ –ù–∞—á–∏–Ω–∞—é –ü–û–¢–û–ö–û–í–£–Æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –¥–ª—è —á–∞–Ω–∫–∞ {iteration_count}...")
                        audio_start_time = asyncio.get_event_loop().time()
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥
                        audio_chunk_count = 0
                        async for audio_chunk in self.audio_generator.generate_streaming_audio(text_chunk):
                            audio_chunk_count += 1
                            logger.info(f"   üéµ [GRPC_SERVER] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫ {audio_chunk_count} –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {len(audio_chunk) if audio_chunk is not None else 'None'} —Å—ç–º–ø–ª–æ–≤")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥–æ–≥–æ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞
                            if self.global_interrupt_flag and self.interrupt_hardware_id == hardware_id:
                                logger.warning(f"üö® [GRPC_SERVER] –ü–†–ï–†–´–í–ê–ù–ò–ï –ê–ö–¢–ò–í–ù–û –¥–ª—è {hardware_id} - –ø—Ä–µ—Ä—ã–≤–∞—é –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ!")
                                break
                            
                            if session_id in self.active_sessions and self.active_sessions[session_id]['cancelled']:
                                logger.warning(f"üö® [GRPC_SERVER] –°–µ—Å—Å–∏—è {session_id} –û–¢–ú–ï–ù–ï–ù–ê - –ø—Ä–µ—Ä—ã–≤–∞—é –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ!")
                                break
                            
                            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ —á–∞–Ω–∫ –Ω–µ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                            if audio_chunk is not None and len(audio_chunk) > 0:
                                logger.info(f"   üéµ [GRPC_SERVER] –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ —á–∞–Ω–∫ {audio_chunk_count} –∫–ª–∏–µ–Ω—Ç—É: {len(audio_chunk)} —Å—ç–º–ø–ª–æ–≤")
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫ –∫–ª–∏–µ–Ω—Ç—É
                                yield streaming_pb2.StreamResponse(
                                    audio_chunk=streaming_pb2.AudioChunk(
                                        audio_data=audio_chunk.tobytes(),
                                        dtype=_get_dtype_string(audio_chunk.dtype),
                                        shape=list(audio_chunk.shape)
                                    )
                                )
                                logger.info(f"   ‚úÖ [GRPC_SERVER] –ê—É–¥–∏–æ —á–∞–Ω–∫ {audio_chunk_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                            else:
                                logger.debug(f"   üîá [GRPC_SERVER] –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫ {audio_chunk_count}")
                        
                        logger.info(f"   üéµ [GRPC_SERVER] –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {audio_chunk_count} —á–∞–Ω–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                        
                        audio_gen_time = (asyncio.get_event_loop().time() - audio_start_time) * 1000
                        logger.info(f"   ‚è±Ô∏è –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {audio_gen_time:.1f}ms")
                        
                    except Exception as audio_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è '{text_chunk[:30]}...': {audio_error}")

            stream_end_time = asyncio.get_event_loop().time()
            total_stream_time = stream_end_time - stream_start_time
            logger.info(f"‚úÖ Gemini Live API streaming –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∞: {total_stream_time:.1f}s")
            logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {iteration_count}")
                
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ StreamAudio –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}", exc_info=True)
            yield streaming_pb2.StreamResponse(
                error_message=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}"
            )
        finally:
            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É - –¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è InterruptSession RPC
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            try:
                if session_id in self.active_sessions:
                    # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ø–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É!
                    # –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                    # –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (30 —Å–µ–∫—É–Ω–¥) –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
                    logger.info(f"‚è∞ –°–µ—Å—Å–∏—è {session_id} –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
                    asyncio.create_task(self._auto_cleanup_old_sessions())
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
                    if self.interrupt_hardware_id == hardware_id:
                        self.global_interrupt_flag = False
                        self.interrupt_hardware_id = None
                        logger.info(f"üîÑ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {hardware_id}")
                        
            except Exception as cleanup_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {cleanup_error}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                if session_id in self.active_sessions:
                    del self.active_sessions[session_id]
                    logger.info(f"üßπ –°–µ—Å—Å–∏—è {session_id} –æ—á–∏—â–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (fallback)")
    
    def InterruptSession(self, request, context):
        """
        –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
        –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!
        """
        import time
        interrupt_start_time = time.time()
        hardware_id = request.hardware_id
        
        logger.warning(f"üö® InterruptSession() –≤—ã–∑–≤–∞–Ω –≤ {interrupt_start_time:.3f}")
        logger.warning(f"üö® –ó–ê–ü–†–û–° –ù–ê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ï–†–´–í–ê–ù–ò–ï –¥–ª—è Hardware ID: {hardware_id}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        active_sessions_count = len(self.active_sessions)
        global_flag_before = self.global_interrupt_flag
        interrupt_hw_before = self.interrupt_hardware_id
        logger.info(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û: active_sessions={active_sessions_count}, global_flag={global_flag_before}, interrupt_hw={interrupt_hw_before}")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        flag_start_time = time.time()
        self.global_interrupt_flag = True
        self.interrupt_hardware_id = hardware_id
        flag_time = (time.time() - flag_start_time) * 1000
        logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –£–°–¢–ê–ù–û–í–õ–ï–ù –¥–ª—è {hardware_id} –∑–∞ {flag_time:.1f}ms")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            # 1Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é LLM –í–°–ï–ì–î–ê
            if hasattr(self.text_processor, 'cancel_generation'):
                self.text_processor.cancel_generation()
                logger.warning(f"üö® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LLM –ú–ì–ù–û–í–ï–ù–ù–û –û–¢–ú–ï–ù–ï–ù–ê –¥–ª—è {hardware_id}!")
            
            # 2Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –í–°–ï–ì–î–ê
            if hasattr(self.audio_generator, 'stop_generation'):
                self.audio_generator.stop_generation()
                logger.warning(f"üö® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –ú–ì–ù–û–í–ï–ù–ù–û –û–¢–ú–ï–ù–ï–ù–ê –¥–ª—è {hardware_id}!")
            
            if hasattr(self.text_processor, 'clear_buffers'):
                self.text_processor.clear_buffers()
                logger.warning(f"üö® –ë—É—Ñ–µ—Ä—ã LLM –ú–ì–ù–û–í–ï–ù–ù–û –û–ß–ò–©–ï–ù–´ –¥–ª—è {hardware_id}!")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        
        # –ü–†–û–°–¢–û–ô –°–ë–†–û–° –í–°–ï–ì–û - –Ω–µ –≤–∞–∂–Ω–æ –Ω–∞–π–¥–µ–Ω—ã —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –Ω–µ—Ç!
        logger.warning(f"üö® –ü–†–û–°–¢–û–ô –°–ë–†–û–° –í–°–ï–ì–û –¥–ª—è {hardware_id} - –Ω–µ –≤–∞–∂–Ω–æ –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏!")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
        try:
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –í–°–ï–ì–î–ê
            if hasattr(self.audio_generator, 'stop_generation'):
                self.audio_generator.stop_generation()
                logger.warning(f"üö® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –¥–ª—è {hardware_id}!")
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –í–°–ï–ì–î–ê
            if hasattr(self.text_processor, 'clear_buffers'):
                self.text_processor.clear_buffers()
                logger.warning(f"üö® –ë—É—Ñ–µ—Ä—ã LLM –ú–ì–ù–û–í–ï–ù–ù–û –û–ß–ò–©–ï–ù–´ –¥–ª—è {hardware_id}!")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–æ–≤: {e}")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö - —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!
        interrupt_end_time = time.time()
        total_interrupt_time = (interrupt_end_time - interrupt_start_time) * 1000
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        active_sessions_after = len(self.active_sessions)
        global_flag_after = self.global_interrupt_flag
        interrupt_hw_after = self.interrupt_hardware_id
        logger.info(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï: active_sessions={active_sessions_after}, global_flag={global_flag_after}, interrupt_hw={interrupt_hw_after}")
        logger.warning(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {total_interrupt_time:.1f}ms")
        
        logger.warning(f"‚úÖ –ü–†–û–°–¢–û–ô –°–ë–†–û–° –í–°–ï–ì–û –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {hardware_id}!")
        return streaming_pb2.InterruptResponse(
            success=True,
            interrupted_sessions=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
            message="–ü–†–û–°–¢–û–ô –°–ë–†–û–° –í–°–ï–ì–û –≤—ã–ø–æ–ª–Ω–µ–Ω - –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        )
    
    async def _delayed_cleanup_session(self, session_id, delay=1.0):
        """
        –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ - –¥–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è InterruptSession RPC
        –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
        """
        try:
            await asyncio.sleep(delay)
            if session_id in self.active_sessions:
                # –ö–†–ò–¢–ò–ß–ù–û: –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
                session_info = self.active_sessions[session_id]
                if 'task' in session_info and session_info['task']:
                    try:
                        session_info['task'].cancel()
                        logger.warning(f"üö® –ó–∞–¥–∞—á–∞ {session_id} –ú–ì–ù–û–í–ï–ù–ù–û –û–¢–ú–ï–ù–ï–ù–ê!")
                    except:
                        pass
                
                # –ö–†–ò–¢–ò–ß–ù–û: –æ—á–∏—â–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –∏ –±—É—Ñ–µ—Ä—ã
                try:
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å
                    if hasattr(self.audio_generator, 'is_busy'):
                        if self.audio_generator.is_busy():
                            self.audio_generator.stop_generation()
                            logger.warning(f"üö® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –¥–ª—è {session_id}!")
                        else:
                            logger.info(f"‚ÑπÔ∏è –ê—É–¥–∏–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –¥–ª—è {session_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±—É—Ñ–µ—Ä–æ–≤")
                except:
                    pass
                
                # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
                del self.active_sessions[session_id]
                logger.info(f"üßπ –°–µ—Å—Å–∏—è {session_id} –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
            else:
                logger.info(f"‚ÑπÔ∏è –°–µ—Å—Å–∏—è {session_id} —É–∂–µ –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            try:
                if session_id in self.active_sessions:
                    del self.active_sessions[session_id]
                    logger.info(f"üßπ –°–µ—Å—Å–∏—è {session_id} –æ—á–∏—â–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (fallback)")
            except:
                pass
    
    async def _auto_cleanup_old_sessions(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.
        """
        try:
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
            await asyncio.sleep(30.0)
            
            current_time = asyncio.get_event_loop().time()
            sessions_to_cleanup = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            for session_id, session_info in list(self.active_sessions.items()):
                if 'start_time' in session_info:
                    session_age = current_time - session_info['start_time']
                    if session_age > 30.0:  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                        sessions_to_cleanup.append(session_id)
                        logger.warning(f"üö® –°–µ—Å—Å–∏—è {session_id} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({session_age:.1f}s) - –ø–ª–∞–Ω–∏—Ä—É—é –æ—á–∏—Å—Ç–∫—É")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
            for session_id in sessions_to_cleanup:
                try:
                    if session_id in self.active_sessions:
                        del self.active_sessions[session_id]
                        logger.info(f"üßπ –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è {session_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
    
    async def _process_hardware_id(self, hardware_id: str, prompt: str, screenshot_base64: str = None, screen_info: dict = None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if not self.db_manager:
            logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hardware ID")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ executor'–µ
            loop = asyncio.get_running_loop()
            await loop.run_in_executor(None, self._process_hardware_id_sync, hardware_id, prompt, screenshot_base64, screen_info)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ hardware_id: {e}")
    
    def _process_hardware_id_sync(self, hardware_id: str, prompt: str, screenshot_base64: str = None, screen_info: dict = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ ThreadPoolExecutor."""
        try:
            logger.info(f"üÜî –û–±—Ä–∞–±–æ—Ç–∫–∞ Hardware ID –≤ –ø–æ—Ç–æ–∫–µ: {hardware_id[:16]}...")
            
            # 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db_manager.get_user_by_hardware_id(hardware_id)
            if not user:
                logger.info(f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ...")
                user_id = self.db_manager.create_user(hardware_id, {"created_via": "gRPC"})
                if not user_id:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {hardware_id}")
                    return
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            else:
                user_id = user['id']
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

            # 2. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            if not user_id:
                logger.error(f"‚ùå user_id = None! –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
                return
                
            logger.info(f"üÜî –°–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            session_id = self.db_manager.create_session(user_id, {"prompt": prompt})
            if not session_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
                return
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")

            # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            if not session_id:
                logger.error(f"‚ùå session_id = None! –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
                return
                
            logger.info(f"üÜî –°–æ–∑–¥–∞—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
            command_metadata = {"has_screenshot": bool(screenshot_base64)}
            if screen_info:
                command_metadata['screen_info'] = screen_info
                
            command_id = self.db_manager.create_command(session_id, prompt, command_metadata)
            if not command_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
                return
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {command_id}")

            # 4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if screenshot_base64 and session_id:
                logger.info(f"üÜî –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
                import json
                screenshot_metadata = {
                    "base64_length": len(screenshot_base64),
                    "format": "webp_base64"
                }
                if screen_info:
                    screenshot_metadata["screen_resolution"] = f"{screen_info.get('width', 0)}x{screen_info.get('height', 0)}"
                
                screenshot_id = self.db_manager.create_screenshot(
                    session_id, 
                    f"/tmp/screenshot_{session_id}.webp", 
                    None,  # file_url = None
                    screenshot_metadata  # metadata –∫–∞–∫ dict
                )
                if screenshot_id:
                    logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {screenshot_id}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hardware ID: {e}", exc_info=True)


async def serve():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞—É–¥–∏–æ + —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)
    options = [
        ('grpc.max_send_message_length', 50 * 1024 * 1024),  # 50MB
        ('grpc.max_receive_message_length', 50 * 1024 * 1024),  # 50MB
        ('grpc.max_metadata_size', 1024 * 1024),  # 1MB –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    ]
    
    server = grpc.aio.server(options=options)
    streaming_pb2_grpc.add_StreamingServiceServicer_to_server(StreamingServicer(), server)
    
    server_address = f"{Config.GRPC_HOST}:{Config.GRPC_PORT}"
    server.add_insecure_port(server_address)
    
    logger.info(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {server_address}")
    logger.info(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: 50MB")
    await server.start()
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    try:
        await server.wait_for_termination()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...")
        await server.stop(0)
    finally:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not Config.validate():
        logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –°–µ—Ä–≤–µ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        sys.exit(1)
    
    asyncio.run(serve())
