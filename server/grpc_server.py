#!/usr/bin/env python3
"""
–ù–æ–≤—ã–π gRPC —Å–µ—Ä–≤–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π grpc_server.py —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import asyncio
import logging
import grpc.aio
from concurrent.futures import ThreadPoolExecutor
import sys
import os
import numpy as np
from datetime import datetime
from typing import Dict, Any, Optional, AsyncGenerator

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Protobuf —Ñ–∞–π–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ streaming.proto
import streaming_pb2
import streaming_pb2_grpc

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from modules.grpc_service.core.grpc_service_manager import GrpcServiceManager
from modules.interrupt_handling.core.interrupt_manager import InterruptManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def _get_dtype_string(dtype) -> str:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç numpy dtype –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è protobuf"""
    if hasattr(dtype, 'name'):
        return dtype.name  # np.int16 -> 'int16'
    dtype_str = str(dtype)
    if dtype_str == '<i2':
        return 'int16'
    elif dtype_str == '<f4':
        return 'float32'
    elif dtype_str == '<f8':
        return 'float64'
    return dtype_str

class NewStreamingServicer(streaming_pb2_grpc.StreamingServiceServicer):
    """–ù–æ–≤—ã–π gRPC —Å–µ—Ä–≤–∏—Å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ gRPC —Å–µ—Ä–≤–µ—Ä–∞ —Å –º–æ–¥—É–ª—è–º–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–¥—É–ª–µ–π
        self.grpc_service_manager = GrpcServiceManager()
        self.interrupt_manager = InterruptManager()
        
        # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.is_initialized = False
        
        logger.info("‚úÖ –ù–æ–≤—ã–π gRPC —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        if self.is_initialized:
            logger.info("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gRPC Service Manager
            await self.grpc_service_manager.initialize()
            logger.info("‚úÖ gRPC Service Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Interrupt Manager
            await self.interrupt_manager.initialize()
            logger.info("‚úÖ Interrupt Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
            await self.grpc_service_manager.start()
            logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            
            self.is_initialized = True
            logger.info("üéâ –ù–æ–≤—ã–π gRPC —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
            
            if self.is_initialized:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
                await self.grpc_service_manager.stop()
                logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                
                # –û—á–∏—â–∞–µ–º Interrupt Manager
                await self.interrupt_manager.cleanup()
                logger.info("‚úÖ Interrupt Manager –æ—á–∏—â–µ–Ω")
                
                # –û—á–∏—â–∞–µ–º gRPC Service Manager
                await self.grpc_service_manager.cleanup()
                logger.info("‚úÖ gRPC Service Manager –æ—á–∏—â–µ–Ω")
            
            self.is_initialized = False
            logger.info("‚úÖ –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def StreamAudio(self, request: streaming_pb2.StreamRequest, context) -> AsyncGenerator[streaming_pb2.StreamResponse, None]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ StreamRequest —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏"""
        session_id = request.session_id or f"session_{datetime.now().timestamp()}"
        hardware_id = request.hardware_id or "unknown"
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω StreamRequest: session={session_id}, hardware_id={hardware_id}")
        
        try:
            # –í –Ω–æ–≤–æ–º protobuf –Ω–µ—Ç interrupt_flag –≤ StreamRequest
            # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π InterruptSession API
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            if self.interrupt_manager.should_interrupt(hardware_id):
                logger.info(f"üõë –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è {hardware_id}, –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å {session_id}")
                
                response = streaming_pb2.StreamResponse(
                    error_message="–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
                )
                yield response
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ gRPC Service Manager
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª–∏...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            request_data = {
                'hardware_id': hardware_id,
                'text': request.prompt,
                'screenshot': request.screenshot,
                'session_id': session_id,
                'interrupt_flag': False  # –í –Ω–æ–≤–æ–º protobuf –Ω–µ—Ç interrupt_flag –≤ StreamRequest
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_result = await self.grpc_service_manager.process_request(request_data)
            
            if processing_result.get('success', False):
                logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å {session_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                text_response = processing_result.get('text_response', '')
                if text_response:
                    response = streaming_pb2.StreamResponse(
                        text_chunk=text_response
                    )
                    yield response
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                audio_chunks = processing_result.get('audio_chunks', [])
                for chunk_data in audio_chunks:
                    if chunk_data:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        audio_chunk = streaming_pb2.AudioChunk(
                            audio_data=chunk_data,
                            dtype="int16",
                            shape=[len(chunk_data) if isinstance(chunk_data, (list, tuple)) else 1, 1]
                        )
                        
                        response = streaming_pb2.StreamResponse(
                            audio_chunk=audio_chunk
                        )
                        yield response
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                response = streaming_pb2.StreamResponse(
                    end_message="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                )
                yield response
                
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ {session_id}: {processing_result.get('error', 'Unknown error')}")
                
                response = streaming_pb2.StreamResponse(
                    error_message=processing_result.get('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
                )
                yield response
        
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ StreamRequest: {e}")
            import traceback
            traceback.print_exc()
            
            response = streaming_pb2.StreamResponse(
                error_message=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            )
            yield response
    
    async def InterruptSession(self, request: streaming_pb2.InterruptRequest, context) -> streaming_pb2.InterruptResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ InterruptRequest —á–µ—Ä–µ–∑ Interrupt Manager"""
        hardware_id = request.hardware_id or "unknown"
        # –í InterruptRequest –Ω–µ—Ç session_id, —Ç–æ–ª—å–∫–æ hardware_id
        
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω InterruptRequest: hardware_id={hardware_id}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Interrupt Manager –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            interrupt_result = await self.interrupt_manager.interrupt_session(
                hardware_id=hardware_id
            )
            
            if interrupt_result.get('success', False):
                logger.info(f"‚úÖ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è {hardware_id}")
                
                return streaming_pb2.InterruptResponse(
                    success=True,
                    message="–°–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ—Ä–≤–∞–Ω—ã",
                    interrupted_sessions=interrupt_result.get('cleaned_sessions', [])
                )
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–ª—è {hardware_id}")
                
                return streaming_pb2.InterruptResponse(
                    success=False,
                    message=interrupt_result.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ—Ä–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏'),
                    interrupted_sessions=[]
                )
        
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ InterruptRequest: {e}")
            import traceback
            traceback.print_exc()
            
            return streaming_pb2.InterruptResponse(
                success=False,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {str(e)}",
                interrupted_sessions=[]
            )

async def run_server(port: int = 50051, max_workers: int = 10):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ gRPC —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = grpc.aio.server(ThreadPoolExecutor(max_workers=max_workers))
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    servicer = NewStreamingServicer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    init_success = await servicer.initialize()
    if not init_success:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    streaming_pb2_grpc.add_StreamingServiceServicer_to_server(servicer, server)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ä—Ç
    listen_addr = f'[::]:{port}'
    server.add_insecure_port(listen_addr)
    
    logger.info(f"‚úÖ –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {listen_addr}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await server.start()
        logger.info(f"üéâ –ù–æ–≤—ã–π gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await server.wait_for_termination()
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        logger.info("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        await servicer.cleanup()
        
        # Graceful shutdown
        await server.stop(grace=5.0)
        logger.info("‚úÖ –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await run_server()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
