import asyncio
import logging
import grpc.aio
from concurrent.futures import ThreadPoolExecutor
import sys
import os
import numpy as np
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streaming_pb2
import streaming_pb2_grpc
from config import Config
from text_processor import TextProcessor
from audio_generator import AudioGenerator
from database.database_manager import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class StreamingServicer(streaming_pb2_grpc.StreamingServiceServicer):
    """gRPC —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    
    def __init__(self):
        self.text_processor = TextProcessor()
        self.audio_generator = AudioGenerator()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db_url = Config.get_database_url()
            self.db_manager = DatabaseManager(db_url)
            if self.db_manager.connect():
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                self.db_manager = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db_manager = None

    async def StreamAudio(self, request, context):
        """
        –ê–°–ò–ù–•–†–û–ù–ù–´–ô —Å—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–º–ø—Ç.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç async for –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞ –∏ –∞—É–¥–∏–æ.
        """
        prompt = request.prompt
        screenshot_base64 = request.screenshot if request.HasField('screenshot') else None
        screen_width = request.screen_width if request.HasField('screen_width') else 0
        screen_height = request.screen_height if request.HasField('screen_height') else 0
        hardware_id = request.hardware_id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç: {prompt}")
        logger.info(f"Hardware ID: {hardware_id}")
        
        if screenshot_base64:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {screen_width}x{screen_height} –ø–∏–∫—Å–µ–ª–µ–π, {len(screenshot_base64)} —Å–∏–º–≤–æ–ª–æ–≤ Base64")
        else:
            logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ë–î (–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É)
            if hardware_id and self.db_manager:
                screen_info_for_db = {'width': screen_width, 'height': screen_height} if screen_width > 0 else {}
                asyncio.create_task(self._process_hardware_id_async(hardware_id, prompt, screenshot_base64, screen_info_for_db))
            
            logger.info("–ó–∞–ø—É—Å–∫–∞—é LangChain streaming —á–µ—Ä–µ–∑ Gemini...")
            
            screen_info = {'width': screen_width, 'height': screen_height} if screen_width > 0 else {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
            text_generator = self.text_processor.generate_response_stream(prompt)
            
            # –°—Ç—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞ —Å—Ç—Ä–∏–º–∏–º –∞—É–¥–∏–æ
            async for text_chunk in text_generator:
                if text_chunk and text_chunk.strip():
                    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞–Ω–∫ –∫–ª–∏–µ–Ω—Ç—É
                    yield streaming_pb2.StreamResponse(text_chunk=text_chunk)
                    
                    # 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ü–û–õ–ù–û–ï –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤
                        audio_chunk_complete = await self.audio_generator.generate_complete_audio_for_sentence(text_chunk)
                        
                        if audio_chunk_complete is not None and len(audio_chunk_complete) > 0:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –∫–∞–∫ –æ–¥–∏–Ω –∞—É–¥–∏–æ-—á–∞–Ω–∫
                            yield streaming_pb2.StreamResponse(
                                audio_chunk=streaming_pb2.AudioChunk(
                                    audio_data=audio_chunk_complete.tobytes(),
                                    dtype=str(audio_chunk_complete.dtype),
                                    shape=list(audio_chunk_complete.shape)
                                )
                            )
                    except Exception as audio_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è '{text_chunk[:30]}...': {audio_error}")

            logger.info("LangChain streaming –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.")
                
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ StreamAudio: {e}", exc_info=True)
            yield streaming_pb2.StreamResponse(
                error_message=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}"
            )

    async def _process_hardware_id_async(self, hardware_id: str, prompt: str, screenshot_base64: str = None, screen_info: dict = None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–æ–π, –µ—Å–ª–∏ db_manager –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç async
        # –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –≤ executor'–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –ë–î
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, self._process_hardware_id_sync, hardware_id, prompt, screenshot_base64, screen_info)

    def _process_hardware_id_sync(self, hardware_id: str, prompt: str, screenshot_base64: str = None, screen_info: dict = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ ThreadPoolExecutor."""
        try:
            if not self.db_manager:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hardware ID")
                return
            
            logger.info(f"üÜî –û–±—Ä–∞–±–æ—Ç–∫–∞ Hardware ID –≤ –ø–æ—Ç–æ–∫–µ: {hardware_id[:16]}...")
            
            user = self.db_manager.get_user_by_hardware_id(hardware_id)
            if not user:
                user_id = self.db_manager.create_user(hardware_id, {"created_via": "gRPC"})
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            else:
                user_id = user['id']
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

            session_id = self.db_manager.create_session(user_id, {"prompt": prompt})
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")

            command_metadata = {"has_screenshot": bool(screenshot_base64)}
            if screen_info:
                command_metadata['screen_info'] = screen_info
            self.db_manager.create_command(session_id, prompt, command_metadata)
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            if screenshot_base64:
                import json
                screenshot_metadata = {
                    "base64_length": len(screenshot_base64),
                    "format": "webp_base64"
                }
                if screen_info:
                    screenshot_metadata["screen_resolution"] = f"{screen_info.get('width', 0)}x{screen_info.get('height', 0)}"
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dict –≤ JSON —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                self.db_manager.create_screenshot(
                    session_id, 
                    f"/tmp/screenshot_{session_id}.webp", 
                    json.dumps(screenshot_metadata)
                )
                logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hardware ID: {e}", exc_info=True)


async def serve():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
    server = grpc.aio.server()
    streaming_pb2_grpc.add_StreamingServiceServicer_to_server(StreamingServicer(), server)
    
    server_address = f"{Config.GRPC_HOST}:{Config.GRPC_PORT}"
    server.add_insecure_port(server_address)
    
    logger.info(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {server_address}")
    await server.start()
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    try:
        await server.wait_for_termination()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...")
        await server.stop(0)
    finally:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not Config.validate():
        logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –°–µ—Ä–≤–µ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        sys.exit(1)
    
    asyncio.run(serve())
