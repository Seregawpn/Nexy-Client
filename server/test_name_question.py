#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç? - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
"""

import asyncio
import os
import sys
sys.path.append('.')

from text_processor import TextProcessor
from database.database_manager import DatabaseManager

async def test_name_question():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.environ.get("GEMINI_API_KEY"):
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?'...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        text_processor = TextProcessor()
        db_manager = DatabaseManager()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.to_thread(db_manager.connect)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DatabaseManager –≤ TextProcessor
        text_processor.set_database_manager(db_manager)
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–µ—Å—Ç–µ
        test_hardware_id = "test_user_memory_cycle_123"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
        print("\nüß† –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å...")
        memory_data = await asyncio.to_thread(
            db_manager.get_user_memory, 
            test_hardware_id
        )
        
        if memory_data.get('short') or memory_data.get('long'):
            print("‚úÖ –ü–∞–º—è—Ç—å –Ω–∞–π–¥–µ–Ω–∞:")
            print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('short', '–ù–µ—Ç')}")
            print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('long', '–ù–µ—Ç')}")
        else:
            print("‚ö†Ô∏è –ü–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–º—è—Ç—å...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–º—è—Ç—å
            test_prompt = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ—Ä–≥–µ–π, —è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã"
            test_response = "–ü—Ä–∏–≤–µ—Ç, –°–µ—Ä–≥–µ–π! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è."
            
            if text_processor.memory_analyzer:
                short_memory, long_memory = await text_processor.memory_analyzer.analyze_conversation(
                    test_prompt, 
                    test_response
                )
                
                success = await asyncio.to_thread(
                    db_manager.update_user_memory,
                    test_hardware_id,
                    short_memory,
                    long_memory
                )
                
                if success:
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–º—è—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–º—è—Ç–∏")
                    return
            else:
                print("‚ùå MemoryAnalyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
        
        # üîß –¢–ï–°–¢: –í–æ–ø—Ä–æ—Å "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"
        print("\nüìù –¢–ï–°–¢: –ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
        print("=" * 50)
        
        question = "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_chunks = []
        async for chunk in text_processor.generate_response_stream(
            prompt=question,
            hardware_id=test_hardware_id,
            screenshot_base64=None
        ):
            response_chunks.append(chunk)
            print(f"üì¶ –ß–∞–Ω–∫: {chunk}")
        
        full_response = " ".join(response_chunks)
        print(f"\nü§ñ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {full_response}")
        
        # üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–º—è
        name_found = False
        if "–°–µ—Ä–≥–µ–π" in full_response or "Sergei" in full_response:
            print("‚úÖ –ò–º—è '–°–µ—Ä–≥–µ–π' –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
            name_found = True
        else:
            print("‚ùå –ò–º—è '–°–µ—Ä–≥–µ–π' –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession_found = False
        if any(word in full_response.lower() for word in ["—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "developer", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "programmer"]):
            print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
            profession_found = True
        else:
            print("‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        location_found = False
        if any(word in full_response for word in ["–ú–æ—Å–∫–≤–∞", "Moscow"]):
            print("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
            location_found = True
        else:
            print("‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüìä –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:")
        if name_found and profession_found and location_found:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        elif name_found:
            print("‚úÖ –•–û–†–û–®–û! –ò–º—è –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ü–∞–º—è—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_name_question())
