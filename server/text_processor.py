import asyncio
import logging
import os
import re
from typing import AsyncGenerator, List

from dotenv import load_dotenv
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_community.tools import GoogleSearchRun
from langchain_community.utilities import GoogleSearchAPIWrapper
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.tools import tool
from langchain_google_genai import ChatGoogleGenerativeAI

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
# –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Config, –∏—Å–ø–æ–ª—å–∑—É–µ–º load_dotenv,
# —Ç–∞–∫ –∫–∞–∫ TextProcessor –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –≤—Å–µ–≥–æ server.config
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), 'config.env'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π API
if not all(k in os.environ for k in ["GOOGLE_API_KEY", "GSEARCH_API_KEY", "GSEARCH_CSE_ID"]):
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.env")

logger = logging.getLogger(__name__)

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
# –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ
@tool
def get_weather(city: str) -> str:
    """Gets the current weather for a given city. Use only when user asks about weather."""
    logger.info(f"--- Tool: get_weather called for city: {city} ---")
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
    if "boston" in city.lower():
        return "It's currently sunny in Boston."
    elif "san francisco" in city.lower():
        return "It's currently foggy in San Francisco."
    else:
        return f"Weather data for {city} is not available."

class TextProcessor:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò-–∞–≥–µ–Ω—Ç–∞,
    –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Search)
    –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    """
    
    def __init__(self):
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
            self.model = ChatGoogleGenerativeAI(
                model="gemini-2.5-flash-lite",
                google_api_key=os.environ["GOOGLE_API_KEY"],
                temperature=0.7,
            )

            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            search_wrapper = GoogleSearchAPIWrapper(
                google_api_key=os.environ["GSEARCH_API_KEY"],
                google_cse_id=os.environ["GSEARCH_CSE_ID"]
            )
            search_tool = GoogleSearchRun(api_wrapper=search_wrapper)
            self.tools = [search_tool, get_weather]

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ê–≥–µ–Ω—Ç–∞
            prompt_template = ChatPromptTemplate.from_messages(
                [
                    ("system", """
                    You are a helpful voice assistant for macOS. You have access to tools like Google Search.

                    **YOUR CORE RULES:**
                    - For any question that requires current information (news, facts, weather, stock prices, match results), events after 2023, or any information that can change over time, you **MUST** use the `google_search` tool.
                    - **DO NOT** answer such questions from your memory. Always use the search tool first.
                    - If the user asks about the weather, use the `get_weather` tool.
                    - Answer in concise, informative Russian.
                    """),
                    ("human", "{input}"),
                    ("placeholder", "{agent_scratchpad}"),
                ]
            )

            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ –∏ –µ–≥–æ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (Executor)
            agent = create_tool_calling_agent(self.model, self.tools, prompt_template)
            self.agent_executor = AgentExecutor(agent=agent, tools=self.tools, verbose=True)
            
            logger.info("‚úÖ TextProcessor —Å AgentExecutor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TextProcessor: {e}", exc_info=True)
            self.agent_executor = None

    async def generate_response_stream(self, prompt: str, **kwargs) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∞–≥–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–∏–º–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        **kwargs –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        if not self.agent_executor:
            logger.error("AgentExecutor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
            return

        logger.info(f"–ó–∞–ø—É—Å–∫–∞—é AgentExecutor astream_events –¥–ª—è: '{prompt[:50]}...'")
        
        buffer = ""
        sentence_endings = ['.', '!', '?', '...', '?!', '!?']
        is_final_answer_started = False
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º astream_events –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ø–æ—Ç–æ–∫–æ–º
            async for event in self.agent_executor.astream_events({"input": prompt}, version="v1"):
                kind = event["event"]
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"üì° –°–æ–±—ã—Ç–∏–µ: {kind} - {event.get('name', 'N/A')}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                if kind == "on_tool_end":
                    tool_name = event.get("name", "unknown")
                    tool_output = event.get("data", {}).get("output", "")
                    logger.info(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ Google Search, —Å—Ç—Ä–∏–º–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if tool_name == "google_search" and tool_output:
                        # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                        sentences = self._split_into_sentences(tool_output)
                        for sentence in sentences:
                            if sentence.strip():
                                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: '{sentence[:100]}...'")
                                yield sentence.strip()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
                elif kind == "on_chat_model_stream":
                    content = event["data"]["chunk"].content
                    if content:
                        buffer += content
                        
                        # –û—Ç–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                        while True:
                            sentence_end_pos = -1
                            for ending in sentence_endings:
                                pos = buffer.find(ending)
                                if pos != -1:
                                    if sentence_end_pos == -1 or pos < sentence_end_pos:
                                        sentence_end_pos = pos + len(ending)
                            
                            if sentence_end_pos != -1:
                                sentence = buffer[:sentence_end_pos].strip()
                                buffer = buffer[sentence_end_pos:]
                                if sentence:
                                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{sentence}'")
                                    yield sentence
                            else:
                                break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∏–∑ –±—É—Ñ–µ—Ä–∞
            if buffer.strip():
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Å—Ç–∞—Ç–æ–∫ –∏–∑ –±—É—Ñ–µ—Ä–∞: '{buffer.strip()}'")
                yield buffer.strip()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ AgentExecutor stream: {e}", exc_info=True)
            yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

    def clean_text(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞."""
        text = re.sub(r'\s+', ' ', text).strip()
        text = text.replace('*', '')
        return text
    
    def _split_into_sentences(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
        if not text:
            return []
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = self.clean_text(text)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = []
        current_sentence = ""
        sentence_endings = ['.', '!', '?', '...', '?!', '!?']
        
        for char in text:
            current_sentence += char
            if char in sentence_endings:
                sentence = current_sentence.strip()
                if sentence:
                    sentences.append(sentence)
                current_sentence = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if current_sentence.strip():
            sentences.append(current_sentence.strip())
        
        return sentences