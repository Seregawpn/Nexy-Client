import asyncio
import logging
import os
import re
import base64
import io
from typing import AsyncGenerator, List
from PIL import Image

from google import genai
from google.genai import types

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π API
if not os.environ.get("GEMINI_API_KEY"):
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.env")

logger = logging.getLogger(__name__)

class TextProcessor:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Gemini Live API,
    –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Search)
    –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    
    üö® –í–ê–ñ–ù–û: System Prompt —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏,
    –∞ –Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    """
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞–º—è—Ç–∏
        self.memory_analyzer = None
        self.db_manager = None
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini Live API –∫–ª–∏–µ–Ω—Ç–∞
            self.client = genai.Client(
                http_options={"api_version": "v1beta"},
                api_key=os.environ.get("GEMINI_API_KEY"),
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            self.tools = [
                types.Tool(google_search=types.GoogleSearch()),
            ]
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Live API
            self.config = types.LiveConnectConfig(
                response_modalities=["TEXT"],
                media_resolution="MEDIA_RESOLUTION_MEDIUM",
                context_window_compression=types.ContextWindowCompressionConfig(
                    trigger_tokens=25600,
                    sliding_window=types.SlidingWindow(target_tokens=12800),
                ),
                tools=self.tools,
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MemoryAnalyzer
            gemini_api_key = os.environ.get("GEMINI_API_KEY")
            if gemini_api_key:
                try:
                    from memory_analyzer import MemoryAnalyzer
                    self.memory_analyzer = MemoryAnalyzer(gemini_api_key)
                    logger.info(f"‚úÖ MemoryAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è MemoryAnalyzer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
            
            logger.info(f"‚úÖ TextProcessor —Å Gemini Live API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üîç Google Search tool —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TextProcessor: {e}", exc_info=True)
            self.client = None
    
    def cancel_generation(self):
        """
        –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é LLM –∏ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.
        """
        try:
            logger.warning("üö® –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM!")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Gemini
            if hasattr(self, '_current_generation'):
                try:
                    if hasattr(self._current_generation, 'cancel'):
                        self._current_generation.cancel()
                        logger.warning("üö® Gemini –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ú–ì–ù–û–í–ï–ù–ù–û –û–¢–ú–ï–ù–ï–ù–ê!")
                except:
                    pass
                self._current_generation = None
            
            # –ö–†–ò–¢–ò–ß–ù–û: –æ—á–∏—â–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±—É—Ñ–µ—Ä—ã
            if hasattr(self, '_text_buffer'):
                self._text_buffer.clear()
                logger.warning("üö® –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±—É—Ñ–µ—Ä—ã –ú–ì–ù–û–í–ï–ù–ù–û –û–ß–ò–©–ï–ù–´!")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –æ—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if hasattr(self, '_current_prompt'):
                self._current_prompt = None
                logger.warning("üö® –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –ú–ì–ù–û–í–ï–ù–ù–û –û–ß–ò–©–ï–ù!")
            
            logger.warning("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã LLM –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM: {e}")
    
    def clear_buffers(self):
        """
        –ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –±—É—Ñ–µ—Ä—ã –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.
        """
        self.cancel_generation()

    def set_database_manager(self, db_manager):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç DatabaseManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é.
        
        Args:
            db_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager
        """
        self.db_manager = db_manager
        logger.info("‚úÖ DatabaseManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ TextProcessor")
    
    async def generate_response_stream(self, prompt: str, hardware_id: str = None, screenshot_base64: str = None, interrupt_checker=None, **kwargs) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini Live API –∏ —Å—Ç—Ä–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        interrupt_checker: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        """
        if not self.client:
            logger.error("Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
            return

        logger.info(f"–ó–∞–ø—É—Å–∫–∞—é Gemini Live API –¥–ª—è: '{prompt[:50]}...'")
        
        # –ö–†–ò–¢–ò–ß–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self._interrupt_checker = interrupt_checker
        self._current_prompt = prompt
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        memory_context = ""
        if hardware_id and self.db_manager:
            try:
                # –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                async with asyncio.timeout(2.0):
                    memory_data = await asyncio.to_thread(
                        self.db_manager.get_user_memory, 
                        hardware_id
                    )
                    if memory_data.get('short') or memory_data.get('long'):
                        memory_context = f"""
üß† MEMORY CONTEXT (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞):

üìã –ö–†–ê–¢–ö–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è):
{memory_data.get('short', '–ù–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏')}

üìö –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ):
{memory_data.get('long', '–ù–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏')}

üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ü–ê–ú–Ø–¢–ò:
- –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–∏–º—è, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏)
- –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É - –∏–≥–Ω–æ—Ä–∏—Ä—É–π –µ—ë
- –ü–∞–º—è—Ç—å –¥–æ–ª–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω—è—Ç—å –æ—Ç–≤–µ—Ç, –∞ –Ω–µ –∑–∞–º–µ–Ω—è—Ç—å –µ–≥–æ
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å > –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å > –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
"""
                        logger.info(f"üß† –ü–æ–ª—É—á–µ–Ω–∞ –ø–∞–º—è—Ç—å –¥–ª—è {hardware_id}: –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è ({len(memory_data.get('short', ''))} —Å–∏–º–≤–æ–ª–æ–≤), –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è ({len(memory_data.get('long', ''))} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        logger.info(f"üß† –ü–∞–º—è—Ç—å –¥–ª—è {hardware_id} –ø—É—Å—Ç–∞")
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è {hardware_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å —É—á–µ—Ç–æ–º –ø–∞–º—è—Ç–∏
            base_system_instruction = (
                "You are a helpful assistant for blind and visually impaired users. Respond naturally and directly - just give the information they need without extra explanations about what you're doing.\n\n"
                "TYPES OF REQUESTS:\n\n"

                "üîç SEARCH REQUESTS - Use web search for:\n\n"
                "- Current news, weather, sports\n"
                "- Recent events, today's happenings  \n"
                "- Live information (stock prices, schedules)\n"
                "- Any question about current/recent events\n\n"

                "üì± SCREEN ANALYSIS - Take screenshot when user asks:\n\n"
                "- 'What's on my screen?'\n"
                "- 'What do you see?'\n"
                "- 'Describe what's here'\n"
                "- 'What's on the left/right side?'\n\n"

                "üí≠ CONVERSATION - Use your knowledge for:\n\n"
                "- General questions (how things work, definitions)\n"
                "- Cooking, calculations, explanations\n"
                "- Historical facts, science concepts\n\n"

                "RESPONSE STYLE:\n\n"
                "- Answer directly without saying 'Based on your request' or 'I understand'\n"
                "- Don't mention what category the request is\n"
                "- Be conversational but focused\n"
                "- Talk like a real person, be their friend\n\n"

                "üß† MEMORY RULES:\n\n"
                "- Use memory when user specifically references previous conversations\n"
                "- Don't use memory for unrelated topics\n"
                "- Memory should enhance, not replace current context\n"
                "- Be selective about what to recall\n"
                "- If memory context is provided, use it to provide more relevant answers\n\n"

                "‚ö†Ô∏è SAFETY WARNINGS:\n\n"
                "- If you see suspicious websites, dangerous links, or harmful content on screen - warn them immediately\n"
                "- Alert about phishing emails, malicious downloads, or unsafe websites\n"
                "- Since they can't see, they depend on you to keep them safe from clicking dangerous things\n\n"

                "EXAMPLES:\n\n"
                "‚ùå Bad: 'I understand you want me to analyze your screen. Based on your request, I can see...'\n"
                "‚úÖ Good: 'I can see your desktop with Chrome browser open and three folders...'\n\n"

                " ‚ùå Bad: 'Based on your search request for weather, let me find that information...'\n"
                "‚úÖ Good: 'Today in Montreal it's 15¬∞C and partly cloudy...'\n\n"

                "Just be helpful and direct - they want information, not explanations of your process. "
                           
            )
            
            # üö® –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î: –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ System Prompt, –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ User Prompt
            if memory_context:
                # System Prompt –æ—Å—Ç–∞–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–º (–ø—Ä–∞–≤–∏–ª–∞ –ø–∞–º—è—Ç–∏)
                system_instruction = base_system_instruction
                logger.info(f"üß† System Prompt: –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–∞–º—è—Ç–∏ + –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
                logger.info(f"üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ User Prompt")
            else:
                system_instruction = base_system_instruction
                logger.info(f"üß† System Prompt: –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–∞–º—è—Ç–∏ + –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
                logger.info(f"üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é Live API —Å System Prompt
            async with self.client.aio.live.connect(
                model="models/gemini-2.0-flash-live-001", 
                config=self.config,
                system_instruction=system_instruction  # üö® –ü–ï–†–ï–î–ê–ï–ú –ö–ê–ö SYSTEM PROMPT!
            ) as session:
                
                # ‚úÖ System Prompt —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏!
                logger.info(f"üß† System Prompt —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üß† System Prompt: {system_instruction[:200]}...")
                
                # --- –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–ö–†–ò–ù–®–û–¢–ê ---
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Ä–µ—à–∞–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
                
                # üö® –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î: –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ User Prompt
                if memory_context:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π User Prompt —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
                    enhanced_prompt = f"""{memory_context}

üë§ USER REQUEST:
{prompt}

üéØ –ó–ê–î–ê–ß–ê:
–û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –æ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω.
–ï—Å–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–π –µ—ë.
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å > –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å > –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å."""
                    content = [enhanced_prompt]
                    logger.info(f"üß† User Prompt —Ä–∞—Å—à–∏—Ä–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏: {len(memory_context)} —Å–∏–º–≤–æ–ª–æ–≤")
                    logger.info(f"üß† –°—Ç—Ä—É–∫—Ç—É—Ä–∞: Memory Context + User Request + Task")
                else:
                    content = [prompt]
                    logger.info(f"üß† User Prompt –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                needs_screenshot = self._should_analyze_screenshot(prompt)
                
                if screenshot_base64 and needs_screenshot:
                    try:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        image_bytes = base64.b64decode(screenshot_base64)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PIL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
                        img = Image.open(io.BytesIO(image_bytes))
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
                        content.append(img)
                        
                        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢–°–Ø ({img.format}, {img.size}) - –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞")
                        
                    except Exception as img_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {img_error}")
                elif screenshot_base64:
                    logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ò–ì–ù–û–†–ò–†–£–ï–¢–°–Ø - –∑–∞–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞")
                else:
                    logger.info(f"üìù –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")

                # üìã –õ–û–ì–ò–†–£–ï–ú –°–¢–†–£–ö–¢–£–†–£ –°–û–û–ë–©–ï–ù–ò–ô
                logger.info(f"üìã –°–¢–†–£–ö–¢–£–†–ê –°–û–û–ë–©–ï–ù–ò–ô:")
                logger.info(f"   üß† System Prompt: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤ (–±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ + –ø—Ä–∞–≤–∏–ª–∞ –ø–∞–º—è—Ç–∏)")
                if memory_context:
                    logger.info(f"   üß† Memory Context: –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è + –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å")
                    logger.info(f"   üë§ User Prompt: —Ä–∞—Å—à–∏—Ä–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏ + –∑–∞–ø—Ä–æ—Å + –∑–∞–¥–∞—á–∞")
                else:
                    logger.info(f"   üë§ User Prompt: —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                if len(content) > 1:
                    logger.info(f"   üì∏ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: —Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                else:
                    logger.info(f"   üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                
                # üö® –í–ê–ñ–ù–û: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Gemini Live API:
                # 
                # 1Ô∏è‚É£ SYSTEM PROMPT (system_instruction):
                #    - –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
                #    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                #    - –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, —Å—Ç–∏–ª—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                #    - –ù–ï —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                #
                # 2Ô∏è‚É£ USER PROMPT (content):
                #    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ session.send()
                #    - –°–æ–¥–µ—Ä–∂–∏—Ç: Memory Context + User Request + Task
                #    - Memory Context: –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è + –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
                #    - –ú–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                #    - –ü–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ end_of_turn=True
                #
                # 3Ô∏è‚É£ ASSISTANT RESPONSE:
                #    - –ü–æ–ª—É—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ session.receive()
                #    - –°—Ç—Ä–∏–º–∏—Ç—Å—è –ø–æ —á–∞—Å—Ç—è–º
                #    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                #
                # üß† MEMORY STRUCTURE:
                #    - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
                #    - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                #    - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∑–∞–ø—Ä–æ—Å > –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è > –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑)
                await session.send(input=content, end_of_turn=True)
                if len(content) > 1:
                    logger.info("üìù –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    logger.info("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                turn = session.receive()
                accumulated_text = ""
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º —Ü–∏–∫–ª–∞
                if self._interrupt_checker and self._interrupt_checker():
                    logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ LLM!")
                    return
                
                async for response in turn:
                    # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –ö–ê–ñ–î–û–ô –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    if self._interrupt_checker and self._interrupt_checker():
                        logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ LLM!")
                        return
                    
                    if response.text:
                        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                        accumulated_text += response.text
                        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{response.text[:100]}...'")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                        sentences = self._split_into_sentences(accumulated_text)
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                        if len(sentences) > 1:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º)
                            for sentence in sentences[:-1]:
                                if sentence.strip():
                                    # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                                    if self._interrupt_checker and self._interrupt_checker():
                                        logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –û–¢–ü–†–ê–í–ö–£ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø!")
                                        return
                                    
                                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{sentence[:100]}...'")
                                    yield sentence.strip()
                            
                            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                            accumulated_text = sentences[-1]
                        elif len(sentences) == 1 and self._is_complete_sentence(accumulated_text):
                            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–Ω–æ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                            sentence = sentences[0]
                            if sentence.strip():
                                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                                if self._interrupt_checker and self._interrupt_checker():
                                    logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –û–¢–ü–†–ê–í–ö–£ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø!")
                                    return
                                
                                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{sentence[:100]}...'")
                                yield sentence.strip()
                            accumulated_text = ""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if accumulated_text.strip():
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç: '{accumulated_text[:100]}...'")
                    yield accumulated_text.strip()
                
                logger.info("‚úÖ Gemini Live API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                # –§–û–ù–û–í–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ù–ï –ë–õ–û–ö–ò–†–£–ï–¢)
                if hardware_id and self.db_manager and self.memory_analyzer:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ - –ù–ï –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    asyncio.create_task(
                        self._update_memory_background(hardware_id, prompt, accumulated_text)
                    )
                    logger.info(f"üîÑ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ –¥–ª—è {hardware_id}")
                elif hardware_id and self.db_manager:
                    logger.warning(f"‚ö†Ô∏è MemoryAnalyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {hardware_id}, –ø–∞–º—è—Ç—å –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                elif hardware_id:
                    logger.warning(f"‚ö†Ô∏è DatabaseManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {hardware_id}, –ø–∞–º—è—Ç—å –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Gemini Live API: {e}", exc_info=True)
            yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    
    def clean_text(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞."""
        text = re.sub(r'\s+', ' ', text).strip()
        text = text.replace('*', '')
        return text

    def _should_analyze_screenshot(self, prompt: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω.
        """
        prompt_lower = prompt.lower().strip()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¢–†–ï–ë–£–Æ–¢ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
        screen_analysis_keywords = [
            'what do i see', 'what is on screen', 'what is on the screen',
            'describe screen', 'describe my screen', 'what am i working on',
            'what is on the right', 'what is on the left', 'what is on top',
            'what is on bottom', 'describe desktop', 'describe my desktop',
            'what is visible', 'what can you see', 'tell me what you see',
            'analyze screen', 'analyze my screen', 'what does my screen show',
            'screen content', 'screen information', 'what is displayed',
            '—á—Ç–æ —è –≤–∏–∂—É', '—á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ', '–æ–ø–∏—à–∏ —ç–∫—Ä–∞–Ω', '—á—Ç–æ —è –¥–µ–ª–∞—é',
            '—á—Ç–æ —Å–ø—Ä–∞–≤–∞', '—á—Ç–æ —Å–ª–µ–≤–∞', '—á—Ç–æ —Å–≤–µ—Ä—Ö—É', '—á—Ç–æ —Å–Ω–∏–∑—É',
            '–æ–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª', '—á—Ç–æ –≤–∏–¥–Ω–æ', '—á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
        for keyword in screen_analysis_keywords:
            if keyword in prompt_lower:
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞: '{keyword}' –Ω–∞–π–¥–µ–Ω–æ –≤ '{prompt}'")
                return True
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–∏—Å–∫ - —Å–∫—Ä–∏–Ω—à–æ—Ç –ù–ï –Ω—É–∂–µ–Ω
        general_keywords = [
            'how are you', 'hello', 'hi', 'good morning', 'good evening',
            'what is', 'how does', 'explain', 'tell me about', 'search for',
            'latest news', 'weather', 'current', 'today', 'now',
            '–∫–∞–∫ –¥–µ–ª–∞', '–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
            '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '–Ω–∞–π–¥–∏',
            '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', '–ø–æ–≥–æ–¥–∞', '—Ç–µ–∫—É—â–∏–π', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å'
        ]
        
        for keyword in general_keywords:
            if keyword in prompt_lower:
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –ù–ï —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞: '{keyword}' –Ω–∞–π–¥–µ–Ω–æ –≤ '{prompt}'")
                return False
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–∫—Ä–∏–Ω—à–æ—Ç –ù–ï –Ω—É–∂–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä)
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –∞–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞: '{prompt}'")
        return False

    def _split_into_sentences(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
        if not text:
            return []
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = self.clean_text(text)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫–∏ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ç.–¥.", "–∏ —Ç.–ø.")
        sentence_pattern = r'(?<=[.!?])\s+(?=[A-Z–ê-–Ø])'
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        sentences = re.split(sentence_pattern, text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        result = []
        for i, sentence in enumerate(sentences):
            sentence = sentence.strip()
            if sentence:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                if i < len(sentences) - 1:
                    # –ò—â–µ–º –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
                    if not any(sentence.endswith(ending) for ending in ['.', '!', '?']):
                        sentence += '.'
                result.append(sentence)
        
        return result
    
    def _is_complete_sentence(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω—ã–º"""
        if not text:
            return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = self.clean_text(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–Ω–∞–∫–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentence_endings = ['.', '!', '?', '...', '?!', '!?']
        return any(text.endswith(ending) for ending in sentence_endings)
    
    async def _update_memory_background(self, hardware_id: str, prompt: str, response: str):
        """
        –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            hardware_id: –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prompt: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        try:
            logger.debug(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è {hardware_id}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            short_memory, long_memory = await self.memory_analyzer.analyze_conversation(
                prompt, 
                response
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
            if short_memory or long_memory:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                success = await asyncio.to_thread(
                    self.db_manager.update_user_memory,
                    hardware_id,
                    short_memory,
                    long_memory
                )
                
                if success:
                    logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –¥–ª—è {hardware_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è ({len(short_memory)} —Å–∏–º–≤–æ–ª–æ–≤), –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è ({len(long_memory)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è {hardware_id}")
            else:
                logger.debug(f"üß† –î–ª—è {hardware_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è {hardware_id}: {e}")
            # –ù–ï –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞