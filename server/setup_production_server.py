#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import os
import shutil
import subprocess
import sys
from pathlib import Path

def create_directory_structure(server_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    directories = [
        "downloads",
        "keys", 
        "scripts",
        "logs"
    ]
    
    for directory in directories:
        dir_path = Path(server_path) / directory
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

def create_appcast_xml(server_path, domain):
    """–°–æ–∑–¥–∞–Ω–∏–µ AppCast XML —Ñ–∞–π–ª–∞"""
    appcast_content = f'''<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle">
    <channel>
        <title>Nexy Updates</title>
        <description>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è Nexy</description>
        <language>ru</language>
        <lastBuildDate>Mon, 07 Sep 2025 18:00:00 +0000</lastBuildDate>
        
        <item>
            <title>Nexy 1.71.0</title>
            <description>
                <![CDATA[
                <h2>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–µ—Ä—Å–∏–∏ 1.71.0:</h2>
                <ul>
                    <li>–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</li>
                    <li>–£–ª—É—á—à–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ accessibility</li>
                    <li>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–ª–∫–∏–µ –æ—à–∏–±–∫–∏</li>
                </ul>
                ]]>
            </description>
            <pubDate>Mon, 07 Sep 2025 18:00:00 +0000</pubDate>
            <enclosure url="https://{domain}/downloads/Nexy_1.71.0.dmg"
                       sparkle:version="1.71.0"
                       sparkle:shortVersionString="1.71.0"
                       length="10485760"
                       type="application/octet-stream"
                       sparkle:edSignature="SIGNATURE_PLACEHOLDER"/>
        </item>
    </channel>
</rss>'''
    
    appcast_path = Path(server_path) / "appcast.xml"
    with open(appcast_path, 'w', encoding='utf-8') as f:
        f.write(appcast_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω AppCast XML: {appcast_path}")

def create_update_script(server_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AppCast"""
    script_content = '''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AppCast XML

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SERVER_DIR="$(dirname "$SCRIPT_DIR")"
APPCAST_FILE="$SERVER_DIR/appcast.xml"

echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AppCast XML..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ DMG —Ñ–∞–π–ª–∞
if [ -z "$1" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ DMG —Ñ–∞–π–ª—É"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 /path/to/Nexy_1.72.0.dmg"
    exit 1
fi

DMG_FILE="$1"
VERSION=$(basename "$DMG_FILE" .dmg | sed 's/Nexy_//')

if [ ! -f "$DMG_FILE" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª $DMG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –ö–æ–ø–∏—Ä—É–µ–º DMG —Ñ–∞–π–ª –≤ downloads
cp "$DMG_FILE" "$SERVER_DIR/downloads/"

# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
FILE_SIZE=$(stat -f%z "$DMG_FILE")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
if [ -f "$SERVER_DIR/keys/ed25519_private.pem" ]; then
    SIGNATURE=$(./sign_update.sh "$DMG_FILE")
else
    SIGNATURE="SIGNATURE_PLACEHOLDER"
    echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–ª—é—á –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞"
fi

# –û–±–Ω–æ–≤–ª—è–µ–º AppCast XML
python3 -c "
import xml.etree.ElementTree as ET
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AppCast
tree = ET.parse('$APPCAST_FILE')
root = tree.getroot()

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π item
channel = root.find('channel')
new_item = ET.SubElement(channel, 'item')

# –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
title = ET.SubElement(new_item, 'title')
title.text = f'Nexy {VERSION}'

description = ET.SubElement(new_item, 'description')
description.text = f'<![CDATA[<h2>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–µ—Ä—Å–∏–∏ {VERSION}:</h2><ul><li>–£–ª—É—á—à–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è</li></ul>]]>'

pub_date = ET.SubElement(new_item, 'pubDate')
pub_date.text = datetime.now().strftime('%a, %d %b %Y %H:%M:%S +0000')

enclosure = ET.SubElement(new_item, 'enclosure')
enclosure.set('url', f'https://{os.environ.get(\"DOMAIN\", \"your-domain.com\")}/downloads/Nexy_{VERSION}.dmg')
enclosure.set('sparkle:version', VERSION)
enclosure.set('sparkle:shortVersionString', VERSION)
enclosure.set('length', str($FILE_SIZE))
enclosure.set('type', 'application/octet-stream')
enclosure.set('sparkle:edSignature', '$SIGNATURE')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π AppCast
tree.write('$APPCAST_FILE', encoding='utf-8', xml_declaration=True)
"

echo "‚úÖ AppCast XML –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏ $VERSION"
echo "üìÅ DMG —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ downloads/"
echo "üîó URL: https://$(echo $DOMAIN || echo 'your-domain.com')/downloads/Nexy_$VERSION.dmg"
'''
    
    script_path = Path(server_path) / "scripts" / "update_appcast.sh"
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(script_path, 0o755)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {script_path}")

def create_sign_script(server_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    script_content = '''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ DMG —Ñ–∞–π–ª–æ–≤

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SERVER_DIR="$(dirname "$SCRIPT_DIR")"
PRIVATE_KEY="$SERVER_DIR/keys/ed25519_private.pem"

if [ -z "$1" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ DMG —Ñ–∞–π–ª—É"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 /path/to/Nexy_1.72.0.dmg"
    exit 1
fi

DMG_FILE="$1"

if [ ! -f "$DMG_FILE" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª $DMG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f "$PRIVATE_KEY" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $PRIVATE_KEY"
    echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ed25519_private.pem –≤ $PRIVATE_KEY"
    exit 1
fi

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
echo "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è $DMG_FILE..."

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Sparkle –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
if command -v sparkle-cli &> /dev/null; then
    SIGNATURE=$(sparkle-cli sign "$DMG_FILE" --private-key "$PRIVATE_KEY")
else
    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º openssl
    SIGNATURE=$(openssl dgst -sha256 -sign "$PRIVATE_KEY" "$DMG_FILE" | base64)
fi

echo "‚úÖ –ü–æ–¥–ø–∏—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: $SIGNATURE"
echo "$SIGNATURE"
'''
    
    script_path = Path(server_path) / "scripts" / "sign_update.sh"
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(script_path, 0o755)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–ø–∏—Å–∏: {script_path}")

def create_nginx_config(server_path, domain):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"""
    nginx_config = f'''server {{
    listen 80;
    server_name {domain};
    return 301 https://$server_name$request_uri;
}}

server {{
    listen 443 ssl http2;
    server_name {domain};
    
    # SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ssl_certificate /etc/letsencrypt/live/{domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{domain}/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    root /var/www/updates;
    index appcast.xml;
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    access_log /var/log/nginx/updates_access.log;
    error_log /var/log/nginx/updates_error.log;
    
    # AppCast XML
    location = /appcast.xml {{
        add_header Content-Type application/xml;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }}
    
    # DMG —Ñ–∞–π–ª—ã
    location /downloads/ {{
        add_header Content-Type application/octet-stream;
        add_header Content-Disposition "attachment";
        expires 1y;
        add_header Cache-Control "public, immutable";
    }}
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    location ~ /\\. {{
        deny all;
    }}
    
    location ~ /keys/ {{
        deny all;
    }}
    
    # CORS –¥–ª—è API
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
    
    if ($request_method = 'OPTIONS') {{
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        add_header Access-Control-Max-Age 1728000;
        add_header Content-Type "text/plain; charset=utf-8";
        add_header Content-Length 0;
        return 204;
    }}
}}'''
    
    config_path = Path(server_path) / "nginx.conf"
    with open(config_path, 'w') as f:
        f.write(nginx_config)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx: {config_path}")

def create_deployment_script(server_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    script_content = f'''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

set -e

SERVER_USER="$1"
SERVER_HOST="$2"
SERVER_PATH="/var/www/updates"

if [ -z "$SERVER_USER" ] || [ -z "$SERVER_HOST" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 user@server.com"
    exit 1
fi

echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä $SERVER_USER@$SERVER_HOST..."

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
ssh "$SERVER_USER@$SERVER_HOST" "mkdir -p $SERVER_PATH/{{downloads,keys,scripts,logs}}"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
echo "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..."
scp appcast.xml "$SERVER_USER@$SERVER_HOST:$SERVER_PATH/"
scp nginx.conf "$SERVER_USER@$SERVER_HOST:$SERVER_PATH/"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
scp scripts/*.sh "$SERVER_USER@$SERVER_HOST:$SERVER_PATH/scripts/"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
ssh "$SERVER_USER@$SERVER_HOST" "chmod 755 $SERVER_PATH/scripts/*.sh"
ssh "$SERVER_USER@$SERVER_HOST" "chmod 644 $SERVER_PATH/appcast.xml"

echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üîó AppCast: https://$SERVER_HOST/appcast.xml"
echo "üìÅ Downloads: https://$SERVER_HOST/downloads/"
'''
    
    script_path = Path(server_path) / "deploy.sh"
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(script_path, 0o755)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {script_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–î–ê–ö–®–ù –°–ï–†–í–ï–†–ê –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ô")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if len(sys.argv) < 3:
        print("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –∏ –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 setup_production_server.py your-domain.com /path/to/server")
        sys.exit(1)
    
    domain = sys.argv[1]
    server_path = sys.argv[2]
    
    print(f"üåê –î–æ–º–µ–Ω: {domain}")
    print(f"üìÅ –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É: {server_path}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    create_directory_structure(server_path)
    create_appcast_xml(server_path, domain)
    create_update_script(server_path)
    create_sign_script(server_path)
    create_nginx_config(server_path, domain)
    create_deployment_script(server_path)
    
    print()
    print("=" * 60)
    print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ed25519_private.pem –≤ keys/")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ DMG —Ñ–∞–π–ª—ã –≤ downloads/")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Nginx —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ endpoints")
    print()
    print("üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
    print(f"   ./deploy.sh user@{domain}")
    print()
    print("üì° Endpoints –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
    print(f"   AppCast: https://{domain}/appcast.xml")
    print(f"   Downloads: https://{domain}/downloads/")

if __name__ == "__main__":
    main()

