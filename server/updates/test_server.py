#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import http.server
import socketserver
import os
import json
from urllib.parse import urlparse

class UpdateRequestHandler(http.server.SimpleHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, *args, **kwargs):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        os.chdir(os.path.join(os.path.dirname(__file__)))
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        
        if parsed_path.path == '/manifest.json':
            self.serve_manifest()
        elif parsed_path.path.startswith('/artifacts/'):
            self.serve_artifact(parsed_path.path)
        else:
            super().do_GET()
    
    def serve_manifest(self):
        """–û—Ç–¥–∞—á–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            manifest_path = os.path.join('manifests', 'manifest.json')
            
            if not os.path.exists(manifest_path):
                self.send_error(404, "Manifest not found")
                return
            
            with open(manifest_path, 'r', encoding='utf-8') as f:
                manifest = json.load(f)
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = json.dumps(manifest, indent=2)
            self.wfile.write(response.encode('utf-8'))
            
            print(f"‚úÖ –û—Ç–¥–∞–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç: {manifest.get('version', 'unknown')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
            self.send_error(500, "Internal server error")
    
    def serve_artifact(self, path):
        """–û—Ç–¥–∞—á–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –£–±–∏—Ä–∞–µ–º /artifacts/ –∏–∑ –ø—É—Ç–∏
            artifact_name = path.replace('/artifacts/', '')
            artifact_path = os.path.join('artifacts', artifact_name)
            
            if not os.path.exists(artifact_path):
                self.send_error(404, f"Artifact not found: {artifact_name}")
                return
            
            # –û—Ç–¥–∞–µ–º —Ñ–∞–π–ª
            with open(artifact_path, 'rb') as f:
                content = f.read()
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/octet-stream')
            self.send_header('Content-Length', str(len(content)))
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(content)
            
            print(f"‚úÖ –û—Ç–¥–∞–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {artifact_name} ({len(content)} –±–∞–π—Ç)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: {e}")
            self.send_error(500, "Internal server error")

def start_test_server(port=8080):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç: http://localhost:{port}/manifest.json")
    print(f"üì¶ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: http://localhost:{port}/artifacts/")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        with socketserver.TCPServer(("", port), UpdateRequestHandler) as httpd:
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    import sys
    
    port = 8080
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞")
            sys.exit(1)
    
    start_test_server(port)
