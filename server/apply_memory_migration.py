#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
–≤ —Ç–∞–±–ª–∏—Ü—É users –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏.
"""

import os
import sys
import logging
import psycopg2
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
sys.path.append(os.path.dirname(__file__))
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def read_migration_file():
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    migration_file = Path(__file__).parent / "database" / "migrate_memory_basic.sql"
    
    if not migration_file.exists():
        # –ï—Å–ª–∏ –±–∞–∑–æ–≤–æ–π –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é
        migration_file = Path(__file__).parent / "database" / "migrate_memory_simple.sql"
        
        if not migration_file.exists():
            # –ï—Å–ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é
            migration_file = Path(__file__).parent / "database" / "migrate_memory.sql"
    
    if not migration_file.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    logger.info(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_file.name}")
    
    with open(migration_file, 'r', encoding='utf-8') as f:
        return f.read()

def apply_migration(db_url: str):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(db_url)
        conn.autocommit = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
        with conn.cursor() as cursor:
            cursor.execute("SELECT version()")
            version = cursor.fetchone()[0]
            logger.info(f"üìä PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_sql = read_migration_file()
        logger.info("üìÑ –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        logger.info("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        with conn.cursor() as cursor:
            cursor.execute(migration_sql)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
            cursor.execute("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                AND column_name IN ('short_term_memory', 'long_term_memory', 'memory_updated_at')
                ORDER BY column_name
            """)
            
            new_columns = cursor.fetchall()
            if len(new_columns) == 3:
                logger.info("‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã:")
                for col_name, col_type in new_columns:
                    logger.info(f"   - {col_name}: {col_type}")
            else:
                raise Exception(f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –Ω–æ–≤—ã—Ö –ø–æ–ª—è, –Ω–∞–π–¥–µ–Ω–æ: {len(new_columns)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            cursor.execute("""
                SELECT indexname 
                FROM pg_indexes 
                WHERE tablename = 'users' 
                AND indexname IN ('idx_users_memory_updated', 'idx_users_active_memory')
                ORDER BY indexname
            """)
            
            new_indexes = cursor.fetchall()
            if len(new_indexes) == 2:
                logger.info("‚úÖ –ù–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã:")
                for (index_name,) in new_indexes:
                    logger.info(f"   - {index_name}")
            else:
                raise Exception(f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–∞, –Ω–∞–π–¥–µ–Ω–æ: {len(new_indexes)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
            cursor.execute("""
                SELECT proname 
                FROM pg_proc 
                WHERE proname IN ('cleanup_expired_short_term_memory')
                ORDER BY proname
            """)
            
            new_functions = cursor.fetchall()
            if len(new_functions) >= 1:
                logger.info("‚úÖ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:")
                for (func_name,) in new_functions:
                    logger.info(f"   - {func_name}")
            else:
                raise Exception(f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 1 –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–∞–π–¥–µ–Ω–æ: {len(new_functions)}")
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with conn.cursor() as cursor:
            try:
                cursor.execute("SELECT * FROM get_memory_stats()")
                stats = cursor.fetchone()
                if stats:
                    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
                    logger.info(f"   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[0]}")
                    logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–º—è—Ç—å—é: {stats[1]}")
                    logger.info(f"   - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {stats[2]}")
                    logger.info(f"   - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {stats[3]}")
            except Exception as e:
                logger.info("üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                cursor.execute("SELECT COUNT(*) FROM users")
                total_users = cursor.fetchone()[0]
                logger.info(f"   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
                
                cursor.execute("SELECT COUNT(*) FROM users WHERE short_term_memory IS NOT NULL OR long_term_memory IS NOT NULL")
                users_with_memory = cursor.fetchone()[0]
                logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–º—è—Ç—å—é: {users_with_memory}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        if 'conn' in locals():
            conn.rollback()
        return False
        
    finally:
        if 'conn' in locals():
            conn.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_url = Config.get_database_url()
        logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_url.split('@')[-1] if '@' in db_url else db_url}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        if apply_migration(db_url):
            logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            if test_memory_system(db_url):
                logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            else:
                logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        else:
            logger.error("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
