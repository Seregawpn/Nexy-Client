#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π Nexy Server
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    print("=" * 60)
    print("üöÄ NEXY SERVER - –ù–ê–°–¢–†–û–ô–ö–ê API –ö–õ–Æ–ß–ï–ô")
    print("=" * 60)
    print()

def get_user_input(prompt: str, default: str = "", required: bool = False) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        required: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª–µ
        
    Returns:
        –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    if default:
        full_prompt = f"{prompt} [{default}]: "
    else:
        full_prompt = f"{prompt}: "
    
    while True:
        value = input(full_prompt).strip()
        
        if not value and default:
            return default
        elif not value and required:
            print("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
            continue
        elif not value:
            return ""
        else:
            return value

def setup_gemini_config() -> Dict[str, str]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini"""
    print("ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê GOOGLE GEMINI API")
    print("-" * 40)
    print("–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://makersuite.google.com/app/apikey")
    print()
    
    config = {}
    config['GEMINI_API_KEY'] = get_user_input(
        "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Gemini API –∫–ª—é—á", 
        required=True
    )
    
    config['GEMINI_MODEL'] = get_user_input(
        "üß† –ú–æ–¥–µ–ª—å Gemini", 
        default="gemini-2.0-flash-exp"
    )
    
    config['GEMINI_TEMPERATURE'] = get_user_input(
        "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.0-2.0)", 
        default="0.7"
    )
    
    config['GEMINI_MAX_TOKENS'] = get_user_input(
        "üìù –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤", 
        default="2048"
    )
    
    print()
    return config

def setup_azure_config() -> Dict[str, str]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Azure Speech"""
    print("üéµ –ù–ê–°–¢–†–û–ô–ö–ê AZURE SPEECH SERVICES")
    print("-" * 40)
    print("–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –≤ Azure Portal: https://portal.azure.com/")
    print()
    
    config = {}
    config['AZURE_SPEECH_KEY'] = get_user_input(
        "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Azure Speech –∫–ª—é—á", 
        required=True
    )
    
    config['AZURE_SPEECH_REGION'] = get_user_input(
        "üåç –†–µ–≥–∏–æ–Ω Azure (–Ω–∞–ø—Ä–∏–º–µ—Ä: eastus)", 
        required=True
    )
    
    config['AZURE_VOICE_NAME'] = get_user_input(
        "üó£Ô∏è –ò–º—è –≥–æ–ª–æ—Å–∞", 
        default="en-US-AriaNeural"
    )
    
    config['AZURE_VOICE_STYLE'] = get_user_input(
        "üé≠ –°—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞ (friendly, cheerful, sad, etc.)", 
        default="friendly"
    )
    
    config['AZURE_SPEECH_RATE'] = get_user_input(
        "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (0.5-2.0)", 
        default="1.0"
    )
    
    config['AZURE_SPEECH_PITCH'] = get_user_input(
        "üéº –í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞ (0.5-2.0)", 
        default="1.0"
    )
    
    config['AZURE_SPEECH_VOLUME'] = get_user_input(
        "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å (0.0-1.0)", 
        default="1.0"
    )
    
    print()
    return config

def setup_database_config() -> Dict[str, str]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• POSTGRESQL")
    print("-" * 40)
    print()
    
    config = {}
    config['DB_HOST'] = get_user_input(
        "üè† –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
        default="localhost"
    )
    
    config['DB_PORT'] = get_user_input(
        "üîå –ü–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
        default="5432"
    )
    
    config['DB_NAME'] = get_user_input(
        "üìö –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
        default="voice_assistant_db"
    )
    
    config['DB_USER'] = get_user_input(
        "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
        default="postgres"
    )
    
    config['DB_PASSWORD'] = get_user_input(
        "üîí –ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
        required=True
    )
    
    print()
    return config

def setup_audio_config() -> Dict[str, str]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    print("üéß –ù–ê–°–¢–†–û–ô–ö–ê –ê–£–î–ò–û –ü–ê–†–ê–ú–ï–¢–†–û–í")
    print("-" * 40)
    print("–í–ê–ñ–ù–û: –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!")
    print()
    
    config = {}
    config['SAMPLE_RATE'] = get_user_input(
        "üìä –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏", 
        default="48000"
    )
    
    config['CHUNK_SIZE'] = get_user_input(
        "üì¶ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞", 
        default="1024"
    )
    
    config['AUDIO_FORMAT'] = get_user_input(
        "üéµ –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ", 
        default="int16"
    )
    
    config['STREAMING_CHUNK_SIZE'] = get_user_input(
        "üåä –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞", 
        default="4096"
    )
    
    print()
    return config

def setup_grpc_config() -> Dict[str, str]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ gRPC"""
    print("üåê –ù–ê–°–¢–†–û–ô–ö–ê GRPC –°–ï–†–í–ï–†–ê")
    print("-" * 40)
    print()
    
    config = {}
    config['GRPC_HOST'] = get_user_input(
        "üè† –•–æ—Å—Ç gRPC —Å–µ—Ä–≤–µ—Ä–∞", 
        default="0.0.0.0"
    )
    
    config['GRPC_PORT'] = get_user_input(
        "üîå –ü–æ—Ä—Ç gRPC —Å–µ—Ä–≤–µ—Ä–∞", 
        default="50051"
    )
    
    config['MAX_WORKERS'] = get_user_input(
        "üë• –ú–∞–∫—Å–∏–º—É–º –≤–æ—Ä–∫–µ—Ä–æ–≤", 
        default="10"
    )
    
    print()
    return config

def save_config_to_env(config: Dict[str, str], env_file: str = "config.env"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ .env —Ñ–∞–π–ª"""
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ {env_file}...")
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    existing_lines = []
    if Path(env_file).exists():
        with open(env_file, 'r', encoding='utf-8') as f:
            existing_lines = f.readlines()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    with open(env_file, 'w', encoding='utf-8') as f:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        f.write("# =====================================================\n")
        f.write("# –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø NEXY SERVER\n")
        f.write("# =====================================================\n")
        f.write("# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º setup_api_keys.py\n")
        f.write(f"# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("\n")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            "API –ö–õ–Æ–ß–ò": ["GEMINI_API_KEY", "AZURE_SPEECH_KEY", "AZURE_SPEECH_REGION"],
            "GEMINI –ù–ê–°–¢–†–û–ô–ö–ò": ["GEMINI_MODEL", "GEMINI_TEMPERATURE", "GEMINI_MAX_TOKENS"],
            "AZURE –ù–ê–°–¢–†–û–ô–ö–ò": ["AZURE_VOICE_NAME", "AZURE_VOICE_STYLE", "AZURE_SPEECH_RATE", "AZURE_SPEECH_PITCH", "AZURE_SPEECH_VOLUME"],
            "–ê–£–î–ò–û –ù–ê–°–¢–†–û–ô–ö–ò": ["SAMPLE_RATE", "CHUNK_SIZE", "AUDIO_FORMAT", "STREAMING_CHUNK_SIZE"],
            "–ë–ê–ó–ê –î–ê–ù–ù–´–•": ["DB_HOST", "DB_PORT", "DB_NAME", "DB_USER", "DB_PASSWORD"],
            "GRPC –ù–ê–°–¢–†–û–ô–ö–ò": ["GRPC_HOST", "GRPC_PORT", "MAX_WORKERS"]
        }
        
        for category, keys in categories.items():
            f.write(f"\n# =====================================================\n")
            f.write(f"# {category}\n")
            f.write(f"# =====================================================\n")
            
            for key in keys:
                if key in config:
                    f.write(f"{key}={config[key]}\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        f.write("\n# =====================================================\n")
        f.write("# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò\n")
        f.write("# =====================================================\n")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = {
            "MAX_CONCURRENT_REQUESTS": "10",
            "REQUEST_TIMEOUT": "60",
            "FALLBACK_TIMEOUT": "30",
            "LOG_LEVEL": "INFO",
            "LOG_REQUESTS": "true",
            "LOG_RESPONSES": "false",
            "MAX_SESSIONS": "100",
            "SESSION_TIMEOUT": "3600",
            "HARDWARE_ID_LENGTH": "32"
        }
        
        for key, value in default_settings.items():
            if key not in config:
                f.write(f"{key}={value}\n")
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {env_file}")

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("-" * 40)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
        sys.path.append('.')
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config.unified_config import get_config
        config = get_config()
        
        print("‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = config.get_status()
        
        print("\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for section, values in status.items():
            print(f"\nüîß {section.upper()}:")
            for key, value in values.items():
                if 'key' in key.lower() or 'password' in key.lower():
                    display_value = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if value else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                else:
                    display_value = value
                print(f"  {key}: {display_value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    all_config = {}
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
    all_config.update(setup_gemini_config())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Azure
    all_config.update(setup_azure_config())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_config.update(setup_database_config())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ
    all_config.update(setup_audio_config())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ gRPC
    all_config.update(setup_grpc_config())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    save_config_to_env(all_config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if test_configuration():
        print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.env")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python3 grpc_server.py")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º")
    else:
        print("\n‚ö†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    main()
