import asyncio
import logging
import os
import re
import base64
import io
from typing import AsyncGenerator, List
from PIL import Image

from google import genai
from google.genai import types

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π API
if not os.environ.get("GEMINI_API_KEY"):
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.env")

logger = logging.getLogger(__name__)

class TextProcessor:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Gemini Live API,
    –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Search)
    –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    """
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞–º—è—Ç–∏
        self.memory_analyzer = None
        self.db_manager = None
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini Live API –∫–ª–∏–µ–Ω—Ç–∞
            self.client = genai.Client(
                http_options={"api_version": "v1beta"},
                api_key=os.environ.get("GEMINI_API_KEY"),
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            self.tools = [
                types.Tool(google_search=types.GoogleSearch()),
            ]
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Live API
            self.config = types.LiveConnectConfig(
                response_modalities=["TEXT"],
                media_resolution="MEDIA_RESOLUTION_MEDIUM",
                context_window_compression=types.ContextWindowCompressionConfig(
                    trigger_tokens=25600,
                    sliding_window=types.SlidingWindow(target_tokens=12800),
                ),
                tools=self.tools,
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MemoryAnalyzer
            gemini_api_key = os.environ.get("GEMINI_API_KEY")
            if gemini_api_key:
                try:
                    from memory_analyzer import MemoryAnalyzer
                    self.memory_analyzer = MemoryAnalyzer(gemini_api_key)
                    logger.info(f"‚úÖ MemoryAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è MemoryAnalyzer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
            
            logger.info(f"‚úÖ TextProcessor —Å Gemini Live API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üîç Google Search tool —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TextProcessor: {e}", exc_info=True)
            self.client = None

    def set_database_manager(self, db_manager):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç DatabaseManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é.
        
        Args:
            db_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager
        """
        self.db_manager = db_manager
        logger.info("‚úÖ DatabaseManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ TextProcessor")
    
    async def generate_response_stream(self, prompt: str, hardware_id: str = None, screenshot_base64: str = None, **kwargs) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini Live API –∏ —Å—Ç—Ä–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        if not self.client:
            logger.error("Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
            return

        logger.info(f"–ó–∞–ø—É—Å–∫–∞—é Gemini Live API –¥–ª—è: '{prompt[:50]}...'")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        memory_context = ""
        if hardware_id and self.db_manager:
            try:
                # –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                async with asyncio.timeout(2.0):
                    memory_data = await asyncio.to_thread(
                        self.db_manager.get_user_memory, 
                        hardware_id
                    )
                    if memory_data.get('short') or memory_data.get('long'):
                        memory_context = f"""
                        
                        –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏:
                        –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('short', '–ù–µ—Ç')}
                        –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('long', '–ù–µ—Ç')}
                        """
                        logger.info(f"üß† –ü–æ–ª—É—á–µ–Ω–∞ –ø–∞–º—è—Ç—å –¥–ª—è {hardware_id}: –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è ({len(memory_data.get('short', ''))} —Å–∏–º–≤–æ–ª–æ–≤), –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è ({len(memory_data.get('long', ''))} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        logger.info(f"üß† –ü–∞–º—è—Ç—å –¥–ª—è {hardware_id} –ø—É—Å—Ç–∞")
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è {hardware_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        
        try:
            logger.info(f"üîå –ò—Å–ø–æ–ª—å–∑—É—é –æ–±—ã—á–Ω—ã–π Gemini API...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Gemini API –≤–º–µ—Å—Ç–æ Live API
            model = self.client.GenerativeModel('gemini-2.0-flash-exp')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å —É—á–µ—Ç–æ–º –ø–∞–º—è—Ç–∏
            base_system_instruction = (
                    "You are a friendly, caring AI assistant for blind and visually impaired users. "
                    "Be warm, conversational, and supportive while maintaining the highest standards of accuracy and safety.\n\n"
                    " When you give the answer, you need to give just answer short and clear and not too long And just important.\n\n"

                    "üéØ REQUEST ANALYSIS - READ THIS FIRST:\n"
                    "   You MUST analyze the user's request and respond accordingly and understand, which kind of question is it or which kind of request is it:\n\n"
                    
                    "1Ô∏è‚É£ Search: related to search information online, for example, news, sport news, or ticket important information, which you can get just online:\n this is example of questions requests"                    "   - 'What's the latest news?' ‚Üí Search for current news\n"
                    "   - 'What happened today?' ‚Üí Search for today's events\n"
                    "   - 'Weather today?' ‚Üí Search for current weather\n"
                    "   - 'Current stock prices?' ‚Üí Search for market data\n"
                    "   - ANY question about recent events, current time, or live information\n"
                    
                    
                    "2Ô∏è‚É£ SCREEN ANALYSIS ‚Üí this kind of request which user asked about to tell what do you see on the screen or you need to qualify him? What is on the screen because he cannot see and you need to help him with:\n these are kind of requests"
                    "   - 'What do I see on screen?' ‚Üí Analyze screenshot\n"
                    "   - 'What's on the right side?' ‚Üí Analyze screenshot\n"
                    "   - 'Describe my desktop' ‚Üí Analyze screenshot\n"
                    "   - 'What am I working on?' ‚Üí Analyze screenshot\n"
                    
                    "3Ô∏è‚É£ conversation ‚Üí you need to ask some question just to talk as a question or other questions which you don't need to use screenshot or you don't need to use search for example, if he asked to help with something to answer any question (NOT for recent events): these are kind of requests\n"
                    "   - 'How do computers work?' ‚Üí Use your knowledge\n"
                    "   - 'What is gravity?' ‚Üí Use your knowledge\n"
                    "   - 'How to cook pasta?' ‚Üí Use your knowledge\n"
                    " calculation"
                    
                    
                    "üö® CRITICAL RULES:\n"
                    "   - never mix them for example if user ask one category or request you need to answer exactly what you want. You cannot meet them."
                    
                    "üí¨ PERSONALITY:\n"
                    "   - Be warm, friendly, and supportive\n"
                    "   - Use encouraging language\n"
                    "   - Show genuine care and empathy\n\n"
                    
                    "üß† MEMORY (OPTIONAL):\n"
                    "   - you need to use memory when it related to the topic to the request and if user ask you about some information which was talking about so use memory when it's really important to use and sense of topic"
                    
                    "‚ö†Ô∏è SAFETY:\n"
                    "   - Warn about suspicious content or dangerous websites or leads or emails messages whatever if something can be dangerous you need to tell about this that user I want to go one click because he's a Brian and he cannot see so you need to take care about it\n"

                )
                
                if memory_context:
                    system_instruction = base_system_instruction + memory_context
                    logger.info(f"üß† –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏")
                    logger.info(f"üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏: {memory_context[:200]}...")
                else:
                    system_instruction = base_system_instruction
                    logger.info(f"üß† –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏")
                
                # --- –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–ö–†–ò–ù–®–û–¢–ê ---
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Ä–µ—à–∞–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
                content = [system_instruction, prompt]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                needs_screenshot = self._should_analyze_screenshot(prompt)
                
                if screenshot_base64 and needs_screenshot:
                    try:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        image_bytes = base64.b64decode(screenshot_base64)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PIL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
                        img = Image.open(io.BytesIO(image_bytes))
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
                        content.append(img)
                        
                        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢–°–Ø ({img.format}, {img.size}) - –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞")
                        
                    except Exception as img_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {img_error}")
                elif screenshot_base64:
                    logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ò–ì–ù–û–†–ò–†–£–ï–¢–°–Ø - –∑–∞–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞")
                else:
                    logger.info(f"üìù –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑)
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Gemini API...")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Gemini API
                    response = model.generate_content(content)
                    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç Gemini API!")
                    
                    if response.text:
                        accumulated_text = response.text
                        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{accumulated_text[:100]}...'")
                        
                        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                        sentences = self._split_into_sentences(accumulated_text)
                        
                        for sentence in sentences:
                            if sentence.strip():
                                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{sentence[:100]}...'")
                                yield sentence.strip()
                        
                    else:
                        logger.warning("‚ö†Ô∏è Gemini API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
                        
                except Exception as api_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini API: {api_error}")
                    yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
                
                logger.info("‚úÖ Gemini API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                # –§–û–ù–û–í–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ù–ï –ë–õ–û–ö–ò–†–£–ï–¢) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç
                if 'response' in locals() and response.text and hardware_id and self.db_manager and self.memory_analyzer:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ - –ù–ï –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    asyncio.create_task(
                        self._update_memory_background(hardware_id, prompt, response.text)
                    )
                    logger.info(f"üîÑ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ –¥–ª—è {hardware_id}")
                elif hardware_id and self.db_manager:
                    logger.warning(f"‚ö†Ô∏è MemoryAnalyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {hardware_id}, –ø–∞–º—è—Ç—å –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                elif hardware_id:
                    logger.warning(f"‚ö†Ô∏è DatabaseManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {hardware_id}, –ø–∞–º—è—Ç—å –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Gemini Live API: {e}", exc_info=True)
            yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    
    def clean_text(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞."""
        text = re.sub(r'\s+', ' ', text).strip()
        text = text.replace('*', '')
        return text

    def _should_analyze_screenshot(self, prompt: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω.
        """
        prompt_lower = prompt.lower().strip()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¢–†–ï–ë–£–Æ–¢ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
        screen_analysis_keywords = [
            'what do i see', 'what is on screen', 'what is on the screen',
            'describe screen', 'describe my screen', 'what am i working on',
            'what is on the right', 'what is on the left', 'what is on top',
            'what is on bottom', 'describe desktop', 'describe my desktop',
            'what is visible', 'what can you see', 'tell me what you see',
            'analyze screen', 'analyze my screen', 'what does my screen show',
            'screen content', 'screen information', 'what is displayed',
            '—á—Ç–æ —è –≤–∏–∂—É', '—á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ', '–æ–ø–∏—à–∏ —ç–∫—Ä–∞–Ω', '—á—Ç–æ —è –¥–µ–ª–∞—é',
            '—á—Ç–æ —Å–ø—Ä–∞–≤–∞', '—á—Ç–æ —Å–ª–µ–≤–∞', '—á—Ç–æ —Å–≤–µ—Ä—Ö—É', '—á—Ç–æ —Å–Ω–∏–∑—É',
            '–æ–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª', '—á—Ç–æ –≤–∏–¥–Ω–æ', '—á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
        for keyword in screen_analysis_keywords:
            if keyword in prompt_lower:
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞: '{keyword}' –Ω–∞–π–¥–µ–Ω–æ –≤ '{prompt}'")
                return True
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–∏—Å–∫ - —Å–∫—Ä–∏–Ω—à–æ—Ç –ù–ï –Ω—É–∂–µ–Ω
        general_keywords = [
            'how are you', 'hello', 'hi', 'good morning', 'good evening',
            'what is', 'how does', 'explain', 'tell me about', 'search for',
            'latest news', 'weather', 'current', 'today', 'now',
            '–∫–∞–∫ –¥–µ–ª–∞', '–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
            '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '–Ω–∞–π–¥–∏',
            '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', '–ø–æ–≥–æ–¥–∞', '—Ç–µ–∫—É—â–∏–π', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å'
        ]
        
        for keyword in general_keywords:
            if keyword in prompt_lower:
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –ù–ï —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞: '{keyword}' –Ω–∞–π–¥–µ–Ω–æ –≤ '{prompt}'")
                return False
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–∫—Ä–∏–Ω—à–æ—Ç –ù–ï –Ω—É–∂–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä)
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –∞–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞: '{prompt}'")
        return False

    def _split_into_sentences(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
        if not text:
            return []
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = self.clean_text(text)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫–∏ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ç.–¥.", "–∏ —Ç.–ø.")
        sentence_pattern = r'(?<=[.!?])\s+(?=[A-Z–ê-–Ø])'
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        sentences = re.split(sentence_pattern, text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        result = []
        for i, sentence in enumerate(sentences):
            sentence = sentence.strip()
            if sentence:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                if i < len(sentences) - 1:
                    # –ò—â–µ–º –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
                    if not any(sentence.endswith(ending) for ending in ['.', '!', '?']):
                        sentence += '.'
                result.append(sentence)
        
        return result
    
    def _is_complete_sentence(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω—ã–º"""
        if not text:
            return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = self.clean_text(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–Ω–∞–∫–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentence_endings = ['.', '!', '?', '...', '?!', '!?']
        return any(text.endswith(ending) for ending in sentence_endings)
    
    async def _update_memory_background(self, hardware_id: str, prompt: str, response: str):
        """
        –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            hardware_id: –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prompt: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        try:
            logger.debug(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è {hardware_id}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            short_memory, long_memory = await self.memory_analyzer.analyze_conversation(
                prompt, 
                response
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
            if short_memory or long_memory:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                success = await asyncio.to_thread(
                    self.db_manager.update_user_memory,
                    hardware_id,
                    short_memory,
                    long_memory
                )
                
                if success:
                    logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –¥–ª—è {hardware_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è ({len(short_memory)} —Å–∏–º–≤–æ–ª–æ–≤), –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è ({len(long_memory)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è {hardware_id}")
            else:
                logger.debug(f"üß† –î–ª—è {hardware_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è {hardware_id}: {e}")
            # –ù–ï –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞