#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
"""

import asyncio
import os
import sys
sys.path.append('.')

from text_processor import TextProcessor
from database.database_manager import DatabaseManager

async def test_memory_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.environ.get("GEMINI_API_KEY"):
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        text_processor = TextProcessor()
        db_manager = DatabaseManager()
        
        # üîß –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.to_thread(db_manager.connect)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DatabaseManager –≤ TextProcessor
        text_processor.set_database_manager(db_manager)
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_hardware_id = "test_user_123"
        test_prompt = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ—Ä–≥–µ–π, —è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã"
        test_response = "–ü—Ä–∏–≤–µ—Ç, –°–µ—Ä–≥–µ–π! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –í—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!"
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_prompt}")
        print(f"ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {test_response}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
        if text_processor.memory_analyzer:
            print("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_prompt = text_processor.memory_analyzer._create_analysis_prompt(
                test_prompt, 
                test_response
            )
            print(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏:")
            print(f"   {analysis_prompt[:200]}...")
            
            short_memory, long_memory = await text_processor.memory_analyzer.analyze_conversation(
                test_prompt, 
                test_response
            )
            
            print(f"üìã –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {short_memory}")
            print(f"üìö –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {long_memory}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ MemoryAnalyzer
            print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MemoryAnalyzer...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Gemini
            try:
                response = await asyncio.to_thread(
                    text_processor.memory_analyzer.model.generate_content,
                    analysis_prompt
                )
                
                if response and response.text:
                    print(f"ü§ñ Raw Gemini response:")
                    print(f"   {response.text[:500]}...")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                    extracted_short, extracted_long = text_processor.memory_analyzer._extract_memory_from_response(response.text)
                    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:")
                    print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: '{extracted_short}'")
                    print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: '{extracted_long}'")
                else:
                    print("‚ùå Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Gemini: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if short_memory or long_memory:
                success = await asyncio.to_thread(
                    db_manager.update_user_memory,
                    test_hardware_id,
                    short_memory,
                    long_memory
                )
                
                if success:
                    print("‚úÖ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
                    memory_data = await asyncio.to_thread(
                        db_manager.get_user_memory, 
                        test_hardware_id
                    )
                    
                    print(f"üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏:")
                    print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('short', '–ù–µ—Ç')}")
                    print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('long', '–ù–µ—Ç')}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
            else:
                print("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –Ω–µ –≤—ã—è–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            print("‚ùå MemoryAnalyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_memory_system())
