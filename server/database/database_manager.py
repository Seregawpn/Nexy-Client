import psycopg2
import psycopg2.extras
import json
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone
import uuid

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self, connection_string: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            connection_string: –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
        """
        self.connection_string = connection_string or "postgresql://localhost/voice_assistant_db"
        self.connection = None
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(self.connection_string)
            self.connection.autocommit = False
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            self.connection = None
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    def __enter__(self):
        """Context manager entry"""
        self.connect()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.disconnect()
    
    # =====================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    # =====================================================
    
    def create_user(self, hardware_id_hash: str, metadata: Dict[str, Any] = None) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            hardware_id_hash: –•–µ—à –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ ID
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            with self.connection.cursor() as cursor:
                user_id = str(uuid.uuid4())
                logger.info(f"üÜî –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
                logger.info(f"üÜî Hardware ID hash: {hardware_id_hash}")
                
                cursor.execute("""
                    INSERT INTO users (id, hardware_id_hash, metadata)
                    VALUES (%s, %s, %s)
                    RETURNING id
                """, (user_id, hardware_id_hash, json.dumps(metadata or {})))
                
                result = cursor.fetchone()
                self.connection.commit()
                
                if result and result[0]:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {result[0]}")
                    return result[0]
                else:
                    logger.error(f"‚ùå create_user: result = {result}")
                    return None
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def get_user_by_hardware_id(self, hardware_id_hash: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É ID"""
        try:
            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT * FROM users WHERE hardware_id_hash = %s
                """, (hardware_id_hash,))
                
                result = cursor.fetchone()
                return dict(result) if result else None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    # =====================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò
    # =====================================================
    
    def create_session(self, user_id: str, metadata: Dict[str, Any] = None) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            if not user_id:
                logger.error(f"‚ùå create_session: user_id = {user_id}")
                return None
                
            with self.connection.cursor() as cursor:
                session_id = str(uuid.uuid4())
                logger.info(f"üÜî –°–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é —Å ID: {session_id}")
                logger.info(f"üÜî User ID: {user_id}")
                
                cursor.execute("""
                    INSERT INTO sessions (id, user_id, metadata)
                    VALUES (%s, %s, %s)
                    RETURNING id
                """, (session_id, user_id, json.dumps(metadata or {})))
                
                result = cursor.fetchone()
                self.connection.commit()
                
                if result and result[0]:
                    logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result[0]}")
                    return result[0]
                else:
                    logger.error(f"‚ùå create_session: result = {result}")
                    return None
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    def end_session(self, session_id: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            with self.connection.cursor() as cursor:
                cursor.execute("""
                    UPDATE sessions 
                    SET end_time = NOW(), status = 'ended', updated_at = NOW()
                    WHERE id = %s
                """, (session_id,))
                
                self.connection.commit()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session_id}")
                return True
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    # =====================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ê–ù–î–ê–ú–ò
    # =====================================================
    
    def create_command(self, session_id: str, prompt: str, metadata: Dict[str, Any] = None, language: str = 'en') -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if not session_id:
                logger.error(f"‚ùå create_command: session_id = {session_id}")
                return None
                
            with self.connection.cursor() as cursor:
                command_id = str(uuid.uuid4())
                logger.info(f"üÜî –°–æ–∑–¥–∞—é –∫–æ–º–∞–Ω–¥—É —Å ID: {command_id}")
                logger.info(f"üÜî Session ID: {session_id}")
                
                cursor.execute("""
                    INSERT INTO commands (id, session_id, prompt, language, metadata)
                    VALUES (%s, %s, %s, %s, %s)
                    RETURNING id
                """, (command_id, session_id, prompt, language, json.dumps(metadata or {})))
                
                result = cursor.fetchone()
                self.connection.commit()
                
                if result and result[0]:
                    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result[0]}")
                    return result[0]
                else:
                    logger.error(f"‚ùå create_command: result = {result}")
                    return None
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None
    
    # =====================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–í–ï–¢–ê–ú–ò LLM
    # =====================================================
    
    def create_llm_answer(self, command_id: str, prompt: str, response: str,
                         model_info: Dict[str, Any] = None,
                         performance_metrics: Dict[str, Any] = None) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            with self.connection.cursor() as cursor:
                answer_id = str(uuid.uuid4())
                cursor.execute("""
                    INSERT INTO llm_answers (id, command_id, prompt, response, model_info, performance_metrics)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    RETURNING id
                """, (answer_id, command_id, prompt, response, 
                     json.dumps(model_info or {}), json.dumps(performance_metrics or {})))
                
                result = cursor.fetchone()
                self.connection.commit()
                
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç LLM —Å–æ–∑–¥–∞–Ω: {answer_id}")
                return result[0] if result else answer_id
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
            return None
    
    # =====================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–†–ò–ù–®–û–¢–ê–ú–ò
    # =====================================================
    
    def create_screenshot(self, session_id: str, file_path: str = None, file_url: str = None,
                         metadata: Dict[str, Any] = None) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ"""
        try:
            if not session_id:
                logger.error(f"‚ùå create_screenshot: session_id = {session_id}")
                return None
                
            with self.connection.cursor() as cursor:
                screenshot_id = str(uuid.uuid4())
                logger.info(f"üÜî –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —Å ID: {screenshot_id}")
                logger.info(f"üÜî Session ID: {session_id}")
                
                cursor.execute("""
                    INSERT INTO screenshots (id, session_id, file_path, file_url, metadata)
                    VALUES (%s, %s, %s, %s, %s)
                    RETURNING id
                """, (screenshot_id, session_id, file_path, file_url, json.dumps(metadata or {})))
                
                result = cursor.fetchone()
                self.connection.commit()
                
                if result and result[0]:
                    logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {result[0]}")
                    return result[0]
                else:
                    logger.error(f"‚ùå create_screenshot: result = {result}")
                    return None
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    # =====================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö–ê–ú–ò
    # =====================================================
    
    def create_performance_metric(self, session_id: str, metric_type: str, 
                                metric_value: Dict[str, Any]) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            with self.connection.cursor() as cursor:
                metric_id = str(uuid.uuid4())
                cursor.execute("""
                    INSERT INTO performance_metrics (id, session_id, metric_type, metric_value)
                    VALUES (%s, %s, %s, %s)
                    RETURNING id
                """, (metric_id, session_id, metric_type, json.dumps(metric_value)))
                
                result = cursor.fetchone()
                self.connection.commit()
                
                logger.info(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {metric_id}")
                return result[0] if result else metric_id
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏: {e}")
            return None
    
    # =====================================================
    # –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´
    # =====================================================
    
    def get_user_statistics(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT 
                        COUNT(DISTINCT s.id) as total_sessions,
                        COUNT(c.id) as total_commands,
                        COUNT(DISTINCT sc.id) as total_screenshots,
                        AVG(EXTRACT(EPOCH FROM (s.end_time - s.start_time))) as avg_session_duration_seconds
                    FROM users u
                    LEFT JOIN sessions s ON u.id = s.user_id
                    LEFT JOIN commands c ON s.id = c.session_id
                    LEFT JOIN screenshots sc ON s.id = sc.session_id
                    WHERE u.id = %s
                    GROUP BY u.id
                """, (user_id,))
                
                result = cursor.fetchone()
                return dict(result) if result else {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}
    
    def get_session_commands(self, session_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å–µ—Å—Å–∏–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ LLM"""
        try:
            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT 
                        c.*,
                        la.response as llm_response,
                        la.model_info,
                        la.performance_metrics
                    FROM commands c
                    LEFT JOIN llm_answers la ON c.id = la.command_id
                    WHERE c.session_id = %s
                    ORDER BY c.created_at
                """, (session_id,))
                
                results = cursor.fetchall()
                return [dict(row) for row in results]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å–µ—Å—Å–∏–∏: {e}")
            return []

# =====================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–¨–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =====================================================

    def get_user_memory(self, hardware_id_hash: str) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É ID.
        
        Args:
            hardware_id_hash: –•–µ—à –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏ 'short' –∏ 'long' –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        """
        try:
            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT short_term_memory, long_term_memory
                    FROM users 
                    WHERE hardware_id_hash = %s
                """, (hardware_id_hash,))
                
                result = cursor.fetchone()
                if result:
                    return {
                        'short': result['short_term_memory'] or '',
                        'long': result['long_term_memory'] or ''
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å hardware_id {hardware_id_hash} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return {'short': '', 'long': ''}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {'short': '', 'long': ''}
    
    def update_user_memory(
        self, 
        hardware_id_hash: str, 
        short_memory: str, 
        long_memory: str
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            hardware_id_hash: –•–µ—à –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            short_memory: –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
            long_memory: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with self.connection.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute("""
                    SELECT id FROM users WHERE hardware_id_hash = %s
                """, (hardware_id_hash,))
                
                user_exists = cursor.fetchone()
                
                if user_exists:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute("""
                        UPDATE users 
                        SET short_term_memory = %s,
                            long_term_memory = %s,
                            memory_updated_at = NOW()
                        WHERE hardware_id_hash = %s
                    """, (short_memory, long_memory, hardware_id_hash))
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–º—è—Ç—å—é
                    cursor.execute("""
                        INSERT INTO users (hardware_id_hash, short_term_memory, long_term_memory)
                        VALUES (%s, %s, %s)
                    """, (hardware_id_hash, short_memory, long_memory))
                
                self.connection.commit()
                logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hardware_id_hash} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                return True
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def cleanup_expired_short_term_memory(self, hours: int = 24) -> int:
        """
        –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –ø–∞–º—è—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        try:
            with self.connection.cursor() as cursor:
                cursor.execute("""
                    SELECT cleanup_expired_short_term_memory(%s)
                """, (hours,))
                
                result = cursor.fetchone()
                affected_rows = result[0] if result else 0
                
                self.connection.commit()
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {affected_rows} –∑–∞–ø–∏—Å–µ–π –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å—Ç–∞—Ä—à–µ {hours} —á–∞—Å–æ–≤")
                return affected_rows
                
        except Exception as e:
            self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –ø–∞–º—è—Ç–∏: {e}")
            return 0
    
    def get_memory_statistics(self) -> Dict[str, any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏.
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–∞–º—è—Ç–∏
        """
        try:
            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
                cursor.execute("SELECT * FROM get_memory_stats()")
                result = cursor.fetchone()
                
                if result:
                    return dict(result)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏")
                    return {}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {}
    
    def get_users_with_active_memory(self, limit: int = 100) -> List[Dict[str, any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–º—è—Ç—å—é
        """
        try:
            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT hardware_id_hash, memory_updated_at,
                           LENGTH(COALESCE(short_term_memory, '')) as short_memory_size,
                           LENGTH(COALESCE(long_term_memory, '')) as long_memory_size
                    FROM users 
                    WHERE short_term_memory IS NOT NULL OR long_term_memory IS NOT NULL
                    ORDER BY memory_updated_at DESC
                    LIMIT %s
                """, (limit,))
                
                results = cursor.fetchall()
                return [dict(row) for row in results]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–º—è—Ç—å—é: {e}")
            return []

# =====================================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# =====================================================

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with DatabaseManager() as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hardware_id = "test_hardware_hash_123"
        user_metadata = {
            "hardware_info": {
                "mac_address": "00:11:22:33:44:55",
                "serial_number": "C02ABC123DEF",
                "volume_uuid": "12345678-1234-1234-1234-123456789abc"
            },
            "system_info": {
                "os_version": "macOS 14.0",
                "python_version": "3.12.7",
                "app_version": "1.0.0"
            }
        }
        
        user_id = db.create_user(hardware_id, user_metadata)
        if user_id:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_metadata = {
                "app_version": "1.0.0",
                "start_method": "push_to_talk"
            }
            
            session_id = db.create_session(user_id, session_metadata)
            if session_id:
                print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
                command_metadata = {
                    "input_method": "voice",
                    "duration_ms": 2500,
                    "confidence": 0.95
                }
                
                command_id = db.create_command(session_id, "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", command_metadata)
                if command_id:
                    print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {command_id}")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç LLM
                    model_info = {
                        "model_name": "gemini-2.0-flash-exp",
                        "provider": "google"
                    }
                    
                    performance_metrics = {
                        "response_time_ms": 1200,
                        "tokens_generated": 50
                    }
                    
                    answer_id = db.create_llm_answer(
                        command_id, 
                        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", 
                        "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª. –ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?",
                        model_info,
                        performance_metrics
                    )
                    
                    if answer_id:
                        print(f"‚úÖ –û—Ç–≤–µ—Ç LLM —Å–æ–∑–¥–∞–Ω: {answer_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = db.get_user_statistics(user_id)
                    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–µ—Å—Å–∏–∏
                    commands = db.get_session_commands(session_id)
                    print(f"üìù –ö–æ–º–∞–Ω–¥—ã —Å–µ—Å—Å–∏–∏: {len(commands)}")
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
                    db.end_session(session_id)
                    print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
