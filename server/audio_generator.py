
import asyncio
import os
import logging
from typing import Optional, Dict, Any, AsyncGenerator, Union
import edge_tts
try:
    import azure.cognitiveservices.speech as speechsdk  # type: ignore
except Exception:
    speechsdk = None
import numpy as np
from pydub import AudioSegment
import io
from config import Config

logger = logging.getLogger(__name__)

class AudioGenerator:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é edge-tts.
    –ú–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ –ø–æ—Ç–æ–∫, —Ç–∞–∫ –∏ –ø–æ–ª–Ω—ã–π –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç.
    """
    
    def __init__(self, voice: str = None, rate: str = None, volume: str = None, pitch: str = None):
        self.voice = voice or Config.EDGE_TTS_VOICE
        self.rate = rate or Config.EDGE_TTS_RATE
        self.volume = volume or Config.EDGE_TTS_VOLUME
        self.pitch = pitch or "+0Hz"
        # –ö–†–ò–¢–ò–ß–ù–û: —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.is_generating = False
        self._validate_voice()
        
        # –§–ª–∞–≥ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Azure Speech (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∫–ª—é—á –∏ —Ä–µ–≥–∏–æ–Ω)
        self._use_azure = bool(getattr(Config, 'SPEECH_KEY', None) and getattr(Config, 'SPEECH_REGION', None) and speechsdk is not None)
        if self._use_azure:
            try:
                self._azure_speech_config = speechsdk.SpeechConfig(subscription=Config.SPEECH_KEY, region=Config.SPEECH_REGION)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Azure, –Ω–∞–ø—Ä–∏–º–µ—Ä en-US-JennyNeural)
                self._azure_speech_config.speech_synthesis_voice_name = self.voice
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º PCM 48kHz mono 16-bit –¥–ª—è –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ numpy
                self._azure_speech_config.set_speech_synthesis_output_format(
                    speechsdk.SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm
                )
                logger.info("Azure Speech TTS –≤–∫–ª—é—á—ë–Ω")
            except Exception as azure_init_err:
                self._use_azure = False
                logger.error(f"Azure Speech –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, fallback –Ω–∞ edge-tts: {azure_init_err}")
        
    def _validate_voice(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞."""
        logger.info(f"–ì–æ–ª–æ—Å {self.voice} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def generate_complete_audio_for_sentence(self, text: str, interrupt_checker=None) -> Optional[np.ndarray]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –¶–ï–õ–û–ì–û –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –û–î–ù–ò–ú numpy-–º–∞—Å—Å–∏–≤–æ–º.
        interrupt_checker: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        """
        if not text or not text.strip():
            logger.warning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            return None

        try:
            # –ö–†–ò–¢–ò–ß–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self.is_generating = True
            logger.info(f"üéµ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –¥–ª—è: {text[:50]}...")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: Azure Speech (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self._use_azure:
                loop = asyncio.get_running_loop()
                def _speak_sync() -> bytes:
                    synthesizer = speechsdk.SpeechSynthesizer(speech_config=self._azure_speech_config, audio_config=None)
                    result = synthesizer.speak_text_async(text).get()
                    if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
                        return result.audio_data or b""
                    raise RuntimeError(f"Azure Speech —Å–∏–Ω—Ç–µ–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.reason}")
                audio_bytes: bytes = await loop.run_in_executor(None, _speak_sync)
                if not audio_bytes:
                    logger.error("Azure Speech –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫")
                    return None
                samples = np.frombuffer(audio_bytes, dtype=np.int16)
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ü–µ–ª–µ–≤–æ–º—É sample rate –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if Config.SAMPLE_RATE != 48000:
                    audio_segment = AudioSegment(
                        audio_bytes,
                        frame_rate=48000,
                        sample_width=2,
                        channels=1
                    )
                    audio_segment = audio_segment.set_frame_rate(Config.SAMPLE_RATE).set_channels(1)
                    samples = np.array(audio_segment.get_array_of_samples()).astype(np.int16)
                logger.info(f"–ê—É–¥–∏–æ (Azure) —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(samples)} —Å—ç–º–ø–ª–æ–≤).")
                return samples

            # –í–∞—Ä–∏–∞–Ω—Ç 2: edge-tts (fallback)
            communicate = edge_tts.Communicate(
                text, 
                self.voice,
                rate=self.rate,
                volume=self.volume,
                pitch=self.pitch
            )

            logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {text[:50]}...")

            # 1. –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤–µ—Å—å –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
            audio_stream = io.BytesIO()
            async for chunk in communicate.stream():
                # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –ö–ê–ñ–î–û–ô –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if interrupt_checker and interrupt_checker():
                    logger.warning(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ï–ù - –ú–ì–ù–û–í–ï–ù–ù–û –ü–†–ï–†–´–í–ê–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ –ê–£–î–ò–û!")
                    return None
                
                if chunk["type"] == "audio":
                    audio_stream.write(chunk["data"])
            
            audio_stream.seek(0)

            if audio_stream.getbuffer().nbytes > 0:
                # 2. –î–µ–∫–æ–¥–∏—Ä—É–µ–º MP3 –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                audio_segment = AudioSegment.from_mp3(audio_stream)
                audio_segment = audio_segment.set_frame_rate(Config.SAMPLE_RATE).set_channels(1)
                
                samples = np.array(audio_segment.get_array_of_samples()).astype(np.int16)
                
                logger.info(f"–ê—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(samples)} —Å—ç–º–ø–ª–æ–≤).")
                return samples
            else:
                logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: —Å—Ç—Ä–∏–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
                return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text[:30]}...': {e}")
            return None
        finally:
            # –ö–†–ò–¢–ò–ß–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self.is_generating = False
            logger.info(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def generate_audio_stream(self, text: str) -> AsyncGenerator[np.ndarray, None]:
        """
        (–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏ –æ—Ç–¥–∞–µ—Ç –µ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —á–∞–Ω–∫–∞–º–∏.
        –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –Ω–æ–≤—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        complete_audio = await self.generate_complete_audio_for_sentence(text)
        if complete_audio is not None and len(complete_audio) > 0:
            # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å, –Ω–æ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞–µ–º —Ü–µ–ª–∏–∫–æ–º
            yield complete_audio

    async def generate_streaming_audio(self, text: str, interrupt_checker=None) -> AsyncGenerator[np.ndarray, None]:
        """
        üöÄ –ù–û–í–´–ô –ú–ï–¢–û–î: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –ü–û–õ–ù–û–ì–û –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¶–ï–õ–ò–ö–û–ú.
        –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å–æ —Å–∫—Ä–∏–ø–æ–º –∏ —É–ø—Ä–æ—â–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.
        """
        if not text or not text.strip():
            return
        
        try:
            self.is_generating = True
            logger.info(f"üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {text[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ü–û–õ–ù–û–ï –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            complete_audio = await self.generate_complete_audio_for_sentence(text, interrupt_checker)
            
            if complete_audio is not None and len(complete_audio) > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –∞—É–¥–∏–æ –æ–¥–Ω–∏–º –±–æ–ª—å—à–∏–º —á–∞–Ω–∫–æ–º (—Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
                logger.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é –ü–û–õ–ù–û–ï –∞—É–¥–∏–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(complete_audio)} —Å—ç–º–ø–ª–æ–≤")
                yield complete_audio
                
                logger.info(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(complete_audio)} —Å—ç–º–ø–ª–æ–≤")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        finally:
            self.is_generating = False

    def set_voice(self, voice: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å."""
        if voice and voice.strip():
            self.voice = voice
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ–ª–æ—Å: {voice}")
        else:
            logger.warning(f"–ì–æ–ª–æ—Å {voice} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π: {self.voice}")

    def set_audio_params(self, rate: str = None, volume: str = None, pitch: str = None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ."""
        if rate: self.rate = rate
        if volume: self.volume = volume
        if pitch: self.pitch = pitch
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ: rate={self.rate}, volume={self.volume}, pitch={self.pitch}")

    def get_audio_params(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ."""
        return {
            'voice': self.voice,
            'rate': self.rate,
            'volume': self.volume,
            'pitch': self.pitch
        }
    
    def clear_buffers(self):
        """
        –ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –±—É—Ñ–µ—Ä—ã –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.
        """
        try:
            logger.warning("üö® –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞!")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –æ—á–∏—â–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±—É—Ñ–µ—Ä—ã
            if hasattr(self, '_current_communicate'):
                try:
                    # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é edge-tts
                    if hasattr(self._current_communicate, 'cancel'):
                        self._current_communicate.cancel()
                        logger.warning("üö® Edge TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ú–ì–ù–û–í–ï–ù–ù–û –û–¢–ú–ï–ù–ï–ù–ê!")
                except:
                    pass
                self._current_communicate = None
            
            # –ö–†–ò–¢–ò–ß–ù–û: –æ—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
            if hasattr(self, '_temp_buffers'):
                self._temp_buffers.clear()
                logger.warning("üö® –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –ú–ì–ù–û–í–ï–ù–ù–û –û–ß–ò–©–ï–ù–´!")
            
            logger.warning("‚úÖ –í—Å–µ –±—É—Ñ–µ—Ä—ã –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–æ–≤ –∞—É–¥–∏–æ: {e}")
    
    def cancel_generation(self):
        """
        –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ.
        """
        try:
            logger.warning("üö® –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ!")
            self.clear_buffers()
            logger.warning("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")