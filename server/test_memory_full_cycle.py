#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import asyncio
import os
import sys
sys.path.append('.')

from text_processor import TextProcessor
from database.database_manager import DatabaseManager

async def test_memory_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.environ.get("GEMINI_API_KEY"):
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        text_processor = TextProcessor()
        db_manager = DatabaseManager()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.to_thread(db_manager.connect)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DatabaseManager –≤ TextProcessor
        text_processor.set_database_manager(db_manager)
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_hardware_id = "test_user_memory_cycle_123"
        
        # üîß –¢–ï–°–¢ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        print("\nüìù –¢–ï–°–¢ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        print("=" * 50)
        
        test_prompt_1 = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ—Ä–≥–µ–π, —è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã, –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python"
        test_response_1 = "–ü—Ä–∏–≤–µ—Ç, –°–µ—Ä–≥–µ–π! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –í—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! Python - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."
        
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {test_prompt_1}")
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {test_response_1}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å
        if text_processor.memory_analyzer:
            print("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
            
            short_memory, long_memory = await text_processor.memory_analyzer.analyze_conversation(
                test_prompt_1, 
                test_response_1
            )
            
            print(f"üìã –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {short_memory}")
            print(f"üìö –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {long_memory}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if short_memory or long_memory:
                success = await asyncio.to_thread(
                    db_manager.update_user_memory,
                    test_hardware_id,
                    short_memory,
                    long_memory
                )
                
                if success:
                    print("‚úÖ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
            else:
                print("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –Ω–µ –≤—ã—è–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            print("‚ùå MemoryAnalyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # üîß –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
        print("\nüß† –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        memory_data = await asyncio.to_thread(
            db_manager.get_user_memory, 
            test_hardware_id
        )
        
        print(f"üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:")
        print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('short', '–ù–µ—Ç')}")
        print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: {memory_data.get('long', '–ù–µ—Ç')}")
        
        # üîß –¢–ï–°–¢ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
        print("\nüöÄ –¢–ï–°–¢ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏")
        print("=" * 50)
        
        test_prompt_2 = "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç –∏ —á–µ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å?"
        
        print(f"üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_prompt_2}")
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
        response_chunks = []
        async for chunk in text_processor.generate_response_stream(
            prompt=test_prompt_2,
            hardware_id=test_hardware_id,
            screenshot_base64=None
        ):
            response_chunks.append(chunk)
            print(f"üì¶ –ß–∞–Ω–∫: {chunk}")
        
        full_response = " ".join(response_chunks)
        print(f"\nü§ñ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {full_response}")
        
        # üîß –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        print("\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
        memory_used = False
        if "–°–µ—Ä–≥–µ–π" in full_response or "Sergei" in full_response:
            print("‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
            memory_used = True
        
        if "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in full_response.lower() or "developer" in full_response.lower():
            print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
            memory_used = True
        
        if "–ú–æ—Å–∫–≤–∞" in full_response or "Moscow" in full_response:
            print("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
            memory_used = True
        
        if "Python" in full_response:
            print("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
            memory_used = True
        
        if not memory_used:
            print("‚ö†Ô∏è –ü–∞–º—è—Ç—å –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        # üîß –¢–ï–°–¢ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        print("\nüîÑ –¢–ï–°–¢ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        print("=" * 50)
        
        test_prompt_3 = "–Ø —Ç–∞–∫–∂–µ –ª—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ"
        test_response_3 = "–û—Ç–ª–∏—á–Ω–æ! –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –º—É–∑—ã–∫–∞ - —ç—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è. –ì–∏—Ç–∞—Ä–∞ - –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞."
        
        print(f"üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_prompt_3}")
        print(f"ü§ñ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {test_response_3}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
        short_memory_2, long_memory_2 = await text_processor.memory_analyzer.analyze_conversation(
            test_prompt_3, 
            test_response_3
        )
        
        print(f"üìã –ù–æ–≤–∞—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {short_memory_2}")
        print(f"üìö –ù–æ–≤–∞—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {long_memory_2}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
        if short_memory_2 or long_memory_2:
            success = await asyncio.to_thread(
                db_manager.update_user_memory,
                test_hardware_id,
                short_memory_2,
                long_memory_2
            )
            
            if success:
                print("‚úÖ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
                updated_memory = await asyncio.to_thread(
                    db_manager.get_user_memory, 
                    test_hardware_id
                )
                
                print(f"üß† –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:")
                print(f"   –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è: {updated_memory.get('short', '–ù–µ—Ç')}")
                print(f"   –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è: {updated_memory.get('long', '–ù–µ—Ç')}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
        
        print("\n‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüßπ –û—á–∏—â–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_memory_full_cycle())
