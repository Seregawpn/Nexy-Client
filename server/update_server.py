#!/usr/bin/env python3
"""
–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Sparkle
"""

import asyncio
import logging
from datetime import datetime
from pathlib import Path
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class UpdateServer:
    def __init__(self, updates_dir=None, port=8081):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ updates
        if updates_dir is None:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–∞–π–ª
            current_file_dir = Path(__file__).parent
            self.updates_dir = current_file_dir / "updates"
        else:
            self.updates_dir = Path(updates_dir)
        
        self.port = port
        self.app = None
        self.runner = None
        self.site = None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.downloads_dir = self.updates_dir / "downloads"
        self.keys_dir = self.updates_dir / "keys"
        self.downloads_dir.mkdir(parents=True, exist_ok=True)
        self.keys_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—É—Ç—å –∫ AppCast XML —Ñ–∞–π–ª—É
        self.appcast_file = self.updates_dir / "appcast.xml"
        
    async def create_app(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app = web.Application()
        
        # CORS middleware
        @web.middleware
        async def cors_middleware(request, handler):
            response = await handler(request)
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            return response
        
        app.middlewares.append(cors_middleware)
        
        # Routes
        app.router.add_get('/appcast.xml', self.appcast_handler)
        app.router.add_get('/downloads/{filename}', self.download_handler)
        app.router.add_get('/health', self.health_handler)
        app.router.add_get('/api/versions', self.versions_handler)
        app.router.add_get('/', self.index_handler)
        
        return app
    
    async def appcast_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AppCast XML - —á–∏—Ç–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.appcast_file.exists():
                # –ß–∏—Ç–∞–µ–º XML –∏–∑ —Ñ–∞–π–ª–∞
                with open(self.appcast_file, 'r', encoding='utf-8') as f:
                    appcast_xml = f.read()
                
                logger.info("üìÑ AppCast XML –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
                return web.Response(
                    text=appcast_xml,
                    content_type='application/xml',
                    headers={
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    }
                )
            else:
                logger.error("‚ùå AppCast XML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return web.Response(
                    text="AppCast XML file not found",
                    status=404
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è AppCast XML: {e}")
            return web.Response(
                text="Error reading AppCast XML",
                status=500
            )
    
    async def download_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ PKG —Ñ–∞–π–ª–æ–≤"""
        filename = request.match_info['filename']
        pkg_path = self.downloads_dir / filename
        
        if pkg_path.exists():
            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ PKG —Ñ–∞–π–ª–∞: {filename}")
            return web.FileResponse(
                pkg_path,
                headers={
                    'Content-Type': 'application/octet-stream',
                    'Content-Disposition': f'attachment; filename="{filename}"'
                }
            )
        else:
            logger.warning(f"‚ö†Ô∏è PKG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            return web.Response(
                text="File not found",
                status=404
            )
    
    async def health_handler(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return web.json_response({
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "1.0.0",
            "appcast_file": str(self.appcast_file),
            "appcast_exists": self.appcast_file.exists(),
            "downloads_available": len(list(self.downloads_dir.glob("*.pkg")))
        })
    
    async def versions_handler(self, request):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π"""
        return web.json_response({
            "current": "1.70.0",
            "latest": "1.71.0",
            "available": ["1.70.0", "1.71.0", "1.72.0", "1.73.0"]
        })
    
    async def index_handler(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        html = f'''
        <!DOCTYPE html>
        <html>
        <head>
            <title>Nexy Update Server</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .endpoint {{ background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }}
                .info {{ background: #e8f4fd; padding: 10px; margin: 10px 0; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <h1>üîÑ Nexy Update Server</h1>
            <p>–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Sparkle</p>
            
            <div class="info">
                <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</h3>
                <p><strong>–ü–æ—Ä—Ç:</strong> {self.port}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –†–∞–±–æ—Ç–∞–µ—Ç</p>
                <p><strong>AppCast —Ñ–∞–π–ª:</strong> {self.appcast_file}</p>
                <p><strong>AppCast —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:</strong> {'–î–∞' if self.appcast_file.exists() else '–ù–µ—Ç'}</p>
            </div>
            
            <h2>üì° Endpoints</h2>
            <div class="endpoint">
                <strong>AppCast XML:</strong> <a href="/appcast.xml">http://localhost:{self.port}/appcast.xml</a>
            </div>
            <div class="endpoint">
                <strong>Downloads:</strong> <a href="/downloads/">http://localhost:{self.port}/downloads/</a>
            </div>
            <div class="endpoint">
                <strong>Health Check:</strong> <a href="/health">http://localhost:{self.port}/health</a>
            </div>
            <div class="endpoint">
                <strong>Versions API:</strong> <a href="/api/versions">http://localhost:{self.port}/api/versions</a>
            </div>
        </body>
        </html>
        '''
        
        return web.Response(text=html, content_type='text/html')
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.app = await self.create_app()
        self.runner = web.AppRunner(self.app)
        await self.runner.setup()
        
        self.site = web.TCPSite(self.runner, '0.0.0.0', self.port)
        await self.site.start()
        
        logger.info("=" * 60)
        logger.info("üîÑ –°–ï–†–í–ï–† –û–ë–ù–û–í–õ–ï–ù–ò–ô –ó–ê–ü–£–©–ï–ù")
        logger.info("=" * 60)
        logger.info(f"üåê URL: http://localhost:{self.port}")
        logger.info(f"üì° AppCast: http://localhost:{self.port}/appcast.xml")
        logger.info(f"üìÅ Downloads: http://localhost:{self.port}/downloads/")
        logger.info(f"üíö Health: http://localhost:{self.port}/health")
        logger.info("=" * 60)
        logger.info("üéØ –ì–æ—Ç–æ–≤ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")
        logger.info("=" * 60)
        
    async def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if self.site:
            await self.site.stop()
        if self.runner:
            await self.runner.cleanup()
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
update_server = None

async def start_update_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    global update_server
    update_server = UpdateServer()
    await update_server.start_server()

async def stop_update_server():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    global update_server
    if update_server:
        await update_server.stop_server()

if __name__ == "__main__":
    async def main():
        server = UpdateServer()
        try:
            await server.start_server()
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await server.stop_server()
    
    asyncio.run(main())
