import asyncio
import logging
from aiohttp import web
from grpc_server import run_server as serve
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º config.env
load_dotenv('config.env')

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
try:
    from update_server import start_update_server, stop_update_server  # type: ignore[reportMissingImports]
    UPDATE_SERVER_AVAILABLE = True
    print("‚úÖ Update Server –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è Update Server –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    UPDATE_SERVER_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
 
async def health_handler(request):
    """Health check –¥–ª—è Container Apps"""
    return web.Response(text="OK", status=200)

async def root_handler(request):
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return web.Response(text="Voice Assistant Server is running!", status=200)

async def status_handler(request):
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    return web.json_response({
        "status": "running",
        "service": "voice-assistant",
        "version": "1.0.0",
        "update_server": "enabled" if UPDATE_SERVER_AVAILABLE else "disabled",
        "endpoints": {
            "health": "/health",
            "status": "/status",
            "grpc": "port 50051",
            "updates": "port 8081" if UPDATE_SERVER_AVAILABLE else "disabled"
        }
    })

async def main():
    """–ó–∞–ø—É—Å–∫ HTTP, gRPC –∏ Update —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Voice Assistant Server —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")                               
    
    # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks (–ø–æ—Ä—Ç 8080)
    app = web.Application()
    app.router.add_get('/health', health_handler)
    app.router.add_get('/', root_handler)
    app.router.add_get('/status', status_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    
    logger.info("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    logger.info("   - Health check: http://localhost:8080/health")
    logger.info("   - Status: http://localhost:8080/status")
    logger.info("   - Root: http://localhost:8080/")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 8081
    if UPDATE_SERVER_AVAILABLE:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 8081...")
        await start_update_server()
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        logger.info("   - AppCast: http://localhost:8081/appcast.xml")
        logger.info("   - Downloads: http://localhost:8081/downloads/")
        logger.info("   - Health: http://localhost:8081/health")
    else:
        logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 50051
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é gRPC —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 50051...")
    await serve()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
        if UPDATE_SERVER_AVAILABLE:
            asyncio.run(stop_update_server())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if UPDATE_SERVER_AVAILABLE:
            asyncio.run(stop_update_server())
        raise
