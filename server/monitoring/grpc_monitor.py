"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ gRPC —Å–µ—Ä–≤–µ—Ä–∞
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import logging
import time
from typing import Dict, Any, Optional
from dataclasses import dataclass, field
from collections import defaultdict, deque
import psutil
import os

logger = logging.getLogger(__name__)

@dataclass
class GrpcMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
    active_connections: int = 0
    total_requests: int = 0
    requests_per_minute: int = 0
    error_rate: float = 0.0
    avg_response_time: float = 0.0
    memory_usage: float = 0.0
    cpu_usage: float = 0.0
    timestamp: float = field(default_factory=time.time)

@dataclass
class PerformanceLimits:
    """–õ–∏–º–∏—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    max_connections: int = 100
    max_requests_per_minute: int = 1000
    max_error_rate: float = 0.05  # 5%
    max_memory_usage: float = 80.0  # 80%
    max_cpu_usage: float = 80.0  # 80%
    max_response_time: float = 5.0  # 5 —Å–µ–∫—É–Ω–¥

class GrpcMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self, limits: Optional[PerformanceLimits] = None):
        self.limits = limits or PerformanceLimits()
        self.metrics = GrpcMetrics()
        self.request_times = deque(maxlen=1000)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
        self.error_count = 0
        self.start_time = time.time()
        self.process = psutil.Process(os.getpid())
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RPS
        self.requests_in_minute = deque(maxlen=60)  # –ó–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        self.last_minute_check = time.time()
        
        logger.info("üîç GrpcMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìä –õ–∏–º–∏—Ç—ã: {self.limits.max_connections} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, {self.limits.max_requests_per_minute} RPS")
    
    def record_request(self, response_time: float, is_error: bool = False):
        """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.metrics.total_requests += 1
        self.request_times.append(response_time)
        
        if is_error:
            self.error_count += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É
        self.requests_in_minute.append(current_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self._update_metrics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        self._check_limits()
    
    def set_active_connections(self, count: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.metrics.active_connections = count
        self._check_limits()
    
    def _update_metrics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º RPS
        if current_time - self.last_minute_check >= 60:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã)
            minute_ago = current_time - 60
            while self.requests_in_minute and self.requests_in_minute[0] < minute_ago:
                self.requests_in_minute.popleft()
            
            self.metrics.requests_per_minute = len(self.requests_in_minute)
            self.last_minute_check = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if self.request_times:
            self.metrics.avg_response_time = sum(self.request_times) / len(self.request_times)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫
        if self.metrics.total_requests > 0:
            self.metrics.error_rate = self.error_count / self.metrics.total_requests
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.metrics.memory_usage = self.process.memory_percent()
        self.metrics.cpu_usage = self.process.cpu_percent()
        self.metrics.timestamp = current_time
    
    def _check_limits(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∏ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.metrics.active_connections >= self.limits.max_connections * 0.8:
            warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {self.metrics.active_connections}/{self.limits.max_connections} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (80%+)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RPS
        if self.metrics.requests_per_minute >= self.limits.max_requests_per_minute * 0.8:
            warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {self.metrics.requests_per_minute}/{self.limits.max_requests_per_minute} RPS (80%+)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
        if self.metrics.error_rate >= self.limits.max_error_rate:
            warnings.append(f"‚ùå –í—ã—Å–æ–∫–∞—è –æ—à–∏–±–∫–∞: {self.metrics.error_rate:.1%} –æ—à–∏–±–æ–∫ (–ª–∏–º–∏—Ç: {self.limits.max_error_rate:.1%})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
        if self.metrics.memory_usage >= self.limits.max_memory_usage:
            warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –ø–∞–º—è—Ç—å: {self.metrics.memory_usage:.1f}% (–ª–∏–º–∏—Ç: {self.limits.max_memory_usage}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
        if self.metrics.cpu_usage >= self.limits.max_cpu_usage:
            warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π CPU: {self.metrics.cpu_usage:.1f}% (–ª–∏–º–∏—Ç: {self.limits.max_cpu_usage}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if self.metrics.avg_response_time >= self.limits.max_response_time:
            warnings.append(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.metrics.avg_response_time:.2f}s (–ª–∏–º–∏—Ç: {self.limits.max_response_time}s)")
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        for warning in warnings:
            logger.warning(warning)
        
        return warnings
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
        self._update_metrics()
        return {
            "active_connections": self.metrics.active_connections,
            "total_requests": self.metrics.total_requests,
            "requests_per_minute": self.metrics.requests_per_minute,
            "error_rate": self.metrics.error_rate,
            "avg_response_time": self.metrics.avg_response_time,
            "memory_usage": self.metrics.memory_usage,
            "cpu_usage": self.metrics.cpu_usage,
            "uptime": time.time() - self.start_time,
            "timestamp": self.metrics.timestamp
        }
    
    def get_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        metrics = self.get_metrics()
        warnings = self._check_limits()
        
        if warnings:
            return "WARNING"
        elif metrics["active_connections"] > 0:
            return "ACTIVE"
        else:
            return "IDLE"
    
    def reset_metrics(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        self.metrics = GrpcMetrics()
        self.request_times.clear()
        self.error_count = 0
        self.requests_in_minute.clear()
        self.start_time = time.time()
        logger.info("üîÑ –ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
_global_monitor: Optional[GrpcMonitor] = None

def get_monitor() -> GrpcMonitor:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    global _global_monitor
    if _global_monitor is None:
        _global_monitor = GrpcMonitor()
    return _global_monitor

def record_request(response_time: float, is_error: bool = False):
    """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
    monitor = get_monitor()
    monitor.record_request(response_time, is_error)

def set_active_connections(count: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    monitor = get_monitor()
    monitor.set_active_connections(count)

def get_metrics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
    monitor = get_monitor()
    return monitor.get_metrics()

def get_status() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    monitor = get_monitor()
    return monitor.get_status()
