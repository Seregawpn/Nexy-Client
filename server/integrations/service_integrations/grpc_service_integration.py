#!/usr/bin/env python3
"""
GrpcServiceIntegration - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
from typing import Dict, Any, AsyncGenerator, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class GrpcServiceIntegration:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ gRPC –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    def __init__(self, 
                 streaming_workflow=None, 
                 memory_workflow=None, 
                 interrupt_workflow=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GrpcServiceIntegration
        
        Args:
            streaming_workflow: StreamingWorkflowIntegration
            memory_workflow: MemoryWorkflowIntegration  
            interrupt_workflow: InterruptWorkflowIntegration
        """
        self.streaming_workflow = streaming_workflow
        self.memory_workflow = memory_workflow
        self.interrupt_workflow = interrupt_workflow
        self.is_initialized = False
        
        logger.info("GrpcServiceIntegration —Å–æ–∑–¥–∞–Ω")
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GrpcServiceIntegration...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
            if not self.streaming_workflow:
                logger.warning("‚ö†Ô∏è StreamingWorkflowIntegration –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
            if not self.memory_workflow:
                logger.warning("‚ö†Ô∏è MemoryWorkflowIntegration –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
            if not self.interrupt_workflow:
                logger.warning("‚ö†Ô∏è InterruptWorkflowIntegration –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if self.streaming_workflow:
                await self.streaming_workflow.initialize()
                logger.info("‚úÖ StreamingWorkflowIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if self.memory_workflow:
                await self.memory_workflow.initialize()
                logger.info("‚úÖ MemoryWorkflowIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if self.interrupt_workflow:
                await self.interrupt_workflow.initialize()
                logger.info("‚úÖ InterruptWorkflowIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.is_initialized = True
            logger.info("‚úÖ GrpcServiceIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GrpcServiceIntegration: {e}")
            return False
    
    async def process_request_complete(self, request_data: Dict[str, Any]) -> AsyncGenerator[Dict[str, Any], None]:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ gRPC –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –≤—Å–µ workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Args:
            request_data: –î–∞–Ω–Ω—ã–µ gRPC –∑–∞–ø—Ä–æ—Å–∞
            
        Yields:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.is_initialized:
            logger.error("‚ùå GrpcServiceIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            yield {
                'success': False,
                'error': 'GrpcServiceIntegration not initialized',
                'text_response': '',
                'audio_chunks': []
            }
            return
        
        try:
            logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {request_data.get('session_id', 'unknown')}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            hardware_id = request_data.get('hardware_id', 'unknown')
            session_id = request_data.get('session_id', f"session_{datetime.now().timestamp()}")
            text = request_data.get('text', '')
            screenshot = request_data.get('screenshot')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º InterruptWorkflowIntegration –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            async def _process_full_workflow():
                async for item in self._process_full_workflow_internal(request_data, hardware_id, session_id):
                    yield item
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ InterruptWorkflowIntegration
            if self.interrupt_workflow:
                logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º InterruptWorkflowIntegration –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                try:
                    async for item in self.interrupt_workflow.process_with_interrupts(
                        _process_full_workflow, 
                        hardware_id, 
                        session_id
                    ):
                        yield item
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ InterruptWorkflowIntegration: {e}")
                    # Fallback –∫ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    async for item in self._process_full_workflow_internal(request_data, hardware_id, session_id):
                        yield item
            else:
                logger.debug("InterruptWorkflowIntegration –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é")
                async for result in self._process_full_workflow_internal(request_data, hardware_id, session_id):
                    yield result
            
            logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            yield {
                'success': False,
                'error': str(e),
                'text_response': '',
                'audio_chunks': []
            }
    
    async def _process_full_workflow_internal(self, request_data: Dict[str, Any], hardware_id: str, session_id: str) -> AsyncGenerator[Dict[str, Any], None]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ workflow
        
        Args:
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            hardware_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
            
        Yields:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.debug(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ workflow –¥–ª—è {session_id}")
            
            # 1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
            memory_context = None
            if self.memory_workflow:
                logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
                memory_context = await self.memory_workflow.get_memory_context_parallel(hardware_id)
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ StreamingWorkflowIntegration
            collected_sentences: list[str] = []
            audio_delivered = False
            final_response_text = ''
            prompt_text = request_data.get('text', '')

            if self.streaming_workflow:
                logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ StreamingWorkflowIntegration")
                async for result in self.streaming_workflow.process_request_streaming(request_data):
                    try:
                        has_audio = 'audio_chunk' in result and isinstance(result.get('audio_chunk'), (bytes, bytearray))
                        sz = (len(result['audio_chunk']) if has_audio else 0)
                        txt = result.get('text_response')
                        logger.info(f'StreamingWorkflowIntegration ‚Üí result: text_len={(len(txt) if txt else 0)}, audio_bytes={sz}')
                        if txt:
                            collected_sentences.append(txt)
                        if has_audio:
                            audio_delivered = True
                        if result.get('is_final'):
                            final_response_text = result.get('text_full_response', '') or " ".join(collected_sentences).strip()
                    except Exception:
                        pass
                    yield result
            else:
                logger.warning("‚ö†Ô∏è StreamingWorkflowIntegration –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
                yield {
                    'success': True,
                    'text_response': request_data.get('text', ''),
                    'audio_chunks': []
                }
            
            # 3. –§–æ–Ω–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
            if self.memory_workflow:
                logger.debug("–§–æ–Ω–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å")
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                save_data = request_data.copy()
                save_data['processed_text'] = final_response_text or " ".join(collected_sentences).strip()
                save_data['audio_generated'] = audio_delivered
                save_data['prompt'] = prompt_text
                save_data['response'] = final_response_text or save_data['processed_text']
                save_data['sentences'] = collected_sentences
                
                if save_data.get('prompt') and save_data.get('response'):
                    await self.memory_workflow.save_to_memory_background(save_data)
                    logger.debug("‚úÖ –§–æ–Ω–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –∑–∞–ø—É—â–µ–Ω–æ")
                else:
                    logger.debug("‚ö†Ô∏è –§–æ–Ω–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (prompt/response)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ workflow: {e}")
            yield {
                'success': False,
                'error': str(e),
                'text_response': '',
                'audio_chunks': []
            }
    
    async def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        """
        try:
            status = {
                'initialized': self.is_initialized,
                'streaming_workflow': self.streaming_workflow is not None,
                'memory_workflow': self.memory_workflow is not None,
                'interrupt_workflow': self.interrupt_workflow is not None
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if self.streaming_workflow:
                status['streaming_workflow_initialized'] = getattr(self.streaming_workflow, 'is_initialized', False)
            
            if self.memory_workflow:
                status['memory_workflow_initialized'] = getattr(self.memory_workflow, 'is_initialized', False)
            
            if self.interrupt_workflow:
                status['interrupt_workflow_initialized'] = getattr(self.interrupt_workflow, 'is_initialized', False)
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'initialized': False,
                'error': str(e)
            }
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("–û—á–∏—Å—Ç–∫–∞ GrpcServiceIntegration...")
            
            # –û—á–∏—â–∞–µ–º workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if self.streaming_workflow and hasattr(self.streaming_workflow, 'cleanup'):
                await self.streaming_workflow.cleanup()
                logger.debug("StreamingWorkflowIntegration –æ—á–∏—â–µ–Ω")
            
            if self.memory_workflow and hasattr(self.memory_workflow, 'cleanup'):
                await self.memory_workflow.cleanup()
                logger.debug("MemoryWorkflowIntegration –æ—á–∏—â–µ–Ω")
            
            if self.interrupt_workflow and hasattr(self.interrupt_workflow, 'cleanup'):
                await self.interrupt_workflow.cleanup()
                logger.debug("InterruptWorkflowIntegration –æ—á–∏—â–µ–Ω")
            
            self.is_initialized = False
            logger.info("‚úÖ GrpcServiceIntegration –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ GrpcServiceIntegration: {e}")
