#!/usr/bin/env python3
"""
InterruptWorkflowIntegration - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
"""

import asyncio
import logging
from typing import Dict, Any, Callable, Optional, AsyncGenerator
from datetime import datetime

logger = logging.getLogger(__name__)


class InterruptException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
    pass


class InterruptWorkflowIntegration:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    
    def __init__(self, interrupt_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InterruptWorkflowIntegration
        
        Args:
            interrupt_manager: –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è–º–∏
        """
        self.interrupt_manager = interrupt_manager
        self.is_initialized = False
        self.active_sessions = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        
        logger.info("InterruptWorkflowIntegration —Å–æ–∑–¥–∞–Ω")
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InterruptWorkflowIntegration...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å InterruptManager
            if not self.interrupt_manager:
                logger.warning("‚ö†Ô∏è InterruptManager –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
            self.is_initialized = True
            logger.info("‚úÖ InterruptWorkflowIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ InterruptWorkflowIntegration: {e}")
            return False
    
    async def check_interrupts(self, hardware_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
        
        Args:
            hardware_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, False –∏–Ω–∞—á–µ
        """
        if not self.is_initialized:
            logger.error("‚ùå InterruptWorkflowIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            if not self.interrupt_manager:
                logger.debug("InterruptManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ InterruptManager
            should_interrupt = self.interrupt_manager.should_interrupt(hardware_id)
            
            if should_interrupt:
                logger.info(f"üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–ª—è {hardware_id}")
            
            return should_interrupt
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π: {e}")
            return False
    
    async def process_with_interrupts(self, workflow_func: Callable, hardware_id: str, session_id: Optional[str] = None) -> AsyncGenerator[Any, None]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
        
        Args:
            workflow_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            hardware_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow_func
            
        Raises:
            InterruptException: –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        """
        if not self.is_initialized:
            logger.error("‚ùå InterruptWorkflowIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            raise InterruptException("InterruptWorkflowIntegration not initialized")
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            if session_id:
                self.active_sessions[session_id] = {
                    'hardware_id': hardware_id,
                    'start_time': datetime.now(),
                    'status': 'processing'
                }
                logger.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
            if await self.check_interrupts(hardware_id):
                logger.info(f"üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è {hardware_id}, –æ—Ç–º–µ–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                await self._cleanup_session(session_id)
                raise InterruptException(f"Global interrupt active for {hardware_id}")
            
            logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow –¥–ª—è {hardware_id}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ async generator
            async for result in workflow_func():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º yield
                if await self.check_interrupts(hardware_id):
                    logger.info(f"üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {hardware_id}")
                    await self._cleanup_session(session_id)
                    raise InterruptException(f"Interrupted during processing for {hardware_id}")
                
                yield result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if await self.check_interrupts(hardware_id):
                logger.info(f"üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {hardware_id}")
                await self._cleanup_session(session_id)
                raise InterruptException(f"Interrupted after processing for {hardware_id}")
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
            if session_id:
                await self._complete_session(session_id)
            
            logger.debug(f"‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è {hardware_id}")
            
        except InterruptException:
            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º InterruptException
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow: {e}")
            await self._cleanup_session(session_id)
            raise
    
    async def cleanup_on_interrupt(self, hardware_id: str, session_id: Optional[str] = None):
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
        
        Args:
            hardware_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –¥–ª—è {hardware_id}")
            
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            if session_id:
                await self._cleanup_session(session_id)
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ hardware_id
            sessions_to_cleanup = []
            for sid, session_data in self.active_sessions.items():
                if session_data.get('hardware_id') == hardware_id:
                    sessions_to_cleanup.append(sid)
            
            for sid in sessions_to_cleanup:
                await self._cleanup_session(sid)
            
            logger.info(f"‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è {hardware_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    async def _cleanup_session(self, session_id: Optional[str]):
        """
        –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
        
        Args:
            session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
        """
        if not session_id:
            return
        
        try:
            if session_id in self.active_sessions:
                session_data = self.active_sessions[session_id]
                session_data['status'] = 'interrupted'
                session_data['end_time'] = datetime.now()
                
                logger.debug(f"–°–µ—Å—Å–∏—è {session_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–∞—è")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
                del self.active_sessions[session_id]
                
                logger.debug(f"–°–µ—Å—Å–∏—è {session_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
    
    async def _complete_session(self, session_id: Optional[str]):
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        
        Args:
            session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
        """
        if not session_id:
            return
        
        try:
            if session_id in self.active_sessions:
                session_data = self.active_sessions[session_id]
                session_data['status'] = 'completed'
                session_data['end_time'] = datetime.now()
                
                logger.debug(f"–°–µ—Å—Å–∏—è {session_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
                del self.active_sessions[session_id]
                
                logger.debug(f"–°–µ—Å—Å–∏—è {session_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
    
    def get_active_sessions(self, hardware_id: Optional[str] = None) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        
        Args:
            hardware_id: –§–∏–ª—å—Ç—Ä –ø–æ hardware_id (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        try:
            if hardware_id:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ hardware_id
                filtered_sessions = {}
                for sid, session_data in self.active_sessions.items():
                    if session_data.get('hardware_id') == hardware_id:
                        filtered_sessions[sid] = session_data
                return filtered_sessions
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                return self.active_sessions.copy()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
            return {}
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("–û—á–∏—Å—Ç–∫–∞ InterruptWorkflowIntegration...")
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            for session_id in list(self.active_sessions.keys()):
                await self._cleanup_session(session_id)
            
            self.is_initialized = False
            logger.info("‚úÖ InterruptWorkflowIntegration –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ InterruptWorkflowIntegration: {e}")
