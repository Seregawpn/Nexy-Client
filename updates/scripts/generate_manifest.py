#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import os
import json
import hashlib
import sys
from datetime import datetime
from sign_file import sign_file

def calculate_sha256(file_path: str) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            sha256_hash.update(chunk)
    return sha256_hash.hexdigest()

def generate_manifest(artifact_path: str, version: str, build: int, 
                     artifact_type: str = "dmg", private_key_path: str = None,
                     notes_url: str = None, critical: bool = False) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    
    Args:
        artifact_path: –ü—É—Ç—å –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É (DMG/ZIP)
        version: –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2.6.0")
        build: –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20600)
        artifact_type: –¢–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ ("dmg" –∏–ª–∏ "zip")
        private_key_path: –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        notes_url: URL —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ –≤–µ—Ä—Å–∏–∏
        critical: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        
    Returns:
        dict: –ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    """
    
    if not os.path.exists(artifact_path):
        raise FileNotFoundError(f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {artifact_path}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_size = os.path.getsize(artifact_path)
    sha256_hash = calculate_sha256(artifact_path)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    filename = os.path.basename(artifact_path)
    artifact_url = f"https://updates.nexy.ai/artifacts/{filename}"
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
    manifest = {
        "version": version,
        "build": build,
        "release_date": datetime.utcnow().isoformat() + "Z",
        "artifact": {
            "type": artifact_type,
            "url": artifact_url,
            "size": file_size,
            "sha256": sha256_hash,
            "arch": "arm64",
            "min_os": "11.0"
        },
        "critical": critical,
        "auto_install": not critical  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º Ed25519 –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
    if private_key_path and os.path.exists(private_key_path):
        try:
            ed25519_signature = sign_file(artifact_path, private_key_path)
            manifest["artifact"]["ed25519"] = ed25519_signature
            print(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω Ed25519")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º URL –∑–∞–º–µ—Ç–æ–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if notes_url:
        manifest["notes_url"] = notes_url
    
    return manifest

def save_manifest(manifest: dict, output_path: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –≤ —Ñ–∞–π–ª"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(manifest, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

def main():
    if len(sys.argv) < 4:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 generate_manifest.py <–∞—Ä—Ç–µ—Ñ–∞–∫—Ç> <–≤–µ—Ä—Å–∏—è> <—Å–±–æ—Ä–∫–∞> [—Ç–∏–ø] [–ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á] [–∑–∞–º–µ—Ç–∫–∏_url]")
        print("–ü—Ä–∏–º–µ—Ä: python3 generate_manifest.py Nexy-2.6.0.dmg 2.6.0 20600 dmg keys/ed25519_private.key")
        sys.exit(1)
    
    artifact_path = sys.argv[1]
    version = sys.argv[2]
    build = int(sys.argv[3])
    artifact_type = sys.argv[4] if len(sys.argv) > 4 else "dmg"
    private_key_path = sys.argv[5] if len(sys.argv) > 5 else None
    notes_url = sys.argv[6] if len(sys.argv) > 6 else None
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        manifest = generate_manifest(
            artifact_path=artifact_path,
            version=version,
            build=build,
            artifact_type=artifact_type,
            private_key_path=private_key_path,
            notes_url=notes_url
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        manifests_dir = os.path.join(os.path.dirname(__file__), "..", "manifests")
        output_path = os.path.join(manifests_dir, "manifest.json")
        save_manifest(manifest, output_path)
        
        print(f"üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version} (—Å–±–æ—Ä–∫–∞ {build}) —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
