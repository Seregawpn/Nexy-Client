#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
"""

import os
import sys
import yaml
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class ConfigCleanup:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.config_dir = project_root / "config"
        self.issues_found = []
        
    def cleanup_duplicate_files(self):
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤...")
        
        duplicate_patterns = [
            "logging_config 2.yaml",
            "network_config 2.yaml", 
            "tray_config 2.yaml",
            "*.bak",
            "*.backup",
            "*.old"
        ]
        
        removed_files = []
        for pattern in duplicate_patterns:
            for file_path in self.config_dir.glob(pattern):
                if file_path.exists():
                    try:
                        file_path.unlink()
                        removed_files.append(str(file_path))
                        logger.info(f"  ‚úÖ –£–¥–∞–ª–µ–Ω: {file_path.name}")
                    except Exception as e:
                        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path.name}: {e}")
                        self.issues_found.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path.name}")
        
        if removed_files:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(removed_files)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤")
        else:
            logger.info("‚ú® –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return len(removed_files)
    
    def check_hardcoded_ips(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ –º–æ–¥—É–ª—è—Ö"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∞ IP-–∞–¥—Ä–µ—Å–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        unified_config_path = self.config_dir / "unified_config.yaml"
        if not unified_config_path.exists():
            self.issues_found.append("unified_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(unified_config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞
        servers = config.get('servers', {}).get('grpc_servers', {})
        production_ip = servers.get('production', {}).get('host', '')
        local_ip = servers.get('local', {}).get('host', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏ –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥
        modules_dir = self.project_root / "modules"
        hardcoded_files = []
        
        for py_file in modules_dir.rglob("*.py"):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # –ò—â–µ–º —Ö–∞—Ä–¥–∫–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–≤
                if production_ip in content and "–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–¢–°–Ø" not in content:
                    hardcoded_files.append((str(py_file), production_ip))
                if local_ip in content and "–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–¢–°–Ø" not in content:
                    hardcoded_files.append((str(py_file), local_ip))
                    
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {py_file}: {e}")
        
        if hardcoded_files:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Ö–∞—Ä–¥–∫–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ {len(hardcoded_files)} —Ñ–∞–π–ª–∞—Ö:")
            for file_path, ip in hardcoded_files:
                logger.warning(f"  üìÑ {file_path}: {ip}")
                self.issues_found.append(f"–•–∞—Ä–¥–∫–æ–¥ {ip} –≤ {file_path}")
        else:
            logger.info("‚úÖ –•–∞—Ä–¥–∫–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return len(hardcoded_files) == 0
    
    def verify_config_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º unified_config.yaml
        unified_config_path = self.config_dir / "unified_config.yaml"
        if not unified_config_path.exists():
            self.issues_found.append("unified_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        try:
            with open(unified_config_path, 'r', encoding='utf-8') as f:
                unified_config = yaml.safe_load(f)
        except Exception as e:
            self.issues_found.append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ unified_config.yaml: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º network_config.yaml
        network_config_path = self.config_dir / "network_config.yaml"
        if network_config_path.exists():
            try:
                with open(network_config_path, 'r', encoding='utf-8') as f:
                    network_config = yaml.safe_load(f)
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
                unified_servers = unified_config.get('servers', {}).get('grpc_servers', {})
                network_servers = network_config.get('grpc_servers', {})
                
                if unified_servers != network_servers:
                    logger.warning("‚ö†Ô∏è network_config.yaml –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å unified_config.yaml")
                    self.issues_found.append("network_config.yaml –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return False
                else:
                    logger.info("‚úÖ network_config.yaml —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ network_config.yaml: {e}")
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞")
        return True
    
    def check_build_readiness(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–±–æ—Ä–∫–µ"""
        logger.info("üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–±–æ—Ä–∫–µ...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            "unified_config.yaml",
            "unified_config_loader.py",
            "server_config_sync.py",
            "change_server.py"
        ]
        
        missing_files = []
        for file_name in required_files:
            file_path = self.config_dir / file_name
            if not file_path.exists():
                missing_files.append(file_name)
        
        if missing_files:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            self.issues_found.extend([f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {f}" for f in missing_files])
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å YAML
        try:
            with open(self.config_dir / "unified_config.yaml", 'r', encoding='utf-8') as f:
                yaml.safe_load(f)
            logger.info("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å unified_config.yaml –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ unified_config.yaml: {e}")
            self.issues_found.append(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ unified_config.yaml: {e}")
            return False
        
        logger.info("‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–±–æ—Ä–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        return True
    
    def run_full_cleanup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∫—É"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        results = {
            'duplicates_removed': self.cleanup_duplicate_files(),
            'hardcode_clean': self.check_hardcoded_ips(),
            'config_consistent': self.verify_config_consistency(),
            'build_ready': self.check_build_readiness()
        }
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "="*50)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        logger.info("="*50)
        
        if results['duplicates_removed'] > 0:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: {results['duplicates_removed']}")
        
        logger.info(f"üîç –•–∞—Ä–¥–∫–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–≤: {'‚úÖ –ß–∏—Å—Ç–æ' if results['hardcode_clean'] else '‚ùå –ù–∞–π–¥–µ–Ω'}")
        logger.info(f"üîç –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {'‚úÖ OK' if results['config_consistent'] else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}")
        logger.info(f"üèóÔ∏è –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–±–æ—Ä–∫–µ: {'‚úÖ –ì–æ—Ç–æ–≤–æ' if results['build_ready'] else '‚ùå –ù–µ –≥–æ—Ç–æ–≤–æ'}")
        
        if self.issues_found:
            logger.warning(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.issues_found)}):")
            for i, issue in enumerate(self.issues_found, 1):
                logger.warning(f"  {i}. {issue}")
        else:
            logger.info("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        return len(self.issues_found) == 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python3 config/cleanup_config.py          # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
  python3 config/cleanup_config.py --help   # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
  üßπ –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ –º–æ–¥—É–ª—è—Ö
  üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  üèóÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–±–æ—Ä–∫–µ
        """)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    cleanup = ConfigCleanup(project_root)
    success = cleanup.run_full_cleanup()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
