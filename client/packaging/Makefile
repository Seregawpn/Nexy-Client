# Makefile –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ —É–ø–∞–∫–æ–≤–∫–∏ Nexy
# –í–µ—Ä—Å–∏—è: 3.2.0 - Staging Pipeline

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
APP_NAME ?= Nexy
BUNDLE_ID ?= com.nexy.assistant
VERSION ?= 2.5.0
BUILD ?= 20500

DEVELOPER_ID_APP ?= Developer ID Application: Sergiy Zasorin (5NKLL2CLB9)
DEVELOPER_ID_INSTALLER ?= Developer ID Installer: Sergiy Zasorin (5NKLL2CLB9)
APPLE_NOTARY_PROFILE ?= NexyNotary

SPEC ?= Nexy.spec
STAGE ?= /tmp/nexy-stage
STAGE_APP := $(STAGE)/$(APP_NAME).app
DIST_APP := ../dist/$(APP_NAME).app
PKG := artifacts/$(APP_NAME)-$(VERSION).pkg
DMG := artifacts/$(APP_NAME)-$(VERSION).dmg

.PHONY: all doctor sanitize-dist setup-staging app restage-app-root check-xattrs sign-nested sign-app stage-to-dist pkg dmg notarize-app notarize-pkg notarize-dmg staple-all verify verify-dest clean

all: doctor sanitize-dist setup-staging app restage-app-root check-xattrs sign-nested sign-app stage-to-dist pkg dmg notarize-app notarize-pkg notarize-dmg staple-all verify verify-dest

doctor:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–±–æ—Ä–∫–µ..."
	@command -v python3 >/dev/null 2>&1 || { echo "‚ùå python3 –Ω–µ –Ω–∞–π–¥–µ–Ω"; exit 1; }
	@python3 -m PyInstaller --version >/dev/null 2>&1 || { echo "‚ùå pyinstaller –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyinstaller"; exit 1; }
	@command -v codesign >/dev/null 2>&1 || { echo "‚ùå codesign –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xcode Command Line Tools"; exit 1; }
	@command -v productbuild >/dev/null 2>&1 || { echo "‚ùå productbuild –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xcode Command Line Tools"; exit 1; }
	@command -v xcrun >/dev/null 2>&1 || { echo "‚ùå xcrun –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xcode Command Line Tools"; exit 1; }
	@echo "‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"

sanitize-dist:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ dist/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
	@rm -rf ../dist
	@mkdir -p ../dist
	@echo "‚úÖ dist/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞"

setup-staging:
	@echo "üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ staging –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
	@mkdir -p "$(STAGE)"
	@echo "‚úÖ Staging –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(STAGE)"

app:
	@echo "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ staging..."
	cd .. && python3 -m PyInstaller --clean -y packaging/$(SPEC)
	@if [ -d "$(DIST_APP)" ]; then \
		echo "‚úÖ $(APP_NAME).app —Å–æ–∑–¥–∞–Ω –≤ $(DIST_APP)"; \
		echo "üì¶ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ staging: $(STAGE_APP)"; \
		cp -R "$(DIST_APP)" "$(STAGE_APP)"; \
		echo "‚úÖ $(APP_NAME).app –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ staging"; \
	else \
		echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .app - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $(DIST_APP)"; \
		exit 1; \
	fi

restage-app-root:
	@echo "üîÑ –†–µ—Å—Ç–µ–π–¥–∂–∏–Ω–≥ –∫–æ—Ä–Ω—è .app bundle..."
	@ditto --norsrc --noqtn "$(STAGE_APP)" "$(STAGE_APP).clean"
	@rm -rf "$(STAGE_APP)"
	@mv "$(STAGE_APP).clean" "$(STAGE_APP)"
	@echo "‚úÖ .app bundle —Ä–µ—Å—Ç–µ–π–¥–∂–µ–Ω"

check-xattrs:
	@echo "‚Üí Checking extended attributes in $(STAGE_APP)"
	@! find "$(STAGE_APP)" -type f -print0 \
	 | xargs -0 xattr -l 2>/dev/null \
	 | grep -E "com\.apple\.(FinderInfo|ResourceFork|quarantine)" \
	 && echo "‚úÖ No forbidden xattrs on files" \
	 || (echo "‚ùå Forbidden xattrs on files ‚Äî run: xattr -rc $(STAGE_APP)"; exit 1)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ (–Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º)
log-xattrs-dirs:
	@echo "‚Üí scan xattrs (dirs, non-fatal):"
	@find "$(STAGE_APP)" -type d -print0 \
	 | xargs -0 xattr -l 2>/dev/null | sed -n '1,100p' || true

# 1) –û—á–∏—Å—Ç–∫–∞ xattrs –∏ –ø–æ–¥–ø–∏—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
sign-nested:
	@echo "üîê –ü–æ–¥–ø–∏—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ staging..."
	xattr -rc "$(STAGE_APP)"
	xattr -dr com.apple.quarantine "$(STAGE_APP)" || true
	# dylib/so/–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ ‚Äî –ø–æ–¥–ø–∏—à–µ–º –ø–æ –æ–¥–Ω–æ–º—É
	find "$(STAGE_APP)" -type f \( -name "*.dylib" -o -name "*.so" -o -perm -111 \) -print0 | xargs -0 -I{} codesign --force --timestamp \
	  --entitlements entitlements.plist \
	  --sign "$(DEVELOPER_ID_APP)" "{}" || true

# 2) –ü–æ–¥–ø–∏—Å—å —Å–∞–º–æ–≥–æ .app (–ë–ï–ó --deep)
sign-app:
	@echo "üîê –ü–æ–¥–ø–∏—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ staging..."
	codesign --force --options runtime --timestamp \
	  --entitlements entitlements.plist \
	  --sign "$(DEVELOPER_ID_APP)" "$(STAGE_APP)"
	codesign --verify --deep --strict --verbose=2 "$(STAGE_APP)"
	- spctl -a -v "$(STAGE_APP)"

# –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ .app –≤ dist/ –±–µ–∑ xattrs
stage-to-dist:
	@echo "üì¶ –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ .app –≤ dist/..."
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ xattrs –≤ staging –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º..."
	@xattr -cr "$(STAGE_APP)"
	@xattr -dr com.apple.FinderInfo "$(STAGE_APP)" 2>/dev/null || true
	@ditto --norsrc --noqtn "$(STAGE_APP)" "$(DIST_APP)"
	@echo "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π .app –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ dist/"

# PKG ‚Äî –≤ /Applications (PKG = –∞–¥–º–∏–Ω-—É—Å—Ç–∞–Ω–æ–≤–∫–∞; –±–µ–∑-root ‚Äî —á–µ—Ä–µ–∑ DMG)
pkg:
	@echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ PKG..."
	productbuild --component "$(DIST_APP)" /Applications \
	  --sign "$(DEVELOPER_ID_INSTALLER)" "$(PKG)"
	@echo "‚úÖ PKG built: $(PKG)"

dmg:
	@echo "üíø –°–æ–∑–¥–∞–Ω–∏–µ DMG..."
	bash make_dmg.sh "$(DIST_APP)" "$(DMG)"
	@echo "‚úÖ DMG built: $(DMG)"

notarize-app:
	@echo "üìã –ù–æ—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è .app..."
	xcrun notarytool submit "$(DIST_APP)" --keychain-profile "$(APPLE_NOTARY_PROFILE)" --wait

notarize-pkg:
	@echo "üìã –ù–æ—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è .pkg..."
	xcrun notarytool submit "$(PKG)" --keychain-profile "$(APPLE_NOTARY_PROFILE)" --wait

notarize-dmg:
	@echo "üìã –ù–æ—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è .dmg..."
	xcrun notarytool submit "$(DMG)" --keychain-profile "$(APPLE_NOTARY_PROFILE)" --wait

staple-all:
	@echo "üìå Staple –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
	- xcrun stapler staple "$(DIST_APP)"
	- xcrun stapler staple "$(PKG)"
	- xcrun stapler staple "$(DMG)"

verify:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π..."
	codesign --verify --deep --strict --verbose=2 "$(DIST_APP)"
	pkgutil --check-signature "$(PKG)"
	- spctl -a -v "$(DIST_APP)"
	- spctl -a -v "$(PKG)"
	- spctl -a -v "$(DMG)"

verify-dest:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è PKG..."
	bash verify_pkg_destination.sh "$(PKG)"

clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
	rm -rf build dist artifacts/*.pkg artifacts/*.dmg
	@if [ -n "$(STAGE)" ] && [ -d "$(STAGE)" ]; then \
		echo "üßπ –û—á–∏—Å—Ç–∫–∞ staging: $(STAGE)"; \
		rm -rf "$(STAGE)"; \
	fi