import asyncio
import logging
import time
from rich.console import Console
from enum import Enum
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from audio_player import AudioPlayer
from stt_recognizer import StreamRecognizer
from input_handler import InputHandler
from grpc_client import GrpcClient
from screen_capture import ScreenCapture
from utils.hardware_id import get_hardware_id, get_hardware_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console = Console()

class AppState(Enum):
    IDLE = 1          # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç, –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω, –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∞–º
    LISTENING = 2     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É (–ø—Ä–æ–±–µ–ª –∑–∞–∂–∞—Ç)
    PROCESSING = 3    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É (gRPC –∑–∞–ø—Ä–æ—Å)
    SPEAKING = 4      # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç (–∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è)

class StateManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ.
    """
    
    def __init__(self, console, audio_player, stt_recognizer, screen_capture, grpc_client, hardware_id):
        self.console = console
        self.audio_player = audio_player
        self.stt_recognizer = stt_recognizer
        self.screen_capture = screen_capture
        self.grpc_client = grpc_client
        self.hardware_id = hardware_id
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.state = AppState.IDLE
        self.active_call = None
        self.streaming_task = None
        self.current_screenshot = None
        self.current_screen_info = None
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        pass
        
    def get_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.state
    
    def set_state(self, new_state):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        if self.state != new_state:
            self.state = new_state
            self.console.print(f"[dim]‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}[/dim]")
    
    def handle_start_recording(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ - –°–ù–ê–ß–ê–õ–ê –ü–†–ï–†–´–í–ê–ù–ò–ï, –ü–û–¢–û–ú –ó–ê–ü–ò–°–¨"""
        self.console.print(f"[blue]üé§ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name})[/blue]")
        
        # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø: –º–∏–∫—Ä–æ—Ñ–æ–Ω + –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!
        if self.state == AppState.SPEAKING:
            self.console.print("[bold yellow]üîá –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç - –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ + –º–∏–∫—Ä–æ—Ñ–æ–Ω![/bold yellow]")
            
            # 1Ô∏è‚É£ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–†–ï–†–´–í–ê–ù–ò–ï –í –§–û–ù–ï (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º!)
            import threading
            interrupt_thread = threading.Thread(target=self._interrupt_background, daemon=True)
            interrupt_thread.start()
            
            # 2Ô∏è‚É£ –°–†–ê–ó–£ –ê–ö–¢–ò–í–ò–†–£–ï–ú –ú–ò–ö–†–û–§–û–ù (–Ω–µ –∂–¥–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è!)
            self.console.print("[bold green]üé§ –ú–ò–ö–†–û–§–û–ù –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û![/bold green]")
            
        elif self.state == AppState.IDLE:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ù–ï –≥–æ–≤–æ—Ä–∏—Ç - –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.console.print("[blue]‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç - –∞–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω[/blue]")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        self.set_state(AppState.LISTENING)
        
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
        self._capture_screen()
        self.stt_recognizer.start_recording()
        self.console.print("[bold green]üé§ –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...[/bold green]")
        self.console.print("[yellow]üí° –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/yellow]")
        
        # –ö–†–ò–¢–ò–ß–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        self._microphone_activated = True
        
        # 3Ô∏è‚É£ –ò–ù–§–û–†–ú–ò–†–£–ï–ú –æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
        if self.state == AppState.SPEAKING:
            self.console.print("[blue]‚ÑπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∏–¥–µ—Ç –≤ —Ñ–æ–Ω–µ, –º–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç![/blue]")
    
    def handle_stop_recording(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏"""
        if self.state != AppState.LISTENING:
            self.console.print(f"[yellow]‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ stop_recording –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {self.state.name}, –∏–≥–Ω–æ—Ä–∏—Ä—É—é[/yellow]")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.set_state(AppState.PROCESSING)
        self.console.print("[bold blue]üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...[/bold blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        command = self.stt_recognizer.stop_recording_and_recognize()
        
        if command and command.strip():
            self.console.print(f"[bold green]üìù –ö–æ–º–∞–Ω–¥–∞: {command}[/bold green]")
            self._process_command(command)
        else:
            self.console.print("[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞[/yellow]")
            self.set_state(AppState.IDLE)
    
    def handle_interrupt_or_cancel(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è/–æ—Ç–º–µ–Ω—ã - –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"""
        self.console.print(f"[blue]üîá –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name})[/blue]")
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ï–†–´–í–ê–ù–ò–ï –í–°–ï–ì–û - –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è!
        self.console.print("[bold red]üîá –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –í–°–ï–ì–û...[/bold red]")
        
        # 1. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ –í–°–ï–ì–î–ê - —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        self._interrupt_audio()
        
        # 2. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –í–°–ï–ì–î–ê
        self._cancel_tasks()
        
        # 3. –ï—Å–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        if self.state == AppState.LISTENING:
            try:
                # –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ë–ï–ó —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                if hasattr(self.stt_recognizer, 'force_stop_recording'):
                    self.stt_recognizer.force_stop_recording()
                    self.console.print("[yellow]üö´ –ó–∞–ø–∏—Å—å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞[/yellow]")
                else:
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                    _ = self.stt_recognizer.stop_recording_and_recognize()
                    self.console.print("[yellow]üö´ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞[/yellow]")
            except Exception as e:
                self.console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏: {e}[/yellow]")
        
        # 4. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ IDLE –í–°–ï–ì–î–ê
        self.set_state(AppState.IDLE)
        self.console.print("[bold green]‚úÖ –í–°–ï –ú–ì–ù–û–í–ï–ù–ù–û –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ![/bold green]")
        
        # 5. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if hasattr(self.audio_player, 'is_playing') and self.audio_player.is_playing:
            self.console.print("[red]‚ö†Ô∏è –ê—É–¥–∏–æ –≤—Å–µ –µ—â–µ –∏–≥—Ä–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...[/red]")
            try:
                self.audio_player.force_stop()
                self.console.print("[green]‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ[/green]")
            except Exception as e:
                self.console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ: {e}[/red]")
    
    def _interrupt_audio(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ - –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–ô!"""
        self.console.print(f"[blue]üîá –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...[/blue]")
        
        # –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û clear_all_audio_data!
        try:
            if hasattr(self.audio_player, 'clear_all_audio_data'):
                self.audio_player.clear_all_audio_data()
                self.console.print("[green]‚úÖ –ê—É–¥–∏–æ clear_all_audio_data() –≤—ã–ø–æ–ª–Ω–µ–Ω[/green]")
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
                if hasattr(self.audio_player, 'force_stop_immediately'):
                    self.audio_player.force_stop_immediately()
                    self.console.print("[green]‚úÖ –ê—É–¥–∏–æ force_stop_immediately() –≤—ã–ø–æ–ª–Ω–µ–Ω (fallback)[/green]")
                elif hasattr(self.audio_player, 'force_stop'):
                    self.audio_player.force_stop()
                    self.console.print("[green]‚úÖ –ê—É–¥–∏–æ force_stop() –≤—ã–ø–æ–ª–Ω–µ–Ω (fallback)[/green]")
                else:
                    self.console.print("[yellow]‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ: {e}[/red]")
        
        # –ù–ï –ñ–î–ï–ú - —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!
        self.console.print("[green]‚úÖ –ê—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ú–ì–ù–û–í–ï–ù–ù–û![/green]")
    
    def _cancel_tasks(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–ô!"""
        self.console.print("[bold red]üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–ú–ï–ù–´ –ó–ê–î–ê–ß...[/bold red]")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if hasattr(self, 'state'):
            self.console.print(f"[bold red]üö® –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}[/bold red]")
            if self.state == AppState.SPEAKING:
                self.console.print("[bold red]üö® –ê–°–°–ò–°–¢–ï–ù–¢ –ì–û–í–û–†–ò–¢ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–†–ï–†–´–í–ê–Æ![/bold red]")
            elif self.state == AppState.PROCESSING:
                self.console.print("[bold red]üö® –ê–°–°–ò–°–¢–ï–ù–¢ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–†–ï–†–´–í–ê–Æ![/bold red]")
        
        # 1Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ–º gRPC –∑–∞–¥–∞—á–∏
        if self.streaming_task:
            try:
                self.streaming_task.cancel()
                self.console.print("[yellow]üîÑ –ó–∞–¥–∞—á–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω–µ–Ω–∞[/yellow]")
            except Exception as e:
                self.console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã streaming_task: {e}[/red]")
        else:
            self.console.print("[yellow]‚ö†Ô∏è streaming_task = None[/yellow]")
        
        if self.active_call:
            try:
                self.active_call.cancel()
                self.console.print("[yellow]üîÑ gRPC –≤—ã–∑–æ–≤ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω–µ–Ω[/yellow]")
            except Exception as e:
                self.console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã active_call: {e}[/red]")
        else:
            self.console.print("[yellow]‚ö†Ô∏è active_call = None[/yellow]")
        
        # 2Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä!
        try:
            self.console.print("[bold red]üö® –û–¢–ü–†–ê–í–õ–Ø–Æ –ö–û–ú–ê–ù–î–£ –ü–†–ï–†–´–í–ê–ù–ò–Ø –ù–ê –°–ï–†–í–ï–†![/bold red]")
            self.grpc_client.force_interrupt_server()
            self.console.print("[bold red]üö® –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä![/bold red]")
        except Exception as e:
            self.console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}[/red]")
        
        # 3Ô∏è‚É£ –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
        self.active_call = None
        self.streaming_task = None
        
        self.console.print("[green]‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω–µ–Ω—ã![/green]")
    
    def _force_interrupt_all(self):
        """–ï–î–ò–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –í–°–ï–ì–û"""
        logger.info(f"üö® _force_interrupt_all() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        queue_size = self.audio_player.audio_queue.qsize()
        logger.info(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û: queue_size={queue_size}, state={self.state.name}")
        
        start_time = time.time()
        
        # 1Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        audio_start = time.time()
        self._interrupt_audio()
        audio_time = (time.time() - audio_start) * 1000
        logger.info(f"   ‚úÖ _interrupt_audio: {audio_time:.1f}ms")
        
        # 2Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        tasks_start = time.time()
        self._cancel_tasks()
        tasks_time = (time.time() - tasks_start) * 1000
        logger.info(f"   ‚úÖ _cancel_tasks: {tasks_time:.1f}ms")
        
        total_time = (time.time() - start_time) * 1000
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        final_queue_size = self.audio_player.audio_queue.qsize()
        logger.info(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï: queue_size={final_queue_size}")
        logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {total_time:.1f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if final_queue_size == 0:
            logger.info("   üéØ –ü–†–ï–†–´–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û - –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞!")
        else:
            logger.warning(f"   ‚ö†Ô∏è –ü–†–ï–†–´–í–ê–ù–ò–ï –ù–ï–ü–û–õ–ù–û–ï - –æ—á–µ—Ä–µ–¥—å: {final_queue_size}")
        
        self.console.print("[bold red]üö® –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–†–ï–†–í–ê–ù–û![/bold red]")
    
    def _interrupt_background(self):
        """–§–û–ù–û–í–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞!"""
        try:
            self.console.print("[blue]üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...[/blue]")
            
            # 1Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            self._interrupt_audio()
            self.console.print("[green]‚úÖ –§–æ–Ω–æ–≤–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/green]")
            
            # 2Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            self._cancel_tasks()
            self.console.print("[green]‚úÖ –§–æ–Ω–æ–≤–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/green]")
            
            # 3Ô∏è‚É£ –ó–ê–©–ò–¢–ê –û–¢ –ó–ê–í–ò–°–ê–ù–ò–Ø: —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            import time
            start_time = time.time()
            max_background_time = 0.5  # –£–º–µ–Ω—å—à–∞–µ–º —Å 3.0s –¥–æ 0.5s –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
            while time.time() - start_time < max_background_time:
                if not hasattr(self.audio_player, 'is_playing') or not self.audio_player.is_playing:
                    break
                time.sleep(0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100ms
            
            # –ï—Å–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            if hasattr(self.audio_player, 'is_playing') and self.audio_player.is_playing:
                self.console.print("[bold red]üö® –§–æ–Ω–æ–≤–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞![/bold red]")
                self.audio_player.force_stop()
            
            self.console.print("[bold green]‚úÖ –§–æ–Ω–æ–≤–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/bold green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}[/red]")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            try:
                if hasattr(self.audio_player, 'force_stop'):
                    self.audio_player.force_stop()
            except:
                pass
    
    async def _force_cancel_task(self, task):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        try:
            self.console.print(f"[bold red]üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏: {task}[/bold red]")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞
            if not task.done():
                task.cancel()
                self.console.print("[blue]üîß –ü–æ–ø—ã—Ç–∫–∞ 1: cancel() –≤—ã–∑–≤–∞–Ω[/blue]")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                await asyncio.sleep(0.1)
                if not task.cancelled():
                    self.console.print("[red]üö® –ó–∞–¥–∞—á–∞ –ù–ï –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ cancel()![/red]")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 2: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    if hasattr(task, '_coro'):
                        self.console.print("[red]üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–µ—Ä—ã–≤–∞—é –∫–æ—Ä—É—Ç–∏–Ω—É![/red]")
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 3: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è "—É–±–∏–π—Å—Ç–≤–∞" —Å—Ç–∞—Ä–æ–π
                    self.console.print("[red]üö® –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É-—É–±–∏–π—Ü—É –¥–ª—è —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏![/red]")
                    killer_task = asyncio.create_task(self._kill_task(task))
                    await killer_task
                else:
                    self.console.print("[green]‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞![/green]")
            else:
                self.console.print("[green]‚úÖ –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
                
        except Exception as e:
            self.console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã: {e}[/red]")
    
    async def _kill_task(self, task):
        """–ü—ã—Ç–∞–µ—Ç—Å—è "—É–±–∏—Ç—å" –∑–∞–¥–∞—á—É –ª—é–±—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
        try:
            self.console.print(f"[bold red]üíÄ –ü—ã—Ç–∞—é—Å—å –£–ë–ò–¢–¨ –∑–∞–¥–∞—á—É: {task}[/bold red]")
            
            # –ú–µ—Ç–æ–¥ 1: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ cancel()
            for i in range(5):
                if not task.done():
                    task.cancel()
                    await asyncio.sleep(0.05)
                    if task.cancelled():
                        self.console.print(f"[green]‚úÖ –ó–∞–¥–∞—á–∞ —É–±–∏—Ç–∞ –ø–æ–ø—ã—Ç–∫–æ–π {i+1}[/green]")
                        break
                else:
                    break
            
            # –ú–µ—Ç–æ–¥ 2: –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –∂–∏–≤–∞, —Å–æ–∑–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            if not task.done() and not task.cancelled():
                self.console.print("[red]üö® –ó–∞–¥–∞—á–∞ –ù–ï–ò–ó–õ–ï–ß–ò–ú–ê! –°–æ–∑–¥–∞—é –∏—Å–∫–ª—é—á–µ–Ω–∏–µ...[/red]")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–µ
                
        except Exception as e:
            self.console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –∑–∞–¥–∞—á–∏: {e}[/red]")
    
    def _capture_screen(self):
        """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        self.console.print("[bold blue]üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é —ç–∫—Ä–∞–Ω –≤ JPEG...[/bold blue]")
        self.current_screenshot = self.screen_capture.capture_screen(quality=80)
        
        if self.current_screenshot:
            self.console.print(f"[bold green]‚úÖ JPEG —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω: {len(self.current_screenshot)} —Å–∏–º–≤–æ–ª–æ–≤ Base64[/bold green]")
        else:
            self.console.print("[bold yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç[/bold yellow]")
    
    def _process_command(self, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ gRPC"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            self._cancelled = False
            self.console.print("[blue]üîç –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã[/blue]")
            
            # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º gRPC —Å—Ç—Ä–∏–º
            stream_generator = self.grpc_client.stream_audio(
                command,
                self.current_screenshot,
                self.current_screen_info,
                self.hardware_id
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞
            self.streaming_task = asyncio.create_task(self._consume_stream(stream_generator))
            
        except Exception as e:
            self.console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}[/bold red]")
            self.set_state(AppState.IDLE)
    
    async def _consume_stream(self, stream_generator):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç gRPC —Å—Ç—Ä–∏–º –≤ —Ñ–æ–Ω–µ"""
        logger.info(f"üö® _consume_stream() –Ω–∞—á–∞—Ç –≤ {time.time():.3f}")
        
        try:
            self.set_state(AppState.SPEAKING)
            logger.info(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.state.name}")
            
            # –ü–æ—Ç—Ä–µ–±–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ –∫–æ–Ω—Ü–∞
            chunk_count = 0
            self.console.print("[bold red]üö® –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò gRPC –°–¢–†–ò–ú–ê![/bold red]")
            logger.info("   üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ gRPC —Å—Ç—Ä–∏–º–∞")
            
            try:
                async for chunk in stream_generator:
                    chunk_count += 1
                    logger.info(f"   üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ {chunk_count} –≤ {time.time():.3f}")
                    
                    self.console.print(f"[blue]üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ {chunk_count}...[/blue]")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫!
                    if hasattr(chunk, 'text_chunk') and chunk.text_chunk:
                        self.console.print(f"[green]üìÑ –¢–µ–∫—Å—Ç: {chunk.text_chunk[:100]}...[/green]")
                    
                    if hasattr(chunk, 'audio_chunk') and chunk.audio_chunk:
                        audio_data = chunk.audio_chunk.audio_data
                        audio_samples = len(audio_data)//2
                        logger.info(f"   üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫ {chunk_count}: {audio_samples} —Å—ç–º–ø–ª–æ–≤")
                        self.console.print(f"[green]üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω: {audio_samples} —Å—ç–º–ø–ª–æ–≤[/green]")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –ø–ª–µ–µ—Ä!
                        try:
                            import numpy as np
                            audio_array = np.frombuffer(audio_data, dtype=np.int16)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                            queue_before = self.audio_player.audio_queue.qsize()
                            logger.info(f"   üìä –û—á–µ—Ä–µ–¥—å –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {queue_before}")
                            
                            # –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞!
                            self.audio_player.add_chunk(audio_array)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                            queue_after = self.audio_player.audio_queue.qsize()
                            logger.info(f"   üìä –û—á–µ—Ä–µ–¥—å –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {queue_after}")
                            
                            self.console.print(f"[green]‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–µ—Ä[/green]")
                        except Exception as e:
                            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}[/red]")
                    
                    if hasattr(chunk, 'error_message') and chunk.error_message:
                        self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {chunk.error_message}[/red]")
                    
                    if hasattr(chunk, 'end_message') and chunk.end_message:
                        self.console.print(f"[green]‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {chunk.end_message}[/green]")
                        break
                        
            except Exception as stream_error:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ async for: {stream_error}[/red]")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _consume_stream: {e}")
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ _consume_stream: {e}[/red]")
        finally:
            # –ö–†–ò–¢–ò–ß–ù–û: –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_time = time.time()
            logger.info(f"   üèÅ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {final_time:.3f}")
            self.set_state(AppState.IDLE)
            logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}")
            self.console.print(f"[blue]‚úÖ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}[/blue]")
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.streaming_task and not self.streaming_task.done():
            self.streaming_task.cancel()
        if self.active_call and not self.active_call.done():
            self.active_call.cancel()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å push-to-talk –ª–æ–≥–∏–∫–æ–π, –∑–∞—Ö–≤–∞—Ç–æ–º —ç–∫—Ä–∞–Ω–∞ –∏ Hardware ID"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.print("[bold blue]üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...[/bold blue]")
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º STT (–¥–æ gRPC)
    console.print("[blue]üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STT...[/blue]")
    stt_recognizer = StreamRecognizer()
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
    console.print("[blue]üì∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞...[/blue]")
    screen_capture = ScreenCapture()
    
    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
    console.print("[blue]üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞...[/blue]")
    try:
        audio_player = AudioPlayer(sample_rate=48000)
        console.print("[bold green]‚úÖ –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold green]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞: {e}[/bold red]")
        console.print("[yellow]‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–≤—É–∫–∞[/yellow]")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
        class AudioPlayerStub:
            def __init__(self):
                self.is_playing = False
                self.audio_error = True
                self.audio_error_message = str(e)
            
            def start_playback(self):
                console.print("[yellow]üîá –ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ[/yellow]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞: {e}[/bold red]")
        console.print("[yellow]‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–≤—É–∫–∞[/yellow]")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
        class AudioPlayerStub:
            def __init__(self):
                self.is_playing = False
                self.audio_error = True
                self.audio_error_message = str(e)
            
            def start_playback(self):
                console.print("[yellow]üîá –ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ[/yellow]")
            
            def stop_playback(self):
                pass
            
            def interrupt(self):
                pass
            
            def add_audio_chunk(self, audio_chunk):
                console.print(f"[dim]üîá –ê—É–¥–∏–æ —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω (–∑–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω): {len(audio_chunk)} —Å—ç–º–ø–ª–æ–≤[/dim]")
            
            def wait_for_queue_empty(self):
                pass
            
            def cleanup(self):
                pass
            
            def get_audio_status(self):
                return {'is_playing': False, 'has_error': True, 'error_message': str(e)}
        
        audio_player = AudioPlayerStub()
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gRPC –∫–ª–∏–µ–Ω—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–º)
    console.print("[blue]üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–ª–∏–µ–Ω—Ç–∞...[/blue]")
    grpc_client = GrpcClient()
    
    # 5. –ü–æ–ª—É—á–∞–µ–º Hardware ID (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    console.print("[blue]üÜî –ü–æ–ª—É—á–µ–Ω–∏–µ Hardware ID...[/blue]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
    import sys
    force_regenerate = "--force-regenerate" in sys.argv
    clear_cache = "--clear-cache" in sys.argv
    
    if clear_cache:
        from utils.hardware_id import clear_hardware_id_cache
        clear_hardware_id_cache()
        console.print("[yellow]üóëÔ∏è –ö—ç—à Hardware ID –æ—á–∏—â–µ–Ω[/yellow]")
    
    hardware_id = get_hardware_id(force_regenerate=force_regenerate)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    hardware_info = get_hardware_info()
    
    console.print(f"[bold green]‚úÖ Hardware ID –ø–æ–ª—É—á–µ–Ω: {hardware_id[:16]}...[/bold green]")
    console.print(f"[blue]üì± UUID: {hardware_info['hardware_uuid'][:16]}...[/blue]")
    console.print(f"[blue]üî¢ Serial: {hardware_info['serial_number']}[/blue]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
    from utils.hardware_id import get_cache_info
    cache_info = get_cache_info()
    if cache_info['exists']:
        console.print(f"[green]üíæ Hardware ID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞[/green]")
    else:
        console.print(f"[yellow]üîÑ Hardware ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–Ω–æ–≤–æ[/yellow]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫—ç—à–µ–º
    if "--help" in sys.argv:
        console.print("\n[yellow]üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º Hardware ID:[/yellow]")
        console.print("[yellow]  ‚Ä¢ --clear-cache      - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à[/yellow]")
        console.print("[yellow]  ‚Ä¢ --force-regenerate - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å ID[/yellow]")
        console.print("[yellow]  ‚Ä¢ --help            - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É[/yellow]")
        console.print("[yellow]  ‚Ä¢ –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤    - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
    
    # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    event_queue = asyncio.Queue()
    loop = asyncio.get_running_loop()
    input_handler = InputHandler(loop, event_queue)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ
    screen_info = screen_capture.get_screen_info()
    console.print(f"[bold blue]üì± –≠–∫—Ä–∞–Ω: {screen_info.get('width', 0)}x{screen_info.get('height', 0)} –ø–∏–∫—Å–µ–ª–µ–π[/bold blue]")
    
    # –°–æ–∑–¥–∞–µ–º StateManager
    state_manager = StateManager(console, audio_player, stt_recognizer, screen_capture, grpc_client, hardware_id)
    state_manager.current_screen_info = screen_info
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º hardware_id –≤ grpc_client –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    grpc_client.hardware_id = hardware_id
    console.print(f"[blue]üîß Hardware ID {hardware_id[:16]}... –ø–µ—Ä–µ–¥–∞–Ω –≤ gRPC –∫–ª–∏–µ–Ω—Ç[/blue]")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    console.print("[blue]üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...[/blue]")
    if not await grpc_client.connect():
        console.print("[bold red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold red]")
        return
        
    console.print("[bold green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold green]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.print("[bold green]‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤![/bold green]")
    console.print("[yellow]üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:[/yellow]")
    console.print("[yellow]  ‚Ä¢ –ó–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –°–†–ê–ó–£ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–∏–∫—Ä–æ—Ñ–æ–Ω[/yellow]")
    console.print("[yellow]  ‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å[/yellow]")
    console.print("[yellow]  ‚Ä¢ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å + –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]  ‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞[/yellow]")
    console.print("[yellow]  ‚Ä¢ –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è —ç–∫—Ä–∞–Ω[/yellow]")
    console.print("[yellow]  ‚Ä¢ Hardware ID –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π[/yellow]")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    try:
        while True:
            try:
                # –£–°–ö–û–†–ï–ù–ù–´–ô —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
                event = await asyncio.wait_for(event_queue.get(), timeout=0.05)  # 50ms –≤–º–µ—Å—Ç–æ 100ms
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                console.print(f"[dim]üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_manager.get_state().name}, —Å–æ–±—ã—Ç–∏–µ: {event}[/dim]")
                
                # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô
                start_time = time.time()
                console.print(f"[bold blue]üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ –°–û–ë–´–¢–ò–ï: {event}[/bold blue]")
                console.print(f"[bold blue]üéØ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï: {state_manager.get_state().name}[/bold blue]")

                if event == "start_recording":
                    state_manager.handle_start_recording()
                elif event == "interrupt_or_cancel":
                    state_manager.handle_interrupt_or_cancel()
                elif event == "stop_recording":
                    state_manager.handle_stop_recording()
                elif event == "process_command":
                    state_manager.handle_process_command()
                
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–†–ï–ú–ï–ù–ò –û–ë–†–ê–ë–û–¢–ö–ò
                processing_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                console.print(f"[dim]‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {processing_time:.1f}ms[/dim]")
                
                # –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò –°–û–ë–´–¢–ò–Ø
                new_state = state_manager.get_state()
                console.print(f"[bold green]‚úÖ –°–û–ë–´–¢–ò–ï {event} –û–ë–†–ê–ë–û–¢–ê–ù–û! –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.name}[/bold green]")
                
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                if hasattr(audio_player, 'is_playing'):
                    audio_playing = audio_player.is_playing
                    console.print(f"[dim]üîá –ê—É–¥–∏–æ —Å—Ç–∞—Ç—É—Å: {'–ò–ì–†–ê–ï–¢' if audio_playing else '–û–°–¢–ê–ù–û–í–õ–ï–ù–û'}[/dim]")
                    
                    # –ï—Å–ª–∏ –∞—É–¥–∏–æ –≤—Å–µ –µ—â–µ –∏–≥—Ä–∞–µ—Ç –ø–æ—Å–ª–µ interrupt_or_cancel - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞!
                    if event == "interrupt_or_cancel" and audio_playing:
                        console.print(f"[bold red]üö® –ü–†–û–ë–õ–ï–ú–ê: –ê—É–¥–∏–æ –≤—Å–µ –µ—â–µ –∏–≥—Ä–∞–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è![/bold red]")
                        console.print(f"[bold red]üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞—É–¥–∏–æ...[/bold red]")
                        try:
                            if hasattr(audio_player, 'force_stop'):
                                audio_player.force_stop()
                                console.print(f"[bold green]‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ[/bold green]")
                        except Exception as e:
                            console.print(f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
                
                # –ó–ê–©–ò–¢–ê –û–¢ –ó–ê–í–ò–°–ê–ù–ò–Ø: –µ—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–∏—Å –≤ SPEAKING –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥
                current_state = state_manager.get_state()
                if current_state == AppState.SPEAKING:
                    if not hasattr(state_manager, '_speaking_start_time'):
                        state_manager._speaking_start_time = time.time()
                    elif time.time() - state_manager._speaking_start_time > 15.0:  # 15 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                        console.print("[bold red]üö® –ó–ê–í–ò–°–ê–ù–ò–ï! –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–∏—Å –≤ SPEAKING –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥![/bold red]")
                        console.print("[bold red]üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ...[/bold red]")
                        audio_player.force_stop()
                        state_manager.set_state(AppState.IDLE)
                        state_manager._speaking_start_time = None
                else:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –Ω–µ –≤ SPEAKING
                    if hasattr(state_manager, '_speaking_start_time'):
                        state_manager._speaking_start_time = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
                if hasattr(audio_player, 'get_audio_status'):
                    audio_status = audio_player.get_audio_status()
                    if audio_status.get('has_error'):
                        console.print(f"[dim]üîá –ê—É–¥–∏–æ —Å—Ç–∞—Ç—É—Å: {audio_status.get('error_message', '–û—à–∏–±–∫–∞')}[/dim]")

            except asyncio.TimeoutError:
                # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                pass
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
    finally:
        state_manager.cleanup()
        if audio_player.is_playing:
            audio_player.stop_playback()
        logger.info("–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")

