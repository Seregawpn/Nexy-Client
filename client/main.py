import asyncio
import logging
import time
from rich.console import Console
from enum import Enum
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from audio_player import AudioPlayer
from stt_recognizer import StreamRecognizer
from input_handler import InputHandler
from grpc_client import GrpcClient
from screen_capture import ScreenCapture
from utils.hardware_id import get_hardware_id, get_hardware_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console = Console()

class AppState(Enum):
    LISTENING = 1     # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã (–º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω)
    IN_PROCESS = 2    # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç)
    SLEEPING = 3      # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç, –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥—ã (–º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)

class StateManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ.
    """
    
    def __init__(self, console, audio_player, stt_recognizer, screen_capture, grpc_client, hardware_id, input_handler=None):
        self.console = console
        self.audio_player = audio_player
        self.stt_recognizer = stt_recognizer
        self.screen_capture = screen_capture
        self.grpc_client = grpc_client
        self.hardware_id = hardware_id
        self.input_handler = input_handler  # –°—Å—ã–ª–∫–∞ –Ω–∞ InputHandler –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.state = AppState.SLEEPING
        self.active_call = None
        self.streaming_task = None
        self.current_screenshot = None
        self.current_screen_info = None
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.interrupt_start_time = time.time()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        pass
        
    def get_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.state
    
    def set_state(self, new_state):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        if self.state != new_state:
            self.state = new_state
            self.console.print(f"[dim]‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}[/dim]")
    
    def handle_start_recording(self):
        """–ü–†–û–ë–ï–õ –ó–ê–ñ–ê–¢ - –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        
        if self.state == AppState.SLEEPING:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING –∏ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.set_state(AppState.LISTENING)
            self.stt_recognizer.start_recording()
            self.console.print("[green]üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            logger.info("   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è SLEEPING")
        
        elif self.state == AppState.IN_PROCESS:
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
            self.console.print("[bold yellow]üîá –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ü–†–ï–†–´–í–ê–Æ –∏ –ø–µ—Ä–µ—Ö–æ–∂—É –≤ LISTENING![/bold yellow]")
            logger.info("   üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            
            # üö® –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î!
            success = self.force_stop_everything()
            
            if success:
                logger.info("   ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                self.console.print("[bold green]‚úÖ –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û![/bold green]")
            else:
                logger.warning("   ‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
                self.console.print("[yellow]‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è[/yellow]")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING –∏ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.set_state(AppState.LISTENING)
            self.stt_recognizer.start_recording()
            self.console.print("[bold green]‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ LISTENING - –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω![/bold green]")
            logger.info("   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            
            # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì–ò –í INPUT_HANDLER
            if self.input_handler and hasattr(self.input_handler, 'reset_interrupt_flag'):
                self.input_handler.reset_interrupt_flag()
                logger.info(f"   üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è IN_PROCESS")
            
            if self.input_handler and hasattr(self.input_handler, 'reset_command_processed_flag'):
                self.input_handler.reset_command_processed_flag()
                logger.info(f"   üîÑ –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler")
        
        elif self.state == AppState.LISTENING:
            # –£–∂–µ —Å–ª—É—à–∞–µ–º ‚Üí –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            self.console.print("[blue]üîÑ –£–∂–µ —Å–ª—É—à–∞—é - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏[/blue]")
            logger.info("   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ LISTENING")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            try:
                self.stt_recognizer.stop_recording_and_recognize()
                logger.info("   ‚úÖ –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except:
                pass
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            self.stt_recognizer.start_recording()
            logger.info("   ‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞")
            self.console.print("[green]üé§ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            if self.input_handler and hasattr(self.input_handler, 'reset_command_processed_flag'):
                self.input_handler.reset_command_processed_flag()
                logger.info(f"   üîÑ –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler")
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
            self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {self.state.name}, –ø–µ—Ä–µ—Ö–æ–∂—É –≤ LISTENING[/yellow]")
            self.set_state(AppState.LISTENING)
            self.stt_recognizer.start_recording()
            self.console.print("[green]üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            logger.info("   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    def handle_stop_recording(self):
        """–ü–†–û–ë–ï–õ –û–¢–ü–£–©–ï–ù - –≤—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É"""
        
        # üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stop_recording –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        if self.state == AppState.LISTENING:
            # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
            command = self.stt_recognizer.stop_recording_and_recognize()
            logger.info("   ‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω")
            
            if command and command.strip():
                # –ö–û–ú–ê–ù–î–ê –ü–†–ò–ù–Ø–¢–ê ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ IN_PROCESS
                self.console.print(f"[bold green]üìù –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞: {command}[/bold green]")
                self.set_state(AppState.IN_PROCESS)
                self.console.print("[blue]üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ IN_PROCESS - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...[/blue]")
                self._process_command(command)
            else:
                # –ö–û–ú–ê–ù–î–ê –ù–ï –ü–†–ò–ù–Ø–¢–ê ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
                self.console.print("[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞[/yellow]")
                self.set_state(AppState.SLEEPING)
                self.console.print("[blue]‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING - –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º[/blue]")
                
        elif self.state == AppState.IN_PROCESS:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
            self.console.print("[bold yellow]üîá –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ü–†–ï–†–´–í–ê–Æ –∏ –ø–µ—Ä–µ—Ö–æ–∂—É –≤ LISTENING![/bold yellow]")
            
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
            success = self.force_stop_everything()
            if success:
                logger.info("   ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                self.console.print("[bold green]‚úÖ –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û![/bold green]")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING –∏ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.set_state(AppState.LISTENING)
            self.stt_recognizer.start_recording()
            self.console.print("[bold green]‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ LISTENING - –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω![/bold green]")
            
        elif self.state == AppState.SLEEPING:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç ‚Üí –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.console.print("[blue]üé§ –ê–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è SLEEPING[/blue]")
            self.set_state(AppState.LISTENING)
            self.stt_recognizer.start_recording()
            self.console.print("[green]üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
            self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {self.state.name}, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ SLEEPING[/yellow]")
            self.set_state(AppState.SLEEPING)
    
    def handle_deactivate_microphone(self):
        """–ü–†–û–ë–ï–õ –û–¢–ü–£–©–ï–ù - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING"""
        logger.info("   üîá handle_deactivate_microphone() –≤—ã–∑–≤–∞–Ω")
        
        if self.state == AppState.LISTENING:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –†–ê–°–ü–û–ó–ù–ê–ï–ú –ö–û–ú–ê–ù–î–£
            command = None
            try:
                if hasattr(self, 'stt_recognizer') and self.stt_recognizer:
                    command = self.stt_recognizer.stop_recording_and_recognize()
                    logger.info("   ‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ï–ï
            if command and command.strip():
                self.console.print(f"[bold green]üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}[/bold green]")
                logger.info(f"   üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ IN_PROCESS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                self.set_state(AppState.IN_PROCESS)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ IN_PROCESS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                self._process_command(command)
            else:
                # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.console.print("[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞[/yellow]")
                logger.info("   ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                self.console.print("[blue]üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING[/blue]")
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
            
        elif self.state == AppState.IN_PROCESS:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            self.console.print("[blue]‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω[/blue]")
            logger.info("   ‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            
        elif self.state == AppState.SLEEPING:
            # –£–∂–µ —Å–ø–∏–º ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            self.console.print("[blue]‚ÑπÔ∏è –£–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SLEEPING[/blue]")
            logger.info("   ‚ÑπÔ∏è –£–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SLEEPING")
    
    async def handle_interrupt_or_cancel(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.interrupt_start_time = time.time()
        
        logger.info(f"üö® handle_interrupt_or_cancel() –Ω–∞—á–∞—Ç –≤ {self.interrupt_start_time:.3f}")
        
        current_state = self.state
        logger.info(f"   üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name}")
        
        if current_state == AppState.IN_PROCESS:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Üí –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É!
            logger.info(f"   üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
            self.console.print("[bold red]üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã![/bold red]")
            
            # üö® –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î!
            success = self.force_stop_everything()
            
            if success:
                logger.info("   ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                self.console.print("[bold green]‚úÖ –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û![/bold green]")
            else:
                logger.warning("   ‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
                self.console.print("[yellow]‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è[/yellow]")
            
            # –ü–û–°–õ–ï –ü–†–ï–†–´–í–ê–ù–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ê–ö–¢–ò–í–ò–†–£–ï–ú –ú–ò–ö–†–û–§–û–ù!
            logger.info("   üé§ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
            self.console.print("[blue]üé§ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∞–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...[/blue]")
            
            # 3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            try:
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
                self._capture_screen()
                logger.info("   ‚úÖ –≠–∫—Ä–∞–Ω –∑–∞—Ö–≤–∞—á–µ–Ω")
                
                # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è!
                logger.info("   üé§ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
                self.set_state(AppState.LISTENING)
                self.stt_recognizer.start_recording()
                logger.info("   ‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                
                self.console.print("[bold green]‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏![/bold green]")
                self.console.print("[bold green]üé§ –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...[/bold green]")
                
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}")
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}[/red]")
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
            
            # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –í INPUT_HANDLER
            if self.input_handler and hasattr(self.input_handler, 'reset_interrupt_flag'):
                self.input_handler.reset_interrupt_flag()
                logger.info(f"   üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler")
            
        elif current_state == AppState.LISTENING:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É—à–∞–µ—Ç ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
            logger.info(f"   üé§ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
            self.console.print("[bold red]üîá –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥—ã[/bold red]")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            if hasattr(self, 'stt_recognizer') and self.stt_recognizer:
                command = self.stt_recognizer.stop_recording_and_recognize()
                
                if command and command.strip():
                    # –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ IN_PROCESS
                    self.console.print(f"[bold green]üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}[/bold green]")
                    logger.info(f"   üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ IN_PROCESS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    self.set_state(AppState.IN_PROCESS)
                    logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ IN_PROCESS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                    self._process_command(command)
                    
            else:
                # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.console.print("[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞[/yellow]")
                logger.info("   ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                
        elif not hasattr(self, 'stt_recognizer') or not self.stt_recognizer:
            # STT recognizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            self.console.print("[yellow]‚ö†Ô∏è STT recognizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
            logger.warning("   ‚ö†Ô∏è STT recognizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
            self.set_state(AppState.SLEEPING)
            logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING - STT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –í INPUT_HANDLER
            if self.input_handler and hasattr(self.input_handler, 'reset_interrupt_flag'):
                self.input_handler.reset_interrupt_flag()
                logger.info(f"   üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
                
        elif current_state == AppState.SLEEPING:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω!
            logger.info(f"   üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç - –ø—Ä–µ—Ä—ã–≤–∞—é –∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
            self.console.print("[blue]üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç - –ø—Ä–µ—Ä—ã–≤–∞—é –∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω[/blue]")
            
            # üö® –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –û–ß–ò–°–¢–ö–ò!
            success = self.force_stop_everything()
            
            if success:
                logger.info("   ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                self.console.print("[bold green]‚úÖ –í–°–ï –û–ß–ò–©–ï–ù–û![/bold green]")
            else:
                logger.warning("   ‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
                self.console.print("[yellow]‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è[/yellow]")
            
            # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            try:
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
                self._capture_screen()
                logger.info("   ‚úÖ –≠–∫—Ä–∞–Ω –∑–∞—Ö–≤–∞—á–µ–Ω")
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
                self.stt_recognizer.start_recording()
                logger.info("   ‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
                self.set_state(AppState.LISTENING)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ LISTENING –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
                
                self.console.print("[bold green]‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏![/bold green]")
                self.console.print("[bold green]üé§ –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...[/bold green]")
                self.console.print("[yellow]üí° –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/yellow]")
                
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}[/red]")
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
            
            # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –í INPUT_HANDLER
            if self.input_handler and hasattr(self.input_handler, 'reset_interrupt_flag'):
                self.input_handler.reset_interrupt_flag()
                logger.info(f"   üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler (—Å–æ—Å—Ç–æ—è–Ω–∏–µ SLEEPING)")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        end_time = time.time()
        execution_time = (end_time - self.interrupt_start_time) * 1000
        logger.info(f"   ‚è±Ô∏è handle_interrupt_or_cancel –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.1f}ms")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}")
    
    async def handle_event(self, event):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"""
        start_time = time.time()
        logger.info(f"   üéØ handle_event() –Ω–∞—á–∞—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event} –≤ {start_time:.3f}")
        
        try:
            if event == "start_recording":
                logger.info(f"   üé§ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è start_recording")
                self.handle_start_recording()
            elif event == "interrupt_or_cancel":
                logger.info(f"   üîá –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è interrupt_or_cancel")
                await self.handle_interrupt_or_cancel()  # üö® –î–û–ë–ê–í–õ–Ø–ï–ú await!
            elif event == "stop_recording":
                logger.info(f"   ‚èπÔ∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è stop_recording")
                self.handle_stop_recording()
            elif event == "deactivate_microphone":
                logger.info(f"   üîá –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è deactivate_microphone")
                self.handle_deactivate_microphone()
            elif event == "process_command":
                logger.info(f"   ‚öôÔ∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è process_command")
                self.handle_process_command()
            else:
                logger.warning(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
                self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}[/yellow]")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ handle_event –¥–ª—è {event}: {e}")
            self.console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event}: {e}[/bold red]")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –≤ SLEEPING –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.set_state(AppState.SLEEPING)
            self.console.print("[blue]üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ SLEEPING –ø—Ä–∏ –æ—à–∏–±–∫–µ[/blue]")
        
        end_time = time.time()
        processing_time = (end_time - start_time) * 1000
        logger.info(f"   ‚è±Ô∏è handle_event –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.1f}ms")
        logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}")
    
    def _process_command(self, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ gRPC"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            self._cancelled = False
            self.console.print("[blue]üîÑ –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã[/blue]")
            
            # üö® –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!
            if not self.grpc_client.stub:
                self.console.print("[yellow]‚ö†Ô∏è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...[/yellow]")
                logger.info("   üîå –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                
                try:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                        restore_task = loop.create_task(self.grpc_client.connect())
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
                        if not restore_task.done():
                            self.console.print("[blue]‚è≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ...[/blue]")
                        else:
                            if restore_task.result():
                                self.console.print("[green]‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ![/green]")
                                logger.info("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                            else:
                                self.console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ[/red]")
                                logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                                raise Exception("gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    else:
                        # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        if self.grpc_client.connect_sync():
                            self.console.print("[green]‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ![/green]")
                            logger.info("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                        else:
                            self.console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ[/red]")
                            logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                            raise Exception("gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                
                except Exception as e:
                    self.console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}[/bold red]")
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                    raise Exception(f"gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}")
            
            # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º gRPC —Å—Ç—Ä–∏–º
            stream_generator = self.grpc_client.stream_audio(
                command,
                self.current_screenshot,
                self.current_screen_info,
                self.hardware_id
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞
            self.streaming_task = asyncio.create_task(self._consume_stream(stream_generator))
            
        except Exception as e:
            self.console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}[/bold red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            self.set_state(AppState.SLEEPING)
    
    async def _consume_stream(self, stream_generator):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç gRPC —Å—Ç—Ä–∏–º –≤ —Ñ–æ–Ω–µ"""
        logger.info(f"üö® _consume_stream() –Ω–∞—á–∞—Ç –≤ {time.time():.3f}")
        
        try:
            self.set_state(AppState.IN_PROCESS)
            logger.info(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.state.name}")
            
            # –ü–æ—Ç—Ä–µ–±–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ –∫–æ–Ω—Ü–∞
            chunk_count = 0
            self.console.print("[bold red]üö® –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò gRPC –°–¢–†–ò–ú–ê![/bold red]")
            logger.info("   üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ gRPC —Å—Ç—Ä–∏–º–∞")
            
            try:
                async for chunk in stream_generator:
                    # üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–ï–†–´–í–ê–ù–ò–ï –ü–ï–†–ï–î –ö–ê–ñ–î–´–ú –ß–ê–ù–ö–û–ú
                    if hasattr(self, 'input_handler') and self.input_handler:
                        interrupt_status = self.input_handler.get_interrupt_status()
                        if interrupt_status:
                            logger.warning(f"   üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–ï–†–´–í–ê–ù–ò–ï! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤")
                            self.console.print("[bold red]üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–ï–†–´–í–ê–ù–ò–ï! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤![/bold red]")
                            
                            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
                            try:
                                if hasattr(self.audio_player, 'clear_all_audio_data'):
                                    self.audio_player.clear_all_audio_data()
                                    logger.info(f"   üö® –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                                    self.console.print("[green]‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏[/green]")
                                elif hasattr(self.audio_player, 'force_stop'):
                                    self.audio_player.force_stop()
                                    logger.info(f"   üö® –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                                    self.console.print("[green]‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏[/green]")
                                else:
                                    logger.warning(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ")
                                    self.console.print("[yellow]‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ[/yellow]")
                            except Exception as e:
                                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}")
                                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}[/red]")
                            
                            # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
                            logger.info(f"   üö® –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                            self.console.print("[bold red]üö® –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏![/bold red]")
                            break
                    
                    chunk_count += 1
                    logger.info(f"   üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ {chunk_count} –≤ {time.time():.3f}")
                    
                    self.console.print(f"[blue]üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ {chunk_count}...[/blue]")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫!
                    if hasattr(chunk, 'text_chunk') and chunk.text_chunk:
                        self.console.print(f"[green]üìÑ –¢–µ–∫—Å—Ç: {chunk.text_chunk[:100]}...[/green]")
                    
                    if hasattr(chunk, 'audio_chunk') and chunk.audio_chunk:
                        audio_data = chunk.audio_chunk.audio_data
                        audio_samples = len(audio_data)//2
                        logger.info(f"   üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫ {chunk_count}: {audio_samples} —Å—ç–º–ø–ª–æ–≤")
                        self.console.print(f"[green]üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω: {audio_samples} —Å—ç–º–ø–ª–æ–≤[/green]")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –ø–ª–µ–µ—Ä!
                        try:
                            import numpy as np
                            audio_array = np.frombuffer(audio_data, dtype=np.int16)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                            queue_before = self.audio_player.audio_queue.qsize()
                            logger.info(f"   üìä –û—á–µ—Ä–µ–¥—å –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {queue_before}")
                            
                            # –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞!
                            self.audio_player.add_chunk(audio_array)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                            queue_after = self.audio_player.audio_queue.qsize()
                            logger.info(f"   üìä –û—á–µ—Ä–µ–¥—å –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {queue_after}")
                            
                            self.console.print(f"[green]‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–µ—Ä[/green]")
                        except Exception as e:
                            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}[/red]")
                    
                    if hasattr(chunk, 'error_message') and chunk.error_message:
                        self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {chunk.error_message}[/red]")
                    
                    if hasattr(chunk, 'end_message') and chunk.end_message:
                        self.console.print(f"[green]‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {chunk.end_message}[/green]")
                        break
                        
            except Exception as stream_error:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ async for: {stream_error}[/red]")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _consume_stream: {e}")
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ _consume_stream: {e}[/red]")
        finally:
            # –ö–†–ò–¢–ò–ß–ù–û: –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ SLEEPING –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            final_time = time.time()
            logger.info(f"   üèÅ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {final_time:.3f}")
            
            # üö® –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –±—ã–ª–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∞—É–¥–∏–æ
            if hasattr(self, 'input_handler') and self.input_handler:
                if self.input_handler.get_interrupt_status():
                    logger.warning(f"   üö® –í finally: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞—é –∞—É–¥–∏–æ")
                    self.console.print("[bold red]üö® –í finally: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞—é –∞—É–¥–∏–æ![/bold red]")
                    
                    try:
                        if hasattr(self.audio_player, 'clear_all_audio_data'):
                            self.audio_player.clear_all_audio_data()
                            logger.info(f"   üö® –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã –≤ finally –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                        elif hasattr(self.audio_player, 'force_stop'):
                            self.audio_player.force_stop()
                            logger.info(f"   üö® –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ finally –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                    except Exception as e:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ –≤ finally: {e}")
                    
                    # –ü—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ
                    logger.info(f"   üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ")
                    self.console.print("[bold red]üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ![/bold red]")
                    
                    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                    self.set_state(AppState.SLEEPING)
                    logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {self.state.name}")
                    self.console.print(f"[blue]‚úÖ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/blue]")
                    self.console.print(f"[green]üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ—Ä–≤–∞–Ω, –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è[/green]")
                    return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ finally
            
            # –î–û–ñ–ò–î–ê–ï–ú–°–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –ê–£–î–ò–û –ü–ï–†–ï–î –ü–ï–†–ï–•–û–î–û–ú –í SLEEPING
            try:
                if hasattr(self.audio_player, 'wait_for_queue_empty'):
                    logger.info(f"   üéµ –û–∂–∏–¥–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ...")
                    self.console.print("[blue]üéµ –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ...[/blue]")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
                    import threading
                    wait_thread = threading.Thread(target=self._wait_for_audio_completion, daemon=True)
                    wait_thread.start()
                    
                    # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                    await asyncio.sleep(0.1)
                    
                    logger.info(f"   üéµ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ")
                    self.console.print("[blue]‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ[/blue]")
                    
                else:
                    logger.warning(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ wait_for_queue_empty –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    self.console.print("[yellow]‚ö†Ô∏è –ù–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ[/yellow]")
                    
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}[/red]")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∞—É–¥–∏–æ
            self.set_state(AppState.SLEEPING)
            logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}")
            self.console.print(f"[blue]‚úÖ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/blue]")
            self.console.print(f"[green]üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É, –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è[/green]")
    
    def _wait_for_audio_completion(self):
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info(f"   üéµ –§–æ–Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç–æ")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ wait_for_queue_empty
            if hasattr(self.audio_player, 'wait_for_queue_empty'):
                # –ë–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ
                while True:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 100ms
                    import time
                    time.sleep(0.1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ª–∏ –∞—É–¥–∏–æ
                    if self.audio_player.wait_for_queue_empty():
                        logger.info(f"   üéµ –ê—É–¥–∏–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                        self.console.print("[green]üéµ –ê—É–¥–∏–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/green]")
                        break
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                    if not self.audio_player.is_playing:
                        logger.info(f"   üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                        self.console.print("[yellow]üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ[/yellow]")
                        break
                        
            else:
                logger.warning(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ wait_for_queue_empty –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
    
    def _force_stop_grpc_stream(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç gRPC —Å—Ç—Ä–∏–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info(f"   üö® _force_stop_grpc_stream() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        
        try:
            # 1Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if hasattr(self, 'grpc_client') and self.grpc_client:
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—é gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if hasattr(self.grpc_client, 'close_connection'):
                    self.grpc_client.close_connection()
                    logger.info(f"   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                elif hasattr(self.grpc_client, 'channel'):
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
                    try:
                        self.grpc_client.channel.close()
                        logger.info(f"   ‚úÖ gRPC –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è gRPC –∫–∞–Ω–∞–ª–∞: {e}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                if hasattr(self.grpc_client, 'reset_state'):
                    self.grpc_client.reset_state()
                    logger.info(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ")
                
            # 2Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
            if hasattr(self, 'audio_player') and self.audio_player:
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞—é –≤—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã...")
                
                # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                if hasattr(self.audio_player, 'audio_queue'):
                    queue_size = self.audio_player.audio_queue.qsize()
                    logger.info(f"   üìä –û—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å: {queue_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                    while not self.audio_player.audio_queue.empty():
                        try:
                            self.audio_player.audio_queue.get_nowait()
                        except:
                            break
                    
                    logger.info(f"   ‚úÖ –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–∞")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if hasattr(self.audio_player, 'force_stop'):
                    self.audio_player.force_stop()
                    logger.info(f"   ‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                elif hasattr(self.audio_player, 'stop'):
                    self.audio_player.stop()
                    logger.info(f"   ‚úÖ –ê—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
                if hasattr(self.audio_player, 'clear_all_audio_data'):
                    self.audio_player.clear_all_audio_data()
                    logger.info(f"   ‚úÖ –í—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            # 3Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
            import threading
            current_thread = threading.current_thread()
            all_threads = threading.enumerate()
            
            logger.info(f"   üö® –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {len(all_threads)}")
            
            for thread in all_threads:
                if (thread != current_thread and 
                    thread != threading.main_thread() and 
                    thread.is_alive() and
                    'grpc' in thread.name.lower()):
                    
                    logger.info(f"   üö® –ü—Ä–µ—Ä—ã–≤–∞—é gRPC –ø–æ—Ç–æ–∫: {thread.name}")
                    try:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
                        import ctypes
                        thread_id = thread.ident
                        if thread_id:
                            res = ctypes.pythonapi.PyThreadState_SetAsyncExc(
                                ctypes.c_long(thread_id), 
                                ctypes.py_object(SystemExit)
                            )
                            if res > 1:
                                ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, 0)
                                logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ—Ç–æ–∫: {thread.name}")
                            else:
                                logger.info(f"   ‚úÖ –ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω: {thread.name}")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ {thread.name}: {e}")
            
            logger.info(f"   ‚úÖ _force_stop_grpc_stream –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_stop_grpc_stream: {e}")
    
    async def _wait_for_task_cancellation(self, task):
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
        try:
            if not task.done():
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await asyncio.wait_for(task, timeout=0.1)
        except asyncio.TimeoutError:
            logger.warning(f"   ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏")
        except asyncio.CancelledError:
            logger.info(f"   ‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã: {e}")
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.streaming_task and not self.streaming_task.done():
            self.streaming_task.cancel()
        if self.active_call and not self.active_call.done():
            self.active_call.cancel()

    def _capture_screen(self):
        """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        self.console.print("[bold blue]üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é —ç–∫—Ä–∞–Ω –≤ JPEG...[/bold blue]")
        self.current_screenshot = self.screen_capture.capture_screen(quality=80)
        
        if self.current_screenshot:
            self.console.print(f"[bold green]‚úÖ JPEG —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω: {len(self.current_screenshot)} —Å–∏–º–≤–æ–ª–æ–≤ Base64[/bold green]")
        else:
            self.console.print("[bold yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç[/bold yellow]")
    
    def force_stop_everything(self):
        """üö® –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –í–°–ï –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞!"""
        logger.info(f"üö® force_stop_everything() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        self.console.print("[bold red]üö® –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–ì–û![/bold red]")
        
        start_time = time.time()
        
        try:
            # 1Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            audio_start = time.time()
            self._force_stop_audio_playback()
            audio_time = (time.time() - audio_start) * 1000
            logger.info(f"   ‚úÖ _force_stop_audio_playback: {audio_time:.1f}ms")
            
            # 2Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gRPC —Å—Ç—Ä–∏–º
            grpc_start = time.time()
            self._force_stop_grpc_stream()
            grpc_time = (time.time() - grpc_start) * 1000
            logger.info(f"   ‚úÖ _force_stop_grpc_stream: {grpc_time:.1f}ms")
            
            # 3Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            tasks_start = time.time()
            self._force_cancel_all_tasks()
            tasks_time = (time.time() - tasks_start) * 1000
            logger.info(f"   ‚úÖ _force_cancel_all_tasks: {tasks_time:.1f}ms")
            
            # 4Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
            buffer_start = time.time()
            self._force_clear_all_buffers()
            buffer_time = (time.time() - buffer_start) * 1000
            logger.info(f"   ‚úÖ _force_clear_all_buffers: {buffer_time:.1f}ms")
            
            # 5Ô∏è‚É£ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            server_start = time.time()
            self._force_interrupt_server()
            server_time = (time.time() - server_start) * 1000
            logger.info(f"   ‚úÖ _force_interrupt_server: {server_time:.1f}ms")
            
            # –û–±—â–µ–µ –≤—Ä–µ–º—è
            total_time = (time.time() - start_time) * 1000
            logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è force_stop_everything: {total_time:.1f}ms")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_queue_size = self.audio_player.audio_queue.qsize()
            logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: queue_size={final_queue_size}")
            
            if final_queue_size == 0:
                logger.info("   üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–ê!")
                self.console.print("[bold green]‚úÖ –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û![/bold green]")
            else:
                logger.warning(f"   ‚ö†Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ù–ï–ü–û–õ–ù–ê–Ø - –æ—á–µ—Ä–µ–¥—å: {final_queue_size}")
                self.console.print(f"[yellow]‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è - –æ—á–µ—Ä–µ–¥—å: {final_queue_size}[/yellow]")
            
            return True
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ force_stop_everything: {e}")
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}[/red]")
            return False
    
    def _force_stop_audio_playback(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ"""
        logger.info(f"   üö® _force_stop_audio_playback() –≤—ã–∑–≤–∞–Ω")
        
        try:
            if hasattr(self, 'audio_player') and self.audio_player:
                # 1Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if hasattr(self.audio_player, 'force_stop_playback'):
                    self.audio_player.force_stop_playback()
                    logger.info("   ‚úÖ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                elif hasattr(self.audio_player, 'force_stop'):
                    self.audio_player.force_stop()
                    logger.info("   ‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # 2Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã
                if hasattr(self.audio_player, 'clear_all_audio_data'):
                    self.audio_player.clear_all_audio_data()
                    logger.info("   ‚úÖ –í—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
                
                # 3Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ
                if hasattr(self.audio_player, 'audio_queue'):
                    queue_size = self.audio_player.audio_queue.qsize()
                    logger.info(f"   üìä –û—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ: {queue_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                    while not self.audio_player.audio_queue.empty():
                        try:
                            self.audio_player.audio_queue.get_nowait()
                        except:
                            break
                    
                    logger.info("   ‚úÖ –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–∞")
                
                # 4Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –∞—É–¥–∏–æ
                if hasattr(self.audio_player, 'stop_all_audio_threads'):
                    self.audio_player.stop_all_audio_threads()
                    logger.info("   ‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                
                logger.info("   ‚úÖ _force_stop_audio_playback –∑–∞–≤–µ—Ä—à–µ–Ω")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_stop_audio_playback: {e}")
    
    def _force_cancel_all_tasks(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ asyncio –∑–∞–¥–∞—á–∏"""
        logger.info(f"   üö® _force_cancel_all_tasks() –≤—ã–∑–≤–∞–Ω")
        
        try:
            # 1Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º streaming_task
            if self.streaming_task and not self.streaming_task.done():
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è—é streaming_task: {self.streaming_task}")
                self.streaming_task.cancel()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                        wait_task = loop.create_task(self._wait_for_task_cancellation(self.streaming_task))
                        # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É
                        import threading
                        def wait_in_thread():
                            try:
                                import asyncio
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(asyncio.sleep(0.1))
                            except:
                                pass
                        
                        wait_thread = threading.Thread(target=wait_in_thread, daemon=True)
                        wait_thread.start()
                        wait_thread.join(timeout=0.2)
                        
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã streaming_task: {e}")
            
            # 2Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º active_call
            if self.active_call and not self.active_call.done():
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è—é active_call: {self.active_call}")
                self.active_call.cancel()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                        wait_task = loop.create_task(self._wait_for_task_cancellation(self.active_call))
                        # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É
                        import threading
                        def wait_in_thread():
                            try:
                                import asyncio
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(asyncio.sleep(0.1))
                            except:
                                pass
                        
                        wait_thread = threading.Thread(target=wait_in_thread, daemon=True)
                        wait_thread.start()
                        wait_thread.join(timeout=0.2)
                        
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã active_call: {e}")
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏
            self.streaming_task = None
            self.active_call = None
            logger.info("   ‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")
            
            logger.info("   ‚úÖ _force_cancel_all_tasks –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_cancel_all_tasks: {e}")
    
    def _force_clear_all_buffers(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –±—É—Ñ–µ—Ä—ã"""
        logger.info(f"   üö® _force_clear_all_buffers() –≤—ã–∑–≤–∞–Ω")
        
        try:
            # 1Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã
            if hasattr(self, 'audio_player') and self.audio_player:
                if hasattr(self.audio_player, 'clear_all_audio_data'):
                    self.audio_player.clear_all_audio_data()
                    logger.info("   ‚úÖ –í—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
                
                if hasattr(self.audio_player, 'clear_audio_buffers'):
                    self.audio_player.clear_audio_buffers()
                    logger.info("   ‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            # 2Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤—Å–µ gRPC –±—É—Ñ–µ—Ä—ã
            if hasattr(self, 'grpc_client') and self.grpc_client:
                if hasattr(self.grpc_client, 'clear_buffers'):
                    self.grpc_client.clear_buffers()
                    logger.info("   ‚úÖ gRPC –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
            import gc
            gc.collect()
            logger.info("   ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            logger.info("   ‚úÖ _force_clear_all_buffers –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_clear_all_buffers: {e}")
    
    def _force_interrupt_server(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        logger.info(f"   üö® _force_interrupt_server() –≤—ã–∑–≤–∞–Ω")
        
        try:
            if hasattr(self, 'grpc_client') and self.grpc_client:
                # 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                if hasattr(self.grpc_client, 'force_interrupt_server'):
                    self.grpc_client.force_interrupt_server()
                    logger.info("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                
                # 2Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if hasattr(self.grpc_client, 'close_connection'):
                    self.grpc_client.close_connection()
                    logger.info("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                
                # 3Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                if hasattr(self.grpc_client, 'reset_state'):
                    self.grpc_client.reset_state()
                    logger.info("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ")
                
                logger.info("   ‚úÖ _force_interrupt_server –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                logger.warning("   ‚ö†Ô∏è gRPC –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_interrupt_server: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å push-to-talk –ª–æ–≥–∏–∫–æ–π, –∑–∞—Ö–≤–∞—Ç–æ–º —ç–∫—Ä–∞–Ω–∞ –∏ Hardware ID"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.print("[bold blue]üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...[/bold blue]")
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º STT (–¥–æ gRPC)
    console.print("[blue]üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STT...[/blue]")
    stt_recognizer = StreamRecognizer()
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
    console.print("[blue]üì∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞...[/blue]")
    screen_capture = ScreenCapture()
    
    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
    console.print("[blue]üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞...[/blue]")
    try:
        audio_player = AudioPlayer(sample_rate=48000)
        console.print("[bold green]‚úÖ –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold green]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞: {e}[/bold red]")
        console.print("[yellow]‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–≤—É–∫–∞[/yellow]")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
        class AudioPlayerStub:
            def __init__(self):
                self.is_playing = False
                self.audio_error = True
                self.audio_error_message = str(e)
            
            def start_playback(self):
                console.print("[yellow]üîá –ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ[/yellow]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞: {e}[/bold red]")
        console.print("[yellow]‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–≤—É–∫–∞[/yellow]")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
        class AudioPlayerStub:
            def __init__(self):
                self.is_playing = False
                self.audio_error = True
                self.audio_error_message = str(e)
            
            def start_playback(self):
                console.print("[yellow]üîá –ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ[/yellow]")
            
            def stop_playback(self):
                pass
            
            def interrupt(self):
                pass
            
            def add_audio_chunk(self, audio_chunk):
                console.print(f"[dim]üîá –ê—É–¥–∏–æ —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω (–∑–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω): {len(audio_chunk)} —Å—ç–º–ø–ª–æ–≤[/dim]")
            
            def wait_for_queue_empty(self):
                pass
            
            def cleanup(self):
                pass
            
            def get_audio_status(self):
                return {'is_playing': False, 'has_error': True, 'error_message': str(e)}
        
        audio_player = AudioPlayerStub()
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gRPC –∫–ª–∏–µ–Ω—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–º)
    console.print("[blue]üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–ª–∏–µ–Ω—Ç–∞...[/blue]")
    grpc_client = GrpcClient()
    
    # 5. –ü–æ–ª—É—á–∞–µ–º Hardware ID (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    console.print("[blue]üÜî –ü–æ–ª—É—á–µ–Ω–∏–µ Hardware ID...[/blue]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
    import sys
    force_regenerate = "--force-regenerate" in sys.argv
    clear_cache = "--clear-cache" in sys.argv
    
    if clear_cache:
        from utils.hardware_id import clear_hardware_id_cache
        clear_hardware_id_cache()
        console.print("[yellow]üóëÔ∏è –ö—ç—à Hardware ID –æ—á–∏—â–µ–Ω[/yellow]")
    
    hardware_id = get_hardware_id(force_regenerate=force_regenerate)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    hardware_info = get_hardware_info()
    
    console.print(f"[bold green]‚úÖ Hardware ID –ø–æ–ª—É—á–µ–Ω: {hardware_id[:16]}...[/bold green]")
    console.print(f"[blue]üì± UUID: {hardware_info['hardware_uuid'][:16]}...[/blue]")
    console.print(f"[blue]üî¢ Serial: {hardware_info['serial_number']}[/blue]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
    from utils.hardware_id import get_cache_info
    cache_info = get_cache_info()
    if cache_info['exists']:
        console.print(f"[green]üíæ Hardware ID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞[/green]")
    else:
        console.print(f"[yellow]üîÑ Hardware ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–Ω–æ–≤–æ[/yellow]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫—ç—à–µ–º
    if "--help" in sys.argv:
        console.print("\n[yellow]üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º Hardware ID:[/yellow]")
        console.print("[yellow]  ‚Ä¢ --clear-cache      - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à[/yellow]")
        console.print("[yellow]  ‚Ä¢ --force-regenerate - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å ID[/yellow]")
        console.print("[yellow]  ‚Ä¢ --help            - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É[/yellow]")
        console.print("[yellow]  ‚Ä¢ –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤    - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
    
    # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    event_queue = asyncio.Queue()
    loop = asyncio.get_running_loop()
    input_handler = InputHandler(loop, event_queue)
    
    # –ö–†–ò–¢–ò–ß–ù–û: –∂–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ InputHandler
    console.print("[blue]‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InputHandler...[/blue]")
    await asyncio.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    console.print("[blue]‚úÖ InputHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/blue]")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ
    screen_info = screen_capture.get_screen_info()
    console.print(f"[bold blue]üì± –≠–∫—Ä–∞–Ω: {screen_info.get('width', 0)}x{screen_info.get('height', 0)} –ø–∏–∫—Å–µ–ª–µ–π[/bold blue]")
    
    # –°–æ–∑–¥–∞–µ–º StateManager
    state_manager = StateManager(console, audio_player, stt_recognizer, screen_capture, grpc_client, hardware_id, input_handler)
    state_manager.current_screen_info = screen_info
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º hardware_id –≤ grpc_client –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    grpc_client.hardware_id = hardware_id
    console.print(f"[blue]üîß Hardware ID {hardware_id[:16]}... –ø–µ—Ä–µ–¥–∞–Ω –≤ gRPC –∫–ª–∏–µ–Ω—Ç[/blue]")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    console.print("[blue]üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...[/blue]")
    if not await grpc_client.connect():
        console.print("[bold red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold red]")
        return
        
    console.print("[bold green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold green]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.print("[bold green]‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤![/bold green]")
    console.print("[yellow]üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (3 —Å–æ—Å—Ç–æ—è–Ω–∏—è):[/yellow]")
    console.print("[yellow]  ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞[/yellow]")
    console.print("[yellow]  ‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –∑–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]  ‚Ä¢ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]  ‚Ä¢ –¢—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:[/yellow]")
    console.print("[yellow]    - SLEEPING: —Å–ø–∏—Ç, –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]    - LISTENING: —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]    - IN_PROCESS: —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç/–≥–æ–≤–æ—Ä–∏—Ç)[/yellow]")
    console.print("[yellow]  ‚Ä¢ –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è —ç–∫—Ä–∞–Ω[/yellow]")
    console.print("[yellow]  ‚Ä¢ Hardware ID –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π[/yellow]")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    console.print("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...")
    
    try:
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                event = await event_queue.get()
                event_time = time.time()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                logger.info(f"üì° –°–û–ë–´–¢–ò–ï –ü–û–õ–£–ß–ï–ù–û: {event} –≤ {event_time:.3f}")
                console.print(f"[dim]üì° –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {event}[/dim]")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                current_state = state_manager.get_state()
                logger.info(f"   üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                start_time = time.time()
                logger.info(f"   üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ –°–û–ë–´–¢–ò–ï: {event}")
                console.print(f"[blue]üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name}, —Å–æ–±—ã—Ç–∏–µ: {event}[/blue]")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ StateManager
                await state_manager.handle_event(event)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                end_time = time.time()
                processing_time = (end_time - start_time) * 1000
                logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {processing_time:.1f}ms")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                new_state = state_manager.get_state()
                logger.info(f"   üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if current_state != new_state:
                    logger.info(f"   üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø: {current_state.name} ‚Üí {new_state.name}")
                    console.print(f"[green]‚úÖ –°–û–ë–´–¢–ò–ï {event} –û–ë–†–ê–ë–û–¢–ê–ù–û! –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.name}[/green]")
                else:
                    logger.info(f"   üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {current_state.name}")
                    console.print(f"[green]‚úÖ –°–û–ë–´–¢–ò–ï {event} –û–ë–†–ê–ë–û–¢–ê–ù–û! –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.name}[/green]")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ
                audio_status = audio_player.get_audio_status()
                if audio_status.get('is_playing', False):
                    console.print("üîä –ê—É–¥–∏–æ —Å—Ç–∞—Ç—É—Å: –í–û–°–ü–†–û–ò–ó–í–û–î–ò–¢–°–Ø")
                else:
                    console.print("üîá –ê—É–¥–∏–æ —Å—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–û")
                        
            except asyncio.CancelledError:
                logger.info("   üö® –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                console.print(f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}[/bold red]")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –≤ SLEEPING
                state_manager.set_state(AppState.SLEEPING)
                console.print("[blue]üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ SLEEPING[/blue]")
                
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
    finally:
        state_manager.cleanup()
        if audio_player.is_playing:
            audio_player.stop_playback()
        logger.info("–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")

