import asyncio
import websockets
import json
import numpy as np
import base64
import logging
from rich.console import Console

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AudioPlayer –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from audio_player import AudioPlayer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console = Console()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    uri = "ws://localhost:8000/ws"
    
    # SAMPLE_RATE –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º
    # –í –∏–¥–µ–∞–ª–µ, —Å–µ—Ä–≤–µ—Ä –º–æ–≥ –±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–≤–æ—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    audio_player = AudioPlayer(sample_rate=48000)

    try:
        async with websockets.connect(uri) as websocket:
            console.print("[bold green]‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É.[/bold green]")
            
            while True:
                prompt = console.input("[bold cyan]üé§ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç (–∏–ª–∏ 'quit'): [/bold cyan]")
                if prompt.lower() == 'quit':
                    break

                console.print(f"[bold yellow]üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è: {prompt}[/bold yellow]")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
                audio_player.start_playback()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                await websocket.send(prompt)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                while True:
                    response_str = await websocket.recv()
                    response = json.loads(response_str)
                    
                    msg_type = response.get("type")
                    
                    if msg_type == "text":
                        console.print(f"[green]üìÑ –¢–µ–∫—Å—Ç: {response['data']}[/green]")
                    
                    elif msg_type == "audio":
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                        audio_bytes = base64.b64decode(response['data'])
                        dtype = response['dtype']
                        shape = tuple(response['shape'])
                        
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NumPy –º–∞—Å—Å–∏–≤
                        audio_chunk = np.frombuffer(audio_bytes, dtype=dtype).reshape(shape)
                        audio_player.add_chunk(audio_chunk)
                    
                    elif msg_type == "end":
                        console.print("[bold green]‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω![/bold green]")
                        break
                        
                    elif msg_type == "error":
                        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response['data']}[/bold red]")
                        break

                # –ñ–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ –∞—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ
                audio_player.wait_for_queue_empty()
                audio_player.stop_playback()

    except websockets.exceptions.ConnectionClosedError:
        console.print("[bold red]‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ.[/bold red]")
    except ConnectionRefusedError:
        console.print("[bold red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.[/bold red]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
    finally:
        if audio_player.is_playing:
            audio_player.stop_playback()
        logger.info("–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
