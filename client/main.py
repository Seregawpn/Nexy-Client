import asyncio
import logging
import time
from rich.console import Console
from enum import Enum
import sys
from pathlib import Path

import os
import yaml
import fcntl
import atexit
import subprocess
import json
import signal

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from audio_player import AudioPlayer
from unified_audio_system import get_global_unified_audio_system
from audio_device_manager import initialize_global_audio_device_manager
from stt_recognizer import StreamRecognizer
from input_handler import InputHandler


 
from grpc_client import GrpcClient
from screen_capture import ScreenCapture                                                                              
from permissions import ensure_permissions
from utils.hardware_id import get_hardware_id, get_hardware_info
TrayController = None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º helper-–ø—Ä–æ—Ü–µ—Å—Å –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ UI –≤ —ç—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ

def _get_support_dir() -> Path:
    return Path.home() / "Library" / "Application Support" / "Nexy"

def _get_status_file_path() -> Path:
    support_dir = _get_support_dir()
    support_dir.mkdir(parents=True, exist_ok=True)
    return support_dir / "tray_status.json"

def _run_tray_helper_if_requested():
    """–ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ helper (`--tray-helper`), –ø–æ–¥–Ω–∏–º–∞–µ–º rumps UI –∏ –≤—ã—Ö–æ–¥–∏–º."""
    if "--tray-helper" not in sys.argv:
        return
    try:
        import rumps
    except Exception as e:
        print(f"Tray helper failed to import rumps: {e}")
        sys.exit(1)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    status_file = None
    main_pid = None
    for i, arg in enumerate(sys.argv):
        if arg == "--status-file" and i + 1 < len(sys.argv):
            status_file = sys.argv[i + 1]
        if arg == "--pid" and i + 1 < len(sys.argv):
            try:
                main_pid = int(sys.argv[i + 1])
            except Exception:
                main_pid = None
    if not status_file:
        status_file = str(_get_status_file_path())

    STATUS_EMOJI = {"SLEEPING": "‚ö™Ô∏è", "LISTENING": "üü¢", "IN_PROCESS": "üîµ"}

    class _TrayApp(rumps.App):
        def __init__(self):
            super().__init__("Nexy")
            self._current = "SLEEPING"
            self.title = f"{STATUS_EMOJI.get(self._current, '‚ö™Ô∏è')} Nexy"
            self.quit_button = None
            self.menu = [rumps.MenuItem("Quit Nexy", callback=self._on_quit)]
            self._timer = rumps.Timer(self._tick, 0.5)
            self._timer.start()

        def _tick(self, _):
            # 1) –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º—Å—è
            if main_pid:
                try:
                    os.kill(main_pid, 0)
                except Exception:
                    rumps.quit_application()
                    return
            # 2) —á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open(status_file, "r") as f:
                    data = json.load(f)
                st = data.get("state")
                if st and st != self._current:
                    self._current = st
                    self.title = f"{STATUS_EMOJI.get(self._current, '‚ö™Ô∏è')} Nexy"
            except Exception:
                pass

        def _on_quit(self, _):
            # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
            if main_pid:
                try:
                    os.kill(main_pid, signal.SIGTERM)
                except Exception:
                    pass
            rumps.quit_application()

    _TrayApp().run()
    sys.exit(0)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console = Console()

SINGLE_INSTANCE_LOCK_FD = None
LOCK_FILE_PATH = None

def acquire_single_instance_lock():
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∏–Ω–∞—á–µ False.
    """
    global SINGLE_INSTANCE_LOCK_FD, LOCK_FILE_PATH
    try:
        support_dir = Path.home() / "Library" / "Application Support" / "Nexy"
        support_dir.mkdir(parents=True, exist_ok=True)
        LOCK_FILE_PATH = support_dir / "instance.lock"
        lock_file = open(LOCK_FILE_PATH, "w")
        try:
            fcntl.flock(lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
        except BlockingIOError:
            try:
                lock_file.close()
            except Exception:
                pass
            return False
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä, —á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∂–∏–ª–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        SINGLE_INSTANCE_LOCK_FD = lock_file
        try:
            SINGLE_INSTANCE_LOCK_FD.truncate(0)
            SINGLE_INSTANCE_LOCK_FD.write(str(os.getpid()))
            SINGLE_INSTANCE_LOCK_FD.flush()
            os.fsync(SINGLE_INSTANCE_LOCK_FD.fileno())
        except Exception:
            pass
        return True
    except Exception:
        # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –Ω–µ –º–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫—É, –Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        return True

@atexit.register
def _release_single_instance_lock():
    global SINGLE_INSTANCE_LOCK_FD
    try:
        if SINGLE_INSTANCE_LOCK_FD:
            try:
                fcntl.flock(SINGLE_INSTANCE_LOCK_FD.fileno(), fcntl.LOCK_UN)
            except Exception:
                pass
            try:
                SINGLE_INSTANCE_LOCK_FD.close()
            except Exception:
                pass
    except Exception:
        pass
    
    # –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        from unified_audio_system import stop_global_unified_audio_system
        from realtime_device_monitor import stop_global_realtime_monitor
        stop_global_unified_audio_system()
        stop_global_realtime_monitor()
        logger.info("üßπ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

class AppState(Enum):
    LISTENING = 1     # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã (–º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω)
    IN_PROCESS = 2    # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç)
    SLEEPING = 3      # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç, –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥—ã (–º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)

class StateManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ.
    """
    
    def __init__(self, console, audio_player, stt_recognizer, screen_capture, grpc_client, hardware_id, input_handler=None, tray_controller=None):
        self.console = console
        self.audio_player = audio_player
        self.stt_recognizer = stt_recognizer
        self.screen_capture = screen_capture
        self.grpc_client = grpc_client
        self.hardware_id = hardware_id
        self.input_handler = input_handler  # –°—Å—ã–ª–∫–∞ –Ω–∞ InputHandler –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.tray_controller = tray_controller
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.state = AppState.SLEEPING
        self.active_call = None
        self.streaming_task = None
        self.current_screenshot = None
        self.current_screen_info = None
        
        # –§–ª–∞–≥ –¥–ª—è fade-in –ø–µ—Ä–≤–æ–≥–æ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞
        self._first_tts_chunk = True
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.interrupt_start_time = time.time()
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        self._last_command_time = 0
        self._command_debounce = 0.5  # 500ms –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        
        # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        import threading
        self._microphone_state = {
            'is_recording': False,
            'last_start_time': 0,
            'last_stop_time': 0,
            'state_lock': threading.Lock()
        }
    
    def _write_tray_status_file(self, state_name: str):
        try:
            path = _get_status_file_path()
            with open(path, "w") as f:
                json.dump({"state": state_name, "ts": time.time()}, f)
        except Exception:
            pass
        
    def get_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.state
    
    def get_microphone_state(self) -> dict:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        with self._microphone_state['state_lock']:
            return {
                'is_recording': self._microphone_state['is_recording'],
                'last_start_time': self._microphone_state['last_start_time'],
                'last_stop_time': self._microphone_state['last_stop_time']
            }
    
    def set_microphone_recording(self, is_recording: bool):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏"""
        with self._microphone_state['state_lock']:
            current_time = time.time()
            self._microphone_state['is_recording'] = is_recording
            if is_recording:
                self._microphone_state['last_start_time'] = current_time
            else:
                self._microphone_state['last_stop_time'] = current_time
            
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ - STT recognizer —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ activate_microphone/deactivate_microphone
    
    def activate_microphone(self) -> bool:
        """–ü–†–û–°–¢–û–ô –º–µ—Ç–æ–¥: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        if not self.can_start_recording():
            current_state = self.get_microphone_state()
            logger.warning(f"   ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={self.state.name}, –º–∏–∫—Ä–æ—Ñ–æ–Ω={current_state['is_recording']}")
            return False
        
        self.set_microphone_recording(True)
        logger.info(f"   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {self.state.name}")
        return True
    
    def deactivate_microphone(self) -> bool:
        """–ü–†–û–°–¢–û–ô –º–µ—Ç–æ–¥: –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        self.set_microphone_recording(False)
        logger.info(f"   üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {self.state.name}")
        return True
    
    def _sync_microphone_with_state(self, old_state: AppState, new_state: AppState):
        """–ò–î–ï–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        # –ü—Ä–∞–≤–∏–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if new_state == AppState.SLEEPING:
            # SLEEPING = –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤—Å–µ–≥–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω
            self.set_microphone_recording(False)
            logger.info(f"   üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ SLEEPING")
            
        elif new_state == AppState.IN_PROCESS:
            # IN_PROCESS = –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤—Å–µ–≥–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω
            self.set_microphone_recording(False)
            logger.info(f"   üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ IN_PROCESS")
            
        elif new_state == AppState.LISTENING:
            # LISTENING = –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            # –ù–ï –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ start_recording
            logger.info(f"   üé§ LISTENING: –º–∏–∫—Ä–æ—Ñ–æ–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    def can_start_recording(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        # –ú–∏–∫—Ä–æ—Ñ–æ–Ω –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ SLEEPING (–Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å) –∏–ª–∏ LISTENING (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
        if self.state not in [AppState.SLEEPING, AppState.LISTENING]:
            return False
        
        # –ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω
        if self.is_microphone_recording():
            return False
            
        return True
    
    def is_microphone_recording(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        with self._microphone_state['state_lock']:
            return self._microphone_state['is_recording']
    
    def _check_interrupt_status(self) -> bool:
        """
        –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.
        """
        try:
            if hasattr(self, 'input_handler') and self.input_handler:
                return self.input_handler.get_interrupt_status()
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}")
            return False
    
    def set_state(self, new_state: AppState):
        """–ò–î–ï–ê–õ–¨–ù–´–ô –º–µ—Ç–æ–¥: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        old_state = self.state
        self.state = new_state
        
        # üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ò–ö–†–û–§–û–ù–ê
        self._sync_microphone_with_state(old_state, new_state)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Ç—Ä–µ–µ–º
        try:
            self._write_tray_status_file(new_state.name)
        except Exception:
            pass
        try:
            if self.tray_controller:
                self.tray_controller.update_status(new_state.name)
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º _current –≤ —Ç—Ä–µ–µ
                if hasattr(self.tray_controller, '_current'):
                    self.tray_controller._current = new_state.name
        except Exception:
            pass
        return old_state, new_state
    
    def handle_start_recording(self):
        """–ü–†–û–ë–ï–õ –ó–ê–ñ–ê–¢ - –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω (–ë–ï–ó –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è)"""
        
        # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
        if not self.can_start_recording():
            current_state = self.get_microphone_state()
            logger.warning(f"   ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å: –º–∏–∫—Ä–æ—Ñ–æ–Ω={current_state['is_recording']}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={self.state.name}")
            self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å: –º–∏–∫—Ä–æ—Ñ–æ–Ω={current_state['is_recording']}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={self.state.name}[/yellow]")
            return
        
        if self.state == AppState.SLEEPING:
            # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            logger.info("   üé§ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è SLEEPING")
            self.set_state(AppState.LISTENING)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            if not self.activate_microphone():
                logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω")
                self.set_state(AppState.SLEEPING)
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –î–û –±–∏–ø–∞
            try:
                if hasattr(self.stt_recognizer, 'prepare_for_recording'):
                    self.stt_recognizer.prepare_for_recording()
                    logger.info("   üé§ STT –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ STT: {e}")
            
            # –°–∏–≥–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π beep)
            try:
                if self.audio_player and hasattr(self.audio_player, 'play_beep'):
                    self.audio_player.play_beep()
                    logger.info("   üîä Beep –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è beep: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ä–∞–∑—É - beep –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            try:
                # –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º STT –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                self.stt_recognizer.start_recording_without_activation()
                logger.info("   ‚ö° –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING (–º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∏—Ç—Å—è)
                self.set_state(AppState.SLEEPING)
            
            self.console.print("[green]üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            logger.info("   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è SLEEPING")
            
        elif self.state == AppState.IN_PROCESS:
            # üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–¥–µ—Å—å! –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
            logger.info("   üé§ –ü–µ—Ä–µ—Ö–æ–¥ –≤ LISTENING –∏–∑ IN_PROCESS (–ë–ï–ó –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è)")
            self.console.print("[blue]üé§ –ü–µ—Ä–µ—Ö–æ–¥ –≤ LISTENING - –º–∏–∫—Ä–æ—Ñ–æ–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω[/blue]")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
            self.set_state(AppState.LISTENING)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è LISTENING
            if not self.activate_microphone():
                logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω")
                self.set_state(AppState.SLEEPING)
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            try:
                if hasattr(self.stt_recognizer, 'prepare_for_recording'):
                    self.stt_recognizer.prepare_for_recording()
                    logger.info("   üé§ STT –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ STT: {e}")
            
            # –°–∏–≥–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            try:
                if hasattr(self.audio_player, 'play_beep'):
                    self.audio_player.play_beep()
            except Exception:
                pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
            try:
                # –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º STT –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                self.stt_recognizer.start_recording_without_activation()
                logger.info("   ‚ö° –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                self.set_state(AppState.SLEEPING)
            
            self.console.print("[green]üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            logger.info("   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑ IN_PROCESS")
            
        elif self.state == AppState.LISTENING:
            # –£–∂–µ —Å–ª—É—à–∞–µ–º ‚Üí –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            self.console.print("[blue]üîÑ –£–∂–µ —Å–ª—É—à–∞—é - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏[/blue]")
            logger.info("   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ LISTENING")
            
            # üö® –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if self.is_microphone_recording():
                logger.info("   ‚ÑπÔ∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ")
                self.console.print("[blue]‚ÑπÔ∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ[/blue]")
                return  # –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è LISTENING
            if not self.activate_microphone():
                logger.warning("   ‚ö†Ô∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            try:
                self.stt_recognizer.stop_recording_and_recognize()
                logger.info("   ‚úÖ –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except:
                pass
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (—Å —Å–∏–≥–Ω–∞–ª–æ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)
            try:
                if hasattr(self.audio_player, 'play_beep'):
                    self.audio_player.play_beep()
            except Exception:
                pass
            
            try:
                import threading
                threading.Timer(0.12, self.stt_recognizer.start_recording).start()
            except Exception:
                self.stt_recognizer.start_recording()
            logger.info("   ‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞")
            self.console.print("[green]üé§ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
            self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {self.state.name}, –ø–µ—Ä–µ—Ö–æ–∂—É –≤ LISTENING[/yellow]")
            self.set_state(AppState.LISTENING)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if not self.activate_microphone():
                logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω")
                self.set_state(AppState.SLEEPING)
                return
            
            try:
                if hasattr(self.audio_player, 'play_beep'):
                    self.audio_player.play_beep()
            except Exception:
                pass
            
            try:
                # –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º STT –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                self.stt_recognizer.start_recording_without_activation()
                logger.info("   ‚ö° –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                self.set_state(AppState.SLEEPING)
            
            self.console.print("[green]üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            logger.info("   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    
    def handle_stop_recording(self):
        """–ü–†–û–ë–ï–õ –û–¢–ü–£–©–ï–ù - –≤—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É"""
        
        # üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stop_recording –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        if self.state == AppState.LISTENING:
            # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
            command = self.stt_recognizer.stop_recording_and_recognize()
            logger.info("   ‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω")
            
            if command and command.strip():
                # –ö–û–ú–ê–ù–î–ê –ü–†–ò–ù–Ø–¢–ê ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ IN_PROCESS
                self.console.print(f"[bold green]üìù –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞: {command}[/bold green]")
                self.set_state(AppState.IN_PROCESS)
                self.console.print("[blue]üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ IN_PROCESS - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...[/blue]")
                
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                try:
                    self._capture_screen()
                    logger.info("   ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
                self._process_command(command)
            else:
                # –ö–û–ú–ê–ù–î–ê –ù–ï –ü–†–ò–ù–Ø–¢–ê ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
                self.console.print("[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞[/yellow]")
                self.set_state(AppState.SLEEPING)
                self.console.print("[blue]‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING - –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º[/blue]")
                
        elif self.state == AppState.IN_PROCESS:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING
            self.console.print("[bold yellow]üîá –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ü–†–ï–†–´–í–ê–Æ –∏ –ø–µ—Ä–µ—Ö–æ–∂—É –≤ LISTENING![/bold yellow]")
            
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
            success = self.force_stop_everything()
            if success:
                logger.info("   ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                self.console.print("[bold green]‚úÖ –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û![/bold green]")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ LISTENING –∏ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.set_state(AppState.LISTENING)
            self.stt_recognizer.start_recording()
            self.console.print("[bold green]‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ LISTENING - –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω![/bold green]")
            
        elif self.state == AppState.SLEEPING:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç ‚Üí –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.console.print("[blue]üé§ –ê–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è SLEEPING[/blue]")
            self.set_state(AppState.LISTENING)
            self.stt_recognizer.start_recording()
            self.console.print("[green]üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É[/green]")
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
            self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {self.state.name}, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ SLEEPING[/yellow]")
            self.set_state(AppState.SLEEPING)
    
    def handle_deactivate_microphone(self):
        """–ü–†–û–ë–ï–õ –û–¢–ü–£–©–ï–ù - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING"""
        logger.info("   üîá handle_deactivate_microphone() –≤—ã–∑–≤–∞–Ω")
        
        # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.state != AppState.LISTENING:
            logger.info(f"   ‚ÑπÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è deactivate_microphone: {self.state.name}")
            self.console.print(f"[blue]‚ÑπÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}[/blue]")
            return
        
        if self.state == AppState.LISTENING:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –†–ê–°–ü–û–ó–ù–ê–ï–ú –ö–û–ú–ê–ù–î–£
            command = None
            try:
                if hasattr(self, 'stt_recognizer') and self.stt_recognizer:
                    command = self.stt_recognizer.stop_recording_and_recognize()
                    logger.info("   ‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ SLEEPING
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ SLEEPING
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ï–ï
            if command and command.strip():
                self.console.print(f"[bold green]üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}[/bold green]")
                logger.info(f"   üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ IN_PROCESS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                self.set_state(AppState.IN_PROCESS)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ IN_PROCESS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
                
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                try:
                    self._capture_screen()
                    logger.info("   ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                self._process_command(command)
            else:
                # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.console.print("[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞[/yellow]")
                logger.info("   ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                self.console.print("[blue]üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –≤–æ–∑–≤—Ä–∞—Ç –≤ SLEEPING[/blue]")
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
            
        elif self.state == AppState.IN_PROCESS:
            # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            self.console.print("[blue]‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω[/blue]")
            logger.info("   ‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            
        elif self.state == AppState.SLEEPING:
            # –£–∂–µ —Å–ø–∏–º ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            self.console.print("[blue]‚ÑπÔ∏è –£–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SLEEPING[/blue]")
            logger.info("   ‚ÑπÔ∏è –£–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SLEEPING")
    
    async def handle_interrupt_or_cancel(self):
        """–ü–†–û–ë–ï–õ –ù–ê–ñ–ê–¢ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É (–ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –º–µ—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è)"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.interrupt_start_time = time.time()
        
        logger.info(f"üö® handle_interrupt_or_cancel() –Ω–∞—á–∞—Ç –≤ {self.interrupt_start_time:.3f}")
        
        current_state = self.state
        logger.info(f"   üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name}")
        
        # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        if hasattr(self, '_processing_interrupt') and self._processing_interrupt:
            logger.info("   ‚ÑπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ")
            return
        
        # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å
        if current_state == AppState.SLEEPING:
            logger.info("   ‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç - –ø—Ä–æ–≤–µ—Ä—è—é –∞—É–¥–∏–æ")
            self.console.print("[blue]‚ÑπÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç - –ø—Ä–æ–≤–µ—Ä—è—é –∞—É–¥–∏–æ[/blue]")
            
            # –û–°–¢–ê–í–õ–Ø–ï–ú: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –æ–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
            if (self.audio_player and 
                hasattr(self.audio_player, 'is_playing') and 
                self.audio_player.is_playing):
                
                logger.info("   üéµ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ–Ω–µ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é")
                self.console.print("[bold red]üéµ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–æ–Ω–æ–≤–æ–µ –∞—É–¥–∏–æ![/bold red]")
                self.force_stop_everything()
                return
            else:
                logger.info("   ‚ÑπÔ∏è –ê—É–¥–∏–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è - –Ω–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å")
                self.console.print("[blue]‚ÑπÔ∏è –ê—É–¥–∏–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è[/blue]")
                return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self._processing_interrupt = True
        
        try:
            if current_state == AppState.IN_PROCESS:
                # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Üí –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É!
                logger.info(f"   üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
                self.console.print("[bold red]üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã![/bold red]")
                
                # üö® –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î!
                success = self.force_stop_everything()
                
                if success:
                    logger.info("   ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                    self.console.print("[bold green]‚úÖ –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û![/bold green]")
                else:
                    logger.warning("   ‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
                    self.console.print("[yellow]‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è[/yellow]")
                
                # üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING!
                self.set_state(AppState.SLEEPING)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è IN_PROCESS")
                
                try:
                    # –ß–∏—Å—Ç–∏–º —ç–∫—Ä–∞–Ω/—Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    pass
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}")
                
                # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –í INPUT_HANDLER
                if self.input_handler and hasattr(self.input_handler, 'reset_interrupt_flag'):
                    self.input_handler.reset_interrupt_flag()
                    logger.info(f"   üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler")
                
            elif current_state == AppState.LISTENING:
                # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É—à–∞–µ—Ç ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ SLEEPING
                logger.info(f"   üé§ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
                self.console.print("[bold red]üîá –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥—ã[/bold red]")
            
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                if hasattr(self, 'stt_recognizer') and self.stt_recognizer:
                    command = self.stt_recognizer.stop_recording_and_recognize()
                    if command and command.strip():
                        self.console.print(f"[bold green]üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}[/bold green]")
                        logger.info(f"   üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}")
                    else:
                        self.console.print("[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞[/yellow]")
                        logger.info("   ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                else:
                    logger.warning("   ‚ö†Ô∏è STT recognizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    self.console.print("[yellow]‚ö†Ô∏è STT recognizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                logger.info("   üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING - STT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø –í INPUT_HANDLER
                if self.input_handler and hasattr(self.input_handler, 'reset_interrupt_flag'):
                    self.input_handler.reset_interrupt_flag()
                    logger.info(f"   üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
                    
            elif current_state == AppState.SLEEPING:
                # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç ‚Üí –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                logger.info(f"   üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
                self.console.print("[blue]üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø–∏—Ç - –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏[/blue]")
                
                # –ß–∏—Å—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã, –Ω–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –≤–∫–ª—é—á–∞–µ–º
                try:
                    success = self.force_stop_everything()
                    if success:
                        self.console.print("[green]‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
                    else:
                        self.console.print("[yellow]‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è[/yellow]")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ SLEEPING: {e}")
                
                # –û—Å—Ç–∞—ë–º—Å—è –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                if self.input_handler and hasattr(self.input_handler, 'reset_interrupt_flag'):
                    self.input_handler.reset_interrupt_flag()
                    logger.info(f"   üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –≤ InputHandler (SLEEPING)")
        
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ handle_interrupt_or_cancel: {e}")
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}[/red]")
        
        finally:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            self._processing_interrupt = False
            logger.info("   üîÑ –§–ª–∞–≥ _processing_interrupt —Å–±—Ä–æ—à–µ–Ω –≤ finally")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            end_time = time.time()
            execution_time = (end_time - self.interrupt_start_time) * 1000
            logger.info(f"   ‚è±Ô∏è handle_interrupt_or_cancel –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.1f}ms")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}")
    
    async def handle_event(self, event):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"""
        start_time = time.time()
        logger.info(f"   üéØ handle_event() –Ω–∞—á–∞—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event} –≤ {start_time:.3f}")
        
        try:
            if event == "start_recording":
                logger.info(f"   üé§ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è start_recording")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º start_recording
                if hasattr(self.input_handler, 'interrupting') and self.input_handler.interrupting:
                    logger.info(f"   ‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é start_recording - –∞–∫—Ç–∏–≤–µ–Ω —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                    return
                self.handle_start_recording()
            elif event == "interrupt_or_cancel":
                logger.info(f"   üîá –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è interrupt_or_cancel")
                await self.handle_interrupt_or_cancel()  # üö® –î–û–ë–ê–í–õ–Ø–ï–ú await!
            elif event == "stop_recording":
                logger.info(f"   ‚èπÔ∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è stop_recording")
                self.handle_stop_recording()
            elif event == "deactivate_microphone":
                logger.info(f"   üîá –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è deactivate_microphone")
                self.handle_deactivate_microphone()
            elif event == "process_command":
                logger.info(f"   ‚öôÔ∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è process_command")
                self.handle_process_command()
            else:
                logger.warning(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
                self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}[/yellow]")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ handle_event –¥–ª—è {event}: {e}")
            self.console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event}: {e}[/bold red]")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –≤ SLEEPING –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.set_state(AppState.SLEEPING)
            self.console.print("[blue]üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ SLEEPING –ø—Ä–∏ –æ—à–∏–±–∫–µ[/blue]")
        
        end_time = time.time()
        processing_time = (end_time - start_time) * 1000
        logger.info(f"   ‚è±Ô∏è handle_event –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.1f}ms")
        logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}")
    
    def _process_command(self, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ gRPC"""
        try:
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            current_time = time.time()
            if current_time - self._last_command_time < self._command_debounce:
                logger.info("   ‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
                self.console.print("[yellow]‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞[/yellow]")
                return
            self._last_command_time = current_time
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            self._cancelled = False
            self.console.print("[blue]üîÑ –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã[/blue]")
            
            # üö® –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!
            if not self.grpc_client.stub or not self.grpc_client.channel:
                self.console.print("[yellow]‚ö†Ô∏è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...[/yellow]")
                logger.info("   üîå –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    if self.grpc_client.connect_sync():
                        self.console.print("[green]‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ![/green]")
                        logger.info("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                    else:
                        self.console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ[/red]")
                        logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                        raise Exception("gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                
                except Exception as e:
                    self.console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}[/bold red]")
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                    raise Exception(f"gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}")
            
            # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º gRPC —Å—Ç—Ä–∏–º
            # üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —Å–∫—Ä–∏–Ω—à–æ—Ç —É–∂–µ Base64 —Å—Ç—Ä–æ–∫–∞
            screenshot_base64 = self.current_screenshot if self.current_screenshot else ""
            if screenshot_base64:
                self.console.print(f"[blue]üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é Base64 —Å–∫—Ä–∏–Ω—à–æ—Ç: {len(screenshot_base64)} —Å–∏–º–≤–æ–ª–æ–≤[/blue]")
            
            stream_generator = self.grpc_client.stream_audio(
                command,
                screenshot_base64,
                self.current_screen_info,
                self.hardware_id
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π
            if self.streaming_task and not self.streaming_task.done():
                self.streaming_task.cancel()
                logger.info("   üîÑ –ü—Ä–µ–¥—ã–¥—É—â–∞—è streaming_task –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞
            self.streaming_task = asyncio.create_task(self._consume_stream(stream_generator))
            
        except Exception as e:
            self.console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}[/bold red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            self.set_state(AppState.SLEEPING)
    
    async def _consume_stream(self, stream_generator):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç gRPC —Å—Ç—Ä–∏–º –≤ —Ñ–æ–Ω–µ"""
        logger.info(f"üö® _consume_stream() –Ω–∞—á–∞—Ç –≤ {time.time():.3f}")
        
        try:
            self.set_state(AppState.IN_PROCESS)
            logger.info(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.state.name}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è fade-in –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞
            self._first_tts_chunk = True
            
            # –ü–æ—Ç—Ä–µ–±–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ –∫–æ–Ω—Ü–∞
            chunk_count = 0
            self.console.print("[bold red]üö® –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò gRPC –°–¢–†–ò–ú–ê![/bold red]")
            logger.info("   üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ gRPC —Å—Ç—Ä–∏–º–∞")
            
            try:
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                last_diagnostic = time.time()
                
                async for chunk in stream_generator:
                    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    current_time = time.time()
                    if current_time - last_diagnostic > 5.0:
                        logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê _consume_stream: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {chunk_count} —á–∞–Ω–∫–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={self.state.name}")
                        last_diagnostic = current_time
                    
                    # üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–ï–†–´–í–ê–ù–ò–ï –ü–ï–†–ï–î –ö–ê–ñ–î–´–ú –ß–ê–ù–ö–û–ú
                    if self._check_interrupt_status():
                        logger.warning(f"   üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–ï–†–´–í–ê–ù–ò–ï! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤")
                        self.console.print("[bold red]üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–ï–†–´–í–ê–ù–ò–ï! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤![/bold red]")
                        
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
                        try:
                            if hasattr(self.audio_player, 'clear_all_audio_data'):
                                self.audio_player.clear_all_audio_data()
                                logger.info(f"   üö® –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                                self.console.print("[green]‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏[/green]")
                            elif hasattr(self.audio_player, 'force_stop'):
                                self.audio_player.force_stop(immediate=True)
                                logger.info(f"   üö® –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                                self.console.print("[green]‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏[/green]")
                            else:
                                logger.warning(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ")
                                self.console.print("[yellow]‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ[/yellow]")
                        except Exception as e:
                            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}")
                            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}[/red]")
                        
                        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
                        logger.info(f"   üö® –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                        self.console.print("[bold red]üö® –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏![/bold red]")
                        break
                    
                    chunk_count += 1
                    logger.info(f"   üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ {chunk_count} –≤ {time.time():.3f}")
                    
                    self.console.print(f"[blue]üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ {chunk_count}...[/blue]")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫!
                    if hasattr(chunk, 'text_chunk') and chunk.text_chunk:
                        self.console.print(f"[green]üìÑ –¢–µ–∫—Å—Ç: {chunk.text_chunk[:100]}...[/green]")
                    
                    if hasattr(chunk, 'audio_chunk') and chunk.audio_chunk:
                        audio_data = chunk.audio_chunk.audio_data
                        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤
                        # audio_data - —ç—Ç–æ bytes, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º –Ω–∞ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Å—ç–º–ø–ª–∞ (2 –±–∞–π—Ç–∞ –¥–ª—è int16)
                        audio_samples = len(audio_data) // 2
                        logger.info(f"   üéµ [CLIENT] –ê—É–¥–∏–æ —á–∞–Ω–∫ {chunk_count}: {audio_samples} —Å—ç–º–ø–ª–æ–≤")
                        self.console.print(f"[green]üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω: {audio_samples} —Å—ç–º–ø–ª–æ–≤[/green]")
                        
                        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ —á–∞–Ω–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                        if audio_samples > 0:
                            logger.info(f"   üéµ [CLIENT] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–µ–ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫ {chunk_count}")
                            # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –ø–ª–µ–µ—Ä!
                            try:
                                import numpy as np
                                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π dtype –∏–∑ protobuf
                                dtype_str = chunk.audio_chunk.dtype
                                if dtype_str == 'int16':
                                    dtype = np.int16
                                elif dtype_str == 'float32':
                                    dtype = np.float32
                                elif dtype_str == 'float64':
                                    dtype = np.float64
                                else:
                                    # Fallback –Ω–∞ int16 –µ—Å–ª–∏ dtype –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
                                    dtype = np.int16
                                    logger.warning(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π dtype '{dtype_str}', –∏—Å–ø–æ–ª—å–∑—É—é int16")
                                
                                audio_array = np.frombuffer(audio_data, dtype=dtype)
                                
                                # –î–µ–ª–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                audio_array = audio_array.copy()

                                # –ö–æ—Ä–æ—Ç–∫–∏–π fade-in –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —â–µ–ª—á–æ–∫ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
                                try:
                                    if getattr(self, '_first_tts_chunk', True):
                                        fade_len = min(512, audio_array.size)
                                        if fade_len > 0:
                                            if audio_array.dtype.kind == 'f':
                                                window = np.linspace(0.0, 1.0, num=fade_len, endpoint=False)
                                                audio_array[:fade_len] *= window
                                            else:
                                                window = np.linspace(0.0, 1.0, num=fade_len, endpoint=False).astype(np.float32)
                                                tmp = audio_array[:fade_len].astype(np.float32)
                                                audio_array[:fade_len] = (tmp * window).astype(np.int16)
                                        self._first_tts_chunk = False
                                except Exception as fade_e:
                                    logger.warning(f"   ‚ö†Ô∏è Fade-in –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {fade_e}")
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                                if self.audio_player and hasattr(self.audio_player, 'audio_queue'):
                                    queue_before = self.audio_player.audio_queue.qsize()
                                    logger.info(f"   üìä [CLIENT] –û—á–µ—Ä–µ–¥—å –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {queue_before}")
                                
                                # –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞!
                                logger.info(f"   üéµ [CLIENT] –í—ã–∑—ã–≤–∞—é audio_player.add_chunk() –¥–ª—è —á–∞–Ω–∫–∞ {chunk_count}")
                                if self.audio_player:
                                    self.audio_player.add_chunk(audio_array)
                                else:
                                    logger.warning("   ‚ö†Ô∏è AudioPlayer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—é –∞—É–¥–∏–æ —á–∞–Ω–∫")
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                                if self.audio_player and hasattr(self.audio_player, 'audio_queue'):
                                    queue_after = self.audio_player.audio_queue.qsize()
                                    logger.info(f"   üìä [CLIENT] –û—á–µ—Ä–µ–¥—å –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {queue_after}")
                                
                                self.console.print(f"[green]‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–µ—Ä[/green]")
                            except Exception as e:
                                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}[/red]")
                        else:
                            logger.debug(f"   üîá [CLIENT] –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫ {chunk_count}")
                            self.console.print(f"[yellow]üîá –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫[/yellow]")
                    
                    if hasattr(chunk, 'error_message') and chunk.error_message:
                        self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {chunk.error_message}[/red]")
                    
                    if hasattr(chunk, 'end_message') and chunk.end_message:
                        self.console.print(f"[green]‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {chunk.end_message}[/green]")
                        break
                        
            except Exception as stream_error:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ async for: {stream_error}[/red]")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _consume_stream: {e}")
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ _consume_stream: {e}[/red]")
        finally:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º streaming_task –≤ None –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if self.streaming_task:
                self.streaming_task = None
                logger.info("   üîÑ streaming_task —Å–±—Ä–æ—à–µ–Ω –≤ None –≤ finally")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ SLEEPING –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            final_time = time.time()
            logger.info(f"   üèÅ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {final_time:.3f}")
            
            # üö® –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –±—ã–ª–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∞—É–¥–∏–æ
            if self._check_interrupt_status():
                logger.warning(f"   üö® –í finally: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞—é –∞—É–¥–∏–æ")
                self.console.print("[bold red]üö® –í finally: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞—é –∞—É–¥–∏–æ![/bold red]")
                
                try:
                    if hasattr(self.audio_player, 'clear_all_audio_data'):
                        self.audio_player.clear_all_audio_data()
                        logger.info(f"   üö® –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã –≤ finally –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                    elif hasattr(self.audio_player, 'force_stop'):
                        self.audio_player.force_stop(immediate=True)
                        logger.info(f"   üö® –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ finally –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ –≤ finally: {e}")
                
                # –ü—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ
                logger.info(f"   üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ")
                self.console.print("[bold red]üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ![/bold red]")
                
                # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING
                self.set_state(AppState.SLEEPING)
                logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {self.state.name}")
                self.console.print(f"[blue]‚úÖ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/blue]")
                self.console.print(f"[green]üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ—Ä–≤–∞–Ω, –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è[/green]")
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ finally
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô –º–µ—Ç–æ–¥
            try:
                if self.audio_player and hasattr(self.audio_player, 'is_playing') and self.audio_player.is_playing:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ú —Å–ø–æ—Å–æ–±–æ–º
                    if self.audio_player.wait_for_queue_empty():
                        logger.info("   üéµ –ê—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING")
                        self.console.print("[green]üéµ –ê—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/green]")
                    else:
                        # –ê—É–¥–∏–æ –µ—â–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING, –∞—É–¥–∏–æ –≤ —Ñ–æ–Ω–µ
                        logger.info("   üéµ –ê—É–¥–∏–æ –≤ —Ñ–æ–Ω–µ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING")
                        self.console.print("[blue]üéµ –ê—É–¥–∏–æ –≤ —Ñ–æ–Ω–µ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/blue]")
                else:
                    logger.info("   ‚ÑπÔ∏è –ê—É–¥–∏–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING")
                    self.console.print("[blue]‚ÑπÔ∏è –ê—É–¥–∏–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/blue]")
                    
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ: {e}")
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ: {e}[/red]")
            
            # üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SLEEPING –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ
            # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ü–û–°–õ–ï —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.set_state(AppState.SLEEPING)
            logger.info(f"   üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.name}")
            self.console.print(f"[blue]‚úÖ _consume_stream –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/blue]")
            self.console.print(f"[green]üåô –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É, –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è[/green]")
    
                      
    
    def _force_stop_grpc_stream(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç gRPC —Å—Ç—Ä–∏–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info(f"   üö® _force_stop_grpc_stream() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        
        try:
            # 1Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if hasattr(self, 'grpc_client') and self.grpc_client:
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—é gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if hasattr(self.grpc_client, 'close_connection'):
                    self.grpc_client.close_connection()
                    logger.info(f"   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                elif hasattr(self.grpc_client, 'channel'):
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
                    try:
                        self.grpc_client.channel.close()
                        logger.info(f"   ‚úÖ gRPC –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è gRPC –∫–∞–Ω–∞–ª–∞: {e}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                if hasattr(self.grpc_client, 'reset_state'):
                    self.grpc_client.reset_state()
                    logger.info(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ")
                
            # 2Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
            if hasattr(self, 'audio_player') and self.audio_player:
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞—é –≤—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã...")
                
                # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                if hasattr(self.audio_player, 'audio_queue'):
                    queue_size = self.audio_player.audio_queue.qsize()
                    logger.info(f"   üìä –û—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å: {queue_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                    while not self.audio_player.audio_queue.empty():
                        try:
                            self.audio_player.audio_queue.get_nowait()
                        except:
                            break
                    
                    logger.info(f"   ‚úÖ –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–∞")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if hasattr(self.audio_player, 'force_stop'):
                    self.audio_player.force_stop(immediate=True)
                    logger.info(f"   ‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                elif hasattr(self.audio_player, 'stop'):
                    self.audio_player.stop()
                    logger.info(f"   ‚úÖ –ê—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
                if hasattr(self.audio_player, 'clear_all_audio_data'):
                    self.audio_player.clear_all_audio_data()
                    logger.info(f"   ‚úÖ –í—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            # 3Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
            import threading
            current_thread = threading.current_thread()
            all_threads = threading.enumerate()
            
            logger.info(f"   üö® –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {len(all_threads)}")
            
            for thread in all_threads:
                if (thread != current_thread and 
                    thread != threading.main_thread() and 
                    thread.is_alive() and
                    'grpc' in thread.name.lower()):
                    
                    logger.info(f"   üö® –ü—Ä–µ—Ä—ã–≤–∞—é gRPC –ø–æ—Ç–æ–∫: {thread.name}")
                    try:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
                        import ctypes
                        thread_id = thread.ident
                        if thread_id:
                            res = ctypes.pythonapi.PyThreadState_SetAsyncExc(
                                ctypes.c_long(thread_id), 
                                ctypes.py_object(SystemExit)
                            )
                            if res > 1:
                                ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, 0)
                                logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ—Ç–æ–∫: {thread.name}")
                            else:
                                logger.info(f"   ‚úÖ –ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω: {thread.name}")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ {thread.name}: {e}")
            
            logger.info(f"   ‚úÖ _force_stop_grpc_stream –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_stop_grpc_stream: {e}")
    
    async def _wait_for_task_cancellation(self, task):
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
        try:
            if not task.done():
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await asyncio.wait_for(task, timeout=0.1)
        except asyncio.TimeoutError:
            logger.warning(f"   ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏")
        except asyncio.CancelledError:
            logger.info(f"   ‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã: {e}")
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.streaming_task and not self.streaming_task.done():
            self.streaming_task.cancel()
        if self.active_call and not self.active_call.done():
            self.active_call.cancel()

    def _capture_screen(self):
        """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        self.console.print("[bold blue]üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é —ç–∫—Ä–∞–Ω –≤ JPEG Base64...[/bold blue]")
        try:
            if not getattr(self, 'screen_capture', None):
                self.console.print("[bold yellow]‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/bold yellow]")
                self.current_screenshot = None
                return
            self.current_screenshot = self.screen_capture.capture_screen(quality=75, max_size=1024)
            if self.current_screenshot:
                self.console.print(f"[bold green]‚úÖ Base64 —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω: {len(self.current_screenshot)} —Å–∏–º–≤–æ–ª–æ–≤[/bold green]")
            else:
                self.console.print("[bold yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç[/bold yellow]")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
            self.current_screenshot = None
    
    def force_stop_everything(self):
        """üö® –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –í–°–ï –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞!"""
        logger.info(f"üö® force_stop_everything() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        self.console.print("[bold red]üö® –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–ì–û![/bold red]")
        
        try:
            # 1Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if hasattr(self.audio_player, 'force_stop'):
                self.audio_player.force_stop(immediate=True)
                logger.info("   ‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # 2Ô∏è‚É£ –ó–∞–∫—Ä—ã–≤–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if hasattr(self.grpc_client, 'close_connection'):
                self.grpc_client.close_connection()
                logger.info("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã
            if hasattr(self.audio_player, 'clear_all_audio_data'):
                self.audio_player.clear_all_audio_data()
                logger.info("   ‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            # 4Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if self.streaming_task and not self.streaming_task.done():
                self.streaming_task.cancel()
                logger.info("   ‚úÖ Streaming –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ None
                try:
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                        wait_task = loop.create_task(self._wait_for_task_cancellation(self.streaming_task))
                        # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É
                        import threading
                        threading.Timer(0.1, lambda: wait_task.cancel() if not wait_task.done() else None).start()
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã streaming_task: {e}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ None –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.streaming_task = None
                logger.info("   ‚úÖ Streaming –∑–∞–¥–∞—á–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –≤ None")
            
            if self.active_call and not self.active_call.done():
                self.active_call.cancel()
                logger.info("   ‚úÖ Active call –æ—Ç–º–µ–Ω–µ–Ω")
                self.active_call = None
            
            logger.info("   üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–ê!")
            self.console.print("[bold green]‚úÖ –í–°–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û![/bold green]")
            return True
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ force_stop_everything: {e}")
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}[/red]")
            return False
    
    def _force_stop_audio_playback(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ"""
        logger.info(f"   üö® _force_stop_audio_playback() –≤—ã–∑–≤–∞–Ω")
        
        try:
            if hasattr(self, 'audio_player') and self.audio_player:
                # 1Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if hasattr(self.audio_player, 'force_stop'):
                    self.audio_player.force_stop(immediate=True)
                
                # 2Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –æ—á–µ—Ä–µ–¥–∏ –∏ –ø–æ—Ç–æ–∫–∏)
                if hasattr(self.audio_player, 'clear_all_audio_data'):
                    self.audio_player.clear_all_audio_data()
                
                logger.info("   ‚úÖ _force_stop_audio_playback –∑–∞–≤–µ—Ä—à–µ–Ω")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_stop_audio_playback: {e}")
    
    def _force_cancel_all_tasks(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ asyncio –∑–∞–¥–∞—á–∏"""
        logger.info(f"   üö® _force_cancel_all_tasks() –≤—ã–∑–≤–∞–Ω")
        
        try:
            # 1Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º streaming_task
            if self.streaming_task and not self.streaming_task.done():
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è—é streaming_task: {self.streaming_task}")
                self.streaming_task.cancel()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                        wait_task = loop.create_task(self._wait_for_task_cancellation(self.streaming_task))
                        # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É
                        import threading
                        def wait_in_thread():
                            try:
                                import asyncio
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(asyncio.sleep(0.1))
                            except:
                                pass
                        
                        wait_thread = threading.Thread(target=wait_in_thread, daemon=True)
                        wait_thread.start()
                        wait_thread.join(timeout=0.2)
                        
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã streaming_task: {e}")
            
            # 2Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º active_call
            if self.active_call and not self.active_call.done():
                logger.info(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è—é active_call: {self.active_call}")
                self.active_call.cancel()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                        wait_task = loop.create_task(self._wait_for_task_cancellation(self.active_call))
                        # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É
                        import threading
                        def wait_in_thread():
                            try:
                                import asyncio
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(asyncio.sleep(0.1))
                            except:
                                pass
                        
                        wait_thread = threading.Thread(target=wait_in_thread, daemon=True)
                        wait_thread.start()
                        wait_thread.join(timeout=0.2)
                        
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã active_call: {e}")
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏
            self.streaming_task = None
            self.active_call = None
            logger.info("   ‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")
            
            logger.info("   ‚úÖ _force_cancel_all_tasks –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_cancel_all_tasks: {e}")
    
    def _force_clear_all_buffers(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –±—É—Ñ–µ—Ä—ã"""
        logger.info(f"   üö® _force_clear_all_buffers() –≤—ã–∑–≤–∞–Ω")
        
        try:
            # 1Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã
            if hasattr(self, 'audio_player') and self.audio_player:
                if hasattr(self.audio_player, 'clear_all_audio_data'):
                    self.audio_player.clear_all_audio_data()
                    logger.info("   ‚úÖ –í—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
                
                if hasattr(self.audio_player, 'clear_audio_buffers'):
                    self.audio_player.clear_audio_buffers()
                    logger.info("   ‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            # 2Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤—Å–µ gRPC –±—É—Ñ–µ—Ä—ã
            if hasattr(self, 'grpc_client') and self.grpc_client:
                if hasattr(self.grpc_client, 'clear_buffers'):
                    self.grpc_client.clear_buffers()
                    logger.info("   ‚úÖ gRPC –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
            import gc
            gc.collect()
            logger.info("   ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            
            logger.info("   ‚úÖ _force_clear_all_buffers –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_clear_all_buffers: {e}")
    
    def _force_interrupt_server(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        logger.info(f"   üö® _force_interrupt_server() –≤—ã–∑–≤–∞–Ω")
        
        try:
            if hasattr(self, 'grpc_client') and self.grpc_client:
                # 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                if hasattr(self.grpc_client, 'force_interrupt_server'):
                    self.grpc_client.force_interrupt_server()
                    logger.info("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                
                # 2Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if hasattr(self.grpc_client, 'close_connection'):
                    self.grpc_client.close_connection()
                    logger.info("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                
                # 3Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                if hasattr(self.grpc_client, 'reset_state'):
                    self.grpc_client.reset_state()
                    logger.info("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ")
                
                logger.info("   ‚úÖ _force_interrupt_server –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                logger.warning("   ‚ö†Ô∏è gRPC –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ _force_interrupt_server: {e}")

async def check_audio_completion(state_manager, audio_player):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ SLEEPING.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ SLEEPING
        if (state_manager.state == AppState.IN_PROCESS and 
            audio_player and 
            hasattr(audio_player, 'is_playing') and 
            not audio_player.is_playing and
            audio_player.wait_for_queue_empty()):
            
            logger.info("   üéµ –ê—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING")
            state_manager.console.print("[green]üéµ –ê—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ SLEEPING[/green]")
            state_manager.set_state(AppState.SLEEPING)
            return True
        return False
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ check_audio_completion: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å push-to-talk –ª–æ–≥–∏–∫–æ–π, –∑–∞—Ö–≤–∞—Ç–æ–º —ç–∫—Ä–∞–Ω–∞ –∏ Hardware ID"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.print("[bold blue]üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...[/bold blue]")
    
    # 0. –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (Screen, Mic, Accessibility, Apple Events)
    try:
        ensure_permissions()
    except Exception:
        pass
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config_path = Path(__file__).parent / 'config' / 'app_config.yaml'
    config = {}
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f) or {}
    except Exception as e:
        console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}[/yellow]")

    audio_cfg = (config.get('audio') or {})
    audio_follow_default = bool(audio_cfg.get('follow_system_default', True))
    bt_policy = (audio_cfg.get('bluetooth_policy') or 'prefer_quality')
    settle_ms = int(audio_cfg.get('settle_ms', 400))
    retries = int(audio_cfg.get('retries', 3))
    preflush = bool(audio_cfg.get('preflush_on_switch', True))
    use_coreaudio_listeners = bool(audio_cfg.get('use_coreaudio_listeners', False))
    
    # –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AudioManagerDaemon
    device_manager_cfg = audio_cfg.get('device_manager', {})
    device_manager_enabled = bool(device_manager_cfg.get('enabled', True))
    device_manager_config = {
        'monitoring_interval': float(device_manager_cfg.get('monitoring_interval', 3.0)),
        'switch_cooldown': float(device_manager_cfg.get('switch_cooldown', 2.0)),
        'cache_timeout': float(device_manager_cfg.get('cache_timeout', 5.0))
    }
                                                                      
    # 1. STT –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è StateManager
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
    console.print("[blue]üì∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞...[/blue]")
    try:
        screen_capture = ScreenCapture()
        console.print("[bold green]‚úÖ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold green]")
    except Exception as e:
        console.print(f"[bold yellow]‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}[/bold yellow]")
        screen_capture = None
    
    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
    console.print("[blue]üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞...[/blue]")
    try:
        audio_player = AudioPlayer(sample_rate=48000, channels=2)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        if hasattr(audio_player, '__dict__'):
            audio_player.follow_system_default = audio_follow_default
            audio_player.bluetooth_policy = bt_policy
            audio_player.settle_ms = settle_ms
            audio_player.retries = retries
            audio_player.preflush_on_switch = preflush
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –±–µ–∑ –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–ª–µ–µ—Ä–∞
            try:
                audio_player.external_controlled = True
            except Exception:
                pass
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AudioManagerDaemon
            if device_manager_enabled and hasattr(audio_player, 'audio_manager') and audio_player.audio_manager:
                try:
                    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioManagerDaemon
                    # audio_player.audio_manager._apply_config(device_manager_config)
                    console.print("[bold green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AudioManagerDaemon –ø—Ä–∏–º–µ–Ω–µ–Ω–∞[/bold green]")
                except Exception as e:
                    console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AudioManagerDaemon: {e}[/yellow]")
        
        console.print("[bold green]‚úÖ –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold green]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –∞–∫—Ç–∏–≤–Ω–∞
        if hasattr(audio_player, 'device_events') and audio_player.device_events:
            console.print("[bold green]üéß –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞[/bold green]")
            console.print("[green]   ‚ö° –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 0.5 —Å–µ–∫—É–Ω–¥—ã[/green]")
            console.print("[green]   üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –≤–∫–ª—é—á–µ–Ω–æ[/green]")
            console.print("[green]   ‚è∏Ô∏è –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: –≤–∫–ª—é—á–µ–Ω–∞[/green]")
            console.print("[green]   ‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: –≤–∫–ª—é—á–µ–Ω–æ[/green]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AudioManagerDaemon
        if hasattr(audio_player, 'audio_manager') and audio_player.audio_manager:
            console.print("[bold green]üéõÔ∏è AudioManagerDaemon –∞–∫—Ç–∏–≤–µ–Ω[/bold green]")
            console.print("[green]   üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: –≤–∫–ª—é—á–µ–Ω[/green]")
            console.print("[green]   üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –≤–∫–ª—é—á–µ–Ω–æ[/green]")
            console.print("[green]   ‚ö° SwitchAudioSource: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω[/green]")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å AudioManagerDaemon
            try:
                manager_status = audio_player.get_audio_manager_status()
                if manager_status.get('available', False):
                    console.print(f"[green]   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {manager_status.get('total_devices', 0)}[/green]")
                    console.print(f"[green]   üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {manager_status.get('current_device', 'Unknown')}[/green]")
                else:
                    console.print(f"[yellow]   ‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {manager_status.get('error', 'Unknown error')}[/yellow]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AudioManagerDaemon: {e}[/yellow]")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            try:
                current_device = audio_player.get_current_device_info()
                if current_device:
                    device_type = "üéß –ù–ê–£–®–ù–ò–ö–ò" if current_device.get('is_headphones', False) else "üîä –î–ò–ù–ê–ú–ò–ö–ò"
                    console.print(f"[blue]üì± –¢–µ–∫—É—â–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device['name']} - {device_type}[/blue]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}[/yellow]")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π CoreAudio –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π –≤ AudioPlayer
        ca_listener = None
        if False:  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É CoreAudio –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                from coreaudio_default_listener import CoreAudioDefaultListener
                ca_listener = CoreAudioDefaultListener()
                # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ CoreAudio
                import sounddevice as sd
                hostapis = sd.query_hostapis()
                core_idx = next((i for i,a in enumerate(hostapis) if 'core' in (a.get('name','').lower())), 0)
                api = sd.query_hostapis(core_idx)
                din = api.get('default_input_device', -1)
                dout = api.get('default_output_device', -1)
                ca_listener.set_defaults(din if din != -1 else None, dout if dout != -1 else None)
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º output-change –∫ –ø–ª–µ–µ—Ä—É (–∏–Ω–¥–µ–∫—Å –∏–∑ —Å–æ–±—ã—Ç–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º HostAPI + –∏–º—è)
                def _on_output_changed(new_idx):
                    try:
                        if getattr(audio_player, '_is_shutting_down', False):
                            return
                        import time as _t
                        import sounddevice as _sd
                        # –ö–æ—Ä–æ—Ç–∫–∏–π settle –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–¥–µ—Ä–∂–∫–∏ CoreAudio
                        _t.sleep(max(0.05, settle_ms/1000.0))
                        # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å—á–∏—Ç—ã–≤–∞–µ–º hostapi defaults (–∏ –∏–º–µ–Ω–∞)
                        try:
                            hostapis = _sd.query_hostapis()
                            core_idx2 = next((i for i,a in enumerate(hostapis) if 'core' in (a.get('name','').lower())), 0)
                            api2 = _sd.query_hostapis(core_idx2)
                            din2 = api2.get('default_input_device', -1)
                            dout2 = api2.get('default_output_device', -1)
                        except Exception:
                            din2 = None
                            dout2 = None

                        # –†–µ–∑–æ–ª–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—ã–≤–æ–¥–∞ –ø–æ –∏–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–µ—Ñ–æ–ª—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                        resolved_out = None
                        try:
                            if dout2 not in (None, -1):
                                target_name = _sd.query_devices(dout2).get('name')
                                try:
                                    devs = _sd.query_devices()
                                    for i, d in enumerate(devs):
                                        try:
                                            if d.get('name') == target_name and int(d.get('max_output_channels') or 0) > 0:
                                                resolved_out = i
                                                break
                                        except Exception:
                                            continue
                                except Exception:
                                    pass
                        except Exception:
                            pass

                        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–µ–∑–æ–ª–≤–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º hostapi –∏–Ω–¥–µ–∫—Å
                        if resolved_out in (None, -1):
                            resolved_out = dout2 if dout2 not in (None, -1) else None

                        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º sd.default.device
                        try:
                            curr = _sd.default.device
                            if isinstance(curr, (list, tuple)) and len(curr) >= 2:
                                _sd.default.device = (curr[0] if curr[0] not in (None, -1) else din2, resolved_out)
                            else:
                                _sd.default.device = (din2, resolved_out)
                        except Exception:
                            pass
                        # –ï—Å–ª–∏ –∏–¥—ë—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ‚Äî –º—è–≥–∫–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏–º—Å—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å
                        if getattr(audio_player, 'is_playing', False):
                            try:
                                if resolved_out not in (None, -1):
                                    audio_player._restart_output_stream(resolved_out)
                            except Exception:
                                # Fallback –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π default
                                try:
                                    audio_player._attempt_restart_on_current_default(retries=2)
                                except Exception:
                                    pass
                    except Exception:
                        pass
                ca_listener.on_output_changed(_on_output_changed)
                # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–º–µ–Ω—É input: —Å settle –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π sd.default.device
                def _on_input_changed(new_idx):
                    try:
                        import time as _t
                        import sounddevice as _sd
                        # –ö–æ—Ä–æ—Ç–∫–∏–π settle
                        _t.sleep(max(0.05, settle_ms/1000.0))
                        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ hostapi
                        try:
                            hostapis = _sd.query_hostapis()
                            core_idx2 = next((i for i,a in enumerate(hostapis) if 'core' in (a.get('name','').lower())), 0)
                            api2 = _sd.query_hostapis(core_idx2)
                            din2 = api2.get('default_input_device', -1)
                            dout2 = api2.get('default_output_device', -1)
                        except Exception:
                            din2 = new_idx
                            dout2 = None

                        # –†–µ–∑–æ–ª–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–∞ –ø–æ –∏–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–µ—Ñ–æ–ª—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                        resolved_in = None
                        try:
                            if din2 not in (None, -1):
                                target_name = _sd.query_devices(din2).get('name')
                                try:
                                    devs = _sd.query_devices()
                                    for i, d in enumerate(devs):
                                        try:
                                            if d.get('name') == target_name and int(d.get('max_input_channels') or 0) > 0:
                                                resolved_in = i
                                                break
                                        except Exception:
                                            continue
                                except Exception:
                                    pass
                        except Exception:
                            pass

                        if resolved_in in (None, -1):
                            resolved_in = new_idx if new_idx not in (None, -1) else din2
                        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è sd.default.device
                        try:
                            curr = _sd.default.device
                            in_idx = (resolved_in if resolved_in not in (None, -1) else din2)
                            if isinstance(curr, (list, tuple)) and len(curr) >= 2:
                                _sd.default.device = (in_idx, curr[1] if curr[1] not in (None, -1) else dout2)
                            else:
                                _sd.default.device = (in_idx, dout2)
                        except Exception:
                            pass
                        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
                        if hasattr(state_manager, 'stt_recognizer') and state_manager.stt_recognizer and state_manager.is_microphone_recording():
                            target = in_idx
                            try:
                                if hasattr(state_manager.stt_recognizer, '_restart_input_stream'):
                                    state_manager.stt_recognizer._restart_input_stream(target)
                                    logger.info(f"üéôÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª InputStream –Ω–∞ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (index={target})")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å InputStream: {e}")

                        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                        try:
                            name = None
                            if new_idx not in (None, -1):
                                name = _sd.query_devices(new_idx).get('name')
                            logger.info(f"üéôÔ∏è Default input device changed ‚Üí {name} (index={new_idx})")
                        except Exception:
                            pass
                    except Exception:
                        pass
                if hasattr(ca_listener, 'on_input_changed'):
                    ca_listener.on_input_changed(_on_input_changed)
                # –ü—Ä–æ–∫–∏–Ω–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –º–æ–Ω–∏—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ
                try:
                    ca_listener.set_activity_provider(
                        lambda: bool(getattr(audio_player, 'is_playing', False) or state_manager.is_microphone_recording())
                    )
                except Exception:
                    pass
                # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º listener –≤ –ø–ª–µ–µ—Ä –∏ STT
                try:
                    setattr(audio_player, 'default_listener', ca_listener)
                except Exception:
                    pass
                try:
                    if hasattr(state_manager, 'stt_recognizer') and state_manager.stt_recognizer:
                        setattr(state_manager.stt_recognizer, 'default_listener', ca_listener)
                except Exception:
                    pass
                ca_listener.start()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è CoreAudio listener –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        else:
            logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: macOS —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏")
        # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –ø–ª–µ–µ—Ä –≤ STT –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
        try:
            if hasattr(state_manager, 'stt_recognizer') and state_manager.stt_recognizer and hasattr(state_manager.stt_recognizer, 'set_audio_player'):
                state_manager.stt_recognizer.set_audio_player(audio_player)
        except Exception:
            pass
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        try:
            if audio_player and hasattr(state_manager, 'stt_recognizer') and state_manager.stt_recognizer:
                audio_player.stt_recognizer = state_manager.stt_recognizer
                logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {e}")
    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞: {e}[/bold red]")
        console.print("[yellow]‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–≤—É–∫–∞[/yellow]")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º None –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏ - –∫–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ None
        audio_player = None
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gRPC –∫–ª–∏–µ–Ω—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–º)
    console.print("[blue]üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–ª–∏–µ–Ω—Ç–∞...[/blue]")
    grpc_client = GrpcClient()
    
    # 5. –ü–æ–ª—É—á–∞–µ–º Hardware ID (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    console.print("[blue]üÜî –ü–æ–ª—É—á–µ–Ω–∏–µ Hardware ID...[/blue]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
    import sys
    force_regenerate = "--force-regenerate" in sys.argv
    clear_cache = "--clear-cache" in sys.argv
    
    if clear_cache:
        from utils.hardware_id import clear_hardware_id_cache
        clear_hardware_id_cache()
        console.print("[yellow]üóëÔ∏è –ö—ç—à Hardware ID –æ—á–∏—â–µ–Ω[/yellow]")
    
    hardware_id = get_hardware_id(force_regenerate=force_regenerate)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    hardware_info = get_hardware_info()
    
    console.print(f"[bold green]‚úÖ Hardware ID –ø–æ–ª—É—á–µ–Ω: {hardware_id[:16]}...[/bold green]")
    uuid = hardware_info.get('hardware_uuid')
    serial = hardware_info.get('serial_number')
    uuid_preview = f"{uuid[:16]}..." if isinstance(uuid, str) and uuid else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    serial_text = serial if isinstance(serial, str) and serial else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    console.print(f"[blue]üì± UUID: {uuid_preview}[/blue]")
    console.print(f"[blue]üî¢ Serial: {serial_text}[/blue]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
    from utils.hardware_id import get_cache_info
    cache_info = get_cache_info()
    if cache_info['exists']:
        console.print(f"[green]üíæ Hardware ID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞[/green]")
    else:
        console.print(f"[yellow]üîÑ Hardware ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–Ω–æ–≤–æ[/yellow]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫—ç—à–µ–º
    if "--help" in sys.argv:
        console.print("\n[yellow]üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º Hardware ID:[/yellow]")
        console.print("[yellow]  ‚Ä¢ --clear-cache      - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à[/yellow]")
        console.print("[yellow]  ‚Ä¢ --force-regenerate - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å ID[/yellow]")
        console.print("[yellow]  ‚Ä¢ --help            - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É[/yellow]")
        console.print("[yellow]  ‚Ä¢ –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤    - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π AudioDeviceManager
    console.print("[blue]üéõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioDeviceManager...[/blue]")
    unified_system = get_global_unified_audio_system()
    audio_device_manager = initialize_global_audio_device_manager(unified_system=unified_system)
    if audio_device_manager:
        console.print("[bold green]‚úÖ AudioDeviceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold green]")
    else:
        console.print("[bold red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioDeviceManager[/bold red]")
    
    # –°–æ–∑–¥–∞–µ–º StateManager —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ None –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.print("[blue]üéõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StateManager...[/blue]")
    state_manager = StateManager(
        console=console,
        audio_player=audio_player,
        stt_recognizer=None,  # –í—Ä–µ–º–µ–Ω–Ω–æ None, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
        screen_capture=screen_capture,
        grpc_client=grpc_client,
        hardware_id=hardware_id,
        input_handler=None,  # –í—Ä–µ–º–µ–Ω–Ω–æ None, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
        tray_controller=None  # –í—Ä–µ–º–µ–Ω–Ω–æ None, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
    )
    console.print("[bold green]‚úÖ StateManager —Å–æ–∑–¥–∞–Ω[/bold green]")
    
    # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º STT —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º state_manager
    console.print("[blue]üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STT...[/blue]")
    try:
        stt_recognizer = StreamRecognizer(state_manager=state_manager)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏
        if hasattr(stt_recognizer, 'config'):             
            stt_recognizer.config = {
                'follow_system_default': audio_follow_default,
                'bluetooth_policy': bt_policy,
                'settle_ms': settle_ms,
                'retries': retries,
                'preflush_on_switch': preflush,
            }
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ StateManager
        state_manager.stt_recognizer = stt_recognizer
        console.print("[bold green]‚úÖ STT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold green]")
    except Exception as e:
        console.print(f"[bold red]‚ùå STT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}[/bold red]")
        stt_recognizer = None
        state_manager.stt_recognizer = None
    
    # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    event_queue = asyncio.Queue()
    loop = asyncio.get_running_loop()
    input_handler = InputHandler(loop, event_queue, state_manager)
    
    # –ö–†–ò–¢–ò–ß–ù–û: –∂–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ InputHandler
    console.print("[blue]‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InputHandler...[/blue]")
    await asyncio.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    console.print("[blue]‚úÖ InputHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/blue]")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ input_handler –≤ StateManager
    state_manager.input_handler = input_handler
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è screen_capture)
    try:
        if screen_capture:
            screen_info = screen_capture.get_screen_info()
        else:
            screen_info = {'width': 0, 'height': 0}
    except Exception as e:
        console.print(f"[bold yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ: {e}[/bold yellow]")
        screen_info = {'width': 0, 'height': 0}
    console.print(f"[bold blue]üì± –≠–∫—Ä–∞–Ω: {screen_info.get('width', 0)}x{screen_info.get('height', 0)} –ø–∏–∫—Å–µ–ª–µ–π[/bold blue]")
    
    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –º–µ–Ω—é-–±–∞—Ä–µ (helper-–ø—Ä–æ—Ü–µ—Å—Å)
    tray = None
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º helper —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å rumps
        status_file = str(_get_status_file_path())
        main_pid = os.getpid()
        is_frozen = getattr(sys, 'frozen', False)
        if is_frozen:
            # –ó–∞–ø—É—â–µ–Ω–æ –∏–∑ PyInstaller .app ‚Üí –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –±–∏–Ω–∞—Ä–Ω–∏–∫ —Å —Ñ–ª–∞–≥–æ–º
            helper_cmd = [sys.executable, "--tray-helper", "--status-file", status_file, "--pid", str(main_pid)]
        else:
            # –ó–∞–ø—É—Å–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ ‚Üí –≤—ã–∑—ã–≤–∞–µ–º python main.py --tray-helper ...
            helper_cmd = [sys.executable, str(Path(__file__).resolve()), "--tray-helper", "--status-file", status_file, "--pid", str(main_pid)]
        try:
            subprocess.Popen(helper_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception:
            pass
    except Exception:
        pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ tray_controller –≤ StateManager
    state_manager.tray_controller = tray
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º StateManager
    state_manager.current_screen_info = screen_info
    state_manager._write_tray_status_file(state_manager.state.name)
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º hardware_id –≤ grpc_client –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    grpc_client.hardware_id = hardware_id
    console.print(f"[blue]üîß Hardware ID {hardware_id[:16]}... –ø–µ—Ä–µ–¥–∞–Ω –≤ gRPC –∫–ª–∏–µ–Ω—Ç[/blue]")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    console.print("[blue]üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...[/blue]")
    if not await grpc_client.connect():
        console.print("[bold red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold red]")
        return
        
    console.print("[bold green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold green]")
    
    # üîπ –ê–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—á–µ—Ä–µ–∑ –æ–±—â–∏–π –ø–æ—Ç–æ–∫ —Å –º–∞—Ä–∫–µ—Ä–æ–º)
    try:
        greeting_text = "Hi! Nexy is here. How can I help you?"
        greeting_generator = grpc_client.stream_audio(
            f"__GREETING__:{greeting_text}",
            "",  # –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            state_manager.current_screen_info,
            hardware_id
        )
        asyncio.create_task(state_manager._consume_stream(greeting_generator))
    except Exception as e:
        console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {e}[/yellow]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.print("[bold green]‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤![/bold green]")
    console.print("[yellow]üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (3 —Å–æ—Å—Ç–æ—è–Ω–∏—è):[/yellow]")
    console.print("[yellow]  ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞[/yellow]")
    console.print("[yellow]  ‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –∑–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]  ‚Ä¢ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]  ‚Ä¢ –¢—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:[/yellow]")
    console.print("[yellow]    - SLEEPING: —Å–ø–∏—Ç, –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]    - LISTENING: —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã[/yellow]")
    console.print("[yellow]    - IN_PROCESS: —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç/–≥–æ–≤–æ—Ä–∏—Ç)[/yellow]")
    console.print("[yellow]  ‚Ä¢ –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è —ç–∫—Ä–∞–Ω[/yellow]")
    console.print("[yellow]  ‚Ä¢ Hardware ID –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π[/yellow]")
    console.print("[blue]üåê –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤:[/blue]")
    console.print("[blue]  ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (127.0.0.1:50051) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1[/blue]")
    console.print("[blue]  ‚Ä¢ –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä (20.151.51.172:50051) - fallback[/blue]")
    console.print("[blue]  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö[/blue]")
    console.print("[blue]  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥[/blue]")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    console.print("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    async def connection_monitor():
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while True:
            try:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                if hasattr(grpc_client, 'check_connection_health'):
                    await grpc_client.check_connection_health()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    async def device_refresh_monitor():
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        while True:
            try:
                await asyncio.sleep(10)  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                try:
                    import sounddevice as sd
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    devices = sd.query_devices()
                    hostapis = sd.query_hostapis()
                    core_idx = next((i for i, a in enumerate(hostapis) if 'core' in (a.get('name','').lower())), 0)
                    api = sd.query_hostapis(core_idx)
                    current_default_out = api.get('default_output_device', -1)
                    current_default_in = api.get('default_input_device', -1)
                    
                    logger.debug(f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤, out={current_default_out}, in={current_default_in}")
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            except Exception:
                pass

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    connection_monitor_task = asyncio.create_task(connection_monitor())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ñ–æ–Ω–µ
    device_refresh_task = asyncio.create_task(device_refresh_monitor())
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ
    last_audio_check = 0
    
    try:
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–¥–∏–æ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                current_time = time.time()
                if current_time - last_audio_check > 0.5:
                    await check_audio_completion(state_manager, audio_player)
                    last_audio_check = current_time
                
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                queue_size = event_queue.qsize()
                if queue_size > 0:
                    logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í –æ—á–µ—Ä–µ–¥–∏ {queue_size} —Å–æ–±—ã—Ç–∏–π, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={state_manager.state.name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    event = await asyncio.wait_for(event_queue.get(), timeout=0.1)
                    event_time = time.time()
                    logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event} –≤ {event_time:.3f}")
                except asyncio.TimeoutError:
                    # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ
                    continue
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                logger.info(f"üì° –°–û–ë–´–¢–ò–ï –ü–û–õ–£–ß–ï–ù–û: {event} –≤ {event_time:.3f}")
                console.print(f"[dim]üì° –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {event}[/dim]")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                current_state = state_manager.get_state()
                logger.info(f"   üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                start_time = time.time()
                logger.info(f"   üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ –°–û–ë–´–¢–ò–ï: {event}")
                console.print(f"[blue]üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name}, —Å–æ–±—ã—Ç–∏–µ: {event}[/blue]")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ StateManager
                await state_manager.handle_event(event)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                end_time = time.time()
                processing_time = (end_time - start_time) * 1000
                logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {processing_time:.1f}ms")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                new_state = state_manager.get_state()
                logger.info(f"   üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if current_state != new_state:
                    logger.info(f"   üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø: {current_state.name} ‚Üí {new_state.name}")
                    console.print(f"[green]‚úÖ –°–û–ë–´–¢–ò–ï {event} –û–ë–†–ê–ë–û–¢–ê–ù–û! –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.name}[/green]")
                else:
                    logger.info(f"   üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {current_state.name}")
                    console.print(f"[green]‚úÖ –°–û–ë–´–¢–ò–ï {event} –û–ë–†–ê–ë–û–¢–ê–ù–û! –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.name}[/green]")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ
                audio_status = audio_player.get_audio_status()
                if audio_status.get('is_playing', False):
                    console.print("üîä –ê—É–¥–∏–æ —Å—Ç–∞—Ç—É—Å: –í–û–°–ü–†–û–ò–ó–í–û–î–ò–¢–°–Ø")
                else:
                    console.print("üîá –ê—É–¥–∏–æ —Å—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–û")
                        
            except asyncio.CancelledError:
                logger.info("   üö® –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                console.print(f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}[/bold red]")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –≤ SLEEPING
                state_manager.set_state(AppState.SLEEPING)
                console.print("[blue]üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ SLEEPING[/blue]")
                
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if 'connection_monitor_task' in locals():
            connection_monitor_task.cancel()
            try:
                await connection_monitor_task
            except asyncio.CancelledError:
                pass
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if 'device_refresh_task' in locals():
            device_refresh_task.cancel()
            try:
                await device_refresh_task
            except asyncio.CancelledError:
                pass
        
        state_manager.cleanup()
        if audio_player.is_playing:
            audio_player.stop_playback()
        logger.info("–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    # –†–µ–∂–∏–º helper-–ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –º–µ–Ω—é-–±–∞—Ä–∞
    try:
        _run_tray_helper_if_requested()
    except Exception:
        pass

    # –ñ—ë—Å—Ç–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    if not acquire_single_instance_lock():
        try:
            console.print("[bold yellow]‚ÑπÔ∏è Nexy —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –±—É–¥–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å[/bold yellow]")
        except Exception:
            pass
        sys.exit(0)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")

                 