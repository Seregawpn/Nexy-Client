import asyncio
import sounddevice as sd
import numpy as np
import logging
import queue
import threading
import time

logger = logging.getLogger(__name__)

class AudioPlayer:
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sounddevice.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (chunks) –≤ –≤–∏–¥–µ NumPy –º–∞—Å—Å–∏–≤–æ–≤ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∏—Ö –±–µ—Å—à–æ–≤–Ω–æ.
    """
    def __init__(self, sample_rate=48000, channels=1, dtype='int16'):
        self.sample_rate = sample_rate
        self.channels = channels
        self.dtype = dtype
        
        self.audio_queue = queue.Queue()
        self.playback_thread = None
        self.stop_event = threading.Event()
        self.stream = None
        self.is_playing = False
        self.interrupt_flag = threading.Event()  # –§–ª–∞–≥ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.internal_buffer = np.array([], dtype=np.int16)
        self.buffer_lock = threading.Lock()
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ
        self.audio_error = False
        self.audio_error_message = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self._check_audio_devices()

    def _playback_callback(self, outdata, frames, time, status):
        """Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è sounddevice, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –≤—ã–≤–æ–¥–∞."""
        if status:
            logger.warning(f"Sounddevice status: {status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        if self.interrupt_flag.is_set():
            outdata.fill(0)
            return

        try:
            with self.buffer_lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
                if len(self.internal_buffer) >= frames:
                    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ
                    outdata[:frames] = self.internal_buffer[:frames].reshape(frames, self.channels)
                    self.internal_buffer = self.internal_buffer[frames:]
                else:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    try:
                        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞–Ω–∫–∏ –≤ –±—É—Ñ–µ—Ä
                        while not self.audio_queue.empty():
                            chunk = self.audio_queue.get_nowait()
                            if chunk is not None and len(chunk) > 0:
                                self.internal_buffer = np.concatenate([self.internal_buffer, chunk])
                                logger.debug(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω —á–∞–Ω–∫ –≤ –±—É—Ñ–µ—Ä: {len(chunk)} —Å—ç–º–ø–ª–æ–≤. –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(self.internal_buffer)}")
                            self.audio_queue.task_done()
                    except queue.Empty:
                        pass
                    
                    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                    if len(self.internal_buffer) >= frames:
                        outdata[:frames] = self.internal_buffer[:frames].reshape(frames, self.channels)
                        self.internal_buffer = self.internal_buffer[frames:]
                        logger.debug(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞—É–¥–∏–æ: {frames} —Å—ç–º–ø–ª–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä–µ: {len(self.internal_buffer)}")
                    else:
                        # –í—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                        available = len(self.internal_buffer)
                        if available > 0:
                            outdata[:available] = self.internal_buffer.reshape(-1, self.channels)
                            outdata[available:frames] = 0
                            self.internal_buffer = np.array([], dtype=np.int16)
                            logger.debug(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {available} —Å—ç–º–ø–ª–æ–≤, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–∏—à–∏–Ω–∞")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –µ—â–µ —Ä–∞–∑
                            try:
                                while not self.audio_queue.empty():
                                    chunk = self.audio_queue.get_nowait()
                                    if chunk is not None and len(chunk) > 0:
                                        self.internal_buffer = np.concatenate([self.internal_buffer, chunk])
                                        logger.debug(f"üéµ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–∞–Ω–∫ –≤ –±—É—Ñ–µ—Ä: {len(chunk)} —Å—ç–º–ø–ª–æ–≤")
                                    self.audio_queue.task_done()
                                    
                                if len(self.internal_buffer) > 0:
                                    # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                                    available = min(len(self.internal_buffer), frames)
                                    outdata[:available] = self.internal_buffer[:available].reshape(available, self.channels)
                                    self.internal_buffer = self.internal_buffer[available:]
                                    outdata[available:frames] = 0
                                    logger.debug(f"üéµ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {available} —Å—ç–º–ø–ª–æ–≤")
                                else:
                                    outdata.fill(0)
                            except queue.Empty:
                                outdata.fill(0)
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ playback callback: {e}")
            outdata.fill(0)

    def add_chunk(self, audio_chunk: np.ndarray):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∞—É–¥–∏–æ (NumPy array) –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."""
        if not isinstance(audio_chunk, np.ndarray):
            logger.error("–í –ø–ª–µ–µ—Ä –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ (–æ–∂–∏–¥–∞–µ—Ç—Å—è NumPy array)")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
        if len(audio_chunk) == 0:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫")
            return
            
        # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É - –æ–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤
        # time.sleep(0.01)  # 10ms –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
        
        self.audio_queue.put(audio_chunk)
        logger.info(f"üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫ —Ä–∞–∑–º–µ—Ä–æ–º {len(audio_chunk)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.audio_queue.qsize()}")
        logger.info(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—É—Ñ–µ—Ä–∞: {len(self.internal_buffer)} —Å—ç–º–ø–ª–æ–≤")

    def start_playback(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."""
        if self.is_playing:
            logger.info("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            return

        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ...")
        self.stop_event.clear()
        self.interrupt_flag.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self._clear_buffers()  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            self.stream = self._safe_init_stream()
            self.is_playing = True
            logger.info("–ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫: {e}")
            self.audio_error = True
            self.audio_error_message = str(e)
            # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_playing = True, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Ç–æ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω
            raise

    def stop_playback(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        if not self.is_playing:
            return
            
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        self.stop_event.set()
        
        if self.stream:
            self.stream.stop()
            self.stream.close()
            self.stream = None
            logger.info("–ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç.")
        
        self._clear_buffers()
        self.is_playing = False

    def interrupt(self):
        """
        –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        logger.info("üîá –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.interrupt_flag.set()
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        if self.stream and hasattr(self.stream, 'active') and self.stream.active:
            try:
                self.stream.stop()
                self.stream.close()
                self.stream = None
                logger.info("‚úÖ –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã –∏ –æ—á–µ—Ä–µ–¥–∏
        self._clear_buffers()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_playing = False
        self.stop_event.set()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.interrupt_flag.clear()
        
        logger.info("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –æ—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã.")

    def _safe_init_stream(self):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ PortAudio.
        """
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è macOS
            device_settings = [
                {'device': None, 'channels': self.channels},  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                {'device': 'default', 'channels': self.channels},  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º default
                {'device': sd.default.device[1], 'channels': self.channels},  # –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥
            ]
            
            for settings in device_settings:
                try:
                    logger.info(f"üîÑ –ü—Ä–æ–±—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {settings}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è macOS
                    stream = sd.OutputStream(
                        samplerate=self.sample_rate,
                        channels=settings['channels'],
                        dtype=self.dtype,
                        device=settings['device'],
                        callback=self._playback_callback,
                        blocksize=1024,  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        latency='low'     # –ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    )
                    
                    stream.start()
                    logger.info(f"‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {settings}")
                    return stream
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ {settings}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è macOS...")
            
            # –ü—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            try:
                stream = sd.OutputStream(
                    samplerate=44100,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
                    channels=1,        # –ú–æ–Ω–æ
                    dtype='int16',     # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø
                    callback=self._playback_callback,
                    blocksize=512,     # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
                    latency='high'     # –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                )
                stream.start()
                logger.info("‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                return stream
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏: {e}")
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –Ω–∏ —Å –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
        except Exception as e:
            self.audio_error = True
            self.audio_error_message = str(e)
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            raise

    def _clear_buffers(self):
        """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –∏ –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ."""
        # –û—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
        with self.buffer_lock:
            self.internal_buffer = np.array([], dtype=np.int16)
            logger.debug("‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                    self.audio_queue.task_done()
                except queue.Empty:
                    break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            with self.audio_queue.mutex:
                self.audio_queue.queue.clear()
            
            logger.debug("‚úÖ –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ join() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        try:
            self.audio_queue.join()
        except Exception:
            pass

    def wait_for_queue_empty(self):
        """
        –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.
        """
        if not self.is_playing:
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø–ª–µ–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            return
            
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –í –æ—á–µ—Ä–µ–¥–∏: {self.audio_queue.qsize()}, –≤ –±—É—Ñ–µ—Ä–µ: {len(self.internal_buffer)} —Å—ç–º–ø–ª–æ–≤")
        
        # 1. –ñ–¥–µ–º, –ø–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
        timeout = 2.0  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        start_time = time.time()
        
        while (time.time() - start_time) < timeout:
            if self.interrupt_flag.is_set() or not self.is_playing:
                logger.info("üîá –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                return
                
            if self.audio_queue.empty():
                logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –ø—É—Å—Ç–∞.")
                break
            
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {self.audio_queue.qsize()} —á–∞–Ω–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å...")
            time.sleep(0.05)  # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        else:
            logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏! –û—Å—Ç–∞–ª–æ—Å—å: {self.audio_queue.qsize()} —á–∞–Ω–∫–æ–≤")
        
        # 2. –ñ–¥–µ–º, –ø–æ–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω
        timeout = 3.0  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        start_time = time.time()
        
        while (time.time() - start_time) < timeout:
            if self.interrupt_flag.is_set() or not self.is_playing:
                logger.info("üîá –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –æ–∂–∏–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                return
                
            with self.buffer_lock:
                buffer_size = len(self.internal_buffer)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–∞
            if buffer_size == 0 and self.audio_queue.empty():
                logger.info("‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –ø—É—Å—Ç –∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
                break
            
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞: {buffer_size} —Å—ç–º–ø–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å...")
            time.sleep(0.05)  # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        else:
            logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –±—É—Ñ–µ—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å: {len(self.internal_buffer)} —Å—ç–º–ø–ª–æ–≤")

        logger.info(f"‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.audio_queue.qsize()}, –±—É—Ñ–µ—Ä–∞: {len(self.internal_buffer)}")
        self.stop_playback()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–µ–µ—Ä–∞."""
        self.stop_playback()
        logger.info("–†–µ—Å—É—Ä—Å—ã AudioPlayer –æ—á–∏—â–µ–Ω—ã.")

    def get_audio_status(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö.
        """
        return {
            'is_playing': self.is_playing,
            'has_error': self.audio_error,
            'error_message': self.audio_error_message,
            'stream_active': self.stream is not None and hasattr(self.stream, 'active') and self.stream.active,
            'queue_size': self.audio_queue.qsize(),
            'buffer_size': len(self.internal_buffer)
        }

    def reset_audio_error(self):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        self.audio_error = False
        self.audio_error_message = ""
        logger.info("üîÑ –§–ª–∞–≥–∏ –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ —Å–±—Ä–æ—à–µ–Ω—ã")

    def force_stop(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.
        """
        logger.warning("üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.interrupt_flag.set()
        self.stop_event.set()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        if self.stream:
            try:
                if hasattr(self.stream, 'stop'):
                    self.stream.stop()
                if hasattr(self.stream, 'close'):
                    self.stream.close()
                self.stream = None
                logger.info("‚úÖ –ü–æ—Ç–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
        self._clear_buffers()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_playing = False
        
        logger.warning("üö® –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def _check_audio_devices(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            sd.query_devices()
            logger.info("‚úÖ –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            self.audio_error = True
            self.audio_error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}"