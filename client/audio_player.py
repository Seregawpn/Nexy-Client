"""
AudioPlayer - –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ race conditions

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
2. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ race conditions
3. Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
4. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
5. –ó–∞—â–∏—Ç–∞ –æ—Ç deadlocks
"""

import asyncio
import sounddevice as sd
import numpy as np
import logging
import queue
import threading
import time
import gc
import psutil
import os
from typing import List, Optional, Dict, Callable
from dataclasses import dataclass
from enum import Enum
from utils.device_utils import is_headphones, is_virtual_device, get_device_type_keywords
from error_handler import (
    handle_audio_error, handle_device_error, handle_memory_error, 
    handle_threading_error, error_handler, ErrorSeverity, ErrorCategory
)
from simplified_audio_system import (
    get_universal_audio_config, simple_device_switch, auto_switch_on_device_change,
    handle_portaudio_error
)

logger = logging.getLogger(__name__)

class PlayerState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞"""
    STOPPED = "stopped"
    STARTING = "starting"
    PLAYING = "playing"
    PAUSED = "paused"
    STOPPING = "stopping"
    ERROR = "error"

@dataclass
class PlayerMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞"""
    state: PlayerState
    is_playing: bool
    queue_size: int
    buffer_size: int
    stream_active: bool
    memory_usage: int
    errors_count: int
    last_activity: float

class ThreadSafeAudioPlayer:
    """
    Thread-safe –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ race conditions
    
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
    2. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ race conditions
    3. Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
    4. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    5. –ó–∞—â–∏—Ç–∞ –æ—Ç deadlocks
    """
    
    def __init__(self, sample_rate=48000, channels=1, dtype='int16'):
        self.sample_rate = sample_rate
        self.channels = channels
        self.dtype = dtype
        
        # –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –î–õ–Ø –ó–ê–©–ò–¢–´ –û–¢ –£–¢–ï–ß–ï–ö –ü–ê–ú–Ø–¢–ò
        self.max_queue_size = 1000
        self.max_memory_usage = 512 * 1024 * 1024  # 512MB
        # –£–ë–†–ê–ù–û: max_buffer_size - –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        
        # –û—á–µ—Ä–µ–¥—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
        self.audio_queue = queue.Queue(maxsize=self.max_queue_size)
        
        # Thread-safe —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._state = PlayerState.STOPPED
        self._state_lock = threading.RLock()
        
        # Thread-safe —Ñ–ª–∞–≥–∏
        self._is_playing = False
        self._is_starting = False
        self._is_stopping = False
        self._is_shutting_down = False
        
        # Thread-safe —Å–æ–±—ã—Ç–∏—è
        self.stop_event = threading.Event()
        self.pause_event = threading.Event()
        self.pause_event.set()  # –ù–∞—á–∏–Ω–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        
        # Thread-safe –ø–æ—Ç–æ–∫–∏
        self.playback_thread = None
        self.stream = None
        
        # Thread-safe –±—É—Ñ–µ—Ä—ã
        self.internal_buffer = np.array([], dtype=np.int16)
        self.buffer_lock = threading.RLock()
        self.stream_lock = threading.RLock()
        
        # Thread-safe —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ
        self.audio_manager = None
        self.current_device_info = None
        self._device_info_lock = threading.RLock()
        
        # Thread-safe –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._cached_stream_config = None
        self._cached_device_info = None
        self._stream_cache_valid = False
        self._cache_lock = threading.RLock()
        
        # Thread-safe –º–µ—Ç—Ä–∏–∫–∏
        self._metrics_lock = threading.RLock()
        self._errors_count = 0
        self._last_activity = time.time()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        self._memory_monitor = MemoryMonitor(self.max_memory_usage)
        
        # Callbacks
        self.state_callback: Optional[Callable] = None
        self.error_callback: Optional[Callable] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_audio_manager()
        
        logger.info("üéµ ThreadSafeAudioPlayer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _init_audio_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
        try:
            from simplified_audio_system import initialize_global_simplified_audio_system
            
            config = {
                'device_manager': {
                    'enabled': True,
                    'monitoring_interval': 3.0,
                    'switch_cooldown': 2.0,
                    'cache_timeout': 5.0,
                    'auto_switch_to_headphones': True,
                    'auto_switch_to_best': True,
                    'exclude_virtual_devices': True,
                    'virtual_device_keywords': ['blackhole', 'loopback', 'virtual']
                }
            }
            
            self.audio_manager = initialize_global_simplified_audio_system(config)
            
            if not self.audio_manager.initialize():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SimplifiedAudioSystem")
            
            self.current_device_info = self.audio_manager.get_current_device()
            self.audio_manager.add_device_callback(self._on_device_change_callback)
            
            logger.info("‚úÖ SimplifiedAudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "_init_audio_manager", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã")
            self._handle_error(e)

    def _on_device_change_callback(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            logger.info(f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {event.event_type} - {event.device.name}")
            
            if event.event_type == "device_switched":
                self._handle_device_switched(event.device)
            elif event.event_type == "device_added":
                self._handle_device_added(event.device)
            elif event.event_type == "device_removed":
                self._handle_device_removed(event.device)

        except Exception as e:
            handle_device_error(e, "ThreadSafeAudioPlayer", "_on_device_change_callback", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            self._handle_error(e)

    def _handle_device_switched(self, device):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}")
            
            with self._device_info_lock:
                self.current_device_info = device
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            if self._is_playing:
                self._restart_stream()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}")
            self._handle_error(e)

    def _handle_device_added(self, device):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            logger.info(f"‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {device.name}")
            
            if (device.is_output and 
                self._is_headphones(device)):
                
                logger.info(f"üéß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏: {device.name}")
                self.audio_manager.switch_to_device(device.name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            self._handle_error(e)

    def _handle_device_removed(self, device):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            logger.info(f"‚ûñ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ: {device.name}")
            
            with self._device_info_lock:
                if (self.current_device_info and 
                    self.current_device_info.name == device.name):
                    
                    logger.info("üîÑ –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ")
                    self.audio_manager.switch_to_best_device()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            self._handle_error(e)

    def _is_headphones(self, device):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –Ω–∞—É—à–Ω–∏–∫–∏"""
        headphone_types = [
            'airpods', 'beats', 'bluetooth_headphones', 'usb_headphones'
        ]
        return device.device_type.value in headphone_types

    def _restart_stream(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞...")
            
            self._stop_stream()
            time.sleep(0.1)
            self._start_stream()
            
            logger.info("‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {e}")
            self._handle_error(e)

    def _start_stream(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫"""
        try:
            with self.stream_lock:
                if self.stream is not None:
                    logger.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return
                    
                with self._device_info_lock:
                    current_device = self.current_device_info
                
                # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ
                if current_device and (not current_device.is_output or current_device.max_output_channels == 0):
                    logger.warning(f"‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {current_device.name} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ")
                    if self.audio_manager:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                        if self.audio_manager.force_select_best_output_device():
                            current_device = self.audio_manager.get_current_device()
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device.name if current_device else 'None'}")
                        else:
                            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
                            self.audio_manager.switch_to_best_device()
                            current_device = self.audio_manager.get_current_device()
                
                if not current_device:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                    if self.audio_manager:
                        self.audio_manager.switch_to_best_device()
                        current_device = self.audio_manager.get_current_device()
                    
                    if not current_device:
                        logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                        return
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ç–æ–∫–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
                device_channels = self._get_optimal_channels_for_device(current_device)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –ø–ª–µ–µ—Ä–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
                self.channels = device_channels
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                logger.info(f"üîç –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device.name}")
                logger.info(f"üîç PortAudio –∏–Ω–¥–µ–∫—Å: {current_device.portaudio_index}")
                logger.info(f"üîç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {current_device.max_output_channels}")
                logger.info(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {device_channels}")
                logger.info(f"üîç –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {current_device.priority}")
                logger.info(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {current_device.is_connected}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if self.audio_manager:
                    device_summary = self.audio_manager.get_device_info_summary()
                    logger.info(f"üîç –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_summary.get('total_devices', 0)}")
                    logger.info(f"üîç –í—ã—Ö–æ–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_summary.get('output_devices', 0)}")
                    logger.info(f"üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {device_summary.get('categories', {})}")
                
                stream_config = {
                    'device': current_device.portaudio_index,
                    'channels': device_channels,
                    'dtype': self.dtype,
                    'samplerate': self.sample_rate
                }
                
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
                self.stream = sd.OutputStream(
                    callback=self._audio_callback,
                    **stream_config
                )
                
                self.stream.start()
                
                logger.info(f"üéµ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {current_device.name}")
            
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "_start_stream", "–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞")
            self._handle_error(e)

    def _stop_stream(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫"""
        try:
            with self.stream_lock:
                if self.stream is None:
                    return
                    
                self.stream.stop()
                self.stream.close()
                self.stream = None
                
                logger.info("üõë –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "_stop_stream", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞")
            self._handle_error(e)

    def _audio_callback(self, outdata, frames, time, status):
        """Callback –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        try:
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ callback
            logger.info(f"üîç Audio callback: frames={frames}, buffer_len={len(self.internal_buffer)}, channels={self.channels}")
            
            if status:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if self._memory_monitor.is_memory_high():
                logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã")
                self._emergency_cleanup()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
            with self.buffer_lock:
                if len(self.internal_buffer) >= frames:
                    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                    logger.info(f"‚úÖ Audio callback: –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º {frames} —Å—ç–º–ø–ª–æ–≤")
                    
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    if self.channels == 1:
                        # –ú–æ–Ω–æ: reshape(-1, 1)
                        outdata[:] = self.internal_buffer[:frames].reshape(-1, 1)
                    else:
                        # –°—Ç–µ—Ä–µ–æ: –¥—É–±–ª–∏—Ä—É–µ–º –º–æ–Ω–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
                        mono_data = self.internal_buffer[:frames]
                        stereo_data = np.column_stack([mono_data, mono_data])
                        outdata[:] = stereo_data
                    self.internal_buffer = self.internal_buffer[frames:]
                else:
                    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä
                    logger.warning(f"‚ö†Ô∏è Audio callback: –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä! buffer={len(self.internal_buffer)}, –Ω—É–∂–Ω–æ={frames}")
                    outdata[:] = np.zeros((frames, self.channels), dtype=self.dtype)
            
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "_audio_callback", "Audio callback")
            self._handle_error(e)
            outdata[:] = np.zeros((frames, self.channels), dtype=self.dtype)

    def _emergency_cleanup(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏"""
        try:
            logger.warning("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
            
            self._clear_queue()
            
            with self.buffer_lock:
                            self.internal_buffer = np.array([], dtype=np.int16)
            
            gc.collect()
            
            logger.info("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            handle_memory_error(e, "ThreadSafeAudioPlayer", "_emergency_cleanup", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")

    def _clear_queue(self):
        """–û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                except queue.Empty:
                    break
        except Exception as e:
            handle_memory_error(e, "ThreadSafeAudioPlayer", "_clear_queue", "–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏")

    def _clear_buffer(self):
        """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä"""
        try:
            with self.buffer_lock:
                self.internal_buffer = np.array([], dtype=np.int16)
        except Exception as e:
            handle_memory_error(e, "ThreadSafeAudioPlayer", "_clear_buffer", "–û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞")

    def start_playback(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions"""
        try:
            with self._state_lock:
                if self._is_playing:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
                    return False
                
                if self._is_starting:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
                    return False
                
                if self._is_stopping:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
                    return False
                
                self._is_starting = True
                self._set_state(PlayerState.STARTING)
                
                try:
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                    self._clear_queue()
                    self._clear_buffer()
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
                    self._start_stream()
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    self.stop_event.clear()
                    self.pause_event.set()
                    
                    self.playback_thread = threading.Thread(target=self._playback_loop, daemon=True)
                    self.playback_thread.start()
                    
                    self._is_playing = True
                    self._set_state(PlayerState.PLAYING)
                    
                    logger.info("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
                    return True
                    
                finally:
                    self._is_starting = False
                    
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "start_playback", "–ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            self._handle_error(e)
            self._is_starting = False
            return False

    def stop_playback(self) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions"""
        try:
            with self._state_lock:
                if not self._is_playing:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    return False
                
                if self._is_stopping:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
                    return False
                
                self._is_stopping = True
                self._set_state(PlayerState.STOPPING)
                
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                self.stop_event.set()

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
                self._stop_stream()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.playback_thread and self.playback_thread.is_alive():
                self.playback_thread.join(timeout=2.0)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                self._clear_queue()
                self._clear_buffer()
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                gc.collect()
                
                self._is_playing = False
                self._is_stopping = False
                self._set_state(PlayerState.STOPPED)
                
                logger.info("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "stop_playback", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            self._handle_error(e)
            self._is_stopping = False
            return False

    def pause_playback(self) -> bool:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        try:
            with self._state_lock:
                if not self._is_playing:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
                    return False
                
                if self._state == PlayerState.PAUSED:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    return False
                
                self.pause_event.clear()
                self._set_state(PlayerState.PAUSED)
                
                logger.info("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "pause_playback", "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            self._handle_error(e)
            return False

    def resume_playback(self) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        try:
            with self._state_lock:
                if not self._is_playing:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
                    return False
                
                if self._state != PlayerState.PAUSED:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    return False
                
                self.pause_event.set()
                self._set_state(PlayerState.PLAYING)
                
                logger.info("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            
        except Exception as e:
            handle_audio_error(e, "ThreadSafeAudioPlayer", "resume_playback", "–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            self._handle_error(e)
            return False

    def _process_available_chunks(self) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞–Ω–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é"""
        chunks_processed = 0
        
        while not self.audio_queue.empty():
            try:
                audio_data = self.audio_queue.get(timeout=0.01)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                with self.buffer_lock:
                    old_size = len(self.internal_buffer)
                    self.internal_buffer = np.concatenate([self.internal_buffer, audio_data])
                    
                    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–æ–≤
                    if chunks_processed == 0:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
                        logger.info(f"‚úÖ Playback loop: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ size={len(audio_data)}")
                        logger.info(f"üîç –ë—É—Ñ–µ—Ä: {old_size} ‚Üí {len(self.internal_buffer)} —Å—ç–º–ø–ª–æ–≤ (+{len(audio_data)})")
                
                chunks_processed += 1
                
            except queue.Empty:
                break
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        if chunks_processed > 0:
            logger.info(f"üéØ Playback loop: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {chunks_processed} —á–∞–Ω–∫–æ–≤ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é")
        else:
            logger.warning("‚ö†Ô∏è Playback loop: –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        
        return chunks_processed

    def _playback_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions"""
        max_iterations = 100000
        iteration_count = 0
        
        try:
            logger.info("üîÑ Playback loop –∑–∞–ø—É—â–µ–Ω")
            
            while not self.stop_event.is_set() and iteration_count < max_iterations:
                iteration_count += 1
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
                    self.pause_event.wait()
                    
                    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    logger.info(f"üîç Playback loop: –æ—á–µ—Ä–µ–¥—å —Ä–∞–∑–º–µ—Ä={self.audio_queue.qsize()}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞–Ω–∫–∏ –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é
                    chunks_processed = self._process_available_chunks()
                    
                    if chunks_processed == 0:
                        # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                        logger.warning("‚ö†Ô∏è Playback loop: –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ...")
                        # –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª - –∂–¥–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    with self._metrics_lock:
                        self._last_activity = time.time()
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ CPU
                    time.sleep(0.001)
                    
                except Exception as e:
                    handle_threading_error(e, "ThreadSafeAudioPlayer", "_playback_loop", "–¶–∏–∫–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                    self._handle_error(e)
                time.sleep(0.1)
                
            if iteration_count >= max_iterations:
                logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –≤ —Ü–∏–∫–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                
        except Exception as e:
            handle_threading_error(e, "ThreadSafeAudioPlayer", "_playback_loop", "–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            self._handle_error(e)
        finally:
            logger.info("üîÑ Playback loop –∑–∞–≤–µ—Ä—à–µ–Ω")

    def add_audio_data(self, audio_data: np.ndarray) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions"""
        try:
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üîç add_audio_data: size={len(audio_data)}, playing={self._is_playing}")
            
            with self._state_lock:
                if not self._is_playing:
                    logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
                if self.audio_queue.qsize() >= self.max_queue_size:
                    logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                if self._memory_monitor.is_memory_high():
                    logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ")
                    return False
                
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.audio_queue.put(audio_data)
                logger.info(f"‚úÖ add_audio_data: –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å, —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏={self.audio_queue.qsize()}")
                return True
            
        except Exception as e:
            handle_threading_error(e, "ThreadSafeAudioPlayer", "add_audio_data", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
            self._handle_error(e)
            return False

    def _set_state(self, new_state: PlayerState):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
        try:
            old_state = self._state
            self._state = new_state
            
            if self.state_callback:
                try:
                    self.state_callback(old_state, new_state)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ state_callback: {e}")
            
        except Exception as e:
            handle_threading_error(e, "ThreadSafeAudioPlayer", "_set_state", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

    def _get_optimal_channels_for_device(self, device) -> int:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            if not device or not device.is_output:
                return 1
            
            # –ú–∞–∫—Å–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–µ—Ä–µ–æ, –º–∏–Ω–∏–º—É–º 1 –¥–ª—è –º–æ–Ω–æ
            optimal_channels = min(device.max_output_channels, 2) if device.max_output_channels > 0 else 1
            
            logger.info(f"üîç –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}, –∫–∞–Ω–∞–ª—ã: {optimal_channels} (max: {device.max_output_channels})")
            return optimal_channels
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1")
            return 1

    def _handle_error(self, error: Exception):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
        try:
            with self._metrics_lock:
                self._errors_count += 1
            
            if self.error_callback:
                try:
                    self.error_callback(error)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error_callback: {e}")
            
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if self._errors_count > 10:
                logger.error("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
                self.stop_playback()
            
        except Exception as e:
                handle_threading_error(e, "ThreadSafeAudioPlayer", "_handle_error", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏")

    def get_current_device(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        with self._device_info_lock:
            return self.current_device_info

    def get_current_device_name(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        current_device = self.get_current_device()
        return current_device.name if current_device else None

    def switch_to_device(self, device_name: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        
        –ü–†–ò–ù–¶–ò–ü: –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –æ—à–∏–±–∫–µ - fallback
        """
        try:
            logger.info(f"üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            success = simple_device_switch(self.audio_manager, device_name)
            
            if success:
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
                self._restart_stream_for_new_device()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {device_name}")
                return True
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {device_name}")
                return False
            
        except Exception as e:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É PortAudio
            current_device = self.audio_manager.get_current_device()
            if current_device:
                handle_portaudio_error(e, current_device)
                
            handle_device_error(e, "ThreadSafeAudioPlayer", "switch_to_device", f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_name}")
            self._handle_error(e)
            return False
                
    def switch_to_best_device(self) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É
        
        –ü–†–ò–ù–¶–ò–ü: AirPods > USB > Bluetooth > Built-in
        """
        try:
            logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É
            success = auto_switch_on_device_change(self.audio_manager)
            
            if success:
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
                self._restart_stream_for_new_device()
                current_device = self.audio_manager.get_current_device()
                device_name = current_device.name if current_device else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ"
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {device_name}")
                return True
            else:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è")
                return False
            
        except Exception as e:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É PortAudio
            current_device = self.audio_manager.get_current_device()
            if current_device:
                handle_portaudio_error(e, current_device)
            
            handle_device_error(e, "ThreadSafeAudioPlayer", "switch_to_best_device", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            self._handle_error(e)
            return False
    
    def _restart_stream_for_new_device(self):
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        –ü–†–ò–ù–¶–ò–ü: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
        """
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
            was_playing = self.is_playing()
            if was_playing:
                self._stop_stream()
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            current_device = self.audio_manager.get_current_device()
            if current_device:
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                config = get_universal_audio_config(current_device)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–µ–µ—Ä–∞
                self.sample_rate = config['samplerate']
                self.channels = config['channels']
                self.dtype = config['dtype']
                
                logger.info(f"üéõÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {current_device.name}: {config['samplerate']}Hz, {config['channels']}ch, {config['dtype']}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
            if was_playing:
                self._start_stream()
                logger.info("‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}")
            self._handle_error(e)
        
    def get_available_devices(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            return self.audio_manager.get_output_devices()
        except Exception as e:
            handle_device_error(e, "ThreadSafeAudioPlayer", "get_available_devices", "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            self._handle_error(e)
            return []

    def get_metrics(self) -> PlayerMetrics:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–ª–µ–µ—Ä–∞"""
        try:
            with self._metrics_lock:
                return PlayerMetrics(
                    state=self._state,
                    is_playing=self._is_playing,
                    queue_size=self.audio_queue.qsize(),
                    buffer_size=len(self.internal_buffer),
                    stream_active=self.stream is not None,
                    memory_usage=self._memory_monitor.get_memory_usage(),
                    errors_count=self._errors_count,
                    last_activity=self._last_activity
                )
        except Exception as e:
            handle_threading_error(e, "ThreadSafeAudioPlayer", "get_metrics", "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
            return PlayerMetrics(
                state=PlayerState.ERROR,
                is_playing=False,
                queue_size=0,
                buffer_size=0,
                stream_active=False,
                memory_usage=0,
                errors_count=0,
                last_activity=0
            )

    def set_state_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.state_callback = callback

    def set_error_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.error_callback = callback

    def shutdown(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            with self._state_lock:
                if self._is_shutting_down:
                    logger.warning("‚ö†Ô∏è –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è shutdown")
                    return
            

                self._is_shutting_down = True
                
                logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ThreadSafeAudioPlayer...")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                self.stop_playback()
                
                # –£–¥–∞–ª—è–µ–º callback
            if self.audio_manager:
                self.audio_manager.remove_device_callback(self._on_device_change_callback)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                self._clear_queue()
                self._clear_buffer()
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                with self._cache_lock:
                    self._cached_stream_config = None
                    self._cached_device_info = None
                    self._stream_cache_valid = False
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                gc.collect()
                
                logger.info("‚úÖ ThreadSafeAudioPlayer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
                    handle_threading_error(e, "ThreadSafeAudioPlayer", "shutdown", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ–µ—Ä–∞")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            self.shutdown()
        except Exception as e:
            handle_threading_error(e, "ThreadSafeAudioPlayer", "__del__", "–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä")


class MemoryMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, max_memory_usage: int):
        self.max_memory_usage = max_memory_usage
        self.process = psutil.Process(os.getpid())
    
    def get_memory_usage(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            return self.process.memory_info().rss
        except Exception:
            return 0
    
    def is_memory_high(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã—Å–æ–∫–æ–µ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        try:
            current_usage = self.get_memory_usage()
            return current_usage > self.max_memory_usage
        except Exception:
            return False
    

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_global_thread_safe_audio_player = None

def get_global_thread_safe_audio_player() -> ThreadSafeAudioPlayer:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ThreadSafeAudioPlayer"""
    global _global_thread_safe_audio_player
    
    if _global_thread_safe_audio_player is None:
        _global_thread_safe_audio_player = ThreadSafeAudioPlayer()
    
    return _global_thread_safe_audio_player

def initialize_global_thread_safe_audio_player(config: Dict = None) -> ThreadSafeAudioPlayer:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ThreadSafeAudioPlayer"""
    global _global_thread_safe_audio_player
    
    if _global_thread_safe_audio_player is None:
        _global_thread_safe_audio_player = ThreadSafeAudioPlayer()
    
    return _global_thread_safe_audio_player
                   