import asyncio
import sounddevice as sd
import numpy as np
import logging
import queue
import threading
import time
from typing import List
from unified_audio_system import UnifiedAudioSystem, DeviceInfo, get_global_unified_audio_system

logger = logging.getLogger(__name__)

class AudioPlayer:
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sounddevice.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (chunks) –≤ –≤–∏–¥–µ NumPy –º–∞—Å—Å–∏–≤–æ–≤ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∏—Ö –±–µ—Å—à–æ–≤–Ω–æ.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏.
    """
    def __init__(self, sample_rate=48000, channels=1, dtype='int16'):
        self.sample_rate = sample_rate
        self.channels = channels
        self.dtype = dtype
        
        self.audio_queue = queue.Queue()
        self.playback_thread = None
        self.stop_event = threading.Event()
        self.stream = None
        self.is_playing = False
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.internal_buffer = np.array([], dtype=np.int16)
        self.buffer_lock = threading.Lock()
        self.stream_lock = threading.Lock()
        
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        self.audio_manager = None
        self.current_device_info = None
        self.device_switch_threshold = 1.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏
        self._last_device_switch = 0
        
        # –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
        self.device_priorities = {
            'airpods': 100,           # AirPods - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'beats': 95,              # Beats –Ω–∞—É—à–Ω–∏–∫–∏
            'bluetooth_headphones': 90, # Bluetooth –Ω–∞—É—à–Ω–∏–∫–∏
            'usb_headphones': 85,     # USB –Ω–∞—É—à–Ω–∏–∫–∏
            'bluetooth_speakers': 70, # Bluetooth –∫–æ–ª–æ–Ω–∫–∏
            'usb_audio': 60,          # USB –∞—É–¥–∏–æ
            'system_speakers': 40,    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏
            'other': 20               # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
        self.auto_switch_to_headphones = True
        self.pause_on_disconnect = True
        self.resume_on_reconnect = True
        self._was_paused_for_disconnect = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self._check_audio_devices()
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π guard –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≥–æ–Ω–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏/—Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤
        self._is_shutting_down = False
        self._shutdown_mutex = threading.Lock()
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        self._cached_stream_config = None
        self._cached_device_info = None
        self._stream_cache_valid = False
        self._cache_lock = threading.Lock()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        self._init_audio_manager()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
        self.start_device_monitoring()
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–æ–Ω–µ
        self._preload_audio_system()

    def _cache_stream_config(self, config, device_info):
        """–ö—ç—à–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ç–æ–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        with self._cache_lock:
            self._cached_stream_config = config.copy()
            # DeviceInfo - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            self._cached_device_info = device_info
            self._stream_cache_valid = True
            logger.debug("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _get_cached_stream_config(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ç–æ–∫–∞"""
        with self._cache_lock:
            if self._stream_cache_valid and self._cached_stream_config:
                logger.debug("üíæ –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ç–æ–∫–∞")
                return self._cached_stream_config.copy(), self._cached_device_info
            return None, None
    
    def _invalidate_stream_cache(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞"""
        with self._cache_lock:
            self._stream_cache_valid = False
            self._cached_stream_config = None
            self._cached_device_info = None
            logger.debug("üóëÔ∏è –ö—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞ –æ—á–∏—â–µ–Ω")
    
    def _preload_audio_system(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        def preload_worker():
            try:
                logger.info("üîÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
                all_devices, current_device, current_device_info = self._get_audio_manager_devices()
                
                if all_devices and current_device_info:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    device_type = getattr(current_device_info, 'type', 'unknown')
                    
                    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    if device_type in ['airpods', 'beats', 'bluetooth_headphones']:
                        config = {
                            'channels': 2,
                            'samplerate': 44100,
                            'dtype': np.int16
                        }
                    else:
                        config = {
                            'channels': 2,
                            'samplerate': 48000,
                            'dtype': np.int16
                        }
                    
                    # –ö—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    self._cache_stream_config(config, current_device_info)
                    logger.info("‚úÖ –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        preload_thread = threading.Thread(target=preload_worker, daemon=True)
        preload_thread.start()

    def _init_audio_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedAudioSystem...")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è UnifiedAudioSystem
            config = {
                'switch_audio_path': '/opt/homebrew/bin/SwitchAudioSource',
                'device_priorities': {
                    'airpods': 95,
                    'beats': 90,
                    'bluetooth_headphones': 85,
                    'usb_headphones': 80,
                    'speakers': 70,
                    'microphone': 60,
                    'virtual': 1
                },
                'virtual_device_keywords': ['blackhole', 'loopback', 'virtual'],
                'exclude_virtual_devices': True
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem
            self.audio_manager = get_global_unified_audio_system(config)
            
            # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self.audio_manager.add_callback(self._on_device_change_callback)
            
            logger.info("‚úÖ UnifiedAudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UnifiedAudioSystem: {e}")
            self.audio_manager = None
    
    def _get_audio_manager_devices(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ UnifiedAudioSystem"""
        if not self.audio_manager:
            return None, None, None

        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å UnifiedAudioSystem
            time.sleep(0.3)  # 300ms –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ UnifiedAudioSystem
            all_devices = self.audio_manager.get_available_devices()
            current_device = self.audio_manager.get_current_device()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            current_device_info = self.audio_manager.get_current_device_info()

            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ UnifiedAudioSystem: {len(all_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            logger.info(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")

            return all_devices, current_device, current_device_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ UnifiedAudioSystem: {e}")
            return None, None, None

    def _on_device_change_callback(self, event_type: str, device_info: dict):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Ç UnifiedAudioSystem"""
        try:
            logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç UnifiedAudioSystem: {event_type}")
            logger.info(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info.get('name', 'Unknown')}")
            logger.info(f"   –¢–∏–ø: {device_info.get('type', 'Unknown')}")
            logger.info(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device_info.get('priority', 0)}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è...")
            self.force_device_refresh()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self._invalidate_stream_cache()
            
            if event_type == 'device_added':
                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
                if device_info.get('priority', 0) >= 85:
                    logger.info("üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    # AudioManagerDaemon —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    self._update_current_device_info()
            
            elif event_type == 'device_removed':
                # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                current_device = self.audio_manager.get_current_device() if self.audio_manager else None
                if not current_device:
                    logger.info("üîÑ –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    self._update_current_device_info()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback AudioManagerDaemon: {e}")

    def _update_current_device_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        try:
            if self.audio_manager:
                current_device = self.audio_manager.get_current_device()
                if current_device:
                    device_info = self.audio_manager.get_device_info(current_device)
                    self.current_device_info = {
                        'name': device_info.name,
                        'type': device_info.device_type.value,
                        'priority': device_info.priority,
                        'is_headphones': device_info.device_type.value in ['airpods', 'beats', 'bluetooth_headphones', 'usb_headphones'],
                        'timestamp': time.time()
                    }
                    logger.info(f"üì± –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {current_device}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")

    def start_device_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        if self.audio_manager and self.audio_manager.running:
            logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ AudioManagerDaemon")
            return
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ AudioManagerDaemon
        if self.audio_manager:
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ AudioManagerDaemon –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

    def stop_device_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        if self.audio_manager and self.audio_manager.running:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ AudioManagerDaemon...")
            self.audio_manager.stop()
        else:
            logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _on_device_change_enhanced(self, old_device, new_device, source):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})!")
            logger.info(f"   –°—Ç–∞—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {old_device}")
            logger.info(f"   –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {new_device}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞—É—à–Ω–∏–∫–∞–º–∏
            if new_device and self._is_headphones(new_device['name']):
                logger.info(f"üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—É—à–Ω–∏–∫–∏: {new_device['name']}")
                self._handle_headphones_connection_enhanced(new_device)
            elif old_device and self._is_headphones(old_device['name']):
                logger.info(f"üéß –ù–∞—É—à–Ω–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã: {old_device['name']}")
                self._handle_headphones_disconnection_enhanced()
            else:
                # –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                self._handle_device_change_enhanced(new_device)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")

    def _on_device_change(self, added_devices, removed_devices):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)."""
        try:
            logger.info("üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")
            logger.info(f"   –î–æ–±–∞–≤–ª–µ–Ω—ã: {added_devices}")
            logger.info(f"   –£–¥–∞–ª–µ–Ω—ã: {removed_devices}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            for device_name in added_devices:
                if self._is_headphones(device_name):
                    logger.info(f"üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—É—à–Ω–∏–∫–∏: {device_name}")
                    self._handle_headphones_connection_by_name(device_name)
                    return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            for device_name in removed_devices:
                if self._is_headphones(device_name):
                    logger.info(f"üéß –ù–∞—É—à–Ω–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã: {device_name}")
                    self._handle_headphones_disconnection()
                    return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
            if self._was_headphones_disconnected():
                logger.info("üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—É—à–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
                self._handle_headphones_disconnection()
                return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")

    def _handle_headphones_connection_enhanced(self, device_info):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤."""
        try:
            logger.info(f"üéß –ù–ê–£–®–ù–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–´: {device_info['name']}")
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            devices = self.list_available_devices()
            device_index = None
            for device in devices:
                if device['name'] == device_info['name']:
                    device_index = device['index']
                    break
            
            if device_index is not None:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π default –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
                try:
                    import sounddevice as sd
                    current_default = sd.default.device
                    if hasattr(current_default, '__getitem__'):  # list, tuple, or _InputOutputPair
                        new_default = (current_default[0], device_index)
                    else:
                        new_default = device_index
                    
                    sd.default.device = new_default
                    logger.info(f"üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π default –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏: {device_info['name']} (–∏–Ω–¥–µ–∫—Å: {device_index})")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π default: {e}")
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
                self.switch_to_device(device_index=device_index)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                if self.resume_on_reconnect and self._was_paused_for_disconnect:
                    self.resume_playback()
                    self._was_paused_for_disconnect = False
                    logger.info("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_info['name']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤: {e}")

    def _handle_headphones_disconnection_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤."""
        try:
            logger.info("üéß –ù–ê–£–®–ù–ò–ö–ò –û–¢–ö–õ–Æ–ß–ï–ù–´")
            
            # –ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.pause_on_disconnect and self.is_playing:
                self.pause_playback()
                self._was_paused_for_disconnect = True
                logger.info("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤—Ä—É—á–Ω—É—é - –¥–æ–≤–µ—Ä—è–µ–º AudioManagerDaemon
            if self.audio_manager:
                logger.info("üîÑ AudioManagerDaemon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                # AudioManagerDaemon —Å–∞–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            else:
                # Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.warning("‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                self.switch_to_system_device()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤: {e}")

    def _handle_device_change_enhanced(self, new_device_info):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
            current_time = time.time()
            if hasattr(self, '_last_device_switch') and current_time - self._last_device_switch < self.device_switch_threshold:
                logger.info("‚è±Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return
            
            self._last_device_switch = current_time
            
            # –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            if self.is_playing and self.stream and self.stream.active:
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                was_playing = self.is_playing
                current_queue_size = self.audio_queue.qsize()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
                self._safe_stop_stream()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                time.sleep(0.2)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                self._restart_stream_with_new_device()
                
                logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {new_device_info['name'] if new_device_info else 'Unknown'}")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
                if was_playing and current_queue_size > 0:
                    logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
                    self.is_playing = True
            else:
                logger.info("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")

    def _handle_headphones_connection_by_name(self, device_name):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—É—à–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏
            devices = self.list_available_devices()
            device_info = None
            
            for device in devices:
                if device['name'] == device_name and device['is_headphones']:
                    device_info = device
                    break
            
            if device_info:
                self._handle_headphones_connection(device_info)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device_name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤: {e}")





    def _handle_device_change(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
            current_time = time.time()
            if hasattr(self, '_last_device_switch') and current_time - self._last_device_switch < self.device_switch_threshold:
                logger.info("‚è±Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return
            
            self._last_device_switch = current_time
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            new_device_info = self.get_current_device_info()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
            if self.auto_switch_to_headphones:
                if self._should_auto_switch_to_headphones(new_device_info):
                    self._handle_headphones_connection(new_device_info)
                    return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
                elif self._was_headphones_disconnected():
                    self._handle_headphones_disconnection()
                    return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
            
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if self.is_playing and self.stream and self.stream.active:
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                was_playing = self.is_playing
                current_queue_size = self.audio_queue.qsize()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
                self._safe_stop_stream()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                time.sleep(0.2)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                self._restart_stream_with_new_device()
                
                logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {self.current_device_info['name']}")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
                if was_playing and current_queue_size > 0:
                    logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
                    self.is_playing = True
                
            else:
                logger.info("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")

    def _safe_stop_stream(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫."""
        try:
            if self.stream and hasattr(self.stream, 'active') and self.stream.active:
                self.stream.stop()
                logger.info("‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            if self.stream:
                self.stream.close()
                self.stream = None
                logger.info("‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")

    def _restart_stream_with_new_device(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            devices = sd.query_devices()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            try:
                default_device = sd.default.device
                if isinstance(default_device, (list, tuple)):
                    current_output = default_device[1]  # output device
                else:
                    current_output = default_device
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
                if not isinstance(current_output, int) or current_output == -1 or current_output >= len(devices):
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                    return
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
                return
            
            device_info = devices[current_output]
            configs = self._get_adaptive_configs(devices, current_output)
            
            logger.info(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            
            # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            for i, config in enumerate(configs):
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: ch={config['channels']}, sr={config['samplerate']}")
                    
                    with self.stream_lock:
                        stream = sd.OutputStream(
                            device=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
                            callback=self._playback_callback,
                            **config
                        )
                        stream.start()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    self.channels = config['channels']
                    self.sample_rate = config['samplerate']
                    self.dtype = config['dtype']
                    self.stream = stream
                    
                    logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: ch={config['channels']}, sr={config['samplerate']}")
                    return
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {i+1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if i < len(configs) - 1:
                        time.sleep(0.1)
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")

    def get_current_device_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç AudioManagerDaemon
            if self.audio_manager:
                current_device = self.audio_manager.get_current_device()
                if current_device:
                    device_info = self.audio_manager.get_device_info(current_device)
                    return {
                        'name': device_info.name,
                        'type': device_info.device_type.value,
                        'priority': device_info.priority,
                        'is_headphones': device_info.device_type.value in ['airpods', 'beats', 'bluetooth_headphones', 'usb_headphones'],
                        'is_default': device_info.is_default,
                        'timestamp': time.time()
                    }
            
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            devices = sd.query_devices()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            try:
                default_device = sd.default.device
                if isinstance(default_device, (list, tuple)):
                    current_output = default_device[1]  # output device
                else:
                    current_output = default_device
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
                if not isinstance(current_output, int) or current_output == -1 or current_output >= len(devices):
                    return None
                    
            except Exception as e:
                logger.debug(f"üì± –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
                return None
            
            device = devices[current_output]
            return {
                'index': current_output,
                'name': device.get('name', 'Unknown'),
                'max_channels': device.get('max_output_channels', 0),
                'default_samplerate': device.get('default_samplerate', 0),
                'max_samplerate': device.get('max_samplerate', 0)
            }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
            return None

    def force_device_refresh(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫."""
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
            
            # –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            if self.is_playing and self.stream and self.stream.active:
                self._handle_device_change()
            
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")

    def switch_to_device(self, device_name=None, device_index=None):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
        
        Args:
            device_name: –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'MacBook Air Speakers')
            device_index: –ò–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        """
        try:
            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name or device_index}")
            
            devices = sd.query_devices()
            
            # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            target_device = None
            if device_name:
                for i, dev in enumerate(devices):
                    if device_name.lower() in dev.get('name', '').lower():
                        target_device = i
                    break
            elif device_index is not None:
                if 0 <= device_index < len(devices):
                    target_device = device_index
            
            if target_device is None:
                logger.warning(f"‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {device_name or device_index}")
                return False
            
            device_info = devices[target_device]
            logger.info(f"üì± –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞: {device_info.get('name', 'Unknown')} (–∏–Ω–¥–µ–∫—Å: {target_device})")
            
            # –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            if self.is_playing and self.stream and self.stream.active:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                was_playing = self.is_playing
                current_queue_size = self.audio_queue.qsize()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
                self._safe_stop_stream()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                time.sleep(0.2)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
                self._restart_stream_with_specific_device(target_device)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
                if was_playing and current_queue_size > 0:
                    logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
                    self.is_playing = True
                
                logger.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {device_info.get('name', 'Unknown')} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return True
            else:
                logger.info("üì± –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –æ–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
                self.current_device_info = {
                    'index': target_device,
                    'name': device_info.get('name', 'Unknown'),
                    'max_channels': device_info.get('max_output_channels', 0),
                    'default_samplerate': device_info.get('default_samplerate', 0),
                    'max_samplerate': device_info.get('max_samplerate', 0),
                    'timestamp': time.time()
                }
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False

    def _restart_stream_with_specific_device(self, device_index):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º {device_index}...")
            
            devices = sd.query_devices()
            if device_index >= len(devices):
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                return
            
            device_info = devices[device_index]
            configs = self._get_adaptive_configs(devices, device_index)
            
            logger.info(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_index}: {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            
            # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            for i, config in enumerate(configs):
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: device={device_index}, ch={config['channels']}, sr={config['samplerate']}")
                    
                    with self.stream_lock:
                        stream = sd.OutputStream(
                            device=device_index,  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                            callback=self._playback_callback,
                            **config
                        )
                        stream.start()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    self.channels = config['channels']
                    self.sample_rate = config['samplerate']
                    self.dtype = config['dtype']
                    self.stream = stream
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                    self.current_device_info = {
                        'index': device_index,
                        'name': device_info.get('name', 'Unknown'),
                        'max_channels': config['channels'],
                        'default_samplerate': config['samplerate'],
                        'max_samplerate': device_info.get('max_samplerate', 0),
                        'timestamp': time.time()
                    }
                    
                    logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: {device_info.get('name', 'Unknown')} (ch={config['channels']}, sr={config['samplerate']})")
                    return
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {i+1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if i < len(configs) - 1:
                        time.sleep(0.1)
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")

    def list_available_devices(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            devices = sd.query_devices()
            available_devices = []
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                default_device = sd.default.device
                if isinstance(default_device, (list, tuple)):
                    current_default = default_device[1]  # output device
                else:
                    current_default = default_device
            except Exception:
                current_default = -1
            
            for i, dev in enumerate(devices):
                if dev.get('max_output_channels', 0) > 0:  # –¢–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
                    device_info = {
                        'index': i,
                        'name': dev.get('name', 'Unknown'),
                        'max_channels': dev.get('max_output_channels', 0),
                        'default_samplerate': dev.get('default_samplerate', 0),
                        'max_samplerate': dev.get('max_samplerate', 0),
                        'is_default': i == current_default,
                        'is_headphones': self._is_headphones(dev.get('name', '')),
                        'priority': self._get_device_priority(dev)
                    }
                    available_devices.append(device_info)
            
            return available_devices
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return []









    def _playback_callback(self, outdata, frames, time, status):
        """Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è sounddevice, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –≤—ã–≤–æ–¥–∞."""
        if status:
            logger.warning(f"Sounddevice status: {status}")

        try:
            with self.buffer_lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
                if len(self.internal_buffer) >= frames:
                    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ (–º–æ–Ω–æ ‚Üí –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                    mono_samples = self.internal_buffer[:frames]
                    if outdata.dtype.kind == 'f':
                        # float32/-64 –æ–∂–∏–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è [-1.0, 1.0]
                        fs = mono_samples.astype(np.float32) / 32768.0
                        if self.channels == 1:
                            outdata[:frames, 0] = fs
                        else:
                            # –°—Ç–µ—Ä–µ–æ: –¥—É–±–ª–∏—Ä—É–µ–º –º–æ–Ω–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
                            for ch in range(self.channels):
                                outdata[:frames, ch] = fs
                    else:
                        if self.channels == 1:
                            outdata[:frames, 0] = mono_samples
                        else:
                            # –°—Ç–µ—Ä–µ–æ: –¥—É–±–ª–∏—Ä—É–µ–º –º–æ–Ω–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
                            for ch in range(self.channels):
                                outdata[:frames, ch] = mono_samples
                    self.internal_buffer = self.internal_buffer[frames:]
                else:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    try:
                        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞–Ω–∫–∏ –≤ –±—É—Ñ–µ—Ä (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
                        chunks_to_add = []
                        while not self.audio_queue.empty():
                            chunk = self.audio_queue.get_nowait()
                            if chunk is not None and len(chunk) > 0:
                                chunks_to_add.append(chunk)
                            self.audio_queue.task_done()
                        
                        if chunks_to_add:
                            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ —Å—Ä–∞–∑—É
                            self.internal_buffer = np.concatenate([self.internal_buffer] + chunks_to_add)
                            logger.debug(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(chunks_to_add)} —á–∞–Ω–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä. –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(self.internal_buffer)}")
                    except queue.Empty:
                        pass
                    
                    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                    if len(self.internal_buffer) >= frames:
                        mono_samples = self.internal_buffer[:frames]
                        if outdata.dtype.kind == 'f':
                            fs = mono_samples.astype(np.float32) / 32768.0
                            if self.channels == 1:
                                outdata[:frames, 0] = fs
                            else:
                                for ch in range(self.channels):
                                    outdata[:frames, ch] = fs
                        else:
                            if self.channels == 1:
                                outdata[:frames, 0] = mono_samples
                            else:
                                for ch in range(self.channels):
                                    outdata[:frames, ch] = mono_samples
                        self.internal_buffer = self.internal_buffer[frames:]
                        logger.debug(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞—É–¥–∏–æ: {frames} —Å—ç–º–ø–ª–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä–µ: {len(self.internal_buffer)}")
                    else:
                        # –í—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                        available = len(self.internal_buffer)
                        if available > 0:
                            # –ü–∏—à–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—ç–º–ø–ª—ã –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                            mono_samples = self.internal_buffer
                            if outdata.dtype.kind == 'f':
                                fs = mono_samples.astype(np.float32) / 32768.0
                                if self.channels == 1:
                                    outdata[:available, 0] = fs
                                    outdata[available:frames, 0] = 0.0
                                else:
                                    for ch in range(self.channels):
                                        outdata[:available, ch] = fs
                                    outdata[available:frames, :] = 0.0
                            else:
                                if self.channels == 1:
                                    outdata[:available, 0] = mono_samples
                                    outdata[available:frames, 0] = 0
                                else:
                                    for ch in range(self.channels):
                                        outdata[:available, ch] = mono_samples
                                    outdata[available:frames, :] = 0
                            self.internal_buffer = np.array([], dtype=np.int16)
                            logger.debug(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {available} —Å—ç–º–ø–ª–æ–≤, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–∏—à–∏–Ω–∞")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –µ—â–µ —Ä–∞–∑
                            try:
                                chunk = self.audio_queue.get_nowait()
                                if chunk is not None and len(chunk) > 0:
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–∞–Ω–∫
                                    if len(chunk) >= frames:
                                        mono_samples = chunk[:frames]
                                        if outdata.dtype.kind == 'f':
                                            fs = mono_samples.astype(np.float32) / 32768.0
                                            if self.channels == 1:
                                                outdata[:frames, 0] = fs
                                            else:
                                                for ch in range(self.channels):
                                                    outdata[:frames, ch] = fs
                                        else:
                                            if self.channels == 1:
                                                outdata[:frames, 0] = mono_samples
                                            else:
                                                for ch in range(self.channels):
                                                    outdata[:frames, ch] = mono_samples
                                        # –û—Å—Ç–∞—Ç–æ–∫ —á–∞–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
                                        if len(chunk) > frames:
                                            self.internal_buffer = chunk[frames:]
                                        logger.debug(f"üéµ –ß–∞–Ω–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞–ø—Ä—è–º—É—é: {frames} —Å—ç–º–ø–ª–æ–≤")
                                    else:
                                        # –ß–∞–Ω–∫ –º–µ–Ω—å—à–µ frames, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                                        c = len(chunk)
                                        if outdata.dtype.kind == 'f':
                                            fs = chunk.astype(np.float32) / 32768.0
                                            if self.channels == 1:
                                                outdata[:c, 0] = fs
                                                outdata[c:frames, 0] = 0.0
                                            else:
                                                for ch in range(self.channels):
                                                    outdata[:c, ch] = fs
                                                outdata[c:frames, :] = 0.0
                                        else:
                                            if self.channels == 1:
                                                outdata[:c, 0] = chunk
                                                outdata[c:frames, 0] = 0
                                            else:
                                                for ch in range(self.channels):
                                                    outdata[:c, ch] = chunk
                                                outdata[c:frames, :] = 0
                                        logger.debug(f"üéµ –ö–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫: {len(chunk)} —Å—ç–º–ø–ª–æ–≤, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–∏—à–∏–Ω–∞")
                                else:
                                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Ç–∏—à–∏–Ω–∞
                                    outdata.fill(0)
                                    logger.debug("üîá –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - —Ç–∏—à–∏–Ω–∞")
                                self.audio_queue.task_done()
                            except queue.Empty:
                                # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —Ç–∏—à–∏–Ω–∞
                                outdata.fill(0)
                                logger.debug("üîá –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - —Ç–∏—à–∏–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ playback callback: {e}")
            outdata.fill(0)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É

    def add_chunk(self, audio_chunk: np.ndarray):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —á–∞–Ω–∫ –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."""
        if getattr(self, '_is_shutting_down', False):
            logger.debug("üîí Shutdown –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî add_chunk –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        if audio_chunk is None or len(audio_chunk) == 0:
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫!")
            return
        
        # üîç –û–¢–õ–ê–î–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üîç –í—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ —á–∞–Ω–∫: shape={audio_chunk.shape}, dtype={audio_chunk.dtype}, min={audio_chunk.min()}, max={audio_chunk.max()}, mean={audio_chunk.mean():.2f}")
        logger.info(f"üîä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–µ–µ—Ä–∞: channels={self.channels}, sample_rate={self.sample_rate}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–∞—Ç—É int16 mono
        try:
            if isinstance(audio_chunk, np.ndarray):
                # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ/–º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–æ ‚Üí –º–æ–Ω–æ
                if audio_chunk.ndim == 2 and audio_chunk.shape[1] > 1:
                    try:
                        audio_chunk = np.mean(audio_chunk, axis=1)
                    except Exception:
                        audio_chunk = audio_chunk[:, 0]
                elif audio_chunk.ndim > 1:
                    audio_chunk = audio_chunk.reshape(-1)

                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int16
                if audio_chunk.dtype.kind == 'f':
                    # –û–∂–∏–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [-1.0, 1.0]
                    audio_chunk = np.clip(audio_chunk, -1.0, 1.0)
                    audio_chunk = (audio_chunk * 32767.0).astype(np.int16)
                elif audio_chunk.dtype != np.int16:
                    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int16 –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        audio_chunk = np.clip(audio_chunk, -32768, 32767).astype(np.int16)
                    except Exception:
                        audio_chunk = audio_chunk.astype(np.int16, copy=False)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —á–∞–Ω–∫, –ø—Ä–æ–¥–æ–ª–∂–∞—é –∫–∞–∫ –µ—Å—Ç—å: {e}")
        
        # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —á–∞–Ω–∫–µ
        try:
            if not self.is_playing or self.stream is None or not getattr(self.stream, 'active', False):
                logger.info("üéµ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞")
                self.start_playback()
        except Exception:
            pass

        chunk_size = len(audio_chunk)
        logger.debug(f"üéµ –î–æ–±–∞–≤–ª—è—é –∞—É–¥–∏–æ —á–∞–Ω–∫ —Ä–∞–∑–º–µ—Ä–æ–º {chunk_size} —Å—ç–º–ø–ª–æ–≤")
        

        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ –æ—á–µ—Ä–µ–¥—å
            self.audio_queue.put(audio_chunk)
            logger.debug(f"‚úÖ –ê—É–¥–∏–æ —á–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.audio_queue.qsize()}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                if not self.audio_queue.full():
                    self.audio_queue.put(audio_chunk)
                    logger.info("‚úÖ –ê—É–¥–∏–æ —á–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                else:
                    logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —á–∞–Ω–∫ –æ—Ç–±—Ä–æ—à–µ–Ω")
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e2}")

    def start_playback(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if getattr(self, '_is_shutting_down', False):
            logger.info("üîí Shutdown –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî start_playback –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        if self.is_playing:
            logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            return
        
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ...")
        self.stop_event.clear()
        self._clear_buffers()  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            cached_config, cached_device_info = self._get_cached_stream_config()
            
            if cached_config:
                logger.info("‚ö° –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    self.playback_thread = threading.Thread(target=self._playback_loop, daemon=True)
                    self.playback_thread.start()
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    with self.stream_lock:
                        self.stream = sd.OutputStream(
                            device=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
                            callback=self._playback_callback,
                            **cached_config
                        )
                        # –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫!
                        self.stream.start()
                    
                    self.is_playing = True
                    logger.info("‚ö° –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π!")
                    return
                    
                except Exception as cache_e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {cache_e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
                    self._invalidate_stream_cache()
            
            # –ü—Ä–µ–¥–æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–æ–Ω–æ–∫ CoreAudio/BT
            try:
                if getattr(self, 'preflush_on_switch', True):
                    if self.stream and hasattr(self.stream, 'active') and self.stream.active:
                        self.stream.stop()
                        self.stream.close()
                        self.stream = None
                    sd.stop()
                    time.sleep(max(0.05, getattr(self, 'settle_ms', 400)/1000.0))
            except Exception:
                pass

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.playback_thread = threading.Thread(target=self._playback_loop, daemon=True)
            self.playback_thread.start()
            
            # –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info("üîä –ó–∞–ø—É—Å–∫ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ: macOS —É–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏")
            self.stream = self._safe_init_stream()
            self.is_playing = True
            
            # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if self.stream and hasattr(self.stream, 'channels') and hasattr(self.stream, 'samplerate'):
                config = {
                    'channels': self.stream.channels,
                    'samplerate': self.stream.samplerate,
                    'dtype': np.int16
                }
                self._cache_stream_config(config, self.current_device_info)
            
            logger.info("‚úÖ –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            self.is_playing = False
            self.playback_thread = None
            self.stream = None

    def stop_playback(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ."""
        if getattr(self, '_is_shutting_down', False):
            logger.info("üîí Shutdown —É–∂–µ –∏–¥—ë—Ç ‚Äî stop_playback –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        with self._shutdown_mutex:
            if self._is_shutting_down:
                logger.info("üîí Shutdown —É–∂–µ –∏–¥—ë—Ç ‚Äî stop_playback –ø—Ä–æ–ø—É—â–µ–Ω")
                return
            self._is_shutting_down = True
        if not self.is_playing:
            logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            self._is_shutting_down = False
            return
        
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ...")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_event.set()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫
            if self.stream:
                with self.stream_lock:
                    if self.stream:
                        if hasattr(self.stream, 'active') and self.stream.active:
                            self.stream.stop()
                            logger.info("‚úÖ –ó–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        self.stream.close()
                        self.stream = None
                        logger.info("‚úÖ –ó–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.playback_thread and self.playback_thread.is_alive():
                self.playback_thread.join(timeout=1.0)
                if self.playback_thread.is_alive():
                    logger.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É")
                else:
                    logger.info("‚úÖ –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = False
            self.playback_thread = None
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            self._clear_buffers()
            
            logger.info("‚úÖ –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = False
            self.playback_thread = None
            self.stream = None
        finally:
            self._is_shutting_down = False

    def pause_playback(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ."""
        try:
            logger.info("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.stop_event.set()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self.playback_thread and self.playback_thread.is_alive():
                self.playback_thread.join(timeout=1.0)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            self._safe_stop_stream()
            
            self.is_playing = False
            logger.info("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")

    def resume_playback(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ."""
        try:
            logger.info("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_event.clear()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            with self._shutdown_mutex:
                self._is_shutting_down = False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.playback_thread = threading.Thread(target=self._playback_loop, daemon=True)
            self.playback_thread.start()
            
            self.is_playing = True
            logger.info("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")

    def _playback_loop(self):
        """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while not self.stop_event.is_set():
                try:
                    # –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤
                    pass
                except Exception:
                    pass
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if not self.audio_queue.empty() or len(self.internal_buffer) > 0:
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
                    time.sleep(0.001)  # 1ms
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    time.sleep(0.01)  # 10ms
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        finally:
            logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")



    def _safe_init_stream(self, preferred_device=None):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: –ø—É—Å—Ç—å macOS —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.
        –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–≤–∏—Å—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
        """
        try:
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è "—á–∏—Å—Ç–æ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è
                sd.stop()
                time.sleep(0.1)
                
                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° CoreAudio –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                logger.info("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° CoreAudio –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫...")
                try:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
                    sd.stop()
                    time.sleep(0.3)
                    
                    # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CoreAudio
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ sounddevice
                        if hasattr(sd, '_coreaudio'):
                            sd._coreaudio.reinitialize()
                            logger.info("‚úÖ CoreAudio –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ API")
                        else:
                            logger.info("üîÑ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π —Å–±—Ä–æ—Å")
                            sd.stop()
                            time.sleep(0.5)
                    except Exception as ca_e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CoreAudio: {ca_e}")
                        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π —Å–±—Ä–æ—Å")
                        sd.stop()
                        time.sleep(0.5)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                    logger.info("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã...")
                    sd.stop()
                    time.sleep(0.2)
                    
                    logger.info("‚úÖ CoreAudio —Å–±—Ä–æ—à–µ–Ω –∏ –æ—á–∏—â–µ–Ω")
                    
                except Exception as reset_e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ CoreAudio: {reset_e}")
                    logger.info("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å –±–∞–∑–æ–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º")
                
                # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ UnifiedAudioSystem
                all_devices, current_device, current_device_info = self._get_audio_manager_devices()
                
                if all_devices is not None:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UnifiedAudioSystem
                    logger.info(f"üì± –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(all_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                    logger.info(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ UnifiedAudioSystem
                    for device_info in all_devices:
                        logger.info(f"  üì± {device_info.name} (—Ç–∏–ø: {device_info.device_type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device_info.priority})")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º PortAudio –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PortAudio...")
                    try:
                        sd._terminate()
                        time.sleep(0.2)
                        sd._initialize()
                        logger.info("‚úÖ PortAudio –æ–±–Ω–æ–≤–ª–µ–Ω")
                    except Exception as pa_e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PortAudio: {pa_e}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï PortAudio default —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    devices = sd.query_devices()
                    current_default_out = sd.default.device[1]  # –†–µ–∞–ª—å–Ω—ã–π default output
                    current_default_in = sd.default.device[0]   # –†–µ–∞–ª—å–Ω—ã–π default input
                    
                    logger.info(f"üîä –¢–µ–∫—É—â–∏–π default output: {current_default_out}")
                    logger.info(f"üéôÔ∏è –¢–µ–∫—É—â–∏–π default input: {current_default_in}")
                    
                    if current_default_out != -1:
                        default_out_name = devices[current_default_out].get('name', 'Unknown')
                        logger.info(f"üîä Default output: {current_default_out} ‚Äî {default_out_name}")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å AirPods
                        if 'airpods' in default_out_name.lower():
                            out_info = devices[current_default_out]
                else:
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                    logger.warning("‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é fallback")
                    devices = sd.query_devices()
                    current_default_out = sd.default.device[1]  # –†–µ–∞–ª—å–Ω—ã–π default output
                    current_default_in = sd.default.device[0]   # –†–µ–∞–ª—å–Ω—ã–π default input
                    
                    logger.info(f"üì± –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                    logger.info(f"üîä –¢–µ–∫—É—â–∏–π default output: {current_default_out}")
                    logger.info(f"üéôÔ∏è –¢–µ–∫—É—â–∏–π default input: {current_default_in}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ output)
                    for i, dev in enumerate(devices):
                        name = dev.get('name', 'Unknown')
                        in_ch = dev.get('max_input_channels', 0)
                        out_ch = dev.get('max_output_channels', 0)
                        if in_ch > 0 or out_ch > 0:
                            logger.info(f"  üì± {i}: {name} (in:{in_ch} out:{out_ch})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ñ–æ–ª—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                    if current_default_out != -1 and current_default_out < len(devices):
                        default_out_name = devices[current_default_out].get('name', 'Unknown')
                        logger.info(f"üîä Default output: {current_default_out} ‚Äî {default_out_name}")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å AirPods
                        if 'airpods' in default_out_name.lower():
                            out_info = devices[current_default_out]
                            max_channels = out_info.get('max_output_channels', 0)
                            default_sr = out_info.get('default_samplerate', 0)
                            
                            if max_channels <= 1 or default_sr <= 16000:
                                logger.info(f"üéß AirPods –≤ HFP —Ä–µ–∂–∏–º–µ (–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞): ch={max_channels}, sr={default_sr}")
                            else:
                                logger.info(f"üéß AirPods –≤ A2DP —Ä–µ–∂–∏–º–µ (–∫–∞—á–µ—Å—Ç–≤–æ): ch={max_channels}, sr={default_sr}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π default output: {current_default_out}")
                
                if current_default_in != -1 and current_default_in < len(devices):
                    default_in_name = devices[current_default_in].get('name', 'Unknown')
                    logger.info(f"üéôÔ∏è Default input: {current_default_in} ‚Äî {default_in_name}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π default input: {current_default_in}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            configs = self._get_adaptive_configs(devices, current_default_out)
            
            logger.info(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {current_default_out}: {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            
            # –£–ú–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            for i, config in enumerate(configs):
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: device=None (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π), ch={config['channels']}, sr={config['samplerate']}")
                    
                    # –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
                    if current_default_out != -1 and current_default_out < len(devices):
                        device_info = devices[current_default_out]
                        device_name = device_info.get('name', '').lower()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        if any(tag in device_name for tag in ['airpods', 'bluetooth', 'wireless']):
                            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å {device_info.get('name', 'Unknown')}")
                            
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                            if self._test_device_compatibility(current_default_out, config):
                                logger.info(f"‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {config['channels']}ch/{config['samplerate']}Hz")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è {config['channels']}ch/{config['samplerate']}Hz")
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                continue
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞
                        with self.stream_lock:
                            stream = sd.OutputStream(
                            device=None,  # –ü—É—Å—Ç—å macOS —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç
                                callback=self._playback_callback,
                            **config
                            )
                            stream.start()
                    
                    logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º, ch={config['channels']}, sr={config['samplerate']}")
                    self.channels = config['channels']
                    self.sample_rate = config['samplerate']
                    self.dtype = config['dtype']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    self._last_device_info = {
                        'index': current_default_out,
                        'name': devices[current_default_out].get('name', 'Unknown') if current_default_out < len(devices) else 'Unknown',
                        'channels': config['channels'],
                        'samplerate': config['samplerate'],
                        'timestamp': time.time()
                    }
                    
                    logger.info(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self._last_device_info['name']} (–∏–Ω–¥–µ–∫—Å: {current_default_out})")
                    return stream
                    
                except Exception as e:
                    error_msg = str(e)
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {i+1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_msg}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ -10851/-9986, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–∏—Å—à–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    if any(code in error_msg for code in ['-10851', '-9986', 'Invalid Property Value']):
                        if i == 0:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
                            logger.warning("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–≤–∏—Å—à–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø—Ä–æ–±—É—é —Å–±—Ä–æ—Å CoreAudio...")
                            try:
                                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
                                sd.stop()
                                time.sleep(0.5)
                                
                                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° CoreAudio
                                logger.info("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° CoreAudio...")
                                try:
                                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ sounddevice
                                    if hasattr(sd, '_coreaudio'):
                                        sd._coreaudio.reinitialize()
                                        logger.info("‚úÖ CoreAudio –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                                    else:
                                        logger.info("üîÑ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–∞–∑–æ–≤—ã–π —Å–±—Ä–æ—Å")
                                        sd.stop()
                                        time.sleep(0.8)
                                except Exception as ca_e:
                                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ca_e}")
                                    sd.stop()
                                    time.sleep(0.8)
                                
                                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                                devices = sd.query_devices()
                                logger.info(f"üì± –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                                
                                # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                                logger.info("üîÑ –ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞...")
                                try:
                                    with self.stream_lock:
                                        stream = sd.OutputStream(
                                            device=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
                                            callback=self._playback_callback,
                                            **config
                                            )
                                        stream.start()
                                    
                                    logger.info(f"‚úÖ –£—Å–ø–µ—Ö –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: ch={config['channels']}, sr={config['samplerate']}")
                                    self.channels = config['channels'],
                                    self.sample_rate = config['samplerate'],
                                    self.dtype = config['dtype'],
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                                    self._last_device_info = {
                                        'index': current_default_out,
                                        'name': devices[current_default_out].get('name', 'Unknown') if current_default_out < len(devices) else 'Unknown',
                                        'channels': config['channels'],
                                        'samplerate': config['samplerate'],
                                        'timestamp': time.time()
                                    }
                                    
                                    logger.info(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {self._last_device_info['name']} (–∏–Ω–¥–µ–∫—Å: {current_default_out})")
                                    return stream
                                    
                                except Exception as retry_e:
                                    logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {retry_e}")
                                    
                                    # Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                                    builtin_devices = self._find_builtin_devices()
                                    if builtin_devices:
                                        out_idx = builtin_devices.get('output')
                                        if out_idx is not None:
                                            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ: output={out_idx}")
                                            stream = sd.OutputStream(
                                                device=out_idx,
                                                channels=2,
                                                samplerate=48000,
                                                dtype=np.int16,
                                                callback=self._playback_callback
                                            )
                                            stream.start()
                                            logger.info("‚úÖ Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–µ–Ω")
                                            
                                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                                            self._last_device_info = {
                                                'index': out_idx,
                                                'name': f'Built-in Device {out_idx} (fallback)',
                                                'channels': 2,
                                                'samplerate': 48000,
                                                'timestamp': time.time()
                                            }
                                            
                                            self.channels = 2
                                            self.sample_rate = 48000
                                            self.dtype = np.int16
                                            
                                            logger.info(f"üì± Fallback —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self._last_device_info['name']} (–∏–Ω–¥–µ–∫—Å: {out_idx})")
                                            return stream
                            except Exception as fallback_e:
                                logger.warning(f"‚ö†Ô∏è Fallback —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {fallback_e}")
                    
                    if i < len(configs) - 1:
                        time.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ")

        except Exception as e:

            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            raise

    def _is_headphones(self, device_name: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞—É—à–Ω–∏–∫–∞–º–∏."""
        try:
            device_lower = device_name.lower()
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
            headphones_keywords = [
                'airpods', 'beats', 'sony', 'bose', 'sennheiser',
                'headphones', 'earbuds', 'earphones', 'headset'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            for keyword in headphones_keywords:
                if keyword in device_lower:
                    return True
                    
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def _get_device_priority(self, device_info: dict) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            device_name = device_info.get('name', '').lower()
            
            # AirPods - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if 'airpods' in device_name:
                return self.device_priorities['airpods']
                
            # Beats –Ω–∞—É—à–Ω–∏–∫–∏
            elif 'beats' in device_name:
                return self.device_priorities['beats']
                
            # Bluetooth –Ω–∞—É—à–Ω–∏–∫–∏
            elif 'bluetooth' in device_name and self._is_headphones(device_name):
                return self.device_priorities['bluetooth_headphones']
                
            # USB –Ω–∞—É—à–Ω–∏–∫–∏
            elif 'usb' in device_name and self._is_headphones(device_name):
                return self.device_priorities['usb_headphones']
                
            # Bluetooth –∫–æ–ª–æ–Ω–∫–∏
            elif 'bluetooth' in device_name:
                return self.device_priorities['bluetooth_speakers']
                
            # USB –∞—É–¥–∏–æ
            elif 'usb' in device_name:
                return self.device_priorities['usb_audio']
                
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏
            elif any(tag in device_name for tag in ['macbook', 'built-in', 'internal', 'speakers']):
                return self.device_priorities['system_speakers']
                
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            else:
                return self.device_priorities['other']
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e}")
            return 0

    def _should_auto_switch_to_headphones(self, new_device_info: dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏."""
        try:
            if not self.auto_switch_to_headphones:
                return False
                
            # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –Ω–∞—É—à–Ω–∏–∫–∏, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
            if new_device_info and self._is_headphones(new_device_info['name']):
                logger.info("üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—É—à–Ω–∏–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ!")
                return True
                
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def _handle_headphones_connection(self, device_info: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—É—à–Ω–∏–∫–æ–≤."""
        try:
            logger.info(f"üéß –ù–ê–£–®–ù–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–´: {device_info['name']}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π default –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
            try:
                import sounddevice as sd
                current_default = sd.default.device
                if isinstance(current_default, (list, tuple)) and len(current_default) >= 2:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ output, –æ—Å—Ç–∞–≤–ª—è–µ–º input
                    new_default = (current_default[0], device_info['index'])
                else:
                    new_default = device_info['index']
                
                sd.default.device = new_default
                logger.info(f"üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π default –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏: {device_info['name']} (–∏–Ω–¥–µ–∫—Å: {device_info['index']})")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π default –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏: {e}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
            self.switch_to_device(device_index=device_info['index'])
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if self.resume_on_reconnect and self._was_paused_for_disconnect:
                self.resume_playback()
                self._was_paused_for_disconnect = False
                logger.info("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤: {e}")

    def _handle_headphones_disconnection(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—É—à–Ω–∏–∫–æ–≤."""
        try:
            logger.info(" –ù–ê–£–®–ù–ò–ö–ò –û–¢–ö–õ–Æ–ß–ï–ù–´")
            
            # –ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.pause_on_disconnect and self.is_playing:
                self.pause_playback()
                self._was_paused_for_disconnect = True
                logger.info("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤—Ä—É—á–Ω—É—é - –¥–æ–≤–µ—Ä—è–µ–º AudioManagerDaemon
            if self.audio_manager:
                logger.info("üîÑ AudioManagerDaemon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                # AudioManagerDaemon —Å–∞–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            else:
                # Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.warning("‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                self.switch_to_system_device()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤: {e}")

    def _was_headphones_disconnected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞—É—à–Ω–∏–∫–∏."""
        try:
            if not self.current_device_info:
                return False
                
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –Ω–∞—É—à–Ω–∏–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π
            if self._is_headphones(self.current_device_info['name']):
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—É—à–Ω–∏–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                available_devices = self.list_available_devices()
                headphones_found = False
                for device in available_devices:
                    if device['name'] == self.current_device_info['name']:
                        headphones_found = True
                        break
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π default output
                try:
                    import sounddevice as sd
                    current_default = sd.default.device
                    if isinstance(current_default, (list, tuple)) and len(current_default) >= 2:
                        current_default_out = current_default[1]
                    else:
                        current_default_out = current_default
                    
                    # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π default –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ –±–æ–ª—å—à–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
                    if current_default_out != self.current_device_info['index']:
                        logger.info(f"üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π default –∏–∑–º–µ–Ω–∏–ª—Å—è: {current_default_out} != {self.current_device_info['index']}")
                        return True
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ default: {e}")
                
                # 3. –ï—Å–ª–∏ –Ω–∞—É—à–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ, —Å—á–∏—Ç–∞–µ–º –∏—Ö –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏
                if not headphones_found:
                    logger.info(f"üéß –ù–∞—É—à–Ω–∏–∫–∏ {self.current_device_info['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                    return True
                
                return False
                
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—É—à–Ω–∏–∫–æ–≤: {e}")
            return False

    def switch_to_system_device(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AudioManagerDaemon –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.audio_manager:
                # –ù–∞—Ö–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ AudioManager
                devices = self.audio_manager.get_available_devices()
                system_device = None
                
                for device in devices:
                    if device.device_type.value == 'system_speakers':
                        system_device = device
                        break
                
                if system_device:
                    success = self.audio_manager.switch_to_device(system_device.name)
                    if success:
                        self._update_current_device_info()
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {system_device.name}")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {system_device.name}")
                        return False
                else:
                    logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return False
            
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            devices = self.list_available_devices()
            system_device = None
            
            for device in devices:
                if device['priority'] == self.device_priorities['system_speakers']:
                    system_device = device
                    break
            
            if system_device:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π default
                try:
                    import sounddevice as sd
                    current_default = sd.default.device
                    if isinstance(current_default, (list, tuple)) and len(current_default) >= 2:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ output, –æ—Å—Ç–∞–≤–ª—è–µ–º input
                        new_default = (current_default[0], system_device['index'])
                    else:
                        new_default = system_device['index']
                    
                    sd.default.device = new_default
                    logger.info(f"üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π default –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {system_device['name']} (–∏–Ω–¥–µ–∫—Å: {system_device['index']})")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π default: {e}")
                
                return self.switch_to_device(device_index=system_device['index'])
            else:
                logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}")
            return False

    def _detect_bluetooth_profile(self, device_info):
        """
        –£–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π Bluetooth –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
        """
        try:
            device_name = device_info.get('name', '').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            if not any(tag in device_name for tag in ['airpods', 'bluetooth', 'wireless']):
                return 'unknown', None
            
            logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–æ—Ñ–∏–ª—å Bluetooth –¥–ª—è: {device_info.get('name', 'Unknown')}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            max_channels = device_info.get('max_output_channels', 0)
            default_sr = device_info.get('default_samplerate', 0)
            max_sr = device_info.get('max_samplerate', 0)
            
            logger.info(f"üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            logger.info(f"   –ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤: {max_channels}")
            logger.info(f"   –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {default_sr}")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {max_sr}")
            
            # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
            if max_channels <= 1 and default_sr <= 16000:
                profile = 'hfp'  # Hands-Free Profile (–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞)
                logger.info("üéß –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: HFP (–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞)")
                
                # HFP-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                compatible_params = [
                    {'channels': 1, 'samplerate': 8000, 'dtype': np.int16},
                    {'channels': 1, 'samplerate': 16000, 'dtype': np.int16},
                    {'channels': 1, 'samplerate': 22050, 'dtype': np.int16},
                ]
                
            elif max_channels >= 2 and default_sr >= 44100:
                profile = 'a2dp'  # Advanced Audio Distribution Profile (–∫–∞—á–µ—Å—Ç–≤–æ)
                logger.info("üéß –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: A2DP (–∫–∞—á–µ—Å—Ç–≤–æ)")
                
                # A2DP-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                compatible_params = [
                    {'channels': 2, 'samplerate': 44100, 'dtype': np.int16},
                    {'channels': 2, 'samplerate': 48000, 'dtype': np.int16},
                    {'channels': 1, 'samplerate': 44100, 'dtype': np.int16},
                ]
                
            else:
                profile = 'mixed'  # –°–º–µ—à–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                logger.info("üéß –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: MIXED (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)")
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                compatible_params = [
                    {'channels': min(2, max_channels), 'samplerate': min(48000, default_sr), 'dtype': np.int16},
                    {'channels': 1, 'samplerate': min(44100, default_sr), 'dtype': np.int16},
                    {'channels': 1, 'samplerate': 16000, 'dtype': np.int16},
                ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            logger.info(f"üéØ –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile.upper()}:")
            for i, params in enumerate(compatible_params):
                logger.info(f"   {i+1}. ch={params['channels']}, sr={params['samplerate']}, dtype={params['dtype']}")
            
            return profile, compatible_params
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return 'unknown', None
    
    def _test_device_compatibility(self, device_idx, params):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç.
        """
        try:
            logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ch={params['channels']}, sr={params['samplerate']}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
            test_stream = sd.OutputStream(
                device=device_idx,
                channels=params['channels'],
                samplerate=params['samplerate'],
                dtype=params['dtype']
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            test_stream.start()
            time.sleep(0.1)  # –î–∞–µ–º –ø–æ—Ç–æ–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            test_stream.stop()
            test_stream.close()
            
            logger.info(f"‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ch={params['channels']}, sr={params['samplerate']}")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {e}")
            return False
    
    def _get_adaptive_configs(self, devices, device_idx):
        """
        –£–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å Bluetooth.
        """
        if device_idx == -1 or device_idx >= len(devices):
            # Fallback –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            return [
                {'channels': 2, 'samplerate': 44100, 'dtype': np.int16},
                {'channels': 1, 'samplerate': 44100, 'dtype': np.int16},
                {'channels': 1, 'samplerate': 16000, 'dtype': np.int16},
            ]
        
        device = devices[device_idx]
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
        profile, compatible_params = self._detect_bluetooth_profile(device)
        
        if profile != 'unknown' and compatible_params:
            logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ—Ñ–∏–ª—å {profile.upper()} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_idx}")
            return compatible_params
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        device_name = device.get('name', '').lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—å
        if 'airpods' in device_name or 'bluetooth' in device_name:
            # Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å
            max_channels = device.get('max_output_channels', 0)
            default_sr = device.get('default_samplerate', 0)
            
            logger.info(f"üéß Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
            logger.info(f"   –ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤: {max_channels}")
            logger.info(f"   –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {default_sr}")
            
            if max_channels <= 1 or default_sr <= 16000:
                # HFP —Ä–µ–∂–∏–º (–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞) - —Ç–æ–ª—å–∫–æ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                logger.info("üéß –†–µ–∂–∏–º HFP (–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                return [
                    {'channels': 1, 'samplerate': 16000, 'dtype': np.int16},
                    {'channels': 1, 'samplerate': 8000, 'dtype': np.int16},
                    {'channels': 1, 'samplerate': 22050, 'dtype': np.int16},
                ]
            else:
                # A2DP —Ä–µ–∂–∏–º (–∫–∞—á–µ—Å—Ç–≤–æ) - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                logger.info("üéß –†–µ–∂–∏–º A2DP (–∫–∞—á–µ—Å—Ç–≤–æ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                return [
                    {'channels': 2, 'samplerate': 44100, 'dtype': np.int16},
                    {'channels': 2, 'samplerate': 48000, 'dtype': np.int16},
                    {'channels': 1, 'samplerate': 44100, 'dtype': np.int16},
                ]
        
        elif any(tag in device_name for tag in ['macbook', 'built-in', 'internal']):
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            logger.info("üíª –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return [
                {'channels': 2, 'samplerate': 48000, 'dtype': np.int16},
                {'channels': 2, 'samplerate': 44100, 'dtype': np.int16},
                {'channels': 1, 'samplerate': 48000, 'dtype': np.int16},
            ]
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            logger.info("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
            return [
                {'channels': 2, 'samplerate': 44100, 'dtype': np.int16},
                {'channels': 1, 'samplerate': 44100, 'dtype': np.int16},
                {'channels': 2, 'samplerate': 48000, 'dtype': np.int16},
                {'channels': 1, 'samplerate': 16000, 'dtype': np.int16},
            ]

    def _find_builtin_devices(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ MacBook –¥–ª—è fallback."""
        try:
            devices = sd.query_devices()
            builtin = {'input': None, 'output': None}
            
            for idx, dev in enumerate(devices):
                try:
                    name = (dev.get('name') or '').lower()
                    if any(tag in name for tag in ['macbook', 'built-in', 'internal']):
                        if dev.get('max_input_channels', 0) > 0 and builtin['input'] is None:
                            builtin['input'] = idx
                        if dev.get('max_output_channels', 0) > 0 and builtin['output'] is None:
                            builtin['output'] = idx
                except Exception:
                    continue
            
            return builtin if any(builtin.values()) else None
        except Exception:
            return None





    def _clear_buffers(self):
        """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –∏ –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ."""
        # –û—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
        with self.buffer_lock:
            self.internal_buffer = np.array([], dtype=np.int16)
            logger.debug("‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                    self.audio_queue.task_done()
                except queue.Empty:
                    break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            with self.audio_queue.mutex:
                self.audio_queue.queue.clear()
            
            logger.debug("‚úÖ –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ join() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        try:
            self.audio_queue.join()
        except Exception:
            pass

    def wait_for_queue_empty(self):
        """
        –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ï –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–ï–ú–ï–î–õ–ï–ù–ù–û, –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç!
        """
        logger.info("üéµ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ï)...")
        
        # –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        queue_size = self.audio_queue.qsize()
        with self.buffer_lock:
            buffer_size = len(self.internal_buffer)
            
        if queue_size == 0 and buffer_size == 0:
            logger.info("‚úÖ –ê—É–¥–∏–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
        else:
            logger.info(f"üìä –ê—É–¥–∏–æ –µ—â–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è: –æ—á–µ—Ä–µ–¥—å={queue_size}, –±—É—Ñ–µ—Ä={buffer_size}")
            return False

    def play_beep(self, frequency: float = 1000.0, duration_sec: float = 0.12, volume: float = 0.4):
        """
        –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª (beep) —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
        - frequency: —á–∞—Å—Ç–æ—Ç–∞ —Ç–æ–Ω–∞ –≤ –ì—Ü
        - duration_sec: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        - volume: –≥—Ä–æ–º–∫–æ—Å—Ç—å [0.0..1.0]
        """
        try:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if not self.is_playing:
                self.start_playback()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—É—é –≤–æ–ª–Ω—É
            num_samples = int(self.sample_rate * duration_sec)
            if num_samples <= 0:
                return

            t = np.linspace(0, duration_sec, num_samples, endpoint=False)
            waveform = np.sin(2 * np.pi * frequency * t)
            amplitude = int(32767 * max(0.0, min(volume, 1.0)))
            samples = (amplitude * waveform).astype(np.int16)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.add_chunk(samples)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª: {e}")



    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–µ–µ—Ä–∞."""
        self.stop_playback()
        self.stop_device_monitoring()
        
        # –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π AudioManagerDaemon, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
        # –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
        if self.audio_manager:
            try:
                # –£–¥–∞–ª—è–µ–º callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
                # self.audio_manager.remove_callback(self._on_device_change_callback)  # –ï—Å–ª–∏ –±—É–¥–µ—Ç –º–µ—Ç–æ–¥
                self.audio_manager = None
                logger.info("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ AudioManagerDaemon —Å–±—Ä–æ—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ AudioManagerDaemon: {e}")
        
        logger.info("–†–µ—Å—É—Ä—Å—ã AudioPlayer –æ—á–∏—â–µ–Ω—ã.")

    def get_audio_status(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö.
        """
        return {
            'is_playing': self.is_playing,

            'stream_active': self.stream is not None and hasattr(self.stream, 'active') and self.stream.active,
            'queue_size': self.audio_queue.qsize(),
            'buffer_size': len(self.internal_buffer)
        }







    def force_stop(self, immediate=False):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ —Å –æ–ø—Ü–∏–µ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        if getattr(self, '_is_shutting_down', False):
            logger.info("üîí Shutdown —É–∂–µ –∏–¥—ë—Ç ‚Äî force_stop –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        with self._shutdown_mutex:
            if self._is_shutting_down:
                logger.info("üîí Shutdown —É–∂–µ –∏–¥—ë—Ç ‚Äî force_stop –ø—Ä–æ–ø—É—â–µ–Ω")
                return
            self._is_shutting_down = True
        if immediate:
            logger.info("üö® force_stop(immediate=True) –≤—ã–∑–≤–∞–Ω - –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
        else:
            logger.info("üö® force_stop() –≤—ã–∑–≤–∞–Ω - –æ–±—ã—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
        
        try:
            # 1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_event.set()
            self.is_playing = False
            
            # 2Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.playback_thread and self.playback_thread.is_alive():
                if immediate:
                    logger.info("   üö® –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
                    import ctypes
                    thread_id = self.playback_thread.ident
                    if thread_id:
                        try:
                            res = ctypes.pythonapi.PyThreadState_SetAsyncExc(
                                ctypes.c_long(thread_id), 
                                ctypes.py_object(SystemExit)
                            )
                            if res > 1:
                                ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, 0)
                                logger.warning("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                            else:
                                logger.info("   ‚úÖ –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä–≤–∞–Ω")
                        except Exception as e:
                            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞: {e}")
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    timeout = 0.1
                else:
                    logger.info("   üö® –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
                    timeout = 0.01
                
                self.playback_thread.join(timeout=timeout)
                if self.playback_thread.is_alive():
                    logger.warning(f"   ‚ö†Ô∏è –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –≤ —Ç–∞–π–º–∞—É—Ç {timeout}s")
                else:
                    logger.info("   ‚úÖ –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # 3Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
            if self.stream and self.stream.active:
                if immediate:
                    logger.info("   üö® –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫...")
                    try:
                        self.stream.stop()
                        self.stream.close()
                        self.stream = None
                        logger.info("   ‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {e}")
                else:
                    logger.info("   üö® –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫...")
                    try:
                        self.stream.stop()
                        self.stream.close()
                        self.stream = None
                        logger.info("   ‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {e}")
            
            # 4Ô∏è‚É£ –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            if not self.audio_queue.empty():
                queue_size = self.audio_queue.qsize()
                if immediate:
                    logger.info(f"   üßπ –ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å: {queue_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                else:
                    logger.info(f"   üßπ –û—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å: {queue_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                while not self.audio_queue.empty():
                    try:
                        self.audio_queue.get_nowait()
                    except:
                        break
                
                if immediate:
                    logger.info("   ‚úÖ –û—á–µ—Ä–µ–¥—å –ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–µ–Ω–∞")
                else:
                    logger.info("   ‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
            
            # 5Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
            with self.buffer_lock:
                self.internal_buffer = np.array([], dtype=np.int16)
                if immediate:
                    logger.info("   ‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –ú–ì–ù–û–í–ï–ù–ù–û –æ—á–∏—â–µ–Ω")
                else:
                    logger.info("   ‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω")
            
            # 6Ô∏è‚É£ –î–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            if immediate:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
                try:
                    import sounddevice as sd
                    sd.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
                    logger.info("   ‚úÖ –í—Å–µ –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–≤—É–∫–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {e}")
            
            if immediate:
                logger.info("‚úÖ force_stop(immediate=True) –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                logger.info("‚úÖ force_stop() –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ force_stop: {e}")
        finally:
            self._is_shutting_down = False
    

    

    
    def clear_audio_buffers(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã"""
        logger.info("üßπ clear_audio_buffers() –≤—ã–∑–≤–∞–Ω")
        
        try:
            # 1Ô∏è‚É£ –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            if not self.audio_queue.empty():
                queue_size = self.audio_queue.qsize()
                logger.info(f"   üßπ –û—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å: {queue_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                while not self.audio_queue.empty():
                    try:
                        self.audio_queue.get_nowait()
                    except:
                        break
                logger.info("   ‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
            
            # 2Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
            with self.buffer_lock:
                self.internal_buffer = np.array([], dtype=np.int16)
                logger.info("   ‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω")
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã
            try:
                import sounddevice as sd
                sd.stop()
                logger.info("   ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±—É—Ñ–µ—Ä–æ–≤: {e}")
            
            logger.info("‚úÖ clear_audio_buffers –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ clear_audio_buffers: {e}")

    def _check_audio_devices(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            sd.query_devices()
            logger.info("‚úÖ –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AudioManagerDaemon
    
    def switch_to_headphones_via_manager(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ AudioManagerDaemon"""
        try:
            if self.audio_manager:
                success = self.audio_manager.switch_to_headphones()
                if success:
                    self._update_current_device_info()
                    logger.info("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ AudioManagerDaemon")
                return success
            else:
                logger.warning("‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏: {e}")
            return False
    
    def auto_switch_to_best_device_via_manager(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ AudioManagerDaemon"""
        try:
            if self.audio_manager:
                success = self.audio_manager.auto_switch_to_best()
                if success:
                    self._update_current_device_info()
                    logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ AudioManagerDaemon")
                return success
            else:
                logger.warning("‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_available_devices_via_manager(self) -> List[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ AudioManagerDaemon"""
        try:
            if self.audio_manager:
                return self.audio_manager.get_available_devices()
            else:
                logger.warning("‚ö†Ô∏è AudioManagerDaemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return []
    
    def is_audio_manager_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AudioManagerDaemon"""
        return self.audio_manager is not None
    
    def get_audio_manager_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å AudioManagerDaemon"""
        if not self.audio_manager:
            return {'available': False, 'error': 'AudioManagerDaemon –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            current_device = self.audio_manager.get_current_device()
            devices = self.audio_manager.get_available_devices()
            
            return {
                'available': True,
                'current_device': current_device,
                'total_devices': len(devices),
                'running': self.audio_manager.running
            }
        except Exception as e:
            return {'available': True, 'error': str(e)}
    
        
         