import asyncio
import sounddevice as sd
import numpy as np
import logging
import queue
import threading
import time

logger = logging.getLogger(__name__)

class AudioPlayer:
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sounddevice.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (chunks) –≤ –≤–∏–¥–µ NumPy –º–∞—Å—Å–∏–≤–æ–≤ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∏—Ö –±–µ—Å—à–æ–≤–Ω–æ.
    """
    def __init__(self, sample_rate=48000, channels=1, dtype='int16'):
        self.sample_rate = sample_rate
        self.channels = channels
        self.dtype = dtype
        
        self.audio_queue = queue.Queue()
        self.playback_thread = None
        self.stop_event = threading.Event()
        self.stream = None
        self.is_playing = False
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.internal_buffer = np.array([], dtype=np.int16)
        self.buffer_lock = threading.Lock()
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ
        self.audio_error = False
        self.audio_error_message = ""
        
        # –ü–†–û–°–¢–ê–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.buffer_blocked_until = 0  # –í—Ä–µ–º—è –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É—Ñ–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        self.buffer_block_duration = 0.5  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self._check_audio_devices()

    def _playback_callback(self, outdata, frames, time, status):
        """Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è sounddevice, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –≤—ã–≤–æ–¥–∞."""
        if status:
            logger.warning(f"Sounddevice status: {status}")

        try:
            with self.buffer_lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
                if len(self.internal_buffer) >= frames:
                    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ
                    outdata[:frames] = self.internal_buffer[:frames].reshape(frames, self.channels)
                    self.internal_buffer = self.internal_buffer[frames:]
                else:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    try:
                        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞–Ω–∫–∏ –≤ –±—É—Ñ–µ—Ä
                        while not self.audio_queue.empty():
                            chunk = self.audio_queue.get_nowait()
                            if chunk is not None and len(chunk) > 0:
                                self.internal_buffer = np.concatenate([self.internal_buffer, chunk])
                                logger.debug(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω —á–∞–Ω–∫ –≤ –±—É—Ñ–µ—Ä: {len(chunk)} —Å—ç–º–ø–ª–æ–≤. –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(self.internal_buffer)}")
                            self.audio_queue.task_done()
                    except queue.Empty:
                        pass
                    
                    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                    if len(self.internal_buffer) >= frames:
                        outdata[:frames] = self.internal_buffer[:frames].reshape(frames, self.channels)
                        self.internal_buffer = self.internal_buffer[frames:]
                        logger.debug(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞—É–¥–∏–æ: {frames} —Å—ç–º–ø–ª–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä–µ: {len(self.internal_buffer)}")
                    else:
                        # –í—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                        available = len(self.internal_buffer)
                        if available > 0:
                            outdata[:available] = self.internal_buffer.reshape(-1, self.channels)
                            outdata[available:frames] = 0
                            self.internal_buffer = np.array([], dtype=np.int16)
                            logger.debug(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {available} —Å—ç–º–ø–ª–æ–≤, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–∏—à–∏–Ω–∞")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –µ—â–µ —Ä–∞–∑
                            try:
                                chunk = self.audio_queue.get_nowait()
                                if chunk is not None and len(chunk) > 0:
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–∞–Ω–∫
                                    if len(chunk) >= frames:
                                        outdata[:frames] = chunk[:frames].reshape(frames, self.channels)
                                        # –û—Å—Ç–∞—Ç–æ–∫ —á–∞–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
                                        if len(chunk) > frames:
                                            self.internal_buffer = chunk[frames:]
                                        logger.debug(f"üéµ –ß–∞–Ω–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞–ø—Ä—è–º—É—é: {frames} —Å—ç–º–ø–ª–æ–≤")
                                    else:
                                        # –ß–∞–Ω–∫ –º–µ–Ω—å—à–µ frames, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                                        outdata[:len(chunk)] = chunk.reshape(-1, self.channels)
                                        outdata[len(chunk):frames] = 0
                                        logger.debug(f"üéµ –ö–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫: {len(chunk)} —Å—ç–º–ø–ª–æ–≤, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–∏—à–∏–Ω–∞")
                                else:
                                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Ç–∏—à–∏–Ω–∞
                                    outdata.fill(0)
                                    logger.debug("üîá –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - —Ç–∏—à–∏–Ω–∞")
                                self.audio_queue.task_done()
                            except queue.Empty:
                                # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —Ç–∏—à–∏–Ω–∞
                                outdata.fill(0)
                                logger.debug("üîá –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - —Ç–∏—à–∏–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ playback callback: {e}")
            outdata.fill(0)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É

    def add_chunk(self, audio_chunk: np.ndarray):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —á–∞–Ω–∫ –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."""
        if audio_chunk is None or len(audio_chunk) == 0:
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —á–∞–Ω–∫!")
            return
        
        chunk_size = len(audio_chunk)
        logger.debug(f"üéµ –î–æ–±–∞–≤–ª—è—é –∞—É–¥–∏–æ —á–∞–Ω–∫ —Ä–∞–∑–º–µ—Ä–æ–º {chunk_size} —Å—ç–º–ø–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±—É—Ñ–µ—Ä–∞
        if self.is_buffer_locked():
            logger.warning(f"üö® –ë–£–§–ï–† –í–†–ï–ú–ï–ù–ù–û –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù - –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º {chunk_size}!")
            return
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ –æ—á–µ—Ä–µ–¥—å
            self.audio_queue.put(audio_chunk)
            logger.debug(f"‚úÖ –ê—É–¥–∏–æ —á–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.audio_queue.qsize()}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                if not self.audio_queue.full():
                    self.audio_queue.put(audio_chunk)
                    logger.info("‚úÖ –ê—É–¥–∏–æ —á–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                else:
                    logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —á–∞–Ω–∫ –æ—Ç–±—Ä–æ—à–µ–Ω")
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e2}")

    def start_playback(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ."""
        if self.is_playing:
            logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            return
        
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ...")
        self.stop_event.clear()
        self._clear_buffers()  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        
        # –ö–†–ò–¢–ò–ß–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ!
        self.buffer_blocked_until = 0
        logger.info("üîì –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É—Ñ–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.playback_thread = threading.Thread(target=self._playback_loop, daemon=True)
            self.playback_thread.start()
            
            # –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫
            self.stream = sd.OutputStream(
                samplerate=self.sample_rate,
                channels=self.channels,
                dtype=self.dtype,
                callback=self._playback_callback,
                blocksize=1024
            )
            
            self.stream.start()
            self.is_playing = True
            
            logger.info("‚úÖ –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            self.is_playing = False
            self.playback_thread = None
            self.stream = None

    def stop_playback(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ."""
        if not self.is_playing:
            logger.warning("‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return
        
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ...")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_event.set()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫
            if self.stream:
                if hasattr(self.stream, 'active') and self.stream.active:
                    self.stream.stop()
                    logger.info("‚úÖ –ó–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.stream.close()
                self.stream = None
                logger.info("‚úÖ –ó–≤—É–∫–æ–≤–æ–π –ø–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.playback_thread and self.playback_thread.is_alive():
                self.playback_thread.join(timeout=1.0)
                if self.playback_thread.is_alive():
                    logger.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É")
                else:
                    logger.info("‚úÖ –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = False
            self.playback_thread = None
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            self._clear_buffers()
            
            logger.info("‚úÖ –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = False
            self.playback_thread = None
            self.stream = None



    def _playback_loop(self):
        """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while not self.stop_event.is_set():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if not self.audio_queue.empty() or len(self.internal_buffer) > 0:
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
                    time.sleep(0.001)  # 1ms
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    time.sleep(0.01)  # 10ms
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        finally:
            logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _safe_init_stream(self):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ PortAudio.
        """
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è macOS
            device_settings = [
                {'device': None, 'channels': self.channels},  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                {'device': 'default', 'channels': self.channels},  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º default
                {'device': sd.default.device[1], 'channels': self.channels},  # –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥
            ]
            
            for settings in device_settings:
                try:
                    logger.info(f"üîÑ –ü—Ä–æ–±—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {settings}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è macOS
                    stream = sd.OutputStream(
                        samplerate=self.sample_rate,
                        channels=settings['channels'],
                        dtype=self.dtype,
                        device=settings['device'],
                        callback=self._playback_callback,
                        blocksize=1024,  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        latency='low'     # –ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    )
                    
                    stream.start()
                    logger.info(f"‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {settings}")
                    return stream
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ {settings}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è macOS...")
            
            # –ü—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            try:
                stream = sd.OutputStream(
                    samplerate=44100,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
                    channels=1,        # –ú–æ–Ω–æ
                    dtype='int16',     # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø
                    callback=self._playback_callback,
                    blocksize=512,     # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
                    latency='high'     # –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                )
                stream.start()
                logger.info("‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                return stream
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏: {e}")
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –Ω–∏ —Å –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
        except Exception as e:
            self.audio_error = True
            self.audio_error_message = str(e)
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            raise

    def _clear_buffers(self):
        """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –∏ –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ."""
        # –û—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
        with self.buffer_lock:
            self.internal_buffer = np.array([], dtype=np.int16)
            logger.debug("‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                    self.audio_queue.task_done()
                except queue.Empty:
                    break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            with self.audio_queue.mutex:
                self.audio_queue.queue.clear()
            
            logger.debug("‚úÖ –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ join() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        try:
            self.audio_queue.join()
        except Exception:
            pass
        
        # –ö–†–ò–¢–ò–ß–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ!
        self.buffer_blocked_until = 0
        logger.debug("üîì –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É—Ñ–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—É—Ñ–µ—Ä–æ–≤")

    def wait_for_queue_empty(self):
        """
        –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ï –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–ï–ú–ï–î–õ–ï–ù–ù–û, –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç!
        """
        logger.info("üéµ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï–ï)...")
        
        # –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        queue_size = self.audio_queue.qsize()
        with self.buffer_lock:
            buffer_size = len(self.internal_buffer)
            
        if queue_size == 0 and buffer_size == 0:
            logger.info("‚úÖ –ê—É–¥–∏–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
        else:
            logger.info(f"üìä –ê—É–¥–∏–æ –µ—â–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è: –æ—á–µ—Ä–µ–¥—å={queue_size}, –±—É—Ñ–µ—Ä={buffer_size}")
            return False

    def start_audio_monitoring(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏–æ.
        –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫!
        """
        logger.info("üéµ –ó–∞–ø—É—Å–∫–∞—é —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        import threading
        
        def monitor_audio():
            """–§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            try:
                while self.is_playing:
                    time.sleep(0.5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500ms
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    queue_size = self.audio_queue.qsize()
                    with self.buffer_lock:
                        buffer_size = len(self.internal_buffer)
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    if queue_size == 0 and buffer_size == 0:
                        logger.info("‚úÖ –ê—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                        self.is_playing = False
                        break
                        
                logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∞—É–¥–∏–æ: {e}")
                self.is_playing = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.monitor_thread = threading.Thread(target=monitor_audio, daemon=True)
        self.monitor_thread.start()
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–µ–µ—Ä–∞."""
        self.stop_playback()
        logger.info("–†–µ—Å—É—Ä—Å—ã AudioPlayer –æ—á–∏—â–µ–Ω—ã.")

    def get_audio_status(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö.
        """
        return {
            'is_playing': self.is_playing,
            'has_error': self.audio_error,
            'error_message': self.audio_error_message,
            'stream_active': self.stream is not None and hasattr(self.stream, 'active') and self.stream.active,
            'queue_size': self.audio_queue.qsize(),
            'buffer_size': len(self.internal_buffer)
        }

    def reset_audio_error(self):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        self.audio_error = False
        self.audio_error_message = ""
        logger.info("üîÑ –§–ª–∞–≥–∏ –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ —Å–±—Ä–æ—à–µ–Ω—ã")

    def clear_all_audio_data(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ—Ç –í–°–ï –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ - –≤–∫–ª—é—á–∞—è –æ—á–µ—Ä–µ–¥—å –∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        clear_time = time.time()
        logger.warning(f"üö® clear_all_audio_data() –≤—ã–∑–≤–∞–Ω –≤ {clear_time:.3f}")
        
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ—á–∏—Å—Ç–∫–∏
            queue_before = self.audio_queue.qsize()
            buffer_before = len(self.internal_buffer)
            stream_active = hasattr(self, 'stream') and self.stream and hasattr(self.stream, 'active') and self.stream.active
            logger.warning(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û: queue={queue_before}, buffer={buffer_before}, stream_active={stream_active}")
            
            logger.warning("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –í–°–ï–• –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö...")
            
            # 1Ô∏è‚É£ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —á–∞–Ω–∫–æ–≤
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                    self.audio_queue.task_done()
                except:
                    pass
            
            # 2Ô∏è‚É£ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ mutex
            try:
                with self.audio_queue.mutex:
                    self.audio_queue.queue.clear()
                logger.warning("üö® –û—á–µ—Ä–µ–¥—å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ mutex!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ mutex: {e}")
            
            # 3Ô∏è‚É£ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
            with self.buffer_lock:
                self.internal_buffer = np.array([], dtype=np.int16)
            
            # 4Ô∏è‚É£ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if hasattr(self, 'stream') and self.stream:
                try:
                    if hasattr(self.stream, 'active') and self.stream.active:
                        self.stream.abort()  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                        logger.warning("üö® –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ abort!")
                    self.stream.close()
                    self.stream = None
                    logger.warning("üö® –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã—Ç!")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞: {e}")
            
            # 5Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = False
            
            # 6Ô∏è‚É£ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
            try:
                sd.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
                logger.warning("üö® –í–°–ï –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤: {e}")
            
            # 7Ô∏è‚É£ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ _clear_buffers
            try:
                self._clear_buffers()
                logger.warning("üö® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            
            # 8Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±—É—Ñ–µ—Ä–∞
            try:
                self.set_buffer_lock()
                logger.warning("üö® –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É—Ñ–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏
            queue_after = self.audio_queue.qsize()
            buffer_after = len(self.internal_buffer)
            total_time = (time.time() - clear_time) * 1000
            logger.warning(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï: queue={queue_after}, buffer={buffer_after}")
            logger.warning(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏: {total_time:.1f}ms")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if queue_after == 0 and buffer_after == 0:
                logger.warning("   üéØ –û–ß–ò–°–¢–ö–ê –£–°–ü–ï–®–ù–ê - –≤—Å–µ –±—É—Ñ–µ—Ä—ã –ø—É—Å—Ç—ã!")
            else:
                logger.warning(f"   ‚ö†Ô∏è –û–ß–ò–°–¢–ö–ê –ù–ï–ü–û–õ–ù–ê–Ø - queue={queue_after}, buffer={buffer_after}")
            
            logger.warning("‚úÖ –í–°–ï –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            logger.error(f"   üîç Traceback: {traceback.format_exc()}")

    def interrupt_immediately(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è - –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
        try:
            logger.warning("üö® –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
            
            # 1Ô∏è‚É£ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            self.interrupt_flag.set()
            self.stop_event.set()
            
            # 2Ô∏è‚É£ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            with self.buffer_lock:
                self.internal_buffer = np.array([], dtype=np.int16)
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —á–∞–Ω–∫–æ–≤
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                    self.audio_queue.task_done()
                except:
                    pass
            
            # 4Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = False
            
            logger.warning("‚úÖ –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}")

    def force_stop_immediately(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤"""
        try:
            logger.warning("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
            
            # 1Ô∏è‚É£ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if hasattr(self, 'stream') and self.stream:
                if hasattr(self.stream, 'active') and self.stream.active:
                    self.stream.abort()  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                    self.stream.close()
                    self.stream = None
                    logger.warning("üö® –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
            # 2Ô∏è‚É£ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –í–°–ï –±—É—Ñ–µ—Ä—ã
            with self.buffer_lock:
                self.internal_buffer = np.array([], dtype=np.int16)
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —á–∞–Ω–∫–æ–≤
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                    self.audio_queue.task_done()
                except:
                    pass
            
            # 4Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –í–°–ï —Ñ–ª–∞–≥–∏
            self.is_playing = False
            self.interrupt_flag.set()
            self.stop_event.set()
            
            # 5Ô∏è‚É£ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
            import sounddevice as sd
            sd.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–≤—É–∫–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
            
            logger.warning("üö® –ê–£–î–ò–û –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–û!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

    def force_stop(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.
        """
        logger.warning("üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.interrupt_flag.set()
        self.stop_event.set()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        if self.stream:
            try:
                if hasattr(self.stream, 'stop'):
                    self.stream.stop()
                if hasattr(self.stream, 'close'):
                    self.stream.close()
                self.stream = None
                logger.info("‚úÖ –ü–æ—Ç–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
        self._clear_buffers()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_playing = False
        
        logger.warning("üö® –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def _check_audio_devices(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            sd.query_devices()
            logger.info("‚úÖ –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            self.audio_error = True
            self.audio_error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}"
    
    def set_buffer_lock(self, duration=None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±—É—Ñ–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤."""
        if duration is None:
            duration = self.buffer_block_duration
        
        self.buffer_blocked_until = time.time() + duration
        logger.warning(f"üö® –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É—Ñ–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
    
    def is_buffer_locked(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –±—É—Ñ–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ."""
        return time.time() < self.buffer_blocked_until