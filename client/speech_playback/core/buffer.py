"""
Buffer Management - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞–º–∏ —á–∞–Ω–∫–æ–≤

–û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
1. –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞ - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
2. FIFO –ø–æ—Ä—è–¥–æ–∫ - —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫ —á–∞–Ω–∫–æ–≤
3. Thread-safety - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ
4. Memory protection - –∑–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
"""

import logging
import queue
import threading
import time
import numpy as np
from dataclasses import dataclass
from typing import Optional, List, Dict, Any
from datetime import datetime
from .state import ChunkState

logger = logging.getLogger(__name__)

@dataclass
class ChunkInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞–Ω–∫–µ"""
    id: str
    data: np.ndarray
    timestamp: float
    size: int
    state: ChunkState
    priority: int = 0
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
        if self.metadata is None:
            self.metadata = {}

class ChunkBuffer:
    """–ë—É—Ñ–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞–º–∏ –∞—É–¥–∏–æ"""
    
    def __init__(self, max_memory_mb: int = 1024):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞
        
        Args:
            max_memory_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë
        """
        self._chunk_queue = queue.Queue()
        self._playback_buffer = np.array([], dtype=np.int16)
        self._buffer_lock = threading.RLock()
        self._max_memory_bytes = max_memory_mb * 1024 * 1024
        self._current_memory_usage = 0
        self._chunk_counter = 0
        self._stats = {
            'chunks_added': 0,
            'chunks_processed': 0,
            'chunks_completed': 0,
            'chunks_errors': 0,
            'total_data_size': 0,
            'peak_memory_usage': 0
        }
        
        logger.info(f"üîß ChunkBuffer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (max_memory: {max_memory_mb}MB)")
    
    @property
    def queue_size(self) -> int:
        """–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —á–∞–Ω–∫–æ–≤"""
        return self._chunk_queue.qsize()
    
    @property
    def buffer_size(self) -> int:
        """–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        with self._buffer_lock:
            return len(self._playback_buffer)
    
    @property
    def memory_usage_mb(self) -> float:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë"""
        return self._current_memory_usage / (1024 * 1024)
    
    @property
    def is_empty(self) -> bool:
        """–ü—É—Å—Ç –ª–∏ –±—É—Ñ–µ—Ä"""
        return self.queue_size == 0 and self.buffer_size == 0
    
    @property
    def has_data(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        return self.buffer_size > 0
    
    def add_chunk(self, audio_data: np.ndarray, priority: int = 0, metadata: Optional[Dict[str, Any]] = None) -> str:
        """
        –î–æ–±–∞–≤–∏—Ç—å —á–∞–Ω–∫ –≤ –±—É—Ñ–µ—Ä
        
        Args:
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∞–Ω–∫–∞
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            ID —á–∞–Ω–∫–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º ID —á–∞–Ω–∫–∞
            chunk_id = f"chunk_{self._chunk_counter}_{int(time.time() * 1000)}"
            self._chunk_counter += 1
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–Ω–∫–µ
            chunk_info = ChunkInfo(
                id=chunk_id,
                data=audio_data.copy(),  # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                timestamp=time.time(),
                size=len(audio_data),
                state=ChunkState.PENDING,
                priority=priority,
                metadata=metadata or {}
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if self._current_memory_usage + audio_data.nbytes > self._max_memory_bytes:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {self.memory_usage_mb:.1f}MB")
                self._emergency_cleanup()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self._chunk_queue.put(chunk_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._stats['chunks_added'] += 1
            self._stats['total_data_size'] += audio_data.nbytes
            self._current_memory_usage += audio_data.nbytes
            
            if self._current_memory_usage > self._stats['peak_memory_usage']:
                self._stats['peak_memory_usage'] = self._current_memory_usage
            
            logger.info(f"‚úÖ –ß–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {chunk_id} (size: {len(audio_data)}, queue: {self.queue_size})")
            
            return chunk_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞: {e}")
            raise
    
    def get_next_chunk(self, timeout: float = 0.1) -> Optional[ChunkInfo]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞–Ω–∫–µ –∏–ª–∏ None
        """
        try:
            chunk_info = self._chunk_queue.get(timeout=timeout)
            chunk_info.state = ChunkState.QUEUED
            logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫: {chunk_info.id}")
            return chunk_info
        except queue.Empty:
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–∞: {e}")
            return None
    
    def add_to_playback_buffer(self, chunk_info: ChunkInfo) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å —á–∞–Ω–∫ –≤ –±—É—Ñ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        
        Args:
            chunk_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞–Ω–∫–µ
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            with self._buffer_lock:
                old_size = len(self._playback_buffer)
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
                data = chunk_info.data
                if len(data.shape) == 2:
                    # 2D –¥–∞–Ω–Ω—ã–µ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 1D
                    data = data.flatten()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                if len(self._playback_buffer) == 0:
                    self._playback_buffer = data
                else:
                    self._playback_buffer = np.concatenate([self._playback_buffer, data])
                
                chunk_info.state = ChunkState.BUFFERED
                
                logger.info(f"‚úÖ –ß–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä: {chunk_info.id} (size: {len(data)}, buffer: {old_size} ‚Üí {len(self._playback_buffer)})")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä: {e}")
            chunk_info.state = ChunkState.ERROR
            self._stats['chunks_errors'] += 1
            return False
    
    def get_playback_data(self, frames: int) -> np.ndarray:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        
        Args:
            frames: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤
            
        Returns:
            –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        """
        with self._buffer_lock:
            if len(self._playback_buffer) >= frames:
                data = self._playback_buffer[:frames]
                self._playback_buffer = self._playback_buffer[frames:]
                logger.debug(f"üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: {frames} —Å—ç–º–ø–ª–æ–≤ (–æ—Å—Ç–∞–ª–æ—Å—å: {len(self._playback_buffer)})")
                return data
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(self._playback_buffer)} < {frames}")
                return np.zeros(frames, dtype=np.int16)
    
    def mark_chunk_completed(self, chunk_info: ChunkInfo):
        """–û—Ç–º–µ—Ç–∏—Ç—å —á–∞–Ω–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"""
        chunk_info.state = ChunkState.COMPLETED
        self._stats['chunks_completed'] += 1
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        self._current_memory_usage -= chunk_info.data.nbytes
        chunk_info.data = np.array([], dtype=np.int16)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        chunk_info.state = ChunkState.CLEANED
        
        logger.debug(f"‚úÖ –ß–∞–Ω–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {chunk_info.id}")
    
    def clear_queue(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —á–∞–Ω–∫–æ–≤"""
        cleared_count = 0
        while not self._chunk_queue.empty():
            try:
                chunk_info = self._chunk_queue.get_nowait()
                self._current_memory_usage -= chunk_info.data.nbytes
                cleared_count += 1
            except queue.Empty:
                break
        
        logger.info(f"üßπ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞: {cleared_count} —á–∞–Ω–∫–æ–≤")
    
    def clear_playback_buffer(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        with self._buffer_lock:
            old_size = len(self._playback_buffer)
            self._playback_buffer = np.array([], dtype=np.int16)
            logger.info(f"üßπ –ë—É—Ñ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—á–∏—â–µ–Ω: {old_size} —Å—ç–º–ø–ª–æ–≤")
    
    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±—É—Ñ–µ—Ä—ã"""
        self.clear_queue()
        self.clear_playback_buffer()
        self._current_memory_usage = 0
        logger.info("üßπ –í—Å–µ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
    
    def _emergency_cleanup(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏"""
        logger.warning("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        self.clear_queue()
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.clear_playback_buffer()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        import gc
        gc.collect()
        
        logger.info("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É—Ñ–µ—Ä–∞"""
        return {
            **self._stats,
            'current_memory_usage_mb': self.memory_usage_mb,
            'queue_size': self.queue_size,
            'buffer_size': self.buffer_size,
            'is_empty': self.is_empty,
            'has_data': self.has_data
        }
    
    def wait_for_completion(self, timeout: float = 30.0) -> bool:
        """
        –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            if self.is_empty:
                logger.info("‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                return True
            
            time.sleep(0.1)
        
        logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ({timeout}s)")
        return False











































