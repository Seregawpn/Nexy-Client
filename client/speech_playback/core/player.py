"""
Sequential Speech Player - –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–µ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

–û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
1. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ - –æ–¥–∏–Ω —á–∞–Ω–∫ –∑–∞ —Ä–∞–∑
2. –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞ - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
3. Thread-safety - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ
4. macOS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –¥–ª—è PKG —É–ø–∞–∫–æ–≤–∫–∏
5. –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
"""

import logging
import threading
import time
import asyncio
import sounddevice as sd
import numpy as np
from typing import Optional, Callable, Dict, Any
from dataclasses import dataclass

from .state import StateManager, PlaybackState, ChunkState
from .buffer import ChunkBuffer, ChunkInfo
from ..utils.audio_utils import resample_audio, convert_channels
from ..utils.device_utils import get_best_audio_device
from ..macos.core_audio import CoreAudioManager
from ..macos.performance import PerformanceMonitor

logger = logging.getLogger(__name__)

@dataclass
class PlayerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞"""
    sample_rate: int = 44100
    channels: int = 2
    dtype: str = 'int16'
    buffer_size: int = 512
    max_memory_mb: int = 1024
    device_id: Optional[int] = None
    auto_device_selection: bool = True

class SequentialSpeechPlayer:
    """–ü–ª–µ–µ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏"""
    
    def __init__(self, config: Optional[PlayerConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞
        """
        self.config = config or PlayerConfig()
        self.state_manager = StateManager()
        self.chunk_buffer = ChunkBuffer(max_memory_mb=self.config.max_memory_mb)
        
        # –ü–æ—Ç–æ–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self._playback_thread: Optional[threading.Thread] = None
        self._stop_event = threading.Event()
        self._pause_event = threading.Event()
        self._pause_event.set()  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞—É–∑—ã
        
        # –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫
        self._audio_stream: Optional[sd.OutputStream] = None
        self._stream_lock = threading.RLock()
        
        # macOS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._core_audio_manager = CoreAudioManager()
        self._performance_monitor = PerformanceMonitor()
        
        # Callbacks
        self._on_chunk_started: Optional[Callable[[ChunkInfo], None]] = None
        self._on_chunk_completed: Optional[Callable[[ChunkInfo], None]] = None
        self._on_playback_completed: Optional[Callable[[], None]] = None
        self._on_error: Optional[Callable[[Exception], None]] = None
        
        logger.info("üîß SequentialSpeechPlayer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è macOS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self._core_audio_manager.initialize():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Core Audio")
                return False
            
            # –í—ã–±–æ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if self.config.auto_device_selection:
                device = get_best_audio_device()
                if device:
                    self.config.device_id = device.portaudio_index
                    logger.info(f"üéµ –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._performance_monitor.start()
            
            logger.info("‚úÖ –ü–ª–µ–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–µ–µ—Ä–∞: {e}")
            self.state_manager.set_state(PlaybackState.ERROR)
            return False
    
    def add_audio_data(self, audio_data: np.ndarray, priority: int = 0, metadata: Optional[Dict[str, Any]] = None) -> str:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        
        Args:
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∞–Ω–∫–∞
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            ID —á–∞–Ω–∫–∞
        """
        try:
            # Resampling –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if hasattr(audio_data, 'sample_rate') and audio_data.sample_rate != self.config.sample_rate:
                audio_data = resample_audio(audio_data, self.config.sample_rate)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if len(audio_data.shape) == 1:  # –ú–æ–Ω–æ
                audio_data = convert_channels(audio_data, self.config.channels)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            chunk_id = self.chunk_buffer.add_chunk(audio_data, priority, metadata)
            
            logger.info(f"‚úÖ –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {chunk_id} (size: {len(audio_data)})")
            
            return chunk_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.state_manager.set_state(PlaybackState.ERROR)
            raise
    
    def start_playback(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if self.state_manager.current_state not in [PlaybackState.IDLE, PlaybackState.PAUSED]:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PLAYING
            self.state_manager.set_state(PlaybackState.PLAYING)
            
            # –ù–ï –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –æ–Ω–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É—Ñ–µ—Ä
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
            if not self._start_audio_stream():
                self.state_manager.set_state(PlaybackState.ERROR)
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self._stop_event.clear()
            self._pause_event.set()
            
            self._playback_thread = threading.Thread(target=self._playback_loop, daemon=True)
            self._playback_thread.start()
            
            logger.info("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            self.state_manager.set_state(PlaybackState.ERROR)
            return False
    
    def stop_playback(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if self.state_manager.current_state not in [PlaybackState.PLAYING, PlaybackState.PAUSED]:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ STOPPING
            self.state_manager.set_state(PlaybackState.STOPPING)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self._stop_event.set()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self._playback_thread and self._playback_thread.is_alive():
                self._playback_thread.join(timeout=5.0)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
            self._stop_audio_stream()
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            self.chunk_buffer.clear_all()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ STOPPED
            self.state_manager.set_state(PlaybackState.IDLE)
            
            logger.info("üõë –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            self.state_manager.set_state(PlaybackState.ERROR)
            return False
    
    def pause_playback(self) -> bool:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
            if self.state_manager.current_state != PlaybackState.PLAYING:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                return False
            
            self._pause_event.clear()
            self.state_manager.set_state(PlaybackState.PAUSED)
            
            logger.info("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            self.state_manager.set_state(PlaybackState.ERROR)
            return False
    
    def resume_playback(self) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if self.state_manager.current_state != PlaybackState.PAUSED:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                return False
            
            self._pause_event.set()
            self.state_manager.set_state(PlaybackState.PLAYING)
            
            logger.info("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            self.state_manager.set_state(PlaybackState.ERROR)
            return False
    
    def _start_audio_stream(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            with self._stream_lock:
                if self._audio_stream is not None:
                    logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return True
                
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞
                stream_config = {
                    'device': self.config.device_id,
                    'channels': self.config.channels,
                    'dtype': self.config.dtype,
                    'samplerate': self.config.sample_rate,
                    'blocksize': self.config.buffer_size,
                    'callback': self._audio_callback
                }
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫
                self._audio_stream = sd.OutputStream(**stream_config)
                self._audio_stream.start()
                
                logger.info(f"üéµ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω (device: {self.config.device_id}, channels: {self.config.channels})")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {e}")
            return False
    
    def _stop_audio_stream(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            with self._stream_lock:
                if self._audio_stream is not None:
                    self._audio_stream.stop()
                    self._audio_stream.close()
                    self._audio_stream = None
                    logger.info("üõë –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {e}")
    
    def _audio_callback(self, outdata, frames, time, status):
        """Callback –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        try:
            if status:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {status}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
            data = self.chunk_buffer.get_playback_data(frames)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if len(data) == 0:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                outdata[:] = np.zeros((frames, self.config.channels), dtype=self.config.dtype)
            else:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
                if len(data.shape) == 1:
                    # 1D –¥–∞–Ω–Ω—ã–µ - –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–µ—Ä–µ–æ
                    if self.config.channels == 1:
                        outdata[:] = data.reshape(-1, 1)
                    else:
                        outdata[:] = np.column_stack([data, data])
                else:
                    # 2D –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    outdata[:] = data.reshape(-1, self.config.channels)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ audio callback: {e}")
            outdata[:] = np.zeros((frames, self.config.channels), dtype=self.config.dtype)
    
    def _playback_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        try:
            logger.info("üîÑ Playback loop –∑–∞–ø—É—â–µ–Ω")
            
            while not self._stop_event.is_set():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
                self._pause_event.wait()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫
                chunk_info = self.chunk_buffer.get_next_chunk(timeout=0.1)
                
                if chunk_info is not None:
                    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    chunk_info.state = ChunkState.PLAYING
                    
                    # Callback –Ω–∞—á–∞–ª–∞ —á–∞–Ω–∫–∞
                    if self._on_chunk_started:
                        self._on_chunk_started(chunk_info)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    if not self.chunk_buffer.add_to_playback_buffer(chunk_info):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞ {chunk_info.id} –≤ –±—É—Ñ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                        chunk_info.state = ChunkState.ERROR
                        continue
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
                    self._wait_for_chunk_completion(chunk_info)
                    
                    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    self.chunk_buffer.mark_chunk_completed(chunk_info)
                    
                    # Callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞–Ω–∫–∞
                    if self._on_chunk_completed:
                        self._on_chunk_completed(chunk_info)
                    
                    logger.info(f"‚úÖ –ß–∞–Ω–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {chunk_info.id}")
                else:
                    # –ù–µ—Ç —á–∞–Ω–∫–æ–≤ - –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    time.sleep(0.01)
            
            logger.info("üîÑ Playback loop –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ playback loop: {e}")
            self.state_manager.set_state(PlaybackState.ERROR)
    
    def _wait_for_chunk_completion(self, chunk_info: ChunkInfo, timeout: float = 30.0):
        """–ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–∞–Ω–∫–∞"""
        start_time = time.time()
        
        # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –±—É—Ñ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º
        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–µ—Å—å —á–∞–Ω–∫ –±—ã–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω
        while time.time() - start_time < timeout:
            if not self.chunk_buffer.has_data:
                logger.info(f"‚úÖ –ß–∞–Ω–∫ {chunk_info.id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω")
                return
            
            time.sleep(0.01)
        
        logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞–Ω–∫–∞ {chunk_info.id}")
    
    def wait_for_completion(self, timeout: float = 30.0) -> bool:
        """–ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤"""
        return self.chunk_buffer.wait_for_completion(timeout)
    
    def set_callbacks(self, 
                     on_chunk_started: Optional[Callable[[ChunkInfo], None]] = None,
                     on_chunk_completed: Optional[Callable[[ChunkInfo], None]] = None,
                     on_playback_completed: Optional[Callable[[], None]] = None,
                     on_error: Optional[Callable[[Exception], None]] = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callbacks"""
        self._on_chunk_started = on_chunk_started
        self._on_chunk_completed = on_chunk_completed
        self._on_playback_completed = on_playback_completed
        self._on_error = on_error
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–µ–µ—Ä–∞"""
        return {
            'state': self.state_manager.current_state.value,
            'is_playing': self.state_manager.is_playing,
            'is_paused': self.state_manager.is_paused,
            'has_error': self.state_manager.has_error,
            'buffer_stats': self.chunk_buffer.get_stats(),
            'performance_stats': self._performance_monitor.get_stats()
        }
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–µ–µ—Ä–∞"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self.stop_playback()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._performance_monitor.stop()
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            self.chunk_buffer.clear_all()
            
            logger.info("üõë –ü–ª–µ–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–µ–µ—Ä–∞: {e}")












































    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        return {
            "state": self.state_manager.current_state.value,
            "chunk_count": self.chunk_buffer.queue_size,
            "buffer_size": self.chunk_buffer.buffer_size,
            "is_playing": self.state_manager.current_state == PlaybackState.PLAYING,
            "is_paused": self.state_manager.current_state == PlaybackState.PAUSED,
            "device_id": self.config.device_id,
            "sample_rate": self.config.sample_rate,
            "channels": self.config.channels
        }
