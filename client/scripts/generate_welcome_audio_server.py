#!/usr/bin/env python3
"""
Generate Welcome Audio Script - Server AudioGenerator Version

–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
–∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator —Å Azure TTS.
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
server_path = Path(__file__).parent.parent.parent / "server"
sys.path.append(str(server_path))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –∫–ª–∏–µ–Ω—Ç–∞
client_path = Path(__file__).parent.parent
sys.path.append(str(client_path))

from audio_generator import AudioGenerator
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def generate_welcome_audio():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Azure TTS
        if not Config.SPEECH_KEY or not Config.SPEECH_REGION:
            logger.warning("‚ö†Ô∏è Azure TTS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥—ã")
            logger.info("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SPEECH_KEY –∏ SPEECH_REGION –≤ server/config.env")
        else:
            logger.info(f"‚úÖ Azure TTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω: Region={Config.SPEECH_REGION}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        welcome_text = "Hi! Nexy is here. How can I help you?"
        output_file = "assets/audio/welcome_en.mp3"
        
        logger.info("üéµ [SERVER_AUDIO_GEN] –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
        logger.info(f"üìù [SERVER_AUDIO_GEN] –¢–µ–∫—Å—Ç: '{welcome_text}'")
        logger.info(f"üéØ [SERVER_AUDIO_GEN] –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –≥–æ–ª–æ—Å–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        generator = AudioGenerator(voice="en-US-JennyNeural")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        logger.info("üéµ [SERVER_AUDIO_GEN] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator...")
        audio_data = await generator.generate_audio(welcome_text)
        
        if audio_data is None:
            logger.error("‚ùå [SERVER_AUDIO_GEN] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_path = Path(__file__).parent.parent / output_file
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy –º–∞—Å—Å–∏–≤ –≤ AudioSegment
        from pydub import AudioSegment
        audio_segment = AudioSegment(
            audio_data.tobytes(),
            frame_rate=48000,  # –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 48000Hz
            sample_width=2,    # 16-bit
            channels=1         # mono
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MP3
        audio_segment.export(output_path, format="mp3")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        duration_sec = len(audio_data) / 48000
        file_size = output_path.stat().st_size
        
        logger.info(f"‚úÖ [SERVER_AUDIO_GEN] –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
        logger.info(f"üìä [SERVER_AUDIO_GEN] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_sec:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"   - –°—ç–º–ø–ª–æ–≤: {len(audio_data)}")
        logger.info(f"   - Sample Rate: 48000 Hz")
        logger.info(f"   - –ö–∞–Ω–∞–ª—ã: 1 (mono)")
        logger.info(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        logger.info(f"   - –ü—É—Ç—å: {output_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
        if duration_sec < 1.0:
            logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π")
        elif duration_sec > 10.0:
            logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π")
        else:
            logger.info("‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå [SERVER_AUDIO_GEN] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (Server AudioGenerator)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    if Config.SPEECH_KEY and Config.SPEECH_REGION:
        logger.info("‚úÖ Azure TTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å")
    else:
        logger.warning("‚ö†Ô∏è Azure TTS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback")
        logger.info("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Azure TTS –¥–æ–±–∞–≤—å—Ç–µ –≤ server/config.env:")
        logger.info("   SPEECH_KEY=your_azure_speech_key")
        logger.info("   SPEECH_REGION=your_azure_region")
    
    success = await generate_welcome_audio()
    
    if success:
        print("\n‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
        print("üéØ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        print("üéµ –ö–∞—á–µ—Å—Ç–≤–æ: Azure TTS (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω) –∏–ª–∏ macOS say fallback")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
