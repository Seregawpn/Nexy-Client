#!/usr/bin/env python3
"""
üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô —Ç–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ—á–∏
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
"""

import asyncio
import time
import threading
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn

console = Console()

class InterruptTester:
    """–¢–µ—Å—Ç–µ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    
    def __init__(self):
        self.test_results = []
        self.interrupt_detected = False
        self.audio_stopped = False
        self.grpc_cancelled = False
        
    async def test_interrupt_functionality(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        console.print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–ï–†–´–í–ê–ù–ò–Ø –†–ï–ß–ò")
        console.print("=" * 60)
        
        console.print("üìã –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        console.print("1. –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        console.print("2. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")
        console.print("3. –ù–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ—á–∏")
        console.print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        console.print("5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await self.test_components()
        
        # –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        await self.test_interrupt_simulation()
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await self.analyze_results()
        
    async def test_components(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        console.print("\nüîß –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AudioPlayer
            from audio_player import AudioPlayer
            player = AudioPlayer()
            console.print("‚úÖ AudioPlayer –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            methods = ['interrupt_immediately', 'clear_all_audio_data', 'force_stop_immediately']
            for method in methods:
                if hasattr(player, method):
                    console.print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    console.print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
                    self.test_results.append(f"FAIL: {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º InputHandler
            from input_handler import InputHandler
            console.print("‚úÖ InputHandler –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º StateManager
            from main import StateManager
            console.print("‚úÖ StateManager –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except ImportError as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            self.test_results.append(f"FAIL: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            self.test_results.append(f"FAIL: –û—à–∏–±–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - {e}")
    
    async def test_interrupt_simulation(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        console.print("\nüéÆ –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        
        try:
            from audio_player import AudioPlayer
            
            # –°–æ–∑–¥–∞–µ–º AudioPlayer
            player = AudioPlayer()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            console.print("üìä –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö...")
            
            import numpy as np
            test_chunks = [
                np.random.randint(-32768, 32767, 1000, dtype=np.int16),
                np.random.randint(-32768, 32767, 2000, dtype=np.int16),
                np.random.randint(-32768, 32767, 1500, dtype=np.int16),
                np.random.randint(-32768, 32767, 3000, dtype=np.int16),
            ]
            
            for i, chunk in enumerate(test_chunks):
                player.add_audio_chunk(chunk)
                console.print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–∞–Ω–∫ {i+1}: {len(chunk)} —Å—ç–º–ø–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            queue_size_before = player.audio_queue.qsize()
            buffer_size_before = len(player.internal_buffer)
            
            console.print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è:")
            console.print(f"   –û—á–µ—Ä–µ–¥—å: {queue_size_before} —á–∞–Ω–∫–æ–≤")
            console.print(f"   –ë—É—Ñ–µ—Ä: {buffer_size_before} —Å—ç–º–ø–ª–æ–≤")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            console.print("\nüö® –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ—á–∏...")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                
                task = progress.add_task("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...", total=None)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                def run_interrupt():
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                    player.clear_all_audio_data()
                
                interrupt_thread = threading.Thread(target=run_interrupt)
                interrupt_thread.start()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                interrupt_thread.join()
                
                progress.update(task, description="–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            queue_size_after = player.audio_queue.qsize()
            buffer_size_after = len(player.internal_buffer)
            
            console.print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è:")
            console.print(f"   –û—á–µ—Ä–µ–¥—å: {queue_size_after} —á–∞–Ω–∫–æ–≤")
            console.print(f"   –ë—É—Ñ–µ—Ä: {buffer_size_after} —Å—ç–º–ø–ª–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if queue_size_after == 0 and buffer_size_after == 0:
                console.print("‚úÖ –ü–†–ï–†–´–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û - –≤—Å–µ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã!")
                self.audio_stopped = True
                self.test_results.append("PASS: –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            else:
                console.print("‚ùå –ü–†–ï–†–´–í–ê–ù–ò–ï –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ - –±—É—Ñ–µ—Ä—ã –Ω–µ –æ—á–∏—â–µ–Ω—ã!")
                self.test_results.append(f"FAIL: –ë—É—Ñ–µ—Ä—ã –Ω–µ –æ—á–∏—â–µ–Ω—ã (–æ—á–µ—Ä–µ–¥—å: {queue_size_after}, –±—É—Ñ–µ—Ä: {buffer_size_after})")
            
        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}")
            self.test_results.append(f"FAIL: –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ - {e}")
    
    async def test_real_interrupt(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ gRPC"""
        console.print("\nüåê –¢–µ—Å—Ç 3: –†–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ gRPC...")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ gRPC –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            # –ù–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            console.print("‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è gRPC –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
            console.print("‚ÑπÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd server && python grpc_server.py")
            
        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è gRPC: {e}")
            self.test_results.append(f"FAIL: –û—à–∏–±–∫–∞ gRPC - {e}")
    
    async def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        console.print("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        console.print("=" * 60)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r.startswith("PASS")])
        failed_tests = len([r for r in self.test_results if r.startswith("FAIL")])
        
        console.print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        console.print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        console.print(f"   –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
        console.print(f"   –ù–µ—É–¥–∞—á–Ω–æ: {failed_tests}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.test_results:
            console.print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(self.test_results, 1):
                if result.startswith("PASS"):
                    console.print(f"   {i}. ‚úÖ {result}")
                else:
                    console.print(f"   {i}. ‚ùå {result}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        if failed_tests == 0:
            console.print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            console.print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            console.print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï –ü–†–ï–†–´–í–ê–ù–ò–Ø")
            console.print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ {failed_tests} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.audio_stopped:
            console.print("   ‚úÖ –ê—É–¥–∏–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            console.print("   ‚ùå –ê—É–¥–∏–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ AudioPlayer")
        
        if self.grpc_cancelled:
            console.print("   ‚úÖ gRPC –æ—Ç–º–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            console.print("   ‚ö†Ô∏è gRPC –æ—Ç–º–µ–Ω–∞ –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
    
    def run_manual_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        console.print("\nüéÆ –†–£–ß–ù–û–ô –¢–ï–°–¢ –ü–†–ï–†–´–í–ê–ù–ò–Ø –†–ï–ß–ò")
        console.print("=" * 60)
        
        console.print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        console.print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –û–¢–î–ï–õ–¨–ù–û–ú —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        console.print("   cd client && python main.py")
        console.print("")
        console.print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ –û–¢–î–ï–õ–¨–ù–û–ú —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        console.print("   cd server && python grpc_server.py")
        console.print("")
        console.print("3. –í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:")
        console.print("   ‚Ä¢ –°–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'tell me a long story')")
        console.print("   ‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏")
        console.print("   ‚Ä¢ –ù–ê–ñ–ú–ò–¢–ï –ü–†–û–ë–ï–õ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        console.print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–µ—á—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ú–ì–ù–û–í–ï–ù–ù–û")
        console.print("")
        console.print("4. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏:")
        console.print("   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < 50ms)")
        console.print("   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—á–∏—Å—Ç–∫–µ –±—É—Ñ–µ—Ä–æ–≤")
        console.print("   ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å IDLE)")
        
        console.print("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...")
        input()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = InterruptTester()
    
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        await tester.test_interrupt_functionality()
        
        # –†—É—á–Ω–æ–π —Ç–µ—Å—Ç
        tester.run_manual_test()
        
    except KeyboardInterrupt:
        console.print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        console.print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        console.print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
