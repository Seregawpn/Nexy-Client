#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç Audio Device Manager –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import sys
import os
import asyncio
import logging
import signal
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LiveAudioDeviceTester:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä Audio Device Manager"""
    
    def __init__(self):
        self.manager = None
        self.running = False
        self.device_changes = []
        self.device_switches = []
        self.start_time = None
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Audio Device Manager...")
        
        try:
            from audio_device_manager import create_default_audio_device_manager
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            self.manager = create_default_audio_device_manager()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
            self.manager.set_device_changed_callback(self.on_device_changed)
            self.manager.set_device_switched_callback(self.on_device_switched)
            self.manager.set_error_callback(self.on_error)
            
            print("‚úÖ Audio Device Manager –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def on_device_changed(self, change):
        """Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"\nüîÑ [{timestamp}] –ò–ó–ú–ï–ù–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê:")
        print(f"   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {change.device.name}")
        print(f"   üîÑ –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è: {change.change_type}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {change.device.status}")
        print(f"   üéØ –¢–∏–ø: {change.device.type}")
        print(f"   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {change.device.priority}")
        
        self.device_changes.append(change)
    
    def on_device_switched(self, from_device, to_device):
        """Callback –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"\nüîÑ [{timestamp}] –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê:")
        if from_device:
            print(f"   üì§ –°: {from_device.name} ({from_device.type})")
        else:
            print(f"   üì§ –°: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        print(f"   üì• –ù–∞: {to_device.name} ({to_device.type})")
        
        self.device_switches.append((from_device, to_device))
    
    def on_error(self, error):
        """Callback –¥–ª—è –æ—à–∏–±–æ–∫"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"\n‚ùå [{timestamp}] –û–®–ò–ë–ö–ê: {error}")
    
    async def show_initial_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        print("\n" + "="*60)
        print("üìä –ù–ê–ß–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            devices = await self.manager.get_available_devices()
            print(f"üì± –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            output_devices = [d for d in devices if d.type.value == "output"]
            input_devices = [d for d in devices if d.type.value == "input"]
            
            print(f"\nüîä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ ({len(output_devices)}):")
            for device in sorted(output_devices, key=lambda x: x.priority.value):
                status_icon = "‚úÖ" if device.status.value == "available" else "‚ùå"
                print(f"   {status_icon} {device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value})")
            
            print(f"\nüé§ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ ({len(input_devices)}):")
            for device in sorted(input_devices, key=lambda x: x.priority.value):
                status_icon = "‚úÖ" if device.status.value == "available" else "‚ùå"
                print(f"   {status_icon} {device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            current_device = await self.manager.get_current_device()
            if current_device:
                print(f"\nüéØ –¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device.name}")
            else:
                print(f"\n‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def show_current_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        print("\n" + "="*60)
        print("üìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            devices = await self.manager.get_available_devices()
            print(f"üì± –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            output_devices = [d for d in devices if d.type.value == "output"]
            input_devices = [d for d in devices if d.type.value == "input"]
            
            print(f"\nüîä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ ({len(output_devices)}):")
            for device in sorted(output_devices, key=lambda x: x.priority.value):
                status_icon = "‚úÖ" if device.status.value == "available" else "‚ùå"
                print(f"   {status_icon} {device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value})")
            
            print(f"\nüé§ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ ({len(input_devices)}):")
            for device in sorted(input_devices, key=lambda x: x.priority.value):
                status_icon = "‚úÖ" if device.status.value == "available" else "‚ùå"
                print(f"   {status_icon} {device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            current_device = await self.manager.get_current_device()
            if current_device:
                print(f"\nüéØ –¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device.name}")
            else:
                print(f"\n‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            runtime = time.time() - self.start_time if self.start_time else 0
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f}—Å):")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self.device_changes)}")
            print(f"   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {len(self.device_switches)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            await self.manager.start()
            self.running = True
            self.start_time = time.time()
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            await self.show_initial_status()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        
        try:
        if self.manager and self.running:
                await self.manager.stop()
                self.running = False
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            runtime = time.time() - self.start_time if self.start_time else 0
            print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f}—Å):")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self.device_changes)}")
            print(f"   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {len(self.device_switches)}")
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    async def run_live_test(self):
        """–ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢ AUDIO DEVICE MANAGER")
        print("="*60)
        print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
        print("1. üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("2. üîå –û—Ç–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("3. üëÄ –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º")
        print("4. ‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("5. üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")
        print("="*60)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        def signal_handler(signum, frame):
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç...")
        asyncio.create_task(self.stop_monitoring())
        
        signal.signal(signal.SIGINT, signal_handler)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if not await self.start_monitoring():
                return False
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô
            last_status_time = time.time()
            print("\nüîÑ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ü–£–©–ï–ù - –ü–û–î–ö–õ–Æ–ß–ê–ô–¢–ï/–û–¢–ö–õ–Æ–ß–ê–ô–¢–ï –£–°–¢–†–û–ô–°–¢–í–ê!")
            print("‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            print("="*60)
            
            while self.running:
                await asyncio.sleep(1)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                current_time = time.time()
                if current_time - last_status_time >= 10:
                    await self.show_current_status()
                    last_status_time = current_time
            
            return True
            
        except KeyboardInterrupt:
            print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            await self.stop_monitoring()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            import traceback
            traceback.print_exc()
            await self.stop_monitoring()
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢ –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò - AUDIO DEVICE MANAGER")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = LiveAudioDeviceTester()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º
    if not await tester.setup():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–µ—Ä")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∂–∏–≤–æ–π —Ç–µ—Å—Ç
    success = await tester.run_live_test()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return success

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)