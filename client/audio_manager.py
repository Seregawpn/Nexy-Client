#!/usr/bin/env python3
"""
AudioManagerDaemon - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SwitchAudioSource
"""

import subprocess
import threading
import time
import logging
import queue
from typing import List, Dict, Optional, Callable, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class DeviceType(Enum):
    """–¢–∏–ø—ã –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    AIRPODS = "airpods"
    BEATS = "beats"
    BLUETOOTH_HEADPHONES = "bluetooth_headphones"
    USB_HEADPHONES = "usb_headphones"
    BLUETOOTH_SPEAKERS = "bluetooth_speakers"
    USB_AUDIO = "usb_audio"
    SYSTEM_SPEAKERS = "system_speakers"
    VIRTUAL_DEVICE = "virtual_device"
    BUILT_IN = "built_in"
    MICROPHONE = "microphone"
    OTHER = "other"

@dataclass
class DeviceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    name: str
    index: int
    device_type: DeviceType
    priority: int
    is_available: bool = True
    is_default: bool = False
    max_channels: int = 0
    default_samplerate: int = 0
    max_samplerate: int = 0

class DeviceInfoManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
    
    def __init__(self):
        self.switch_audio_path = self._find_switch_audio_source()
        self.device_cache = {}
        self.cache_timeout = 5.0  # —Å–µ–∫—É–Ω–¥—ã
        self.last_cache_update = 0
        
        # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.virtual_device_keywords = [
            'blackhole', 'soundflower', 'loopback', 'virtual', 
            'aggregate', 'multi-output', 'sound source', 'audio hijack'
        ]
        
    def _find_switch_audio_source(self) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ SwitchAudioSource"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
            paths = [
                '/usr/local/bin/SwitchAudioSource',
                '/opt/homebrew/bin/SwitchAudioSource',
                '/usr/bin/SwitchAudioSource'
            ]
            
            for path in paths:
                try:
                    result = subprocess.run([path, '-a'], 
                                          capture_output=True, text=True, timeout=5)
                    if result.returncode == 0:
                        logger.info(f"‚úÖ SwitchAudioSource –Ω–∞–π–¥–µ–Ω: {path}")
                        return path
                except (subprocess.TimeoutExpired, FileNotFoundError):
                    continue
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ which
            try:
                result = subprocess.run(['which', 'SwitchAudioSource'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    path = result.stdout.strip()
                    logger.info(f"‚úÖ SwitchAudioSource –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ which: {path}")
                    return path
            except subprocess.TimeoutExpired:
                pass
            
            raise FileNotFoundError("SwitchAudioSource –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SwitchAudioSource: {e}")
            raise
    
    def get_all_devices(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            result = subprocess.run([self.switch_audio_path, '-a'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                devices = [line.strip() for line in result.stdout.strip().split('\n') if line.strip()]
                logger.debug(f"üì± –ü–æ–ª—É—á–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return devices
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {result.stderr}")
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SwitchAudioSource: {e}")
            return []
    
    def get_current_device(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            result = subprocess.run([self.switch_audio_path, '-c'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                device = result.stdout.strip()
                logger.debug(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
                return device
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {result.stderr}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SwitchAudioSource: {e}")
            return None
    
    def is_virtual_device(self, device_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º"""
        name_lower = device_name.lower()
        return any(keyword in name_lower for keyword in self.virtual_device_keywords)
    
    def _classify_device_type(self, device_name: str) -> Tuple[DeviceType, int]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —Ç–∏–ø—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"""
        name_lower = device_name.lower()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if self.is_virtual_device(device_name):
            return DeviceType.VIRTUAL_DEVICE, 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!
        
        # –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (—á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if 'airpods' in name_lower:
            return DeviceType.AIRPODS, 100
        elif 'beats' in name_lower:
            return DeviceType.BEATS, 95
        elif any(tag in name_lower for tag in ['bluetooth', 'wireless']) and any(tag in name_lower for tag in ['headphone', 'earbud', 'earphone']):
            return DeviceType.BLUETOOTH_HEADPHONES, 90
        elif 'usb' in name_lower and any(tag in name_lower for tag in ['headphone', 'earbud', 'earphone']):
            return DeviceType.USB_HEADPHONES, 85
        elif any(tag in name_lower for tag in ['bluetooth', 'wireless']) and any(tag in name_lower for tag in ['speaker', 'sound']):
            return DeviceType.BLUETOOTH_SPEAKERS, 70
        elif 'usb' in name_lower:
            return DeviceType.USB_AUDIO, 60
        elif any(tag in name_lower for tag in ['macbook', 'built-in', 'internal', 'speaker']):
            return DeviceType.SYSTEM_SPEAKERS, 40
        elif any(tag in name_lower for tag in ['microphone', 'mic']):
            return DeviceType.MICROPHONE, 5
        else:
            return DeviceType.OTHER, 10
    
    def get_device_info(self, device_name: str) -> DeviceInfo:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        device_type, priority = self._classify_device_type(device_name)
        
        return DeviceInfo(
            name=device_name,
            index=-1,  # SwitchAudioSource –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã
            device_type=device_type,
            priority=priority,
            is_available=True,
            is_default=False
        )
    
    def get_available_devices_info(self) -> List[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (current_time - self.last_cache_update) < self.cache_timeout and self.device_cache:
            return list(self.device_cache.values())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        devices = self.get_all_devices()
        current_device = self.get_current_device()
        
        device_info_list = []
        for device_name in devices:
            device_info = self.get_device_info(device_name)
            device_info.is_default = (device_name == current_device)
            device_info_list.append(device_info)
            self.device_cache[device_name] = device_info
        
        self.last_cache_update = current_time
        return device_info_list
    
    def _update_device_list(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            result = subprocess.run([self.switch_audio_path, '-a'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                new_devices = [line.strip() for line in result.stdout.strip().split('\n') if line.strip()]
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                self.device_cache.clear()
                
                logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(new_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                for device_name in new_devices:
                    device_info = self.get_device_info(device_name)
                    logger.info(f"   üì± {device_name} (—Ç–∏–ø: {device_info.device_type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device_info.priority})")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {result.stderr}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")

class AudioDeviceController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
    
    def __init__(self, device_manager: DeviceInfoManager):
        self.device_manager = device_manager
        self.switch_cooldown = 2.0  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏
        self.last_switch_time = 0
        
    def switch_to_device(self, device_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            current_time = time.time()
            if current_time - self.last_switch_time < self.switch_cooldown:
                logger.info(f"‚è±Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return False
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏ OUTPUT –∏ INPUT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            # 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º OUTPUT (–¥–∏–Ω–∞–º–∏–∫–∏)
            result_output = subprocess.run([self.device_manager.switch_audio_path, '-s', device_name], 
                                         capture_output=True, text=True, timeout=10)
            
            # 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º INPUT (–º–∏–∫—Ä–æ—Ñ–æ–Ω) - –∏—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
            result_input = subprocess.run([self.device_manager.switch_audio_path, '-i', device_name], 
                                        capture_output=True, text=True, timeout=10)
            
            if result_output.returncode == 0:
                self.last_switch_time = current_time
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ OUTPUT: {device_name}")
                
                if result_input.returncode == 0:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ INPUT: {device_name}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å INPUT –Ω–∞ {device_name}: {result_input.stderr}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã...")
                time.sleep(1.5)  # 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º PortAudio –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PortAudio –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è...")
                try:
                    import sounddevice as sd
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º PortAudio
                    sd._terminate()
                    time.sleep(0.5)
                    sd._initialize()
                    logger.info(f"‚úÖ PortAudio –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                except Exception as pa_e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PortAudio: {pa_e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
                current_device = self.device_manager.get_current_device()
                if current_device == device_name:
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {current_device}")
                else:
                    logger.warning(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∏ {device_name}, –Ω–æ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")
                
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è OUTPUT –Ω–∞ {device_name}: {result_output.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def auto_switch_to_best_device(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            devices = self.device_manager.get_available_devices_info()
            if not devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return False
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ (–¥–∏–Ω–∞–º–∏–∫–∏) –Ω–∞–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –≤–≤–æ–¥–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã)
            real_devices = [d for d in devices 
                          if not self.device_manager.is_virtual_device(d.name) 
                          and d.device_type != DeviceType.MICROPHONE
                          and 'microphone' not in d.name.lower()]
            
            if not real_devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ)")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –Ω–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö
                best_device = max(devices, key=lambda d: d.priority)
                if self.device_manager.is_virtual_device(best_device.name):
                    logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ: {best_device.name}")
                return self.switch_to_device(best_device.name)
            
            # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å—Ä–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            best_device = max(real_devices, key=lambda d: d.priority)
            current_device = self.device_manager.get_current_device()
            
            if best_device.name == current_device:
                logger.info(f"‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name}")
                return True
            
            logger.info(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_device.priority})")
            return self.switch_to_device(best_device.name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def switch_to_headphones(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"""
        try:
            devices = self.device_manager.get_available_devices_info()
            headphones = [d for d in devices if d.device_type in [
                DeviceType.AIRPODS, DeviceType.BEATS, 
                DeviceType.BLUETOOTH_HEADPHONES, DeviceType.USB_HEADPHONES
            ]]
            
            if not headphones:
                logger.info("üéß –ù–∞—É—à–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—É—à–Ω–∏–∫–∏ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            best_headphones = max(headphones, key=lambda d: d.priority)
            logger.info(f"üéß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏: {best_headphones.name}")
            return self.switch_to_device(best_headphones.name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏: {e}")
            return False

class DeviceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    def __init__(self, device_manager: DeviceInfoManager, controller: AudioDeviceController):
        self.device_manager = device_manager
        self.controller = controller
        self.monitoring = False
        self.monitor_thread = None
        self.monitoring_interval = 3.0  # —Å–µ–∫—É–Ω–¥—ã
        self.callbacks = []
        self.last_device_state = set()
        
    def add_callback(self, callback: Callable[[str, Dict], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
        self.callbacks.append(callback)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self.monitoring:
            logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        self.monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not self.monitoring:
            return
        
        logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        self.monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=2.0)
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._check_device_changes()
        
        while self.monitoring:
            try:
                time.sleep(self.monitoring_interval)
                if self.monitoring:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–Ω–∞
                    self._check_device_changes()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(1.0)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info("üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _check_device_changes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            current_devices = set(self.device_manager.get_all_devices())
            
            if not self.last_device_state:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.last_device_state = current_devices
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            added_devices = current_devices - self.last_device_state
            removed_devices = self.last_device_state - current_devices
            
            if added_devices:
                logger.info(f"üîî –ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {list(added_devices)}")
                self._handle_device_added(added_devices)
            
            if removed_devices:
                logger.info(f"üîî –£–¥–∞–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {list(removed_devices)}")
                self._handle_device_removed(removed_devices)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.last_device_state = current_devices
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def _handle_device_added(self, added_devices: set):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        for device_name in added_devices:
            device_info = self.device_manager.get_device_info(device_name)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            self.device_manager._update_device_list()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!
            if (not self.device_manager.is_virtual_device(device_name) 
                and device_info.priority >= 85):  # AirPods, Beats, Bluetooth –Ω–∞—É—à–Ω–∏–∫–∏
                logger.info(f"üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏: {device_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ —Ç–µ–∫—É—â–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
                current_device = self.device_manager.get_current_device()
                if current_device != device_name:
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
                    self.controller.switch_to_device(device_name)
                else:
                    logger.info(f"‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º")
                    # –î–∞–∂–µ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ —Ç–µ–∫—É—â–µ–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                    self.controller.switch_to_device(device_name)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º callback'–∏
            for callback in self.callbacks:
                try:
                    callback('device_added', {
                        'name': device_name,
                        'type': device_info.device_type.value,
                        'priority': device_info.priority
                    })
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
    
    def _handle_device_removed(self, removed_devices: set):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        for device_name in removed_devices:
            device_info = self.device_manager.get_device_info(device_name)
            
            # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            current_device = self.device_manager.get_current_device()
            if device_name == current_device:
                logger.info(f"üîÑ –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ: {device_name}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è...")
                self.device_manager._update_device_list()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                logger.info(f"‚è≥ –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
                time.sleep(2.0)  # 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                
                self.controller.auto_switch_to_best_device()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º callback'–∏
            for callback in self.callbacks:
                try:
                    callback('device_removed', {
                        'name': device_name,
                        'type': device_info.device_type.value,
                        'priority': device_info.priority
                    })
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

class AudioManagerDaemon:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        self.running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        try:
            self.device_manager = DeviceInfoManager()
            self.controller = AudioDeviceController(self.device_manager)
            self.monitor = DeviceMonitor(self.device_manager, self.controller)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self._apply_config()
            
            logger.info("‚úÖ AudioManagerDaemon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioManagerDaemon: {e}")
            raise
    
    def _apply_config(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if 'monitoring_interval' in self.config:
            self.monitor.monitoring_interval = float(self.config['monitoring_interval'])
        
        # Cooldown –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
        if 'switch_cooldown' in self.config:
            self.controller.switch_cooldown = float(self.config['switch_cooldown'])
        
        # –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if 'cache_timeout' in self.config:
            self.device_manager.cache_timeout = float(self.config['cache_timeout'])
    
    def start(self, daemon_mode: bool = True):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self.running:
            logger.info("üîÑ AudioManagerDaemon —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AudioManagerDaemon...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitor.start_monitoring()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            self.controller.auto_switch_to_best_device()
            
            self.running = True
            logger.info("‚úÖ AudioManagerDaemon –∑–∞–ø—É—â–µ–Ω")
            
            if not daemon_mode:
                # –ï—Å–ª–∏ –Ω–µ daemon —Ä–µ–∂–∏–º - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    while self.running:
                        time.sleep(1.0)
                except KeyboardInterrupt:
                    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    self.stop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AudioManagerDaemon: {e}")
            self.stop()
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not self.running:
            return
        
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AudioManagerDaemon...")
        
        try:
            self.running = False
            self.monitor.stop_monitoring()
            logger.info("‚úÖ AudioManagerDaemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AudioManagerDaemon: {e}")
    
    def add_device_callback(self, callback: Callable[[str, Dict], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.monitor.add_callback(callback)
    
    def switch_to_device(self, device_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        return self.controller.switch_to_device(device_name)
    
    def switch_to_headphones(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏"""
        return self.controller.switch_to_headphones()
    
    def auto_switch_to_best(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        return self.controller.auto_switch_to_best_device()
    
    def get_current_device(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        return self.device_manager.get_current_device()
    
    def get_available_devices(self) -> List[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        return self.device_manager.get_available_devices_info()
    
    def get_device_info(self, device_name: str) -> DeviceInfo:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        return self.device_manager.get_device_info(device_name)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='AudioManagerDaemon - –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
    parser.add_argument('--daemon', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ daemon —Ä–µ–∂–∏–º–µ')
    parser.add_argument('--list', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
    parser.add_argument('--current', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
    parser.add_argument('--switch', type=str, help='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
    parser.add_argument('--auto', action='store_true', help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
    parser.add_argument('--headphones', action='store_true', help='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        config = {
            'monitoring_interval': 3.0,
            'switch_cooldown': 2.0,
            'cache_timeout': 5.0
        }
        
        manager = AudioManagerDaemon(config)
        
        if args.list:
            devices = manager.get_available_devices()
            print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            for device in devices:
                status = "üéß –¢–ï–ö–£–©–ï–ï" if device.is_default else "  "
                virtual_mark = "üîß –í–ò–†–¢–£–ê–õ–¨–ù–û–ï" if manager.device_manager.is_virtual_device(device.name) else ""
                print(f"{status} {device.name} (—Ç–∏–ø: {device.device_type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority}) {virtual_mark}")
        
        elif args.current:
            current = manager.get_current_device()
            if current:
                print(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        
        elif args.switch:
            success = manager.switch_to_device(args.switch)
            if success:
                print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {args.switch}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {args.switch}")
        
        elif args.auto:
            success = manager.auto_switch_to_best()
            if success:
                print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è")
        
        elif args.headphones:
            success = manager.switch_to_headphones()
            if success:
                print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏")
            else:
                print("‚ùå –ù–∞—É—à–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ daemon —Ä–µ–∂–∏–º–µ
            manager.start(daemon_mode=args.daemon)
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AudioManagerDaemon –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
_global_audio_manager = None

def get_global_audio_manager(config: Optional[Dict] = None) -> AudioManagerDaemon:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AudioManagerDaemon"""
    global _global_audio_manager
    
    if _global_audio_manager is None:
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AudioManagerDaemon...")
        _global_audio_manager = AudioManagerDaemon(config)
        logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π AudioManagerDaemon —Å–æ–∑–¥–∞–Ω")
    else:
        logger.info("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π AudioManagerDaemon")
    
    return _global_audio_manager

def stop_global_audio_manager():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AudioManagerDaemon"""
    global _global_audio_manager
    
    if _global_audio_manager is not None:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ AudioManagerDaemon...")
        _global_audio_manager.stop()
        _global_audio_manager = None
        logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π AudioManagerDaemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    exit(main())
