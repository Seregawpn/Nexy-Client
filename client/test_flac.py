#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã FLAC
"""

import sys
import os
import subprocess
from pathlib import Path

def test_system_flac():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π FLAC"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–Ω—ã–π FLAC...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FLAC –≤ —Å–∏—Å—Ç–µ–º–µ
        result = subprocess.run(['flac', '--version'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π FLAC –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå FLAC –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå FLAC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: brew install flac")
        return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ FLAC")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FLAC: {e}")
        return False

def test_python_flac():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FLAC"""
    print("\nüêç –¢–µ—Å—Ç–∏—Ä—É—é Python FLAC –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...")
    
    try:
        import pydub
        print(f"‚úÖ pydub –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É FLAC
        from pydub import AudioSegment
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç
        test_audio = AudioSegment.silent(duration=1000)  # 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
        
        # –ü—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ FLAC
        temp_flac = "test_output.flac"
        test_audio.export(temp_flac, format="flac")
        
        if os.path.exists(temp_flac):
            print("‚úÖ FLAC —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            os.remove(temp_flac)
            return True
        else:
            print("‚ùå FLAC —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pydub: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: pip install pydub")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ pydub: {e}")
        return False

def test_audio_formats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    print("\nüéµ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤...")
    
    try:
        from pydub import AudioSegment
        
        # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formats = ["wav", "mp3", "flac", "ogg", "m4a"]
        supported_formats = []
        
        for fmt in formats:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ
                test_audio = AudioSegment.silent(duration=1000)
                temp_file = f"test_output.{fmt}"
                
                # –ü—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                test_audio.export(temp_file, format=fmt)
                
                if os.path.exists(temp_file):
                    supported_formats.append(fmt)
                    os.remove(temp_file)  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    print(f"‚úÖ {fmt.upper()} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                else:
                    print(f"‚ùå {fmt.upper()} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    
            except Exception as e:
                print(f"‚ùå {fmt.upper()} –æ—à–∏–±–∫–∞: {e}")
        
        print(f"\nüìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_formats)}")
        return len(supported_formats) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {e}")
        return False

def test_flac_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ FLAC"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ FLAC...")
    
    try:
        from pydub import AudioSegment
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª
        test_audio = AudioSegment.silent(duration=2000)  # 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã
        test_wav = "test_input.wav"
        test_flac = "test_output.flac"
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        test_audio.export(test_wav, format="wav")
        
        if not os.path.exists(test_wav):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV –≤ FLAC
        audio = AudioSegment.from_wav(test_wav)
        audio.export(test_flac, format="flac")
        
        if os.path.exists(test_flac):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
            wav_size = os.path.getsize(test_wav)
            flac_size = os.path.getsize(test_flac)
            
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WAV ‚Üí FLAC —É—Å–ø–µ—à–Ω–∞")
            print(f"   WAV —Ä–∞–∑–º–µ—Ä: {wav_size} –±–∞–π—Ç")
            print(f"   FLAC —Ä–∞–∑–º–µ—Ä: {flac_size} –±–∞–π—Ç")
            print(f"   –°–∂–∞—Ç–∏–µ: {((wav_size - flac_size) / wav_size * 100):.1f}%")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            os.remove(test_wav)
            os.remove(test_flac)
            
            return True
        else:
            print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ FLAC –Ω–µ —É–¥–∞–ª–∞—Å—å")
            if os.path.exists(test_wav):
                os.remove(test_wav)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        for file in ["test_input.wav", "test_output.flac"]:
            if os.path.exists(file):
                os.remove(file)
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FLAC –ø–æ–¥–¥–µ—Ä–∂–∫–∏...\n")
    
    tests = [
        ("–°–∏—Å—Ç–µ–º–Ω—ã–π FLAC", test_system_flac),
        ("Python FLAC –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", test_python_flac),
        ("–ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã", test_audio_formats),
        ("FLAC –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", test_flac_conversion),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø FLAC")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! FLAC –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π FLAC.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É FLAC: brew install flac")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
