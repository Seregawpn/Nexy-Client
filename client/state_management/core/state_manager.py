"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import threading
import time
import logging
from typing import Optional, Dict, Any, List, Callable
from datetime import datetime

from .types import (
    AppState, StateTransition, StateConfig, StateMetrics, StateInfo,
    StateChangedCallback, ErrorCallback, RecoveryCallback
)
from .state_validator import StateValidator
from ..monitoring.state_monitor import StateMonitor
from ..recovery.state_recovery import StateRecovery

logger = logging.getLogger(__name__)


class StateManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, config: Optional[StateConfig] = None):
        self.config = config or StateConfig()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self._state = AppState.SLEEPING
        self._state_lock = threading.RLock()
        self._state_start_time = time.time()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.validator = StateValidator()
        self.monitor = StateMonitor(self.config.max_history_size)
        self.recovery = StateRecovery(self)
        
        # Callbacks
        self.on_state_changed: Optional[StateChangedCallback] = None
        self.on_error: Optional[ErrorCallback] = None
        self.on_recovery: Optional[RecoveryCallback] = None
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.active_tasks: List[asyncio.Task] = []
        self._task_lock = threading.RLock()
        
        # –§–ª–∞–≥–∏
        self._shutdown_requested = False
        self._shutdown_lock = threading.RLock()
        
        logger.info("üîÑ State Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @property
    def state(self) -> AppState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        with self._state_lock:
            return self._state
    
    @state.setter
    def state(self, new_state: AppState):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
        with self._state_lock:
            self._state = new_state
    
    async def _transition_to_state(self, new_state: AppState, reason: str = "") -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        
        Args:
            new_state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            reason: –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω
        """
        try:
            with self._state_lock:
                current_state = self._state
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥
                if not self.validator.can_transition(current_state, new_state):
                    logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥: {current_state.value} ‚Üí {new_state.value}")
                    return False
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if not self.validator.validate_state(new_state):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state.value}")
                    return False
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                start_time = time.time()
                success = await self._execute_transition(current_state, new_state, reason)
                duration = time.time() - start_time
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self._state = new_state
                    self._state_start_time = time.time()
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                    self.monitor.record_transition(current_state, new_state, duration, True, reason)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                    self._log_state_transition(current_state, new_state, reason)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º callback
                    if self.on_state_changed:
                        try:
                            self.on_state_changed(current_state, new_state, reason)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ callback —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                    
                    return True
                else:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                    self.monitor.record_transition(current_state, new_state, duration, False, reason)
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é: {e}")
            return False
    
    async def _execute_transition(self, from_state: AppState, to_state: AppState, reason: str) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        
        Args:
            from_state: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            to_state: –¶–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            reason: –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞
            transition_type = self.validator.get_transition_type(from_state, to_state)
            
            if transition_type == StateTransition.SLEEP_TO_LISTEN:
                return await self._execute_sleep_to_listen()
            elif transition_type == StateTransition.LISTEN_TO_PROCESS:
                return await self._execute_listen_to_process()
            elif transition_type == StateTransition.PROCESS_TO_SLEEP:
                return await self._execute_process_to_sleep()
            elif transition_type == StateTransition.ANY_TO_ERROR:
                return await self._execute_any_to_error()
            elif transition_type == StateTransition.ERROR_TO_SLEEP:
                return await self._execute_error_to_sleep()
            elif transition_type == StateTransition.ANY_TO_SHUTDOWN:
                return await self._execute_any_to_shutdown()
            else:
                # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞: {e}")
            return False
    
    async def _execute_sleep_to_listen(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Å–Ω–∞ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é"""
        try:
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥: SLEEPING ‚Üí LISTENING")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é: {e}")
            return False
    
    async def _execute_listen_to_process(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        try:
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥: LISTENING ‚Üí PROCESSING")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return False
    
    async def _execute_process_to_sleep(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ —Å–Ω—É"""
        try:
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥: PROCESSING ‚Üí SLEEPING")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await self._cancel_active_tasks()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫–æ —Å–Ω—É: {e}")
            return False
    
    async def _execute_any_to_error(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        try:
            logger.warning("–ü–µ—Ä–µ—Ö–æ–¥: ANY ‚Üí ERROR")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await self._cancel_active_tasks()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—à–∏–±–∫–µ: {e}")
            return False
    
    async def _execute_error_to_sleep(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –æ—à–∏–±–∫–∏ –∫–æ —Å–Ω—É"""
        try:
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥: ERROR ‚Üí SLEEPING")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.monitor.record_recovery()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º callback
            if self.on_recovery:
                try:
                    self.on_recovery(AppState.SLEEPING)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ callback –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç –æ—à–∏–±–∫–∏: {e}")
            return False
    
    async def _execute_any_to_shutdown(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é"""
        try:
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥: ANY ‚Üí SHUTDOWN")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await self._cancel_active_tasks()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é: {e}")
            return False
    
    async def _cancel_active_tasks(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        try:
            with self._task_lock:
                for task in self.active_tasks:
                    if not task.done():
                        task.cancel()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
                if self.active_tasks:
                    await asyncio.gather(*self.active_tasks, return_exceptions=True)
                
                self.active_tasks.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    def _log_state_transition(self, from_state: AppState, to_state: AppState, reason: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
        try:
            logger.info(f"üîÑ {from_state.value} ‚Üí {to_state.value} ({reason})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞: {e}")
    
    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    
    async def start_listening(self) -> bool:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        return await self._transition_to_state(AppState.LISTENING, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É")
    
    async def stop_listening(self) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        return await self._transition_to_state(AppState.SLEEPING, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—É—Å—Ç–∏–ª –∫–Ω–æ–ø–∫—É")
    
    async def start_processing(self) -> bool:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã"""
        return await self._transition_to_state(AppState.PROCESSING, "–∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
    
    async def stop_processing(self) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã"""
        return await self._transition_to_state(AppState.SLEEPING, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def sleep(self) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞"""
        return await self._transition_to_state(AppState.SLEEPING, "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ–Ω")
    
    async def error(self, error: Exception, context: str = "") -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            self.monitor.record_error(error, context)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º callback
            if self.on_error:
                try:
                    self.on_error(error, context)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ callback –æ—à–∏–±–∫–∏: {e}")
            
            return await self._transition_to_state(AppState.ERROR, f"–æ—à–∏–±–∫–∞: {context}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—à–∏–±–∫–µ: {e}")
            return False
    
    async def shutdown(self) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            with self._shutdown_lock:
                if self._shutdown_requested:
                    return True
                self._shutdown_requested = True
            
            return await self._transition_to_state(AppState.SHUTDOWN, "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {e}")
            return False
    
    # –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    
    def is_listening(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        return self.state == AppState.LISTENING
    
    def is_processing(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.state == AppState.PROCESSING
    
    def is_sleeping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞"""
        return self.state == AppState.SLEEPING
    
    def is_error(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏"""
        return self.state == AppState.ERROR
    
    def is_shutdown(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        return self.state == AppState.SHUTDOWN
    
    def get_state_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return self.state.value
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    def get_metrics(self) -> StateMetrics:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        return self.monitor.get_metrics()
    
    def get_state_history(self, limit: int = 10) -> List[StateInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        return self.monitor.get_state_history(limit)
    
    # Callback –º–µ—Ç–æ–¥—ã
    
    def set_state_changed_callback(self, callback: StateChangedCallback):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.on_state_changed = callback
    
    def set_error_callback(self, callback: ErrorCallback):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ—à–∏–±–æ–∫"""
        self.on_error = callback
    
    def set_recovery_callback(self, callback: RecoveryCallback):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.on_recovery = callback
    
    # Cleanup
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await self._cancel_active_tasks()
            
            logger.info("üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
