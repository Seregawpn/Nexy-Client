"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–∂–∏–º–æ–≤ - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import logging
import time
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass

from .types import (
    AppMode, ModeTransition, ModeTransitionType, ModeStatus, ModeEvent,
    ModeConfig, ModeMetrics
)

logger = logging.getLogger(__name__)

class ModeController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, config: ModeConfig = None):
        self.config = config or ModeConfig()
        self.current_mode = self.config.default_mode
        self.previous_mode = None
        self.mode_start_time = time.time()
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
        self.transitions: Dict[AppMode, List[ModeTransition]] = {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.mode_handlers: Dict[AppMode, Callable] = {}
        
        # Callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.mode_change_callbacks: List[Callable] = []
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.metrics = ModeMetrics()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safety
        self._lock = asyncio.Lock()
        
    def register_transition(self, transition: ModeTransition):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏"""
        if transition.from_mode not in self.transitions:
            self.transitions[transition.from_mode] = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ)
        self.transitions[transition.from_mode].append(transition)
        self.transitions[transition.from_mode].sort(key=lambda x: x.priority)
        
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥: {transition.from_mode.value} ‚Üí {transition.to_mode.value}")
        
    def register_mode_handler(self, mode: AppMode, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞"""
        self.mode_handlers[mode] = handler
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ {mode.value}")
        
    def register_mode_change_callback(self, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç callback –¥–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        self.mode_change_callbacks.append(callback)
        logger.debug("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞")
        
    async def switch_mode(self, new_mode: AppMode, force: bool = False, 
                         transition_type: ModeTransitionType = ModeTransitionType.MANUAL,
                         data: Dict[str, Any] = None) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        async with self._lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
                if not force and not self.can_switch_to(new_mode):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –∏–∑ {self.current_mode.value} –≤ {new_mode.value}")
                    return False
                
                # –ï—Å–ª–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
                if self.current_mode == new_mode:
                    logger.debug(f"‚ÑπÔ∏è –£–∂–µ –≤ —Ä–µ–∂–∏–º–µ {new_mode.value}")
                    return True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
                current_time = time.time()
                time_in_current_mode = current_time - self.mode_start_time
                self.metrics.time_in_modes[self.current_mode] += time_in_current_mode
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º
                self.previous_mode = self.current_mode
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Ö–æ–¥
                transition = self._find_transition(self.current_mode, new_mode)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                if transition and transition.action:
                    logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞: {transition.from_mode.value} ‚Üí {transition.to_mode.value}")
                    await transition.action()
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
                old_mode = self.current_mode
                self.current_mode = new_mode
                self.mode_start_time = current_time
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞
                handler = self.mode_handlers.get(new_mode)
                if handler:
                    try:
                        await handler()
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–µ–∂–∏–º–∞ {new_mode.value}: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
                await self._notify_mode_change(old_mode, new_mode, transition_type, data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.metrics.total_transitions += 1
                self.metrics.successful_transitions += 1
                self.metrics.transitions_by_type[transition_type] += 1
                
                logger.info(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {old_mode.value} ‚Üí {new_mode.value}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
                self.metrics.failed_transitions += 1
                return False
                
    def can_switch_to(self, mode: AppMode) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º"""
        transitions = self.transitions.get(self.current_mode, [])
        return any(t.to_mode == mode for t in transitions)
        
    def _find_transition(self, from_mode: AppMode, to_mode: AppMode) -> Optional[ModeTransition]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏"""
        transitions = self.transitions.get(from_mode, [])
        for transition in transitions:
            if transition.to_mode == to_mode:
                return transition
        return None
        
    async def _notify_mode_change(self, from_mode: AppMode, to_mode: AppMode, 
                                 transition_type: ModeTransitionType, data: Dict[str, Any] = None):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞"""
        try:
            event = ModeEvent(
                mode=to_mode,
                status=ModeStatus.ACTIVE,
                timestamp=time.time(),
                transition_type=transition_type,
                data=data
            )
            
            for callback in self.mode_change_callbacks:
                try:
                    await callback(event)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞: {e}")
            
    def get_current_mode(self) -> AppMode:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º"""
        return self.current_mode
        
    def get_previous_mode(self) -> Optional[AppMode]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º"""
        return self.previous_mode
        
    def get_available_transitions(self) -> List[AppMode]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        transitions = self.transitions.get(self.current_mode, [])
        return [t.to_mode for t in transitions]
        
    def get_metrics(self) -> ModeMetrics:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤"""
        return self.metrics
        
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤"""
        current_time = time.time()
        time_in_current_mode = current_time - self.mode_start_time
        
        return {
            "current_mode": self.current_mode.value,
            "previous_mode": self.previous_mode.value if self.previous_mode else None,
            "time_in_current_mode": time_in_current_mode,
            "available_transitions": [m.value for m in self.get_available_transitions()],
            "total_transitions": self.metrics.total_transitions,
            "successful_transitions": self.metrics.successful_transitions,
            "failed_transitions": self.metrics.failed_transitions,
            "success_rate": (
                self.metrics.successful_transitions / max(self.metrics.total_transitions, 1) * 100
            ),
            "handlers_registered": len(self.mode_handlers),
            "callbacks_registered": len(self.mode_change_callbacks),
            "config": {
                "default_mode": self.config.default_mode.value,
                "enable_automatic_transitions": self.config.enable_automatic_transitions,
                "transition_timeout": self.config.transition_timeout,
            }
        }
