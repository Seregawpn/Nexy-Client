"""
–†–µ–∂–∏–º —Ä–µ—á–∏ - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø —Å speech_playback
"""

import logging
from typing import Optional, Dict, Any
from ..core.types import AppMode, ModeEvent, ModeStatus

logger = logging.getLogger(__name__)

class SpeakingMode:
    """–†–µ–∂–∏–º —Ä–µ—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç speech_playback"""
    
    def __init__(self, speech_player=None, audio_device_manager=None):
        self.speech_player = speech_player
        self.audio_device_manager = audio_device_manager
        self.is_active = False
        
    async def enter_mode(self, context: Dict[str, Any] = None):
        """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ—á–∏"""
        try:
            logger.info("üé§ –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ—á–∏")
            self.is_active = True
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—É—á—à–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if self.audio_device_manager:
                try:
                    await self.audio_device_manager.switch_to_best_device()
                    logger.info("üîä –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}")
                    
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.speech_player:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–µ–µ—Ä –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
                    if hasattr(self.speech_player, 'is_ready'):
                        if not self.speech_player.is_ready():
                            logger.warning("‚ö†Ô∏è –ü–ª–µ–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é")
                    else:
                        logger.debug("‚ÑπÔ∏è –ü–ª–µ–µ—Ä –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–µ–µ—Ä–∞: {e}")
                    
            logger.info("‚úÖ –†–µ–∂–∏–º —Ä–µ—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ—á–∏: {e}")
            self.is_active = False
            
    async def exit_mode(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ—á–∏"""
        try:
            logger.info("üõë –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ—á–∏")
            self.is_active = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if self.speech_player:
                try:
                    self.speech_player.stop_playback()
                    logger.info("üõë –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                    
            logger.info("‚úÖ –†–µ–∂–∏–º —Ä–µ—á–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ—á–∏: {e}")
            
    async def handle_interrupt(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏"""
        try:
            logger.info("‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if self.speech_player:
                try:
                    self.speech_player.stop_playback()
                    logger.info("üõë –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏: {e}")
            
    async def handle_pause(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏"""
        try:
            logger.info("‚è∏Ô∏è –ü–∞—É–∑–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏")
            
            if self.speech_player:
                try:
                    self.speech_player.pause_playback()
                    logger.info("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏: {e}")
            
    async def handle_resume(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏"""
        try:
            logger.info("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏")
            
            if self.speech_player:
                try:
                    self.speech_player.resume_playback()
                    logger.info("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—á–∏: {e}")
            
    def is_speaking(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ —Ä–µ—á—å"""
        if not self.speech_player:
            return False
            
        try:
            if hasattr(self.speech_player, 'is_playing'):
                return self.speech_player.is_playing()
            elif hasattr(self.speech_player, 'get_status'):
                status = self.speech_player.get_status()
                return status.get('is_playing', False)
            else:
                return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—á–∏: {e}")
            return False
            
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Ä–µ—á–∏"""
        return {
            "is_active": self.is_active,
            "is_speaking": self.is_speaking(),
            "speech_player_available": self.speech_player is not None,
            "audio_device_manager_available": self.audio_device_manager is not None,
        }
