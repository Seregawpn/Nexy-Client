"""
–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
import time
from typing import Optional, Dict, Any
from ..core.types import AppMode, ModeEvent, ModeStatus

logger = logging.getLogger(__name__)

class ProcessingMode:
    """–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, grpc_client=None, state_manager=None):
        self.grpc_client = grpc_client
        self.state_manager = state_manager
        self.is_active = False
        self.processing_start_time = None
        self.current_task = None
        
    async def enter_mode(self, context: Dict[str, Any] = None):
        """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            logger.info("‚öôÔ∏è –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            self.is_active = True
            self.processing_start_time = time.time()
            self.current_task = context.get('task') if context else None
            
            # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.state_manager:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                    await self.state_manager.set_processing_state(True)
                    logger.info("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
                    
            logger.info("‚úÖ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            self.is_active = False
            
    async def exit_mode(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            logger.info("üõë –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            self.is_active = False
            self.current_task = None
            
            # –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.state_manager:
                try:
                    await self.state_manager.set_processing_state(False)
                    logger.info("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
                    
            self.processing_start_time = None
            logger.info("‚úÖ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            
    async def process_command(self, command: str, data: Dict[str, Any] = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            logger.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if self.grpc_client:
                try:
                    response = await self.grpc_client.process_command(command, data)
                    logger.info(f"üì° –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {response}")
                    return response
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
                    return None
            else:
                logger.warning("‚ö†Ô∏è gRPC –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None
            
    async def handle_interrupt(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            logger.info("‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if self.current_task:
                logger.info(f"üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {self.current_task}")
                self.current_task = None
                
            logger.info("‚úÖ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            
    def is_processing(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        return self.is_active and self.current_task is not None
            
    def get_processing_duration(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if not self.processing_start_time:
            return 0.0
            
        try:
            return time.time() - self.processing_start_time
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return 0.0
            
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return {
            "is_active": self.is_active,
            "is_processing": self.is_processing(),
            "processing_duration": self.get_processing_duration(),
            "current_task": self.current_task,
            "grpc_client_available": self.grpc_client is not None,
            "state_manager_available": self.state_manager is not None,
        }