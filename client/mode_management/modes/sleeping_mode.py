"""
–†–µ–∂–∏–º —Å–Ω–∞ - –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
"""

import logging
import time
from typing import Optional, Dict, Any
from ..core.types import AppMode, ModeEvent, ModeStatus

logger = logging.getLogger(__name__)

class SleepingMode:
    """–†–µ–∂–∏–º —Å–Ω–∞ - –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è"""
    
    def __init__(self):
        self.is_active = False
        self.sleep_start_time = None
        
    async def enter_mode(self, context: Dict[str, Any] = None):
        """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞"""
        try:
            logger.info("üò¥ –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞")
            self.is_active = True
            self.sleep_start_time = time.time()
            
            # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞
            logger.info("‚úÖ –†–µ–∂–∏–º —Å–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞: {e}")
            self.is_active = False
            
    async def exit_mode(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞"""
        try:
            logger.info("üåÖ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")
            self.is_active = False
            self.sleep_start_time = None
            
            logger.info("‚úÖ –†–µ–∂–∏–º —Å–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞: {e}")
            
    async def handle_wake_up(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        try:
            logger.info("üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–Ω–∞")
            
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
            logger.info("‚úÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {e}")
            
    def is_sleeping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ø–∏—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞"""
        return self.is_active
            
    def get_sleep_duration(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if not self.sleep_start_time:
            return 0.0
            
        try:
            return time.time() - self.sleep_start_time
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞: {e}")
            return 0.0
            
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞"""
        return {
            "is_active": self.is_active,
            "is_sleeping": self.is_sleeping(),
            "sleep_duration": self.get_sleep_duration(),
        }