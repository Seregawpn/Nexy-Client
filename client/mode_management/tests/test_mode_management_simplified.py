#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è mode_management
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É 3 —Ä–µ–∂–∏–º–∞–º–∏: Sleeping, Processing, Listening
"""

import asyncio
import logging
import time
import sys
import os
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..'))

from mode_management import (
    ModeController, AppMode, ModeTransition, ModeTransitionType, ModeStatus,
    ModeEvent, ModeConfig, ModeMetrics, SleepingMode, ProcessingMode, ListeningMode
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MockSpeechRecognizer:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è speech_recognizer"""
    
    def __init__(self):
        self.is_recording = False
        self.start_called = False
        self.stop_called = False
        self.recognized_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    
    async def start_recording(self) -> bool:
        self.start_called = True
        self.is_recording = True
        logger.info("üé§ Mock: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ")
        return True
    
    async def stop_recording(self) -> Optional[str]:
        self.stop_called = True
        self.is_recording = False
        logger.info("üé§ Mock: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return self.recognized_text

class MockAudioDeviceManager:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è audio_device_manager"""
    
    def __init__(self):
        self.switch_called = False
        self.current_device = "default"
    
    async def switch_to_best_device(self):
        self.switch_called = True
        self.current_device = "best_device"
        logger.info("üîä Mock: –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")

class MockGrpcClient:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è grpc_client"""
    
    def __init__(self):
        self.process_called = False
        self.commands_processed = []
    
    async def process_command(self, command: str, data: Dict[str, Any] = None):
        self.process_called = True
        self.commands_processed.append(command)
        logger.info(f"üì° Mock: –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {command}")
        return f"Response for {command}"

class MockStateManager:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è state_manager"""
    
    def __init__(self):
        self.processing_state = False
        self.set_called = False
    
    async def set_processing_state(self, state: bool):
        self.set_called = True
        self.processing_state = state
        logger.info(f"üìä Mock: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {state}")

class SimplifiedModeManagementTester:
    """–¢–µ—Å—Ç–µ—Ä —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è mode_management"""
    
    def __init__(self):
        self.speech_recognizer = MockSpeechRecognizer()
        self.audio_device_manager = MockAudioDeviceManager()
        self.grpc_client = MockGrpcClient()
        self.state_manager = MockStateManager()
        self.controller = None
        self.sleeping_mode = None
        self.processing_mode = None
        self.listening_mode = None
        self.test_results = {}
        self.mode_change_events = []
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = ModeConfig(
            default_mode=AppMode.SLEEPING,
            enable_automatic_transitions=True,
            transition_timeout=5.0,
            max_transition_attempts=3,
            enable_logging=True,
            enable_metrics=True
        )
        
        self.controller = ModeController(config)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∂–∏–º—ã
        self.sleeping_mode = SleepingMode()
        self.processing_mode = ProcessingMode(self.grpc_client, self.state_manager)
        self.listening_mode = ListeningMode(self.speech_recognizer, self.audio_device_manager)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
        self._register_transitions()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self._register_mode_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤
        self.controller.register_mode_change_callback(self._on_mode_change)
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    def _register_transitions(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏"""
        # SLEEPING -> LISTENING (–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è)
        transition = ModeTransition(
            from_mode=AppMode.SLEEPING,
            to_mode=AppMode.LISTENING,
            transition_type=ModeTransitionType.AUTOMATIC,
            priority=1,
            timeout=2.0
        )
        self.controller.register_transition(transition)
        
        # LISTENING -> PROCESSING (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏)
        transition = ModeTransition(
            from_mode=AppMode.LISTENING,
            to_mode=AppMode.PROCESSING,
            transition_type=ModeTransitionType.AUTOMATIC,
            priority=1,
            timeout=3.0
        )
        self.controller.register_transition(transition)
        
        # PROCESSING -> SLEEPING (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        transition = ModeTransition(
            from_mode=AppMode.PROCESSING,
            to_mode=AppMode.SLEEPING,
            transition_type=ModeTransitionType.AUTOMATIC,
            priority=1,
            timeout=2.0
        )
        self.controller.register_transition(transition)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # PROCESSING -> LISTENING (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ)
        transition = ModeTransition(
            from_mode=AppMode.PROCESSING,
            to_mode=AppMode.LISTENING,
            transition_type=ModeTransitionType.MANUAL,
            priority=2,
            timeout=2.0
        )
        self.controller.register_transition(transition)
        
        # LISTENING -> SLEEPING (–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è)
        transition = ModeTransition(
            from_mode=AppMode.LISTENING,
            to_mode=AppMode.SLEEPING,
            transition_type=ModeTransitionType.INTERRUPT,
            priority=1,
            timeout=1.0
        )
        self.controller.register_transition(transition)
    
    def _register_mode_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤"""
        async def sleeping_handler():
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ SLEEPING")
            await self.sleeping_mode.enter_mode()
            
        async def processing_handler():
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ PROCESSING")
            await self.processing_mode.enter_mode()
            
        async def listening_handler():
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ LISTENING")
            await self.listening_mode.enter_mode()
            
        self.controller.register_mode_handler(AppMode.SLEEPING, sleeping_handler)
        self.controller.register_mode_handler(AppMode.PROCESSING, processing_handler)
        self.controller.register_mode_handler(AppMode.LISTENING, listening_handler)
    
    async def _on_mode_change(self, event: ModeEvent):
        """Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤"""
        self.mode_change_events.append(event)
        logger.info(f"üì¢ –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞: {event.mode.value} (—Å—Ç–∞—Ç—É—Å: {event.status.value})")
    
    async def test_basic_mode_switching(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
            assert self.controller.get_current_mode() == AppMode.SLEEPING, "–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å SLEEPING"
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ LISTENING
            result = await self.controller.switch_mode(AppMode.LISTENING)
            assert result == True, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ LISTENING –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            assert self.controller.get_current_mode() == AppMode.LISTENING, "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å LISTENING"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            assert self.listening_mode.is_active == True, "–†–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω"
            assert self.speech_recognizer.start_called == True, "start_recording –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            assert self.audio_device_manager.switch_called == True, "switch_to_best_device –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            
            self.test_results["basic_mode_switching"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ë–∞–∑–æ–≤–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.test_results["basic_mode_switching"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_full_mode_cycle(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–∂–∏–º–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–∂–∏–º–æ–≤")
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.mode_change_events.clear()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ PROCESSING –∏–∑ LISTENING (—Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º)
            result = await self.controller.switch_mode(AppMode.PROCESSING)
            assert result == True, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ PROCESSING –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            assert self.controller.get_current_mode() == AppMode.PROCESSING, "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PROCESSING"
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ SLEEPING –∏–∑ PROCESSING
            result = await self.controller.switch_mode(AppMode.SLEEPING)
            assert result == True, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ SLEEPING –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            assert self.controller.get_current_mode() == AppMode.SLEEPING, "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å SLEEPING"
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ LISTENING –∏–∑ SLEEPING
            result = await self.controller.switch_mode(AppMode.LISTENING)
            assert result == True, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ LISTENING –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            assert self.controller.get_current_mode() == AppMode.LISTENING, "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å LISTENING"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã
            assert len(self.mode_change_events) == 3, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            assert self.processing_mode.is_active == True, "–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω"
            assert self.state_manager.set_called == True, "set_processing_state –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            
            self.test_results["full_mode_cycle"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.test_results["full_mode_cycle"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_mode_specific_functionality(self):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç 3: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–æ–≤")
        
        try:
            # –¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            await self.controller.switch_mode(AppMode.LISTENING)
            assert self.listening_mode.is_listening() == True, "is_listening –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
            assert self.listening_mode.get_recognized_text() is None, "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
            
            # –¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.controller.switch_mode(AppMode.PROCESSING)
            response = await self.processing_mode.process_command("test_command", {"data": "test"})
            assert response is not None, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç"
            assert self.grpc_client.process_called == True, "process_command –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            assert "test_command" in self.grpc_client.commands_processed, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö"
            
            # –¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
            await self.controller.switch_mode(AppMode.SLEEPING)
            assert self.sleeping_mode.is_sleeping() == True, "is_sleeping –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
            
            self.test_results["mode_specific_functionality"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.test_results["mode_specific_functionality"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_mode_interrupts(self):
        """–¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç 4: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤")
        
        try:
            # –¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            await self.controller.switch_mode(AppMode.LISTENING)
            await self.listening_mode.handle_interrupt()
            assert self.speech_recognizer.stop_called == True, "stop_recording –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            
            # –¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.controller.switch_mode(AppMode.PROCESSING)
            await self.processing_mode.handle_interrupt()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
            
            self.test_results["mode_interrupts"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        except Exception as e:
            self.test_results["mode_interrupts"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_mode_metrics(self):
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ —Ä–µ–∂–∏–º–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç 5: –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            await self.controller.switch_mode(AppMode.LISTENING)
            await self.controller.switch_mode(AppMode.PROCESSING)
            await self.controller.switch_mode(AppMode.SLEEPING)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = self.controller.get_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            assert metrics.total_transitions > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥—ã"
            assert metrics.successful_transitions > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"
            assert metrics.average_transition_time >= 0, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            assert ModeTransitionType.MANUAL in metrics.transitions_by_type, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è MANUAL –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"
            assert metrics.transitions_by_type[ModeTransitionType.MANUAL] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å MANUAL –ø–µ—Ä–µ—Ö–æ–¥—ã"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤ —Ä–µ–∂–∏–º–∞—Ö
            assert AppMode.LISTENING in metrics.time_in_modes, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è LISTENING"
            assert metrics.time_in_modes[AppMode.LISTENING] > 0, "–í—Ä–µ–º—è –≤ —Ä–µ–∂–∏–º–µ LISTENING –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0"
            
            self.test_results["mode_metrics"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            self.test_results["mode_metrics"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 5 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_mode_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç 6: –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–æ–≤")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            status = self.controller.get_status()
            
            assert "current_mode" in status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å current_mode –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert "previous_mode" in status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å previous_mode –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert "available_transitions" in status, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å available_transitions –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert "success_rate" in status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å success_rate –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert status["success_rate"] >= 0, "Success rate –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            available = self.controller.get_available_transitions()
            assert isinstance(available, list), "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            listening_status = self.listening_mode.get_status()
            assert "is_active" in listening_status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å is_active –≤ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"
            assert "is_listening" in listening_status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å is_listening –≤ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_status = self.processing_mode.get_status()
            assert "is_active" in processing_status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å is_active –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            assert "is_processing" in processing_status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å is_processing –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
            sleeping_status = self.sleeping_mode.get_status()
            assert "is_active" in sleeping_status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å is_active –≤ —Å—Ç–∞—Ç—É—Å–µ —Å–Ω–∞"
            assert "is_sleeping" in sleeping_status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å is_sleeping –≤ —Å—Ç–∞—Ç—É—Å–µ —Å–Ω–∞"
            
            self.test_results["mode_status"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            self.test_results["mode_status"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 6 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "="*60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–ü–†–û–©–ï–ù–ù–û–ì–û MODE_MANAGEMENT")
        logger.info("="*60)
        
        for test_name, result in self.test_results.items():
            logger.info(f"{test_name.replace('_', ' ').title()}: {result}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result.startswith("‚úÖ"))
        failed_tests = total_tests - passed_tests
        
        logger.info("-"*60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            logger.warning(f"‚ö†Ô∏è {failed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        logger.info("="*60)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è mode_management...")
        
        await self.setup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        await self.test_basic_mode_switching()
        await self.test_full_mode_cycle()
        await self.test_mode_specific_functionality()
        await self.test_mode_interrupts()
        await self.test_mode_metrics()
        await self.test_mode_status()
        
        self.print_results()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SimplifiedModeManagementTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
