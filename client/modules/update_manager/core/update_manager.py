"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Callable, List
from .types import UpdateStatus, UpdateInfo, UpdateConfig, UpdateResult, UpdateEvent
from ..macos.sparkle_handler import SparkleHandler

logger = logging.getLogger(__name__)

class UpdateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, config: UpdateConfig, event_bus, state_manager):
        self.config = config
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.sparkle_handler = SparkleHandler(config.appcast_url)
        
        self.current_status = UpdateStatus.IDLE
        self.available_update: Optional[UpdateInfo] = None
        self.check_task: Optional[asyncio.Task] = None
        self.update_task: Optional[asyncio.Task] = None
        
        # Callbacks –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        self.status_callbacks: List[Callable] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Sparkle
        if not self.sparkle_handler.is_framework_available():
            logger.warning("Sparkle Framework –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            self.config.enabled = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not self.config.enabled:
            logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω")
            return
            
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        await self._setup_event_listeners()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if self.config.check_on_startup:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
            await self.check_for_updates()
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await self._start_periodic_check()
        
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    async def _setup_event_listeners(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π"""
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.event_bus.subscribe("app.state_changed", self._on_app_state_changed)
        self.event_bus.subscribe("app.shutdown", self._on_app_shutdown)
        
    async def _start_periodic_check(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if self.check_task:
            self.check_task.cancel()
            
        self.check_task = asyncio.create_task(self._periodic_check_loop())
        
    async def _periodic_check_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        while True:
            try:
                # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
                await self._wait_until_check_time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
                if await self._can_check_updates():
                    logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
                    await self.check_for_updates()
                    
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                
            except asyncio.CancelledError:
                logger.info("–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
    async def _wait_until_check_time(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        now = datetime.now()
        check_time = datetime.strptime(self.config.check_time, "%H:%M").time()
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –∂–¥–µ–º –¥–æ –∑–∞–≤—Ç—Ä–∞
        if now.time() > check_time:
            next_check = datetime.combine(now.date() + timedelta(days=1), check_time)
        else:
            next_check = datetime.combine(now.date(), check_time)
            
        wait_seconds = (next_check - now).total_seconds()
        logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ {next_check.strftime('%H:%M')}")
        await asyncio.sleep(wait_seconds)
        
    async def _can_check_updates(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        current_mode = self.state_manager.get_current_mode()
        if current_mode in ["LISTENING", "PROCESSING", "SPEAKING"]:
            logger.info(f"–û—Ç–∫–ª–∞–¥—ã–≤–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: {current_mode}")
            return False
            
        # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if self.current_status != UpdateStatus.IDLE:
            logger.info(f"–û—Ç–∫–ª–∞–¥—ã–≤–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.current_status.value}")
            return False
            
        return True
        
    async def check_for_updates(self) -> Optional[UpdateInfo]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            await self._set_status(UpdateStatus.CHECKING)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Sparkle
            update_info = await self.sparkle_handler.check_for_updates()
            
            if update_info:
                self.available_update = update_info
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ {update_info.version}")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                await self.event_bus.publish("update.available", {
                    "version": update_info.version,
                    "build_number": update_info.build_number,
                    "release_notes": update_info.release_notes
                })
                
                # –ï—Å–ª–∏ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                if self.config.auto_install:
                    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    await self._start_update_process()
                    
                return update_info
            else:
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            await self._set_status(UpdateStatus.FAILED)
            return None
        finally:
            await self._set_status(UpdateStatus.IDLE)
            
    async def _start_update_process(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"""
        if not self.available_update:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
            
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ {self.available_update.version}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self._download_update_silent()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self._install_update_silent()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self._restart_application_silent()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await self._set_status(UpdateStatus.FAILED)
            
    async def _download_update_silent(self):
        """–¢–∏—Ö–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        await self._set_status(UpdateStatus.DOWNLOADING)
        logger.info("üì• –°–∫–∞—á–∏–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        result = await self.sparkle_handler.download_update(self.available_update)
        
        if result.success:
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {result.message}")
            
    async def _install_update_silent(self):
        """–¢–∏—Ö–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        await self._set_status(UpdateStatus.INSTALLING)
        logger.info("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        result = await self.sparkle_handler.install_update(self.available_update)
        
        if result.success:
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.message}")
            
    async def _restart_application_silent(self):
        """–¢–∏—Ö–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        await self._set_status(UpdateStatus.RESTARTING)
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        await self.event_bus.publish("update.restarting", {
            "version": self.available_update.version,
            "build_number": self.available_update.build_number
        })
        
        result = await self.sparkle_handler.restart_application()
        
        if result.success:
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π")
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result.message}")
            
    async def _set_status(self, status: UpdateStatus):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        old_status = self.current_status
        self.current_status = status
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {old_status.value} ‚Üí {status.value}")
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        await self.event_bus.publish("update.status_changed", {
            "old_status": old_status.value,
            "new_status": status.value,
            "update_info": self.available_update
        })
        
        # –í—ã–∑—ã–≤–∞–µ–º callbacks
        for callback in self.status_callbacks:
            try:
                callback(status, self.available_update)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
                
    async def _on_app_state_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        new_mode = event_data.get("new_mode")
        
        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if new_mode in ["LISTENING", "PROCESSING", "SPEAKING"]:
            if self.current_status in [UpdateStatus.DOWNLOADING, UpdateStatus.INSTALLING]:
                logger.info(f"–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: {new_mode}")
                await self._pause_update_process()
                
    async def _on_app_shutdown(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("–ó–∞–≤–µ—Ä—à–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        if self.check_task:
            self.check_task.cancel()
        if self.update_task:
            self.update_task.cancel()
            
    async def _pause_update_process(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        logger.info("–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        await self.sparkle_handler.pause_update()
        
    def add_status_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_callbacks.append(callback)
        
    def get_current_status(self) -> UpdateStatus:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        return self.current_status
        
    def get_available_update(self) -> Optional[UpdateInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        return self.available_update
        
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        return self.config.enabled and self.sparkle_handler.is_framework_available()
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        if self.check_task:
            self.check_task.cancel()
        if self.update_task:
            self.update_task.cancel()
            
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
