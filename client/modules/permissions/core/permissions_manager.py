"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
"""

import asyncio
import logging
import time
from typing import Dict, List, Optional, Callable
from .types import (
    PermissionType, PermissionStatus, PermissionInfo, PermissionResult,
    PermissionEvent, PermissionConfig, PermissionManagerState
)
from .config import PermissionConfigManager
from ..macos.permission_handler import MacOSPermissionHandler

logger = logging.getLogger(__name__)

class PermissionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    
    def __init__(self, config_path: str = "config/permissions_config.yaml"):
        self.config_manager = PermissionConfigManager(config_path)
        self.config: Optional[PermissionConfig] = None
        self.state = PermissionManagerState()
        self.macos_handler = MacOSPermissionHandler()
        self.is_initialized = False
        self.is_monitoring = False
        self._monitoring_task: Optional[asyncio.Task] = None
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PermissionManager")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = self.config_manager.get_config()
            self.state.config = self.config
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
            await self._initialize_permissions()
            
            self.is_initialized = True
            logger.info("‚úÖ PermissionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PermissionManager: {e}")
            return False
    
    async def _initialize_permissions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö"""
        descriptions = {
            PermissionType.MICROPHONE: "–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏",
            PermissionType.SCREEN_CAPTURE: "–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ö–≤–∞—Ç—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
            PermissionType.CAMERA: "–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞",
            PermissionType.NETWORK: "–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º",
            PermissionType.NOTIFICATIONS: "–î–æ—Å—Ç—É–ø –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"
        }
        
        instructions = {
            PermissionType.MICROPHONE: "–û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ > –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å > –ú–∏–∫—Ä–æ—Ñ–æ–Ω",
            PermissionType.SCREEN_CAPTURE: "–û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ > –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å > –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞",
            PermissionType.CAMERA: "–û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ > –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å > –ö–∞–º–µ—Ä–∞",
            PermissionType.NETWORK: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
            PermissionType.NOTIFICATIONS: "–û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ > –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        }
        
        for perm_type in PermissionType:
            required = perm_type in self.config.required_permissions
            info = PermissionInfo(
                permission_type=perm_type,
                status=PermissionStatus.NOT_DETERMINED,
                granted=False,
                message=descriptions.get(perm_type, ""),
                last_checked=time.time()
            )
            self.state.set_permission(perm_type, info)
    
    async def check_permission(self, permission_type: PermissionType) -> PermissionResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {permission_type.value}")
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if permission_type == PermissionType.MICROPHONE:
                result = await self.macos_handler.check_microphone_permission()
            elif permission_type == PermissionType.SCREEN_CAPTURE:
                result = await self.macos_handler.check_screen_capture_permission()
            elif permission_type == PermissionType.CAMERA:
                result = await self.macos_handler.check_camera_permission()
            elif permission_type == PermissionType.NETWORK:
                result = await self.macos_handler.check_network_permission()
            elif permission_type == PermissionType.NOTIFICATIONS:
                result = await self.macos_handler.check_notifications_permission()
            else:
                result = PermissionResult(
                    success=False,
                    permission=permission_type,
                    status=PermissionStatus.ERROR,
                    message=f"Unknown permission type: {permission_type}"
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if result.success:
                await self._update_permission_status(permission_type, result.status)
            
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {permission_type.value}: {result.status.value}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è {permission_type.value}: {e}")
            return PermissionResult(
                success=False,
                permission=permission_type,
                status=PermissionStatus.ERROR,
                message=f"Error checking permission: {e}",
                error=e
            )
    
    async def check_all_permissions(self) -> Dict[PermissionType, PermissionResult]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        
        results = {}
        tasks = []
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        for perm_type in PermissionType:
            task = asyncio.create_task(self.check_permission(perm_type))
            tasks.append((perm_type, task))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for perm_type, task in tasks:
            try:
                result = await task
                results[perm_type] = result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {perm_type.value}: {e}")
                results[perm_type] = PermissionResult(
                    success=False,
                    permission=perm_type,
                    status=PermissionStatus.ERROR,
                    message=f"Error: {e}",
                    error=e
                )
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return results
    
    async def request_permission(self, permission_type: PermissionType) -> PermissionResult:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        try:
            logger.info(f"üìù –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {permission_type.value}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_result = await self.check_permission(permission_type)
            
            if current_result.status == PermissionStatus.GRANTED:
                logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {permission_type.value} —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                return current_result
            
            # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if current_result.status == PermissionStatus.DENIED:
                await self._show_permission_instructions(permission_type)
                return current_result
            
            # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            if current_result.status == PermissionStatus.NOT_DETERMINED:
                await self._show_permission_dialog(permission_type)
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(2)
                return await self.check_permission(permission_type)
            
            return current_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è {permission_type.value}: {e}")
            return PermissionResult(
                success=False,
                permission=permission_type,
                status=PermissionStatus.ERROR,
                message=f"Error requesting permission: {e}",
                error=e
            )
    
    async def request_required_permissions(self) -> Dict[PermissionType, PermissionResult]:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        logger.info("üìù –ó–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        
        results = {}
        required_permissions = self.config.required_permissions
        
        for perm_type in required_permissions:
            result = await self.request_permission(perm_type)
            results[perm_type] = result
            
            # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if result.status != PermissionStatus.GRANTED:
                await self._show_permission_instructions(perm_type)
        
        return results
    
    async def _update_permission_status(self, permission_type: PermissionType, new_status: PermissionStatus):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        try:
            current_info = self.state.get_permission(permission_type)
            if not current_info:
                return
            
            old_status = current_info.status
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            current_info.status = new_status
            current_info.last_checked = time.time()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = PermissionEvent(
                event_type="status_changed",
                permission=permission_type,
                status=new_status,
                message=f"Status changed from {old_status.value} to {new_status.value}",
                timestamp=time.time()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks
            await self.state.notify_callbacks(event)
            
            logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å {permission_type.value}: {old_status.value} ‚Üí {new_status.value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {permission_type.value}: {e}")
    
    async def _show_permission_instructions(self, permission_type: PermissionType):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        try:
            info = self.state.get_permission(permission_type)
            if not info:
                return
            
            instructions = self.macos_handler.get_permission_instructions(permission_type)
            
            print(f"\n{'='*60}")
            print(f"üîê –†–ê–ó–†–ï–®–ï–ù–ò–ï: {permission_type.value.upper()}")
            print(f"{'='*60}")
            print(instructions)
            print(f"{'='*60}\n")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.config.auto_open_preferences:
                await self.macos_handler.open_privacy_preferences(permission_type)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π {permission_type.value}: {e}")
    
    async def _show_permission_dialog(self, permission_type: PermissionType):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        try:
            # –î–ª—è macOS –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            await self._show_permission_instructions(permission_type)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ {permission_type.value}: {e}")
    
    async def start_monitoring(self):
        """–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        if self.is_monitoring:
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not self.is_initialized:
            logger.error("PermissionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        self.is_monitoring = True
        self._monitoring_task = asyncio.create_task(self._monitoring_loop())
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        if not self.is_monitoring:
            return
        
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        self.is_monitoring = False
        
        if self._monitoring_task:
            self._monitoring_task.cancel()
            try:
                await self._monitoring_task
            except asyncio.CancelledError:
                pass
        
        self._monitoring_task = None
    
    async def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            while self.is_monitoring:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                await self.check_all_permissions()
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                await asyncio.sleep(self.config.check_interval)
                
        except asyncio.CancelledError:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
    
    def add_callback(self, callback: Callable[[PermissionEvent], None]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
        self.state.add_callback(callback)
    
    def get_permission_status(self, permission_type: PermissionType) -> Optional[PermissionStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        info = self.state.get_permission(permission_type)
        return info.status if info else None
    
    def get_all_permissions_status(self) -> Dict[PermissionType, PermissionStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        return {
            perm_type: info.status 
            for perm_type, info in self.state.get_all_permissions().items()
        }
    
    def are_required_permissions_granted(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        return self.state.get_required_permissions_status()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await self.stop_monitoring()
            self.is_initialized = False
            logger.info("‚úÖ PermissionManager –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ PermissionManager: {e}")










