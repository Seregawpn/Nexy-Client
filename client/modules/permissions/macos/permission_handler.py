"""
macOS Permission Handler
"""

import asyncio
import subprocess
from typing import Dict, Optional
from ..core.types import PermissionType, PermissionStatus, PermissionResult


class MacOSPermissionHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è macOS"""
    
    def __init__(self):
        pass
    
    async def check_microphone_permission(self) -> PermissionResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        try:
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TCC –¥–ª—è Microphone
            import subprocess
            result = subprocess.run([
                'tccutil', 'check', 'Microphone', 'com.nexy.assistant'
            ], capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                return PermissionResult(
                    success=True,
                    permission=PermissionType.MICROPHONE,
                    status=PermissionStatus.GRANTED,
                    message="Microphone permission granted"
                )
            else:
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                return PermissionResult(
                    success=False,
                    permission=PermissionType.MICROPHONE,
                    status=PermissionStatus.DENIED,
                    message="Microphone permission denied"
                )
        except Exception as e:
            return PermissionResult(
                success=False,
                permission=PermissionType.MICROPHONE,
                status=PermissionStatus.ERROR,
                message=f"Error checking microphone: {e}",
                error=e
            )
    
    async def check_screen_capture_permission(self) -> PermissionResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
        try:
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TCC –¥–ª—è Screen Capture
            import subprocess
            result = subprocess.run([
                'tccutil', 'check', 'ScreenCapture', 'com.nexy.assistant'
            ], capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                return PermissionResult(
                    success=True,
                    permission=PermissionType.SCREEN_CAPTURE,
                    status=PermissionStatus.GRANTED,
                    message="Screen capture permission granted"
                )
            else:
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                return PermissionResult(
                    success=False,
                    permission=PermissionType.SCREEN_CAPTURE,
                    status=PermissionStatus.DENIED,
                    message="Screen capture permission denied"
                )
        except Exception as e:
            return PermissionResult(
                success=False,
                permission=PermissionType.SCREEN_CAPTURE,
                status=PermissionStatus.ERROR,
                message=f"Error checking screen capture: {e}",
                error=e
            )
    
    async def check_camera_permission(self) -> PermissionResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã"""
        try:
            return PermissionResult(
                success=True,
                permission=PermissionType.CAMERA,
                status=PermissionStatus.GRANTED,
                message="Camera permission granted"
            )
        except Exception as e:
            return PermissionResult(
                success=False,
                permission=PermissionType.CAMERA,
                status=PermissionStatus.ERROR,
                message=f"Error checking camera: {e}",
                error=e
            )
    
    async def check_network_permission(self) -> PermissionResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–µ—Ç–∏"""
        try:
            return PermissionResult(
                success=True,
                permission=PermissionType.NETWORK,
                status=PermissionStatus.GRANTED,
                message="Network permission granted"
            )
        except Exception as e:
            return PermissionResult(
                success=False,
                permission=PermissionType.NETWORK,
                status=PermissionStatus.ERROR,
                message=f"Error checking network: {e}",
                error=e
            )
    
    async def check_notifications_permission(self) -> PermissionResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            return PermissionResult(
                success=True,
                permission=PermissionType.NOTIFICATIONS,
                status=PermissionStatus.GRANTED,
                message="Notifications permission granted"
            )
        except Exception as e:
            return PermissionResult(
                success=False,
                permission=PermissionType.NOTIFICATIONS,
                status=PermissionStatus.ERROR,
                message=f"Error checking notifications: {e}",
                error=e
            )
    
    def get_permission_instructions(self, permission_type: PermissionType) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        instructions = {
            PermissionType.MICROPHONE: """
üé§ –†–ê–ó–†–ï–®–ï–ù–ò–ï –ú–ò–ö–†–û–§–û–ù–ê

1. –û—Ç–∫—Ä–æ–π—Ç–µ '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
3. –í—ã–±–µ—Ä–∏—Ç–µ '–ú–∏–∫—Ä–æ—Ñ–æ–Ω'
4. –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è Nexy AI Assistant

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
open "x-apple.systempreferences:com.apple.preference.security?Privacy_Microphone"
            """,
            PermissionType.SCREEN_CAPTURE: """
üì∫ –†–ê–ó–†–ï–®–ï–ù–ò–ï –ó–ê–•–í–ê–¢–ê –≠–ö–†–ê–ù–ê

1. –û—Ç–∫—Ä–æ–π—Ç–µ '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
3. –í—ã–±–µ—Ä–∏—Ç–µ '–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞'
4. –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è Nexy AI Assistant

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
open "x-apple.systempreferences:com.apple.preference.security?Privacy_ScreenCapture"
            """,
            PermissionType.CAMERA: """
üìπ –†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–ê–ú–ï–†–´

1. –û—Ç–∫—Ä–æ–π—Ç–µ '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
3. –í—ã–±–µ—Ä–∏—Ç–µ '–ö–∞–º–µ—Ä–∞'
4. –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è Nexy AI Assistant

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
open "x-apple.systempreferences:com.apple.preference.security?Privacy_Camera"
            """,
            PermissionType.NETWORK: """
üåê –†–ê–ó–†–ï–®–ï–ù–ò–ï –°–ï–¢–ò

–û–±—ã—á–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
            """,
            PermissionType.NOTIFICATIONS: """
üîî –†–ê–ó–†–ï–®–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô

1. –û—Ç–∫—Ä–æ–π—Ç–µ '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
3. –ù–∞–π–¥–∏—Ç–µ Nexy AI Assistant
4. –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            """
        }
        
        return instructions.get(permission_type, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def open_privacy_preferences(self, permission_type: PermissionType):
        """–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            urls = {
                PermissionType.MICROPHONE: "x-apple.systempreferences:com.apple.preference.security?Privacy_Microphone",
                PermissionType.SCREEN_CAPTURE: "x-apple.systempreferences:com.apple.preference.security?Privacy_ScreenCapture",
                PermissionType.CAMERA: "x-apple.systempreferences:com.apple.preference.security?Privacy_Camera",
                PermissionType.NOTIFICATIONS: "x-apple.systempreferences:com.apple.preference.notifications"
            }
            
            url = urls.get(permission_type)
            if url:
                subprocess.run(["open", url], check=True)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
