"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø —Å speech_recognizer
"""

import logging
from typing import Optional, Dict, Any
from ..core.types import InterruptEvent, InterruptType

logger = logging.getLogger(__name__)

class RecordingInterruptHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç speech_recognizer"""
    
    def __init__(self, speech_recognizer=None):
        self.speech_recognizer = speech_recognizer
        
    async def handle_recording_stop(self, event: InterruptEvent) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ speech_recognizer"""
        try:
            logger.info("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏")
            
            if self.speech_recognizer:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ stop_recording()
                text = await self.speech_recognizer.stop_recording()
                if text:
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text[:50]}...")
                    event.data = {"recognized_text": text}
                else:
                    logger.info("‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False
            
    async def handle_recording_start(self, event: InterruptEvent) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ speech_recognizer"""
        try:
            logger.info("üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏")
            
            if self.speech_recognizer:
                success = await self.speech_recognizer.start_recording()
                if success:
                    logger.info("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ —á–µ—Ä–µ–∑ speech_recognizer")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return False
