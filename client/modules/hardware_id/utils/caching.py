"""
–£—Ç–∏–ª–∏—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è hardware_id
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ Hardware UUID
"""

import json
import os
import logging
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from ..core.types import HardwareIdResult, HardwareIdStatus, CacheInfo, HardwareIdCacheError

logger = logging.getLogger(__name__)


class HardwareIdCache:
    """–ö—ç—à –¥–ª—è Hardware ID"""
    
    def __init__(self, cache_file_path: str, ttl_seconds: int = 86400 * 30):
        self.cache_file_path = os.path.expanduser(cache_file_path)
        self.ttl_seconds = ttl_seconds
        self._cache_dir = Path(self.cache_file_path).parent
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞
        self._cache_dir.mkdir(parents=True, exist_ok=True)
    
    def get_cached_uuid(self) -> Optional[HardwareIdResult]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç Hardware UUID –∏–∑ –∫—ç—à–∞
        
        Returns:
            HardwareIdResult: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None
        """
        try:
            if not os.path.exists(self.cache_file_path):
                logger.debug("üîç –ö—ç—à –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à
            with open(self.cache_file_path, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
            if not self._is_cache_valid(cache_data):
                logger.warning("‚ö†Ô∏è –ö—ç—à –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            uuid = cache_data.get('uuid', '')
            if not uuid:
                logger.warning("‚ö†Ô∏è UUID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
                return None
            
            logger.info(f"‚úÖ Hardware UUID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞: {uuid[:16]}...")
            
            return HardwareIdResult(
                uuid=uuid,
                status=HardwareIdStatus.CACHED,
                source="cache",
                cached=True,
                metadata=cache_data.get('metadata', {})
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return None
    
    def save_uuid_to_cache(self, uuid: str, metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Hardware UUID –≤ –∫—ç—à
        
        Args:
            uuid: Hardware UUID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            cache_data = {
                'uuid': uuid,
                'cached_at': datetime.now().isoformat(),
                'ttl_seconds': self.ttl_seconds,
                'version': '1.0',
                'metadata': metadata or {}
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            with open(self.cache_file_path, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ Hardware UUID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {uuid[:16]}...")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
            return False
    
    def _is_cache_valid(self, cache_data: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
        
        Args:
            cache_data: –î–∞–Ω–Ω—ã–µ –∫—ç—à–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫—ç—à –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['uuid', 'cached_at', 'ttl_seconds', 'version']
            if not all(field in cache_data for field in required_fields):
                logger.warning("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∫—ç—à–µ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫—ç—à–∞
            if cache_data.get('version') != '1.0':
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫—ç—à–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            cached_at_str = cache_data.get('cached_at', '')
            if not cached_at_str:
                logger.warning("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞")
                return False
            
            try:
                cached_at = datetime.fromisoformat(cached_at_str)
                ttl_seconds = cache_data.get('ttl_seconds', 0)
                
                if datetime.now() - cached_at > timedelta(seconds=ttl_seconds):
                    logger.warning("‚ö†Ô∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª")
                    return False
                
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫—ç—à–µ: {e}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID
            uuid = cache_data.get('uuid', '')
            if not uuid or len(uuid) < 10:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π UUID –≤ –∫—ç—à–µ")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
            return False
    
    def clear_cache(self) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –∫—ç—à
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            if os.path.exists(self.cache_file_path):
                os.remove(self.cache_file_path)
                logger.info("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
            else:
                logger.info("‚ÑπÔ∏è –ö—ç—à —É–∂–µ –ø—É—Å—Ç")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            return False
    
    def get_cache_info(self) -> CacheInfo:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
        
        Returns:
            CacheInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        """
        try:
            if not os.path.exists(self.cache_file_path):
                return CacheInfo(
                    exists=False,
                    size_bytes=0,
                    created_at="",
                    modified_at="",
                    ttl_remaining=0,
                    is_valid=False
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            stat = os.stat(self.cache_file_path)
            size_bytes = stat.st_size
            modified_at = datetime.fromtimestamp(stat.st_mtime).isoformat()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞
            with open(self.cache_file_path, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            is_valid = self._is_cache_valid(cache_data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è TTL
            ttl_remaining = 0
            if is_valid:
                try:
                    cached_at = datetime.fromisoformat(cache_data.get('cached_at', ''))
                    ttl_seconds = cache_data.get('ttl_seconds', 0)
                    remaining = ttl_seconds - (datetime.now() - cached_at).total_seconds()
                    ttl_remaining = max(0, int(remaining))
                except Exception:
                    ttl_remaining = 0
            
            return CacheInfo(
                exists=True,
                size_bytes=size_bytes,
                created_at=cache_data.get('cached_at', ''),
                modified_at=modified_at,
                ttl_remaining=ttl_remaining,
                is_valid=is_valid
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ: {e}")
            return CacheInfo(
                exists=False,
                size_bytes=0,
                created_at="",
                modified_at="",
                ttl_remaining=0,
                is_valid=False
            )
    
    def is_cache_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—ç—à–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫—ç—à –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
            return self._cache_dir.exists() and os.access(self._cache_dir, os.W_OK)
        except Exception:
            return False
