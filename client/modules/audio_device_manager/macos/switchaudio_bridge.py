"""
–ú–æ—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å switchaudio - —É—Ç–∏–ª–∏—Ç–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ macOS
"""

import asyncio
import logging
import subprocess
import json
import re
from datetime import datetime
from typing import Dict, List, Optional, Callable
from ..core.types import AudioDevice, DeviceType, DeviceStatus, DevicePriority

logger = logging.getLogger(__name__)

class SwitchAudioBridge:
    """–ú–æ—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å switchaudio –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    def __init__(self):
        self._is_monitoring = False
        self._device_listener: Optional[Callable] = None
        self._current_devices: Dict[str, AudioDevice] = {}
        self._monitoring_task: Optional[asyncio.Task] = None
        self._last_device_count = 0
        
    async def start_monitoring(self, device_change_callback: Callable):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self._is_monitoring:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self._device_listener = device_change_callback
        self._is_monitoring = True
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            initial_devices = await self.get_available_devices()
            self._current_devices = {device.id: device for device in initial_devices}
            self._last_device_count = len(initial_devices)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ polling
            self._monitoring_task = asyncio.create_task(self._monitor_devices())
            
            logger.info(f"‚úÖ SwitchAudio –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(initial_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self._is_monitoring = False
            raise
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self._is_monitoring:
            return
            
        try:
            self._is_monitoring = False
            self._device_listener = None
            self._current_devices.clear()
            
            if self._monitoring_task and not self._monitoring_task.done():
                self._monitoring_task.cancel()
                try:
                    await self._monitoring_task
                except asyncio.CancelledError:
                    pass
            
            logger.info("‚úÖ SwitchAudio –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def _monitor_devices(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ polling"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ switchaudio...")
            logger.info("üí° –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ/–æ—Ç–∫–ª—é—á–∞–π—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            while self._is_monitoring:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    current_devices = await self.get_available_devices()
                    current_count = len(current_devices)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    if current_count != self._last_device_count:
                        logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {self._last_device_count} -> {current_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        current_devices_dict = {device.id: device for device in current_devices}
                        old_devices = self._current_devices.copy()
                        self._current_devices = current_devices_dict
                        self._last_device_count = current_count
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        from ..core.types import DeviceChange
                        changes = DeviceChange(
                            added=[device for device in current_devices if device.id not in old_devices],
                            removed=[device for device_id, device in old_devices.items() if device_id not in current_devices_dict],
                            current_devices=current_devices_dict,
                            timestamp=datetime.now(),
                            change_type="device_change"
                        )
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º callback
                        if self._device_listener:
                            await self._device_listener(changes)
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
                    await asyncio.sleep(3)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ monitor_devices: {e}")
    
    async def get_available_devices(self) -> List[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ switchaudio"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º switchaudio –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            devices = await self._get_devices_from_switchaudio()
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            devices.sort(key=lambda x: x.priority.value)
            
            return devices
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return []
    
    async def _get_devices_from_switchaudio(self) -> List[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ switchaudio"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º SwitchAudioSource –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            result = subprocess.run([
                'SwitchAudioSource', '-a'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode != 0:
                logger.warning("‚ö†Ô∏è switchaudio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return []
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ switchaudio
            devices = []
            lines = result.stdout.strip().split('\n')
            
            for line in lines:
                if line.strip():
                    device = await self._parse_switchaudio_line(line)
                    if device:
                        devices.append(device)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            if not devices:
                logger.info("‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ switchaudio")
                return []
            
            return devices
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ switchaudio: {e}")
            return []
    
    async def _parse_switchaudio_line(self, line: str) -> Optional[AudioDevice]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ switchaudio"""
        try:
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: "MacBook Air Speakers (Built-in Output)"
            # –ò–ª–∏: "AirPods Pro (Bluetooth)"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            name_match = re.match(r'^(.+?)\s*\((.+?)\)', line)
            if not name_match:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫–æ–±–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–º—è
                name = line.strip()
                device_type_str = "Unknown"
            else:
                name = name_match.group(1).strip()
                device_type_str = name_match.group(2).strip()
            
            # –°–æ–∑–¥–∞–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_id = str(hash(name))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_type = await self._detect_device_type(name, device_type_str)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
            channels = await self._get_device_channels(name)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            is_bluetooth = 'bluetooth' in device_type_str.lower() or 'bt' in device_type_str.lower()
            is_usb = 'usb' in device_type_str.lower()
            is_builtin = 'built-in' in device_type_str.lower() or 'internal' in device_type_str.lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –∫–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if is_bluetooth and device_type == DeviceType.OUTPUT:
                priority = DevicePriority.HIGHEST  # Bluetooth –Ω–∞—É—à–Ω–∏–∫–∏ - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            elif device_type == DeviceType.OUTPUT and channels == 2 and not is_builtin:
                priority = DevicePriority.HIGH  # –î–≤—É—Ö–∫–∞–Ω–∞–ª—å–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞—É—à–Ω–∏–∫–∏)
            elif device_type == DeviceType.OUTPUT and channels == 1 and is_builtin:
                priority = DevicePriority.LOWEST  # –û–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            elif is_builtin:
                priority = DevicePriority.LOWEST  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            else:
                priority = DevicePriority.NORMAL  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device = AudioDevice(
                id=device_id,
                name=name,
                type=device_type,
                status=DeviceStatus.AVAILABLE,
                channels=channels,
                priority=priority
            )
            
            return device
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ switchaudio: {e}")
            return None
    
    async def _detect_device_type(self, name: str, device_type_str: str) -> DeviceType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ç–∏–ø—É"""
        try:
            name_lower = name.lower()
            type_lower = device_type_str.lower()
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
            headphone_keywords = [
                'headphone', 'headset', 'earphone', 'earbud', 'earpod',
                'airpod', 'beats', 'sony', 'bose', 'sennheiser', 'audio-technica',
                'bluetooth', 'wireless', '–Ω–∞—É—à–Ω–∏–∫', '–≥–∞—Ä–Ω–∏—Ç—É—Ä'
            ]
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–æ–≤
            speaker_keywords = [
                'speaker', 'monitor', 'studio', 'desktop', 'external',
                'built-in', 'internal', 'macbook', 'imac', 'mac pro',
                '–¥–∏–Ω–∞–º–∏–∫', '–∫–æ–ª–æ–Ω–∫', '–º–æ–Ω–∏—Ç–æ—Ä', 'output'
            ]
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
            microphone_keywords = [
                'microphone', 'mic', 'input', '–≤—Ö–æ–¥', '–º–∏–∫—Ä–æ—Ñ–æ–Ω'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
            if (any(keyword in name_lower for keyword in microphone_keywords) or
                any(keyword in type_lower for keyword in microphone_keywords)):
                return DeviceType.INPUT  # –ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã - —ç—Ç–æ INPUT
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
            if (any(keyword in name_lower for keyword in headphone_keywords) or
                any(keyword in type_lower for keyword in headphone_keywords)):
                return DeviceType.OUTPUT  # –ù–∞—É—à–Ω–∏–∫–∏ - —ç—Ç–æ OUTPUT
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–∏–Ω–∞–º–∏–∫–∏
            if (any(keyword in name_lower for keyword in speaker_keywords) or
                any(keyword in type_lower for keyword in speaker_keywords)):
                return DeviceType.OUTPUT  # –î–∏–Ω–∞–º–∏–∫–∏ - —ç—Ç–æ OUTPUT
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º OUTPUT
            return DeviceType.OUTPUT
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return DeviceType.OUTPUT  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é OUTPUT
    
    async def _get_device_channels(self, name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            name_lower = name.lower()
            
            # –ù–∞—É—à–Ω–∏–∫–∏ –æ–±—ã—á–Ω–æ —Å—Ç–µ—Ä–µ–æ (–¥–≤—É—Ö–∫–∞–Ω–∞–ª—å–Ω—ã–µ)
            if any(keyword in name_lower for keyword in ['headphone', 'headset', 'earphone', 'earbud', 'airpod']):
                return 2
            
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏ macOS –æ–±—ã—á–Ω–æ –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã–µ
            if any(keyword in name_lower for keyword in ['built-in', 'internal', 'macbook', 'imac']):
                return 1
            
            # –ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã –º–æ–Ω–æ (–æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã–µ)
            if any(keyword in name_lower for keyword in ['microphone', 'mic']):
                return 1
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–µ—Ä–µ–æ (–¥–≤—É—Ö–∫–∞–Ω–∞–ª—å–Ω—ã–µ)
            return 2
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return 2
    
    async def _get_fallback_devices(self) -> List[AudioDevice]:
        """Fallback —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ switchaudio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        try:
            devices = [
                AudioDevice(
                    id="builtin_speakers",
                    name="MacBook Air Speakers",
                    type=DeviceType.OUTPUT,
                    status=DeviceStatus.AVAILABLE,
                    channels=2,
                    priority=DevicePriority.LOWEST
                ),
                AudioDevice(
                    id="builtin_microphone",
                    name="MacBook Air Microphone",
                    type=DeviceType.INPUT,
                    status=DeviceStatus.AVAILABLE,
                    channels=1,
                    priority=DevicePriority.LOWEST
                )
            ]
            
            return devices
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return []
    
    async def get_default_output_device(self) -> Optional[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            devices = await self.get_available_devices()
            if devices:
                return devices[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ (—Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return None
    
    async def set_default_output_device(self, device_id: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ switchaudio"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ ID
            devices = await self.get_available_devices()
            target_device = next((d for d in devices if d.id == device_id), None)
            
            if not target_device:
                logger.error(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if target_device.type == DeviceType.INPUT:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω: {target_device.name}")
                return False
            
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞: {target_device.name} (—Ç–∏–ø: {target_device.type.value})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SwitchAudioSource –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            result = subprocess.run([
                'SwitchAudioSource', '-t', 'output', '-s', target_device.name
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {target_device.name}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ {target_device.name}: {result.stderr}")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è...")
                return await self._try_alternative_switch(target_device)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return False
    
    async def _try_alternative_switch(self, target_device: AudioDevice) -> bool:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
            name_parts = target_device.name.split()
            for part in name_parts:
                if len(part) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
                    logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏: {part}")
                    result = subprocess.run([
                        'SwitchAudioSource', '-t', 'output', '-s', part
                    ], capture_output=True, text=True, timeout=10)
                    
                    if result.returncode == 0:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {part}")
                        return True
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏...")
            result = subprocess.run([
                'SwitchAudioSource', '-t', 'output', '-s', 'MacBook Air Speakers'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –¥–∞–∂–µ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False









































