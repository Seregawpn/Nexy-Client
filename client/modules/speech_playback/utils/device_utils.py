"""
Device Utils - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
"""

import logging
import sounddevice as sd
from typing import Optional, List, Dict, Any
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class AudioDevice:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    name: str
    portaudio_index: int
    channels: int
    sample_rate: float
    is_default: bool = False
    is_input: bool = False
    is_output: bool = True

def get_available_devices() -> List[AudioDevice]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    
    Returns:
        –°–ø–∏—Å–æ–∫ AudioDevice –æ–±—ä–µ–∫—Ç–æ–≤
    """
    try:
        devices = []
        device_list = sd.query_devices()
        
        for i, device_info in enumerate(device_list):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥
            if device_info['max_output_channels'] > 0:
                device = AudioDevice(
                    name=device_info['name'],
                    portaudio_index=i,
                    channels=device_info['max_output_channels'],
                    sample_rate=device_info['default_samplerate'],
                    is_default=(i == sd.default.device[1]),  # default output device
                    is_input=device_info['max_input_channels'] > 0,
                    is_output=device_info['max_output_channels'] > 0
                )
                devices.append(device)
        
        logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {len(devices)} –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        return devices
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return []

def get_best_audio_device() -> Optional[AudioDevice]:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    
    Returns:
        –õ—É—á—à–µ–µ AudioDevice –∏–ª–∏ None
    """
    try:
        devices = get_available_devices()
        
        if not devices:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–±–æ—Ä–∞:
        # 1. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # 2. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞–Ω–∞–ª–æ–≤
        # 3. –ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
        # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_device = None
        for device in devices:
            if device.is_default:
                default_device = device
                break
        
        if default_device:
            logger.info(f"üéµ –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_device.name}")
            return default_device
        
        # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞–Ω–∞–ª–æ–≤
        best_device = max(devices, key=lambda d: d.channels)
        logger.info(f"üéµ –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ª—É—á—à–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {best_device.name} ({best_device.channels} –∫–∞–Ω–∞–ª–æ–≤)")
        
        return best_device
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return None

def test_audio_device(device_id: int) -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    
    Args:
        device_id: ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, False –∏–Ω–∞—á–µ
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        import numpy as np
        sample_rate = 44100
        duration = 0.1  # 100ms
        frequency = 440  # A4
        
        t = np.linspace(0, duration, int(sample_rate * duration), False)
        test_audio = np.sin(2 * np.pi * frequency * t)
        test_audio = (test_audio * 0.1).astype(np.float32)  # –¢–∏—Ö–∏–π —Ç–µ—Å—Ç
        
        # –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
        sd.play(test_audio, samplerate=sample_rate, device=device_id)
        sd.wait()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        logger.info(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}: {e}")
        return False

def get_device_info(device_id: int) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    
    Args:
        device_id: ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ None
    """
    try:
        device_info = sd.query_devices(device_id)
        
        info = {
            'name': device_info['name'],
            'index': device_id,
            'channels_in': device_info['max_input_channels'],
            'channels_out': device_info['max_output_channels'],
            'sample_rate': device_info['default_samplerate'],
            'is_default': device_id == sd.default.device[1],
            'host_api': device_info['hostapi']
        }
        
        return info
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device_id}: {e}")
        return None
