"""
Performance Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ macOS
"""

import logging
import threading
import time
import psutil
from typing import Dict, Any, Optional, List
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class PerformanceStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    cpu_percent: float
    memory_percent: float
    memory_used_mb: float
    audio_latency_ms: float
    buffer_underruns: int
    buffer_overruns: int
    timestamp: float

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è macOS"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self._running = False
        self._monitor_thread: Optional[threading.Thread] = None
        self._stats_history: List[PerformanceStats] = []
        self._max_history = 100  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self._buffer_underruns = 0
        self._buffer_overruns = 0
        self._audio_latency_ms = 0.0
        
        logger.info("üìä PerformanceMonitor —Å–æ–∑–¥–∞–Ω")
    
    def start(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            if self._running:
                logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            self._running = True
            self._monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
            self._monitor_thread.start()
            
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            self._running = False
            
            if self._monitor_thread and self._monitor_thread.is_alive():
                self._monitor_thread.join(timeout=1.0)
            
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            while self._running:
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self._collect_stats()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self._stats_history.append(stats)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self._stats_history) > self._max_history:
                    self._stats_history.pop(0)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                if len(self._stats_history) % 10 == 0:
                    logger.debug(f"üìä CPU: {stats.cpu_percent:.1f}%, Memory: {stats.memory_percent:.1f}%")
                
                # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
                time.sleep(1.0)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _collect_stats(self) -> PerformanceStats:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Returns:
            PerformanceStats –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory = psutil.virtual_memory()
            
            stats = PerformanceStats(
                cpu_percent=cpu_percent,
                memory_percent=memory.percent,
                memory_used_mb=memory.used / (1024 * 1024),  # MB
                audio_latency_ms=self._audio_latency_ms,
                buffer_underruns=self._buffer_underruns,
                buffer_overruns=self._buffer_overruns,
                timestamp=time.time()
            )
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return PerformanceStats(
                cpu_percent=0.0,
                memory_percent=0.0,
                memory_used_mb=0.0,
                audio_latency_ms=0.0,
                buffer_underruns=0,
                buffer_overruns=0,
                timestamp=time.time()
            )
    
    def get_current_stats(self) -> Optional[PerformanceStats]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è PerformanceStats –∏–ª–∏ None
        """
        try:
            if not self._stats_history:
                return None
            
            return self._stats_history[-1]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def get_stats_history(self, count: int = 10) -> List[PerformanceStats]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ PerformanceStats
        """
        try:
            if not self._stats_history:
                return []
            
            return self._stats_history[-count:]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return []
    
    def get_average_stats(self, duration_seconds: int = 60) -> Optional[PerformanceStats]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            duration_seconds: –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è PerformanceStats –∏–ª–∏ None
        """
        try:
            if not self._stats_history:
                return None
            
            current_time = time.time()
            cutoff_time = current_time - duration_seconds
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            recent_stats = [
                stats for stats in self._stats_history
                if stats.timestamp >= cutoff_time
            ]
            
            if not recent_stats:
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            avg_cpu = sum(s.cpu_percent for s in recent_stats) / len(recent_stats)
            avg_memory = sum(s.memory_percent for s in recent_stats) / len(recent_stats)
            avg_memory_mb = sum(s.memory_used_mb for s in recent_stats) / len(recent_stats)
            avg_latency = sum(s.audio_latency_ms for s in recent_stats) / len(recent_stats)
            
            return PerformanceStats(
                cpu_percent=avg_cpu,
                memory_percent=avg_memory,
                memory_used_mb=avg_memory_mb,
                audio_latency_ms=avg_latency,
                buffer_underruns=self._buffer_underruns,
                buffer_overruns=self._buffer_overruns,
                timestamp=current_time
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def record_buffer_underrun(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç underrun –±—É—Ñ–µ—Ä–∞"""
        self._buffer_underruns += 1
        logger.warning("‚ö†Ô∏è Buffer underrun –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
    
    def record_buffer_overrun(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç overrun –±—É—Ñ–µ—Ä–∞"""
        self._buffer_overruns += 1
        logger.warning("‚ö†Ô∏è Buffer overrun –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
    
    def set_audio_latency(self, latency_ms: float):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∞—É–¥–∏–æ
        
        Args:
            latency_ms: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self._audio_latency_ms = latency_ms
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–≤–æ–¥–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            current_stats = self.get_current_stats()
            avg_stats = self.get_average_stats(60)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            
            summary = {
                'monitor_running': self._running,
                'history_size': len(self._stats_history),
                'current_stats': current_stats.__dict__ if current_stats else None,
                'average_stats_1min': avg_stats.__dict__ if avg_stats else None,
                'buffer_underruns': self._buffer_underruns,
                'buffer_overruns': self._buffer_overruns
            }
            
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'error': str(e)}
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.stop()
            self._stats_history.clear()
            logger.info("‚úÖ PerformanceMonitor –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ PerformanceMonitor: {e}")
