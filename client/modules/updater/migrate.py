"""
–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ /Applications –≤ ~/Applications
"""

import os
import subprocess
import shutil
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

def get_current_app_path() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
    try:
        from Cocoa import NSBundle
        bundle_path = NSBundle.mainBundle().bundlePath()
        if bundle_path and bundle_path.endswith(".app"):
            return bundle_path
    except ImportError:
        pass
    
    # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
    return "/Applications/Nexy.app"

def get_user_app_path() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ Applications"""
    user_home = Path.home()
    user_apps = user_home / "Applications"
    user_apps.mkdir(exist_ok=True)
    return str(user_apps / "Nexy.app")

def migrate_to_user_directory() -> bool:
    """
    –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    """
    current_path = get_current_app_path()
    user_path = get_user_app_path()
    
    # –ï—Å–ª–∏ —É–∂–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if os.path.realpath(current_path) == os.path.realpath(user_path):
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ")
        return False
    
    logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ {current_path} –≤ {user_path}")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists(user_path):
            shutil.rmtree(user_path, ignore_errors=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        subprocess.check_call(["/usr/bin/ditto", current_path, user_path])
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ~/Applications")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
        subprocess.Popen(["/usr/bin/open", "-a", user_path])
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ ~/Applications")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        logger.info("üîö Migration: exiting current process after relaunch")
        os._exit(0)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    return True
