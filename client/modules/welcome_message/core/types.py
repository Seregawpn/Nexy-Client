"""
Types and data structures for Welcome Message Module
"""

from dataclasses import dataclass
from enum import Enum
from typing import Optional, Dict, Any
from pathlib import Path


class WelcomeState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–µ—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    IDLE = "idle"
    LOADING = "loading"
    PLAYING = "playing"
    COMPLETED = "completed"
    ERROR = "error"


@dataclass
class WelcomeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    enabled: bool = True
    text: str = "Hi! Nexy is here. How can I help you?"
    audio_file: str = "assets/audio/welcome_en.mp3"
    fallback_to_tts: bool = True
    delay_sec: float = 1.0
    volume: float = 0.8
    voice: str = "en-US-JennyNeural"
    sample_rate: int = 48000
    channels: int = 1
    bit_depth: int = 16
    
    def get_audio_path(self, base_path: Optional[Path] = None) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É"""
        if base_path is None:
            base_path = self._find_base_path()
        return base_path / self.audio_file
    
    def _find_base_path(self) -> Path:
        """–ù–∞–π—Ç–∏ –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º —Å —É—á–µ—Ç–æ–º PyInstaller"""
        import logging
        import sys
        
        logger = logging.getLogger(__name__)
        
        # 1. PyInstaller onefile/onedir: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º
        if hasattr(sys, "_MEIPASS"):
            candidate = Path(sys._MEIPASS)
            audio_path = candidate / self.audio_file
            logger.info(f"üîç [WELCOME_CONFIG] –ü—Ä–æ–≤–µ—Ä—è—é PyInstaller _MEIPASS: {audio_path}")
            if audio_path.exists():
                logger.info(f"‚úÖ [WELCOME_CONFIG] –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ _MEIPASS: {audio_path}")
                return candidate
            
            # –ß–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π: —Ä–µ—Å—É—Ä—Å—ã –ª–µ–∂–∞—Ç –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–µ Resources
            resources_candidate = candidate / "Resources"
            audio_path = resources_candidate / self.audio_file
            logger.info(f"üîç [WELCOME_CONFIG] –ü—Ä–æ–≤–µ—Ä—è—é _MEIPASS/Resources: {audio_path}")
            if audio_path.exists():
                logger.info(f"‚úÖ [WELCOME_CONFIG] –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ _MEIPASS/Resources: {audio_path}")
                return resources_candidate
        
        # 2. PyInstaller bundle (.app): –∏—â–µ–º –∫–∞—Ç–∞–ª–æ–≥ MacOS -> Contents -> Resources
        resolved_path = Path(__file__).resolve()
        macos_dir = None
        for parent in resolved_path.parents:
            if parent.name == "MacOS":
                macos_dir = parent
                break
        
        if macos_dir is not None:
            contents_dir = macos_dir.parent  # MacOS -> Contents
            resources_path = contents_dir / "Resources"  # Contents -> Resources
            audio_path = resources_path / self.audio_file
            logger.info(f"üîç [WELCOME_CONFIG] –ü—Ä–æ–≤–µ—Ä—è—é bundle Resources: {audio_path}")
            if audio_path.exists():
                logger.info(f"‚úÖ [WELCOME_CONFIG] –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ bundle: {audio_path}")
                return resources_path
        
        # 3. Dev-—Ä–µ–∂–∏–º (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
        dev_path = Path(__file__).parent.parent.parent.parent
        audio_path = dev_path / self.audio_file
        logger.info(f"üîç [WELCOME_CONFIG] –ü—Ä–æ–≤–µ—Ä—è—é dev-—Ä–µ–∂–∏–º: {audio_path}")
        if audio_path.exists():
            logger.info(f"‚úÖ [WELCOME_CONFIG] –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ dev-—Ä–µ–∂–∏–º–µ: {audio_path}")
            return dev_path
        
        # 4. Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º dev –ø—É—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        logger.warning(f"‚ö†Ô∏è [WELCOME_CONFIG] –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {audio_path}")
        return dev_path


@dataclass
class WelcomeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    success: bool
    method: str  # "prerecorded" | "tts" | "fallback"
    duration_sec: float
    error: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è EventBus"""
        return {
            "success": self.success,
            "method": self.method,
            "duration_sec": self.duration_sec,
            "error": self.error,
            "metadata": self.metadata or {}
        }
