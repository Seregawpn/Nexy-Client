"""
Welcome Player

–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏ fallback –Ω–∞ TTS.
"""

import asyncio
import logging
from pathlib import Path
from typing import Optional, Callable, Any
import numpy as np

from .types import WelcomeConfig, WelcomeState, WelcomeResult
from .audio_generator import WelcomeAudioGenerator

logger = logging.getLogger(__name__)


class WelcomePlayer:
    """–ü–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, config: WelcomeConfig):
        self.config = config
        self.state = WelcomeState.IDLE
        self.audio_generator = WelcomeAudioGenerator(config)
        
        # –ö–æ–ª–ª–±–µ–∫–∏
        self._on_started: Optional[Callable[[], None]] = None
        self._on_completed: Optional[Callable[[WelcomeResult], None]] = None
        self._on_error: Optional[Callable[[str], None]] = None
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        self._prerecorded_audio: Optional[np.ndarray] = None
        self._prerecorded_loaded = False
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ (prerecorded –∏–ª–∏ tts)
        self._last_audio: Optional[np.ndarray] = None
    
    def set_callbacks(
        self,
        on_started: Optional[Callable[[], None]] = None,
        on_completed: Optional[Callable[[WelcomeResult], None]] = None,
        on_error: Optional[Callable[[str], None]] = None
    ):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–±–µ–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
        self._on_started = on_started
        self._on_completed = on_completed
        self._on_error = on_error
    
    async def play_welcome(self) -> WelcomeResult:
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Returns:
            WelcomeResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        """
        try:
            logger.info("üéµ [WELCOME_PLAYER] –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
            self.state = WelcomeState.LOADING
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
            if not self.config.enabled:
                error_msg = "–ú–æ–¥—É–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                logger.info(f"üîá [WELCOME_PLAYER] {error_msg}")
                self.state = WelcomeState.ERROR
                
                result = WelcomeResult(
                    success=False,
                    method="none",
                    duration_sec=0.0,
                    error=error_msg
                )
                
                if self._on_error:
                    self._on_error(error_msg)
                if self._on_completed:
                    self._on_completed(result)
                
                return result
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ
            if self._on_started:
                self._on_started()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            result = await self._play_prerecorded()
            if result.success:
                logger.info("‚úÖ [WELCOME_PLAYER] –ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                self.state = WelcomeState.COMPLETED
                if self._on_completed:
                    self._on_completed(result)
                return result
            
            logger.warning(f"‚ö†Ô∏è [WELCOME_PLAYER] –ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.error}")
            
            # Fallback –Ω–∞ TTS
            if self.config.fallback_to_tts:
                logger.info("üéµ [WELCOME_PLAYER] –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ TTS fallback")
                result = await self._play_tts_fallback()
                if result.success:
                    logger.info("‚úÖ [WELCOME_PLAYER] TTS fallback –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    self.state = WelcomeState.COMPLETED
                    if self._on_completed:
                        self._on_completed(result)
                    return result
                
                logger.error(f"‚ùå [WELCOME_PLAYER] TTS fallback –Ω–µ —É–¥–∞–ª—Å—è: {result.error}")
            
            # –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å
            error_msg = "–í—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å"
            logger.error(f"‚ùå [WELCOME_PLAYER] {error_msg}")
            self.state = WelcomeState.ERROR
            
            result = WelcomeResult(
                success=False,
                method="none",
                duration_sec=0.0,
                error=error_msg
            )
            
            if self._on_error:
                self._on_error(error_msg)
            if self._on_completed:
                self._on_completed(result)
            
            return result
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}"
            logger.error(f"‚ùå [WELCOME_PLAYER] {error_msg}")
            self.state = WelcomeState.ERROR
            
            result = WelcomeResult(
                success=False,
                method="error",
                duration_sec=0.0,
                error=error_msg
            )
            
            if self._on_error:
                self._on_error(error_msg)
            if self._on_completed:
                self._on_completed(result)
            
            return result
    
    async def _play_prerecorded(self) -> WelcomeResult:
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            if not self._prerecorded_loaded:
                await self._load_prerecorded_audio()
            
            if self._prerecorded_audio is None:
                return WelcomeResult(
                    success=False,
                    method="prerecorded",
                    duration_sec=0.0,
                    error="–ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                )
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ SpeechPlaybackIntegration
            # (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
            duration_sec = len(self._prerecorded_audio) / self.config.sample_rate
            
            logger.info(f"üéµ [WELCOME_PLAYER] –ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ: {len(self._prerecorded_audio)} —Å—ç–º–ø–ª–æ–≤, {duration_sec:.1f}s")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            self._last_audio = self._prerecorded_audio
            
            return WelcomeResult(
                success=True,
                method="prerecorded",
                duration_sec=duration_sec,
                metadata={
                    "samples": len(self._prerecorded_audio),
                    "sample_rate": self.config.sample_rate,
                    "channels": self.config.channels
                }
            )
            
        except Exception as e:
            return WelcomeResult(
                success=False,
                method="prerecorded",
                duration_sec=0.0,
                error=f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}"
            )
    
    async def _play_tts_fallback(self) -> WelcomeResult:
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —á–µ—Ä–µ–∑ TTS fallback"""
        try:
            logger.info(f"üéµ [WELCOME_PLAYER] –ì–µ–Ω–µ—Ä–∏—Ä—É—é TTS –¥–ª—è: '{self.config.text[:30]}...'")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_data = await self.audio_generator.generate_audio(self.config.text)
            if audio_data is None:
                return WelcomeResult(
                    success=False,
                    method="tts",
                    duration_sec=0.0,
                    error="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TTS –∞—É–¥–∏–æ"
                )
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ SpeechPlaybackIntegration
            # (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
            duration_sec = len(audio_data) / self.config.sample_rate
            
            logger.info(f"üéµ [WELCOME_PLAYER] TTS –∞—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤, {duration_sec:.1f}s")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            self._last_audio = audio_data
            
            return WelcomeResult(
                success=True,
                method="tts",
                duration_sec=duration_sec,
                metadata={
                    "samples": len(audio_data),
                    "sample_rate": self.config.sample_rate,
                    "channels": self.config.channels
                }
            )
            
        except Exception as e:
            return WelcomeResult(
                success=False,
                method="tts",
                duration_sec=0.0,
                error=f"–û—à–∏–±–∫–∞ TTS fallback: {e}"
            )
    
    async def _load_prerecorded_audio(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            audio_path = self.config.get_audio_path()
            logger.info(f"üîç [WELCOME_PLAYER] –ò—â—É –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ: {audio_path}")
            
            if not audio_path.exists():
                logger.warning(f"‚ö†Ô∏è [WELCOME_PLAYER] –ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {audio_path}")
                logger.warning(f"‚ö†Ô∏è [WELCOME_PLAYER] –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω TTS fallback")
                self._prerecorded_loaded = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
                return
            
            logger.info(f"üéµ [WELCOME_PLAYER] –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ: {audio_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            from pydub import AudioSegment
            audio_segment = AudioSegment.from_file(str(audio_path))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if audio_segment.frame_rate != self.config.sample_rate:
                audio_segment = audio_segment.set_frame_rate(self.config.sample_rate)
            if audio_segment.channels != self.config.channels:
                audio_segment = audio_segment.set_channels(self.config.channels)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤
            self._prerecorded_audio = np.array(audio_segment.get_array_of_samples(), dtype=np.int16)
            self._prerecorded_loaded = True
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
            self._last_audio = self._prerecorded_audio
            
            duration_sec = len(self._prerecorded_audio) / self.config.sample_rate
            logger.info(f"‚úÖ [WELCOME_PLAYER] –ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self._prerecorded_audio)} —Å—ç–º–ø–ª–æ–≤, {duration_sec:.1f}s")
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_PLAYER] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            self._prerecorded_loaded = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
    
    def get_audio_data(self) -> Optional[np.ndarray]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        return self._last_audio
    
    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤ –ª–∏ –ø–ª–µ–µ—Ä –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é"""
        return self.state in [WelcomeState.IDLE, WelcomeState.COMPLETED]
    
    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞"""
        self.state = WelcomeState.IDLE
        self._prerecorded_audio = None
        self._prerecorded_loaded = False
        self._last_audio = None
