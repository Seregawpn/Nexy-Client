"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∏–∑ improved_input_handler.py
"""

import asyncio
import threading
import time
import logging
from typing import Optional, Callable, Dict, Any

from .types import KeyEvent, KeyEventType, KeyboardConfig

logger = logging.getLogger(__name__)

class KeyboardMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞–∂–∞—Ç–∏–π"""
    
    def __init__(self, config: KeyboardConfig):
        self.config = config
        self.key_to_monitor = config.key_to_monitor
        self.short_press_threshold = config.short_press_threshold
        self.long_press_threshold = config.long_press_threshold
        self.event_cooldown = config.event_cooldown
        self.hold_check_interval = config.hold_check_interval
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_monitoring = False
        self.key_pressed = False
        self.press_start_time = None
        self.last_event_time = 0
        
        # Threading
        self.monitor_thread = None
        self.hold_monitor_thread = None
        self.stop_event = threading.Event()
        self.state_lock = threading.RLock()
        
        # Callbacks
        self.event_callbacks: Dict[KeyEventType, Callable] = {}
        
        # Event loop –¥–ª—è async –∫–æ–ª–±—ç–∫–æ–≤
        self._loop: Optional[asyncio.AbstractEventLoop] = None
        
        # Fallback —Ä–µ–∂–∏–º
        self.fallback_mode = False
        self.keyboard_available = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        self._init_keyboard()
    
    def _init_keyboard(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        try:
            import pynput.keyboard as keyboard
            self.keyboard = keyboard
            self.keyboard_available = True
            logger.info("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è pynput –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.keyboard_available = False
            self.fallback_mode = True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            self.keyboard_available = False
    
    def start_monitoring(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        if not self.keyboard_available:
            logger.warning("‚ö†Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
            
        if self.is_monitoring:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
            
        try:
            self.is_monitoring = True
            self.stop_event.clear()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.monitor_thread = threading.Thread(
                target=self._run_keyboard_listener,
                name="KeyboardMonitor",
                daemon=True
            )
            self.monitor_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è
            self.hold_monitor_thread = threading.Thread(
                target=self._run_hold_monitor,
                name="HoldMonitor",
                daemon=True
            )
            self.hold_monitor_thread.start()
            
            logger.info("üéπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.is_monitoring = False
            return False
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        if not self.is_monitoring:
            return
            
        try:
            self.is_monitoring = False
            self.stop_event.set()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=2.0)
                
            if self.hold_monitor_thread and self.hold_monitor_thread.is_alive():
                self.hold_monitor_thread.join(timeout=2.0)
                
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def register_callback(self, event_type, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç callback –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ KeyEventType, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–∏
        if isinstance(event_type, str):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ KeyEventType
            try:
                event_type = KeyEventType(event_type)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                return
                
        self.event_callbacks[event_type] = callback
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è {event_type.value}")
    
    def set_loop(self, loop: asyncio.AbstractEventLoop):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç event loop –¥–ª—è async –∫–æ–ª–±—ç–∫–æ–≤"""
        self._loop = loop
        logger.debug("üîÑ Event loop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è KeyboardMonitor")
    
    def _run_keyboard_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç listener –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            with self.keyboard.Listener(
                on_press=self._on_key_press,
                on_release=self._on_key_release
            ) as listener:
                listener.join()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ listener –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    
    def _run_hold_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        while not self.stop_event.is_set():
            try:
                with self.state_lock:
                    if self.key_pressed and self.press_start_time:
                        duration = time.time() - self.press_start_time
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                        if duration >= self.long_press_threshold:
                            self._trigger_event(KeyEventType.LONG_PRESS, duration)
                            self.press_start_time = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                            
                time.sleep(self.hold_check_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {e}")
                time.sleep(0.1)
    
    def _on_key_press(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            if current_time - self.last_event_time < self.event_cooldown:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –∫–ª–∞–≤–∏—à–∞
            if not self._is_target_key(key):
                return
                
            with self.state_lock:
                # –ï—Å–ª–∏ –∫–ª–∞–≤–∏—à–∞ —É–∂–µ –Ω–∞–∂–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                if self.key_pressed:
                    return
                    
                self.key_pressed = True
                self.press_start_time = current_time
                
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è
            event = KeyEvent(
                key=self._key_to_string(key),
                event_type=KeyEventType.PRESS,
                timestamp=current_time
            )
            
            self._trigger_event(KeyEventType.PRESS, 0.0, event)
            logger.debug(f"üîë –ö–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞: {self._key_to_string(key)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è: {e}")
    
    def _on_key_release(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –∫–ª–∞–≤–∏—à–∞
            if not self._is_target_key(key):
                return
                
            with self.state_lock:
                if not self.key_pressed:
                    return
                    
                duration = current_time - self.press_start_time if self.press_start_time else 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                if duration < self.short_press_threshold:
                    event_type = KeyEventType.SHORT_PRESS
                else:
                    event_type = KeyEventType.RELEASE
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                event = KeyEvent(
                    key=self._key_to_string(key),
                    event_type=event_type,
                    timestamp=current_time,
                    duration=duration
                )
                
                self._trigger_event(event_type, duration, event)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.key_pressed = False
                self.press_start_time = None
                self.last_event_time = current_time
                
            logger.debug(f"üîë –ö–ª–∞–≤–∏—à–∞ –æ—Ç–ø—É—â–µ–Ω–∞: {self._key_to_string(key)} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.3f}s)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è: {e}")
    
    def _is_target_key(self, key) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞–≤–∏—à–∞ —Ü–µ–ª–µ–≤–æ–π"""
        try:
            if not self.keyboard_available:
                return False
                
            if self.key_to_monitor == 'space':
                return key == self.keyboard.Key.space
            elif self.key_to_monitor == 'ctrl':
                return key == self.keyboard.Key.ctrl
            elif self.key_to_monitor == 'alt':
                return key == self.keyboard.Key.alt
            elif self.key_to_monitor == 'shift':
                return key == self.keyboard.Key.shift
            elif self.key_to_monitor == 'enter':
                return key == self.keyboard.Key.enter
            elif self.key_to_monitor == 'esc':
                return key == self.keyboard.Key.esc
            else:
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞–≤–∏—à–∏: {e}")
            return False
    
    def _key_to_string(self, key) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–ª–∞–≤–∏—à—É –≤ —Å—Ç—Ä–æ–∫—É"""
        try:
            if not self.keyboard_available:
                return "unknown"
                
            if hasattr(key, 'char') and key.char:
                return key.char
            elif hasattr(key, 'name'):
                return key.name
            else:
                return str(key)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏: {e}")
            return "unknown"
    
    def _trigger_event(self, event_type: KeyEventType, duration: float, event: KeyEvent = None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        try:
            callback = self.event_callbacks.get(event_type)
            if callback:
                if event is None:
                    event = KeyEvent(
                        key=self.key_to_monitor,
                        event_type=event_type,
                        timestamp=time.time(),
                        duration=duration
                    )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º callback –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threading.Thread(
                    target=lambda: self._run_callback(callback, event),
                    daemon=True
                ).start()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def _run_callback(self, callback, event):
        """–ó–∞–ø—É—Å–∫ callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π async/sync —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            import inspect
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback –∫–æ—Ä—É—Ç–∏–Ω–æ–π
            if inspect.iscoroutinefunction(callback):
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π event loop
                if self._loop and self._loop.is_running():
                    asyncio.run_coroutine_threadsafe(callback(event), self._loop)
                else:
                    # Fallback - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
                    asyncio.run(callback(event))
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                callback(event)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è callback: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        with self.state_lock:
            return {
                "is_monitoring": self.is_monitoring,
                "key_pressed": self.key_pressed,
                "keyboard_available": self.keyboard_available,
                "fallback_mode": self.fallback_mode,
                "config": {
                    "key": self.key_to_monitor,
                    "short_press_threshold": self.short_press_threshold,
                    "long_press_threshold": self.long_press_threshold,
                },
                "callbacks_registered": len(self.event_callbacks)
            }
