"""
–û—Å–Ω–æ–≤–Ω–æ–π gRPC –∫–ª–∏–µ–Ω—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import asyncio
import logging
from typing import Optional, Dict, Any, AsyncGenerator, Tuple, List
import importlib
import sys
from pathlib import Path
from datetime import datetime

import numpy as np

from .types import ServerConfig, RetryConfig, HealthCheckConfig, RetryStrategy
from .retry_manager import RetryManager
from .connection_manager import ConnectionManager

logger = logging.getLogger(__name__)


class GrpcClient:
    """–û—Å–Ω–æ–≤–Ω–æ–π gRPC –∫–ª–∏–µ–Ω—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or self._create_default_config()
        
        # –ú–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.connection_manager = ConnectionManager()
        self.retry_manager = RetryManager(
            RetryConfig(
                max_attempts=self.config.get('max_retry_attempts', 3),
                base_delay=self.config.get('retry_delay', 1.0),
                strategy=RetryStrategy.EXPONENTIAL  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enum –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
            )
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_servers()
        self._setup_callbacks()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self._set_default_server()
    
    def _create_default_config(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ unified_config.yaml
            import yaml
            with open('config/unified_config.yaml', 'r') as f:
                config = yaml.safe_load(f)
            
            grpc_data = config.get('grpc', {})
            servers_config = grpc_data.get('servers', {})
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π GrpcClient
            servers = {}
            for server_name, server_config in servers_config.items():
                servers[server_name] = {
                    'address': server_config.get('host', '127.0.0.1'),
                    'port': server_config.get('port', 50051),
                    'use_ssl': server_config.get('ssl', False),
                    'timeout': server_config.get('timeout', grpc_data.get('connection_timeout', 30)),
                    'retry_attempts': server_config.get('retry_attempts', grpc_data.get('retry_attempts', 3)),
                    'retry_delay': server_config.get('retry_delay', grpc_data.get('retry_delay', 1.0))
                }
            
            return {
                'servers': servers,
                'auto_fallback': True,
                'health_check_interval': 30,
                'connection_timeout': grpc_data.get('connection_timeout', 10),
                'max_retry_attempts': grpc_data.get('retry_attempts', 3),
                'retry_strategy': 'exponential',
                'circuit_breaker_threshold': 5,
                'circuit_breaker_timeout': 60,
                'welcome_timeout_sec': 30.0
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
            # Fallback –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            return {
                'servers': {
                    'local': {
                        'address': '127.0.0.1',
                        'port': 50051,
                        'use_ssl': False,
                        'timeout': 30,
                        'retry_attempts': 3,
                        'retry_delay': 1.0
                    }
                },
                'auto_fallback': True,
                'health_check_interval': 30,
                'connection_timeout': 10,
                'max_retry_attempts': 3,
                'retry_strategy': 'exponential',
                'circuit_breaker_threshold': 5,
                'circuit_breaker_timeout': 60,
                'welcome_timeout_sec': 30.0
            }
    
    def _initialize_servers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            servers_config = self.config.get('servers', {})
            for name, server_config in servers_config.items():
                config = ServerConfig(
                    address=server_config['address'],
                    port=server_config['port'],
                    use_ssl=server_config.get('use_ssl', False),
                    timeout=server_config.get('timeout', 30),
                    retry_attempts=server_config.get('retry_attempts', 3),
                    retry_delay=server_config.get('retry_delay', 1.0),
                    max_message_size=server_config.get('max_message_size', 50 * 1024 * 1024)
                )
                self.connection_manager.add_server(name, config)
            
            logger.info(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(servers_config)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
    
    def _setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç callback'–∏"""
        self.connection_manager.set_connection_callback(self._on_connection_changed)
        self.connection_manager.set_error_callback(self._on_error)
    
    def _set_default_server(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∏–∑ unified_config.yaml
            import yaml
            with open('config/unified_config.yaml', 'r') as f:
                config = yaml.safe_load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gRPC –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–µ–∫—Ü–∏–∏ integrations
            integrations = config.get('integrations', {})
            grpc_config = integrations.get('grpc_client', {})
            default_server = grpc_config.get('server', 'local')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if default_server in self.connection_manager.servers:
                self.connection_manager.current_server = default_server
                logger.info(f"üåê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_server}")
            else:
                logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä '{default_server}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'local'")
                self.connection_manager.current_server = 'local'
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é gRPC: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º local –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.connection_manager.current_server = 'local'
    
    def _on_connection_changed(self, state):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {state.value}")
    
    def _on_error(self, error: Exception, context: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {error}")
    
    async def connect(self, server_name: Optional[str] = None) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        return await self.connection_manager.connect(server_name)
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        await self.connection_manager.disconnect()
    
    async def switch_server(self, server_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä"""
        return await self.connection_manager.switch_server(server_name)
    
    async def execute_with_retry(self, operation, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        return await self.retry_manager.execute_with_retry(operation, *args, **kwargs)

    def get_connection_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.connection_manager.get_connection_state()
    
    def get_metrics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.connection_manager.get_metrics()
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç"""
        return self.connection_manager.is_connected()
    
    async def stream_audio(self, prompt: str, screenshot_base64: str, screen_info: dict, hardware_id: str) -> AsyncGenerator[Any, None]:
        """–°—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            logger.info(f"üîç screen_info type: {type(screen_info)}")
            logger.info(f"üîç screen_info content: {screen_info}")
            
            if not self.is_connected():
                await self.connect()

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º protobuf-–º–æ–¥—É–ª–∏ —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ server/
            streaming_pb2, streaming_pb2_grpc = self._import_proto_modules()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            if hasattr(screen_info, 'get'):
                # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                screen_width = screen_info.get('width')
                screen_height = screen_info.get('height')
            elif hasattr(screen_info, 'width') and hasattr(screen_info, 'height'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ width –∏ height
                screen_width = screen_info.width
                screen_height = screen_info.height
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø screen_info: {type(screen_info)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                screen_width = None
                screen_height = None
            
            request = streaming_pb2.StreamRequest(
                prompt=prompt,
                screenshot=screenshot_base64,
                screen_width=screen_width,
                screen_height=screen_height,
                hardware_id=hardware_id,
                session_id=None
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
            async for response in streaming_pb2_grpc.StreamingServiceStub(
                self.connection_manager.channel
            ).StreamAudio(request, timeout=30):
                yield response
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ: {e}")
            raise

    async def generate_welcome_audio(
        self,
        text: str,
        *,
        voice: Optional[str] = None,
        language: Optional[str] = None,
        session_id: Optional[str] = None,
        timeout: Optional[float] = None,
        server_name: Optional[str] = None,
    ) -> Dict[str, Any]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ.

        Returns dict c numpy –º–∞—Å—Å–∏–≤–æ–º –∞—É–¥–∏–æ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
        """
        if not text or not text.strip():
            raise ValueError("Welcome text must be non-empty")

        target_server = server_name or self.connection_manager.current_server

        if not self.is_connected():
            await self.connect(target_server)
        elif server_name and self.connection_manager.current_server != server_name:
            await self.connection_manager.switch_server(server_name)

        streaming_pb2, streaming_pb2_grpc = self._import_proto_modules()

        request = streaming_pb2.WelcomeRequest(
            text=text,
            session_id=session_id or f"welcome_{datetime.now().timestamp()}",
        )

        if voice:
            request.voice = voice
        if language:
            request.language = language

        stub = streaming_pb2_grpc.StreamingServiceStub(self.connection_manager.channel)
        rpc_timeout = timeout or self.config.get('welcome_timeout_sec', 30.0)

        audio_chunks: List[bytes] = []
        metadata: Dict[str, Any] = {}
        chunk_dtype: Optional[str] = None

        try:
            async for response in stub.GenerateWelcomeAudio(request, timeout=rpc_timeout):
                content = response.WhichOneof('content')
                if content == 'audio_chunk':
                    chunk = response.audio_chunk
                    if chunk.audio_data:
                        audio_bytes = bytes(chunk.audio_data)
                        if audio_bytes:
                            audio_chunks.append(audio_bytes)
                            chunk_dtype = chunk.dtype or chunk_dtype
                elif content == 'metadata':
                    metadata = {
                        'method': response.metadata.method,
                        'duration_sec': response.metadata.duration_sec,
                        'sample_rate': response.metadata.sample_rate,
                        'channels': response.metadata.channels,
                    }
                elif content == 'error_message':
                    raise RuntimeError(response.error_message)
                elif content == 'end_message':
                    break

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            raise

        if not audio_chunks:
            raise RuntimeError("Server returned no audio data")

        raw_bytes = b''.join(audio_chunks)
        dtype = (chunk_dtype or 'int16').lower()

        if dtype not in ('int16', 'pcm_s16le', 'short'):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π dtype '{dtype}', –ø—Ä–∏–≤–æ–∂—É –∫ int16")
            dtype = 'int16'

        np_dtype = np.int16
        audio_array = np.frombuffer(raw_bytes, dtype=np_dtype)

        if metadata.get('channels', 1) > 1:
            try:
                audio_array = audio_array.reshape(-1, metadata['channels'])
            except Exception:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∞—É–¥–∏–æ –ø–æ –∫–∞–Ω–∞–ª–∞–º, –æ—Å—Ç–∞–≤–ª—è—é –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤")

        result = {
            'audio': audio_array,
            'metadata': {
                'method': metadata.get('method', 'server'),
                'duration_sec': metadata.get('duration_sec'),
                'sample_rate': metadata.get('sample_rate', 48000),
                'channels': metadata.get('channels', 1),
                'dtype': 'int16',
            }
        }

        return result

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await self.connection_manager.cleanup()
            logger.info("üßπ GrpcClient –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ GrpcClient: {e}")

    def _import_proto_modules(self) -> Tuple[Any, Any]:
        """–ì–∏–±–∫–∏–π –∏–º–ø–æ—Ä—Ç streaming_pb2 –∏ streaming_pb2_grpc.
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ proto –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥—É–ª—è, –∑–∞—Ç–µ–º fallback –≤ server/.
        """
        # 1) –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ proto –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥—É–ª—è
        try:
            # –ü—É—Ç—å: client/modules/grpc_client/proto/
            proto_dir = Path(__file__).resolve().parent.parent / 'proto'
            
            if proto_dir.exists() and str(proto_dir) not in sys.path:
                sys.path.insert(0, str(proto_dir))
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ proto –º–æ–¥—É–ª—è–º: {proto_dir}")
            
            pb2 = importlib.import_module('streaming_pb2')
            pb2_grpc = importlib.import_module('streaming_pb2_grpc')
            logger.info("‚úÖ Protobuf –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ proto/")
            return pb2, pb2_grpc
        except Exception as local_err:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ proto/: {local_err}")

        # 2) –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ server/ (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ—Ä–µ–Ω—å/ server)
        try:
            repo_root = Path(__file__).resolve().parents[4]
            server_dir = repo_root / 'server'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if server_dir.exists() and str(server_dir) not in sys.path:
                sys.path.append(str(server_dir))
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ server –º–æ–¥—É–ª—è–º: {server_dir}")
            
            pb2 = importlib.import_module('streaming_pb2')
            pb2_grpc = importlib.import_module('streaming_pb2_grpc')
            logger.info("‚úÖ Protobuf –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ server/")
            return pb2, pb2_grpc
        except Exception as e:
            raise ImportError(f"Unable to import protobuf modules (streaming_pb2*). Error: {e}")
