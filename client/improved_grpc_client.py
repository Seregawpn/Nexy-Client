"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π gRPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
- Retry –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å exponential backoff
- Health check —Å–∏—Å—Ç–µ–º—É
- Fallback —Ä–µ–∂–∏–º –¥–ª—è offline —Ä–∞–±–æ—Ç—ã
- Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
"""

import asyncio
import logging
import time
import threading
from typing import Optional, Dict, Any, List, Callable, Union
from dataclasses import dataclass
from enum import Enum
import grpc
import grpc.aio
from concurrent.futures import ThreadPoolExecutor

from error_handler import (
    handle_network_error, handle_config_error, handle_threading_error,
    ErrorSeverity, ErrorCategory
)

logger = logging.getLogger(__name__)

class ConnectionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting"
    CONNECTED = "connected"
    RECONNECTING = "reconnecting"
    FAILED = "failed"

class RetryStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    NONE = "none"
    LINEAR = "linear"
    EXPONENTIAL = "exponential"
    FIBONACCI = "fibonacci"

@dataclass
class ServerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    address: str
    port: int
    use_ssl: bool = False
    timeout: int = 30
    retry_attempts: int = 3
    retry_delay: float = 1.0
    max_message_size: int = 50 * 1024 * 1024  # 50MB
    keep_alive_time: int = 30
    keep_alive_timeout: int = 5
    keep_alive_permit_without_calls: bool = True

@dataclass
class ConnectionMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    total_connections: int = 0
    successful_connections: int = 0
    failed_connections: int = 0
    total_requests: int = 0
    successful_requests: int = 0
    failed_requests: int = 0
    average_response_time: float = 0.0
    last_connection_time: Optional[float] = None
    last_error: Optional[str] = None

class ImprovedGrpcClient:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π gRPC –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞–¥–µ–∂–Ω—ã–º —Å–µ—Ç–µ–≤—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or self._create_default_config()
        self.servers: Dict[str, ServerConfig] = {}
        self.current_server: Optional[str] = None
        self.connection_state = ConnectionState.DISCONNECTED
        self.metrics = ConnectionMetrics()
        
        # –°–µ—Ç–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.channel: Optional[grpc.aio.Channel] = None
        self.stub: Optional[Any] = None
        self.health_check_task: Optional[asyncio.Task] = None
        self.retry_manager = RetryManager()
        
        # Thread safety
        self._lock = threading.RLock()
        self._connection_lock = asyncio.Lock()
        
        # Callbacks
        self.on_connection_changed: Optional[Callable[[ConnectionState], None]] = None
        self.on_error: Optional[Callable[[Exception, str], None]] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_servers()
        self._start_health_checker()
    
    def _create_default_config(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'servers': {
                'local': {
                    'address': '127.0.0.1',
                    'port': 50051,
                    'use_ssl': False,
                    'timeout': 30,
                    'retry_attempts': 3,
                    'retry_delay': 1.0
                },
                'production': {
                    'address': '20.151.51.172',
                    'port': 50051,
                    'use_ssl': False,
                    'timeout': 120,
                    'retry_attempts': 5,
                    'retry_delay': 2.0
                }
            },
            'auto_fallback': True,
            'health_check_interval': 30,
            'connection_timeout': 10,
            'max_retry_attempts': 3,
            'retry_strategy': RetryStrategy.EXPONENTIAL,
            'circuit_breaker_threshold': 5,
            'circuit_breaker_timeout': 60
        }
    
    def _initialize_servers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            servers_config = self.config.get('servers', {})
            for name, server_config in servers_config.items():
                self.servers[name] = ServerConfig(
                    address=server_config['address'],
                    port=server_config['port'],
                    use_ssl=server_config.get('use_ssl', False),
                    timeout=server_config.get('timeout', 30),
                    retry_attempts=server_config.get('retry_attempts', 3),
                    retry_delay=server_config.get('retry_delay', 1.0),
                    max_message_size=server_config.get('max_message_size', 50 * 1024 * 1024)
                )
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            if self.servers:
                self.current_server = list(self.servers.keys())[0]
                logger.info(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
        except Exception as e:
            handle_config_error(e, "ImprovedGrpcClient", "_initialize_servers", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
    
    def _start_health_checker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.health_check_task and not self.health_check_task.done():
                self.health_check_task.cancel()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π event loop
            try:
                loop = asyncio.get_running_loop()
                self.health_check_task = loop.create_task(self._health_check_loop())
                logger.info("üîç –ó–∞–ø—É—â–µ–Ω health checker")
            except RuntimeError:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, –∑–∞–ø—É—Å—Ç–∏–º –ø–æ–∑–∂–µ
                logger.info("üîç Health checker –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
                self.health_check_task = None
        except Exception as e:
            handle_threading_error(e, "ImprovedGrpcClient", "_start_health_checker", "–ó–∞–ø—É—Å–∫ health checker")
    
    async def _health_check_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        while True:
            try:
                await asyncio.sleep(self.config.get('health_check_interval', 30))
                await self._check_connection_health()
            except asyncio.CancelledError:
                break
            except Exception as e:
                handle_threading_error(e, "ImprovedGrpcClient", "_health_check_loop", "Health check loop")
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _check_connection_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.connection_state == ConnectionState.CONNECTED:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
                if self.channel and not self.channel.get_state() == grpc.ChannelConnectivity.READY:
                    logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                    await self._reconnect()
            elif self.connection_state == ConnectionState.DISCONNECTED:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                await self._connect()
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "_check_connection_health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    
    async def connect(self, server_name: Optional[str] = None) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            async with self._connection_lock:
                if server_name and server_name in self.servers:
                    self.current_server = server_name
                
                return await self._connect()
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "connect", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return False
    
    async def _connect(self) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            if not self.current_server or self.current_server not in self.servers:
                logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return False
            
            self.connection_state = ConnectionState.CONNECTING
            self._notify_connection_changed()
            
            server_config = self.servers[self.current_server]
            address = f"{server_config.address}:{server_config.port}"
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.channel:
                try:
                    await self.channel.close()
                except:
                    pass
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ gRPC
            options = [
                ('grpc.max_send_message_length', server_config.max_message_size),
                ('grpc.max_receive_message_length', server_config.max_message_size),
                ('grpc.max_metadata_size', 1024 * 1024),
                ('grpc.keepalive_time_ms', server_config.keep_alive_time * 1000),
                ('grpc.keepalive_timeout_ms', server_config.keep_alive_timeout * 1000),
                ('grpc.keepalive_permit_without_calls', server_config.keep_alive_permit_without_calls),
                ('grpc.http2.max_pings_without_data', 0),
                ('grpc.http2.min_time_between_pings_ms', 10000),
                ('grpc.http2.min_ping_interval_without_data_ms', 300000)
            ]
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
            if server_config.use_ssl:
                self.channel = grpc.aio.secure_channel(
                    address, 
                    grpc.aio.ssl_channel_credentials(), 
                    options=options
                )
            else:
                self.channel = grpc.aio.insecure_channel(address, options=options)
            
            # –°–æ–∑–¥–∞–µ–º stub
            self.stub = self._create_stub()
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
            try:
                await asyncio.wait_for(
                    self.channel.channel_ready(),
                    timeout=self.config.get('connection_timeout', 10)
                )
                
                self.connection_state = ConnectionState.CONNECTED
                self.metrics.successful_connections += 1
                self.metrics.last_connection_time = time.time()
                self._notify_connection_changed()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º health checker –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
                if self.health_check_task is None:
                    self.health_check_task = asyncio.create_task(self._health_check_loop())
                    logger.info("üîç –ó–∞–ø—É—â–µ–Ω health checker")
                
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {address} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
                
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {address}")
                self.connection_state = ConnectionState.FAILED
                self.metrics.failed_connections += 1
                self._notify_connection_changed()
                return False
                
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "_connect", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            self.connection_state = ConnectionState.FAILED
            self.metrics.failed_connections += 1
            self.metrics.last_error = str(e)
            self._notify_connection_changed()
            return False
    
    def _create_stub(self):
        """–°–æ–∑–¥–∞–µ—Ç gRPC stub (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        # –≠—Ç–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å, stub —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        return None
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async with self._connection_lock:
                if self.channel:
                    await self.channel.close()
                    self.channel = None
                    self.stub = None
                
                self.connection_state = ConnectionState.DISCONNECTED
                self._notify_connection_changed()
                logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "disconnect", "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
    
    async def _reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            await self.disconnect()
            await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
            return await self._connect()
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "_reconnect", "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            return False
    
    async def switch_server(self, server_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä"""
        try:
            if server_name not in self.servers:
                logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_name}")
            self.current_server = server_name
            return await self._reconnect()
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "switch_server", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")
            return False
    
    async def execute_with_retry(self, operation: Callable, *args, **kwargs) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        try:
            return await self.retry_manager.execute_with_retry(
                operation, *args, **kwargs
            )
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "execute_with_retry", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å retry")
            raise
    
    def get_connection_state(self) -> ConnectionState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.connection_state
    
    def get_metrics(self) -> ConnectionMetrics:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.metrics
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç"""
        return self.connection_state == ConnectionState.CONNECTED
    
    def set_connection_callback(self, callback: Callable[[ConnectionState], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.on_connection_changed = callback
    
    def set_error_callback(self, callback: Callable[[Exception, str], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ—à–∏–±–æ–∫"""
        self.on_error = callback
    
    def _notify_connection_changed(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.on_connection_changed:
            try:
                self.on_connection_changed(self.connection_state)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def _notify_error(self, error: Exception, context: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        if self.on_error:
            try:
                self.on_error(error, context)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error callback: {e}")
    
    async def stream_audio(self, prompt: str, screenshot_base64: str, screen_info: dict, hardware_id: str):
        """–°—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"üîç screen_info type: {type(screen_info)}")
            logger.info(f"üîç screen_info content: {screen_info}")
            
            if not self.is_connected():
                await self.connect()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            import streaming_pb2_grpc
            import streaming_pb2
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø screen_info –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if hasattr(screen_info, 'get'):
                # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                screen_width = screen_info.get('width')
                screen_height = screen_info.get('height')
            elif hasattr(screen_info, 'width') and hasattr(screen_info, 'height'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ width –∏ height
                screen_width = screen_info.width
                screen_height = screen_info.height
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø screen_info: {type(screen_info)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                screen_width = None
                screen_height = None
            
            request = streaming_pb2.StreamRequest(
                prompt=prompt,
                screenshot=screenshot_base64,
                screen_width=screen_width,
                screen_height=screen_height,
                hardware_id=hardware_id,
                session_id=None  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
            async for response in streaming_pb2_grpc.StreamingServiceStub(self.channel).StreamAudio(
                request,
                timeout=30
            ):
                yield response
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ: {e}")
            raise
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.health_check_task and not self.health_check_task.done():
                self.health_check_task.cancel()
                try:
                    await self.health_check_task
                except asyncio.CancelledError:
                    pass
            
            await self.disconnect()
            logger.info("üßπ ImprovedGrpcClient –æ—á–∏—â–µ–Ω")
        except Exception as e:
            handle_network_error(e, "ImprovedGrpcClient", "cleanup", "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")

class RetryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    
    def __init__(self, max_attempts: int = 3, base_delay: float = 1.0, strategy: RetryStrategy = RetryStrategy.EXPONENTIAL):
        self.max_attempts = max_attempts
        self.base_delay = base_delay
        self.strategy = strategy
    
    async def execute_with_retry(self, operation: Callable, *args, **kwargs) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry"""
        last_exception = None
        
        for attempt in range(self.max_attempts):
            try:
                return await operation(*args, **kwargs)
            except Exception as e:
                last_exception = e
                
                if attempt < self.max_attempts - 1:
                    delay = self._calculate_delay(attempt)
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.2f}—Å: {e}")
                    await asyncio.sleep(delay)
                else:
                    logger.error(f"‚ùå –í—Å–µ {self.max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã")
        
        raise last_exception
    
    def _calculate_delay(self, attempt: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏"""
        if self.strategy == RetryStrategy.LINEAR:
            return self.base_delay * (attempt + 1)
        elif self.strategy == RetryStrategy.EXPONENTIAL:
            return self.base_delay * (2 ** attempt)
        elif self.strategy == RetryStrategy.FIBONACCI:
            return self.base_delay * self._fibonacci(attempt + 1)
        else:
            return self.base_delay
    
    def _fibonacci(self, n: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏"""
        if n <= 1:
            return n
        return self._fibonacci(n - 1) + self._fibonacci(n - 2)

def create_improved_grpc_client(config: Optional[Dict[str, Any]] = None) -> ImprovedGrpcClient:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ImprovedGrpcClient"""
    return ImprovedGrpcClient(config)

def create_default_config() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        'servers': {
            'local': {
                'address': '127.0.0.1',
                'port': 50051,
                'use_ssl': False,
                'timeout': 30,
                'retry_attempts': 3,
                'retry_delay': 1.0
            },
            'production': {
                'address': '20.151.51.172',
                'port': 50051,
                'use_ssl': False,
                'timeout': 120,
                'retry_attempts': 5,
                'retry_delay': 2.0
            }
        },
        'auto_fallback': True,
        'health_check_interval': 30,
        'connection_timeout': 10,
        'max_retry_attempts': 3,
        'retry_strategy': 'exponential',
        'circuit_breaker_threshold': 5,
        'circuit_breaker_timeout': 60
    }
