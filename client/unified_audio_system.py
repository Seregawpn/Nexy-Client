"""
UnifiedAudioSystem - –ï–¥–∏–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ú –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞—É–¥–∏–æ –æ–ø–µ—Ä–∞—Ü–∏–π:
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PortAudio
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏

–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (AudioPlayer, AudioManagerDaemon) –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —ç—Ç—É —Å–∏—Å—Ç–µ–º—É.
"""

import subprocess
import time
import threading
import logging
from typing import Dict, List, Optional, Set, Callable, Tuple
from dataclasses import dataclass
from enum import Enum
import sounddevice as sd
from realtime_device_monitor import get_global_realtime_monitor, DeviceEvent

logger = logging.getLogger(__name__)

class DeviceType(Enum):
    """–¢–∏–ø—ã –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    AIRPODS = "airpods"
    BEATS = "beats"
    BLUETOOTH_HEADPHONES = "bluetooth_headphones"
    USB_HEADPHONES = "usb_headphones"
    SPEAKERS = "speakers"
    MICROPHONE = "microphone"
    VIRTUAL = "virtual"
    UNKNOWN = "unknown"

@dataclass
class DeviceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    name: str
    device_type: DeviceType
    priority: int
    is_default: bool = False
    portaudio_output_index: Optional[int] = None
    portaudio_input_index: Optional[int] = None
    is_connected: bool = True

class UnifiedAudioSystem:
    """
    –ï–¥–∏–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞—É–¥–∏–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    2. –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    4. –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    """
    
    def __init__(self, config: Dict = None):
        self.config = config if config is not None else {}
        self._lock = threading.RLock()
        self._initialized = False
        self._current_device = None
        self._devices_cache = {}  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—ç—à —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._callbacks = []
        self._realtime_monitor = None
        
        # –ü—É—Ç—å –∫ SwitchAudioSource
        self.switch_audio_path = self.config.get('switch_audio_path', 'SwitchAudioSource')
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.device_priorities = self._load_device_priorities_from_config()
        
        logger.info("üéõÔ∏è UnifiedAudioSystem —Å–æ–∑–¥–∞–Ω")
    
    def _load_device_priorities_from_config(self) -> Dict[str, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            import yaml
            import os
            
            # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'app_config.yaml')
            
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                device_priorities = config.get('device_manager', {}).get('device_priorities', {})
                
                if device_priorities:
                    logger.info("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    return device_priorities
            
            # Fallback –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")
            return {
                'airpods': 100,
                'beats': 95,
                'bluetooth_headphones': 90,
                'usb_headphones': 85,
                'bluetooth_speakers': 70,
                'usb_audio': 60,
                'speakers': 40,
                'built_in': 20,
                'other': 10,
                'microphone': 5,
                'virtual_device': 1,
                'unknown': 5
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # Fallback –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
            return {
                'airpods': 100,
                'beats': 95,
                'bluetooth_headphones': 90,
                'usb_headphones': 85,
                'bluetooth_speakers': 70,
                'usb_audio': 60,
                'speakers': 40,
                'built_in': 20,
                'other': 10,
                'microphone': 5,
                'virtual_device': 1,
                'unknown': 5
            }
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
        try:
            with self._lock:
                logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedAudioSystem...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                self._current_device = self._get_best_available_device_realtime()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RealtimeDeviceMonitor
                self._init_realtime_monitor()
                
                self._initialized = True
                logger.info("‚úÖ UnifiedAudioSystem —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UnifiedAudioSystem: {e}")
            return False
    
    def _init_realtime_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RealtimeDeviceMonitor"""
        try:
            self._realtime_monitor = get_global_realtime_monitor()
            if self._realtime_monitor:
                self._realtime_monitor.add_callback(self._on_device_event)
                logger.info("‚úÖ RealtimeDeviceMonitor –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è RealtimeDeviceMonitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RealtimeDeviceMonitor: {e}")
    
    def _on_device_event(self, event: DeviceEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç RealtimeDeviceMonitor"""
        try:
            logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç RealtimeDeviceMonitor: {event.event_type.value} - {event.device_name}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞—à–∏ callbacks
            self._notify_callbacks(event.event_type.value, {
                'device_name': event.device_name,
                'timestamp': event.timestamp,
                'previous_devices': list(event.previous_devices),
                'current_devices': list(event.current_devices)
            })
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º AudioPlayer –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self._notify_audio_player_device_changed()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def _get_real_time_devices(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PortAudio
            devices = sd.query_devices()
            real_devices = []
            
            for i, device in enumerate(devices):
                if device.get('max_output_channels', 0) > 0:  # –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    device_name = device.get('name', f'Device {i}')
                    device_type = self._detect_device_type(device_name)
                    priority = self._calculate_priority(device_name, device_type)
                    
                    real_devices.append({
                        'name': device_name,
                        'type': device_type,
                        'priority': priority,
                        'index': i,
                        'is_connected': True
                    })
            
            return real_devices
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return []
    
    def _immediate_switch_to_best_device(self, available_devices: Set[str]):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            if not available_devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return False
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ AudioDeviceManager
            try:
                from audio_device_manager import get_global_audio_device_manager
                audio_device_manager = get_global_audio_device_manager()
                
                if audio_device_manager:
                    best_device = audio_device_manager.find_best_available_device(list(available_devices))
                    if best_device:
                        logger.info(f"üéØ AudioDeviceManager –≤—ã–±—Ä–∞–ª: {best_device}")
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ SwitchAudioSource
                        result = subprocess.run([self.switch_audio_path, '-s', best_device], 
                                              capture_output=True, text=True, timeout=5)
                        
                        if result.returncode == 0:
                            self._current_device = best_device
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {best_device}")
                            return True
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ {best_device}: {result.stderr}")
                            return False
                    else:
                        logger.warning("‚ö†Ô∏è AudioDeviceManager –Ω–µ —Å–º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                        return False
                else:
                    logger.warning("‚ö†Ô∏è AudioDeviceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AudioDeviceManager: {e}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def handle_device_removed(self, removed_devices: Set[str]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –†–ï–ê–ö–¢–ò–í–ù–û –ë–ï–ó –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
        
        –ü—Ä–∏–Ω—Ü–∏–ø: –ù–ï –∫—ç—à–∏—Ä—É–µ–º, –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        """
        try:
            with self._lock:
                logger.info(f"üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {list(removed_devices)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–±–µ–∑ –∫—ç—à–∞)
                current_devices = self._get_real_time_devices()
                current_device_names = {device['name'] for device in current_devices}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                current_removed = False
                for device_name in removed_devices:
                    if device_name == self._current_device:
                        current_removed = True
                        break
                
                if current_removed:
                    logger.info(f"üîÑ –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {self._current_device}")
                    
                    # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    # –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–¥–µ—Ä–∂–µ–∫
                    self._immediate_switch_to_best_device(current_device_names)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks
                for device_name in removed_devices:
                    self._notify_callbacks('device_removed', {
                        'device_name': device_name
                    })
                
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def handle_device_added(self, added_devices: Set[str]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –†–ï–ê–ö–¢–ò–í–ù–û –ë–ï–ó –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
        """
        try:
            with self._lock:
                logger.info(f"üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {list(added_devices)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                current_devices = self._get_real_time_devices()
                current_device_names = {device['name'] for device in current_devices}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                for device_name in added_devices:
                    if device_name in current_device_names:
                        device_type = self._detect_device_type(device_name)
                        priority = self._calculate_priority(device_name, device_type)
                        
                        if priority >= 85:  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
                            self._immediate_switch_to_best_device(current_device_names)
                            break
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks
                for device_name in added_devices:
                    self._notify_callbacks('device_added', {
                        'device_name': device_name
                    })
                
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def _get_best_available_device_realtime(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            devices = self._get_real_time_devices()
            if not devices:
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            devices.sort(key=lambda x: x['priority'], reverse=True)
            best_device = devices[0]['name']
            
            logger.info(f"üéØ –õ—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device}")
            return best_device
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return None
    
    def _detect_device_type(self, device_name: str) -> DeviceType:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏–º–µ–Ω–∏"""
        device_name_lower = device_name.lower()
        
        if 'airpods' in device_name_lower:
            return DeviceType.AIRPODS
        elif 'beats' in device_name_lower:
            return DeviceType.BEATS
        elif 'bluetooth' in device_name_lower and ('headphone' in device_name_lower or 'headset' in device_name_lower):
            return DeviceType.BLUETOOTH_HEADPHONES
        elif 'usb' in device_name_lower and ('headphone' in device_name_lower or 'headset' in device_name_lower):
            return DeviceType.USB_HEADPHONES
        elif 'speaker' in device_name_lower or '–¥–∏–Ω–∞–º–∏–∫' in device_name_lower:
            return DeviceType.SPEAKERS
        elif 'microphone' in device_name_lower or '–º–∏–∫—Ä–æ—Ñ–æ–Ω' in device_name_lower:
            return DeviceType.MICROPHONE
        elif 'virtual' in device_name_lower:
            return DeviceType.VIRTUAL
        else:
            return DeviceType.UNKNOWN
    
    def _calculate_priority(self, device_name: str, device_type: DeviceType) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        base_priority = self.device_priorities.get(device_type.value, 5)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
        if 'default' in device_name.lower():
            base_priority += 10
        if 'built-in' in device_name.lower():
            base_priority += 5
        
        return base_priority
    
    def _notify_audio_player_device_changed(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç AudioPlayer –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            # –ò—â–µ–º AudioPlayer —Å—Ä–µ–¥–∏ callbacks
            for callback in self._callbacks:
                if hasattr(callback, 'notify_device_changed'):
                    logger.info("üîÑ UnifiedAudioSystem: –£–≤–µ–¥–æ–º–ª—è—é AudioPlayer –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
                    callback.notify_device_changed()
                    logger.info("‚úÖ UnifiedAudioSystem: AudioPlayer —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                    break
            else:
                logger.debug("‚ÑπÔ∏è UnifiedAudioSystem: AudioPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ callbacks")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è AudioPlayer –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    # === –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º ===
    
    def get_current_device(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        return self._current_device
    
    def get_current_device_info(self) -> Optional[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        if self._current_device:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            devices = self._get_real_time_devices()
            for device in devices:
                if device['name'] == self._current_device:
                    return DeviceInfo(
                        name=device['name'],
                        device_type=device['type'],
                        priority=device['priority'],
                        is_default=False,
                        is_connected=device['is_connected']
                    )
        return None
    
    def get_device_info(self, device_name: str) -> Optional[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            devices = self._get_real_time_devices()
            for device in devices:
                if device.get('name') == device_name:
                    return DeviceInfo(
                        name=device['name'],
                        device_type=device['type'],
                        priority=device['priority'],
                        is_default=False,
                        is_connected=device['is_connected']
                    )
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device_name}: {e}")
            return None
    
    def get_available_devices(self) -> List[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices = self._get_real_time_devices()
        return [DeviceInfo(
            name=device['name'],
            device_type=device['type'],
            priority=device['priority'],
            is_default=False,
            is_connected=device['is_connected']
        ) for device in devices]
    
    def switch_to_device(self, device_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            with self._lock:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                devices = self._get_real_time_devices()
                device_names = {device['name'] for device in devices}
                
                if device_name not in device_names:
                    logger.error(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    return False
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ SwitchAudioSource
                result = subprocess.run([self.switch_audio_path, '-s', device_name], 
                                      capture_output=True, text=True, timeout=5)
                
                if result.returncode == 0:
                    self._current_device = device_name
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {device_name}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ {device_name}: {result.stderr}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def get_system_device(self) -> Optional[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–¥–∏–Ω–∞–º–∏–∫–∏)"""
        devices = self._get_real_time_devices()
        for device in devices:
            if device['type'] == DeviceType.SPEAKERS:
                return DeviceInfo(
                    name=device['name'],
                    device_type=device['type'],
                    priority=device['priority'],
                    is_default=False,
                    is_connected=device['is_connected']
                )
        return None
    
    def add_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if callback not in self._callbacks:
            self._callbacks.append(callback)
            logger.info("‚úÖ Callback –¥–æ–±–∞–≤–ª–µ–Ω")
    
    def remove_callback(self, callback: Callable):
        """–£–¥–∞–ª—è–µ—Ç callback"""
        if callback in self._callbacks:
            self._callbacks.remove(callback)
            logger.info("‚úÖ Callback —É–¥–∞–ª–µ–Ω")
    
    def _notify_callbacks(self, event_type: str, data: Dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ callbacks –æ —Å–æ–±—ã—Ç–∏–∏"""
        for callback in self._callbacks:
            try:
                if hasattr(callback, 'on_device_event'):
                    callback.on_device_event(event_type, data)
                elif callable(callback):
                    callback(event_type, data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
    
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞"""
        return self._initialized
    
    @property
    def running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AudioPlayer)"""
        return self._initialized and (self._realtime_monitor is not None and self._realtime_monitor.is_monitoring())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_global_unified_audio_system = None

def get_global_unified_audio_system() -> Optional[UnifiedAudioSystem]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem"""
    return _global_unified_audio_system

def initialize_global_unified_audio_system(config: Dict = None) -> UnifiedAudioSystem:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem"""
    global _global_unified_audio_system
    
    if _global_unified_audio_system is None:
        _global_unified_audio_system = UnifiedAudioSystem(config)
        _global_unified_audio_system.initialize()
    
    return _global_unified_audio_system

def stop_global_unified_audio_system():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem"""
    global _global_unified_audio_system
    
    if _global_unified_audio_system:
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if hasattr(_global_unified_audio_system, '_realtime_monitor') and _global_unified_audio_system._realtime_monitor:
                _global_unified_audio_system._realtime_monitor.stop_monitoring()
            
            # –û—á–∏—â–∞–µ–º callbacks
            _global_unified_audio_system._callbacks.clear()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            _global_unified_audio_system._initialized = False
            _global_unified_audio_system._current_device = None
            
            logger.info("‚úÖ UnifiedAudioSystem –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ UnifiedAudioSystem: {e}")
        finally:
            _global_unified_audio_system = None
