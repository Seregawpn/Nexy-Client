"""
UnifiedAudioSystem - –ï–¥–∏–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ú –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞—É–¥–∏–æ –æ–ø–µ—Ä–∞—Ü–∏–π:
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PortAudio
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏

–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (AudioPlayer, AudioManagerDaemon) –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —ç—Ç—É —Å–∏—Å—Ç–µ–º—É.
"""

import subprocess
import time
import threading
import logging
from typing import Dict, List, Optional, Set, Callable, Tuple
from dataclasses import dataclass
from enum import Enum
import sounddevice as sd
from realtime_device_monitor import get_global_realtime_monitor, DeviceEvent

logger = logging.getLogger(__name__)

class DeviceType(Enum):
    """–¢–∏–ø—ã –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    AIRPODS = "airpods"
    BEATS = "beats"
    BLUETOOTH_HEADPHONES = "bluetooth_headphones"
    USB_HEADPHONES = "usb_headphones"
    SPEAKERS = "speakers"
    MICROPHONE = "microphone"
    VIRTUAL = "virtual"
    UNKNOWN = "unknown"

@dataclass
class DeviceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    name: str
    device_type: DeviceType
    priority: int
    is_default: bool = False
    portaudio_output_index: Optional[int] = None
    portaudio_input_index: Optional[int] = None
    is_connected: bool = True

class UnifiedAudioSystem:
    """
    –ï–¥–∏–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞—É–¥–∏–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    2. –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    4. –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.switch_audio_path = config.get('switch_audio_path', '/opt/homebrew/bin/SwitchAudioSource')
        
        # –ï–¥–∏–Ω—ã–π –∫—ç—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
        self._devices_cache: Dict[str, DeviceInfo] = {}
        self._current_device: Optional[str] = None
        self._last_update_time: float = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        self.device_priorities = config.get('device_priorities', {})
        self.virtual_device_keywords = config.get('virtual_device_keywords', ['blackhole', 'loopback', 'virtual'])
        self.exclude_virtual_devices = config.get('exclude_virtual_devices', True)
        
        # Callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._callbacks: List[Callable] = []
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π
        self._lock = threading.RLock()
        
        # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._initialized = False
        
        # RealtimeDeviceMonitor –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self._realtime_monitor = None
        
        logger.info("üéµ UnifiedAudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            with self._lock:
                logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedAudioSystem...")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                self._force_refresh_devices()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self._auto_select_best_device()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RealtimeDeviceMonitor
                self._init_realtime_monitor()
                
                self._initialized = True
                logger.info("‚úÖ UnifiedAudioSystem —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UnifiedAudioSystem: {e}")
            return False
    
    def _init_realtime_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RealtimeDeviceMonitor"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RealtimeDeviceMonitor...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RealtimeDeviceMonitor
            self._realtime_monitor = get_global_realtime_monitor()
            
            # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self._realtime_monitor.add_callback(self._on_device_event)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._realtime_monitor.start_monitoring()
            
            logger.info("‚úÖ RealtimeDeviceMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RealtimeDeviceMonitor: {e}")
    
    def _on_device_event(self, event: DeviceEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç RealtimeDeviceMonitor"""
        try:
            logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç RealtimeDeviceMonitor: {event.event_type.value} - {event.device_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self._force_refresh_devices()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞—à–∏ callbacks
            self._notify_callbacks(event.event_type.value, {
                'device_name': event.device_name,
                'timestamp': event.timestamp,
                'previous_devices': list(event.previous_devices),
                'current_devices': list(event.current_devices)
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def _force_refresh_devices(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º SwitchAudioSource
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SwitchAudioSource...")
            time.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ SwitchAudioSource
            result = subprocess.run([self.switch_audio_path, '-a'],
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {result.stderr}")
                return
            
            device_names = [line.strip() for line in result.stdout.strip().split('\n') if line.strip()]
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π)
            time.sleep(0.3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            current_result = subprocess.run([self.switch_audio_path, '-c'],
                                          capture_output=True, text=True, timeout=5)
            current_device = current_result.stdout.strip() if current_result.returncode == 0 else None
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            if current_device and current_device not in device_names:
                logger.warning(f"‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{current_device}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                real_devices = [name for name in device_names 
                              if not self._is_virtual_device(name) 
                              and 'microphone' not in name.lower()]
                
                if real_devices:
                    current_device = real_devices[0]
                    logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    subprocess.run([self.switch_audio_path, '-s', current_device],
                                 capture_output=True, text=True, timeout=5)
                    subprocess.run([self.switch_audio_path, '-i', current_device],
                                 capture_output=True, text=True, timeout=5)
                    
                    time.sleep(0.5)  # –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                else:
                    logger.error("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                    current_device = None
            
            # 3. –ü–æ–ª—É—á–∞–µ–º PortAudio —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            portaudio_devices = sd.query_devices()
            
            # 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
            self._devices_cache.clear()
            
            # 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—ç—à
            for device_name in device_names:
                device_info = self._create_device_info(device_name, current_device, portaudio_devices)
                self._devices_cache[device_name] = device_info
            
            self._current_device = current_device
            self._last_update_time = time.time()
            
            logger.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self._devices_cache)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            logger.info(f"üéß –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_device}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            for name, info in self._devices_cache.items():
                status = "üéß –¢–ï–ö–£–©–ï–ï" if info.is_default else "  "
                virtual_mark = "üîß –í–ò–†–¢–£–ê–õ–¨–ù–û–ï" if info.device_type == DeviceType.VIRTUAL else ""
                logger.info(f"{status} {name} (—Ç–∏–ø: {info.device_type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {info.priority}) {virtual_mark}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def _create_device_info(self, device_name: str, current_device: Optional[str], portaudio_devices) -> DeviceInfo:
        """–°–æ–∑–¥–∞–µ—Ç DeviceInfo –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_type = self._classify_device_type(device_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority = self._get_device_priority(device_name, device_type)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º PortAudio –∏–Ω–¥–µ–∫—Å—ã
        output_index, input_index = self._find_portaudio_indices(device_name, portaudio_devices)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ–∫—É—â–∏–º
        is_default = (device_name == current_device)
        
        return DeviceInfo(
            name=device_name,
            device_type=device_type,
            priority=priority,
            is_default=is_default,
            portaudio_output_index=output_index,
            portaudio_input_index=input_index,
            is_connected=True
        )
    
    def _classify_device_type(self, device_name: str) -> DeviceType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        name_lower = device_name.lower()
        
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if any(keyword in name_lower for keyword in self.virtual_device_keywords):
            return DeviceType.VIRTUAL
        
        # AirPods
        if 'airpods' in name_lower or 'airpods pro' in name_lower:
            return DeviceType.AIRPODS
        
        # Beats
        if 'beats' in name_lower:
            return DeviceType.BEATS
        
        # Bluetooth –Ω–∞—É—à–Ω–∏–∫–∏
        if any(keyword in name_lower for keyword in ['bluetooth', 'wireless', 'bt']):
            if any(keyword in name_lower for keyword in ['headphone', 'earphone', 'bud']):
                return DeviceType.BLUETOOTH_HEADPHONES
        
        # USB –Ω–∞—É—à–Ω–∏–∫–∏
        if 'usb' in name_lower and any(keyword in name_lower for keyword in ['headphone', 'earphone']):
            return DeviceType.USB_HEADPHONES
        
        # –ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã
        if 'microphone' in name_lower or 'mic' in name_lower:
            return DeviceType.MICROPHONE
        
        # –î–∏–Ω–∞–º–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        return DeviceType.SPEAKERS
    
    def _get_device_priority(self, device_name: str, device_type: DeviceType) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if device_type == DeviceType.VIRTUAL:
            return 1
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        type_name = device_type.value
        return self.device_priorities.get(type_name, 50)
    
    def _find_portaudio_indices(self, device_name: str, portaudio_devices) -> Tuple[Optional[int], Optional[int]]:
        """–ù–∞—Ö–æ–¥–∏—Ç PortAudio –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        output_index = None
        input_index = None
        
        for i, dev in enumerate(portaudio_devices):
            name = dev.get('name', 'Unknown')
            if name == device_name:
                if dev.get('max_output_channels', 0) > 0:
                    output_index = i
                if dev.get('max_input_channels', 0) > 0:
                    input_index = i
        
        return output_index, input_index
    
    def _auto_select_best_device(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            available_devices = self.get_available_devices()
            if not available_devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            real_devices = [d for d in available_devices 
                          if not self._is_virtual_device(d.name) 
                          and d.device_type != DeviceType.MICROPHONE
                          and 'microphone' not in d.name.lower()]
            
            if not real_devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            best_device = max(real_devices, key=lambda d: d.priority)
            
            if best_device.name != self._current_device:
                logger.info(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {best_device.name}")
                self.switch_to_device(best_device.name)
            else:
                logger.info(f"‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def switch_to_device(self, device_name: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
        –≠—Ç–æ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ!
        """
        try:
            with self._lock:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if device_name not in self._devices_cache:
                    logger.error(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {device_name}")
                    return False
                
                device_info = self._devices_cache[device_name]
                
                # 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º OUTPUT (–¥–∏–Ω–∞–º–∏–∫–∏)
                result_output = subprocess.run([self.switch_audio_path, '-s', device_name],
                                             capture_output=True, text=True, timeout=10)
                
                if result_output.returncode != 0:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è OUTPUT: {result_output.stderr}")
                    return False
                
                logger.info(f"‚úÖ OUTPUT –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {device_name}")
                
                # 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º INPUT (–º–∏–∫—Ä–æ—Ñ–æ–Ω)
                result_input = subprocess.run([self.switch_audio_path, '-i', device_name],
                                            capture_output=True, text=True, timeout=10)
                
                if result_input.returncode != 0:
                    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AirPods)
                    if 'airpods' in device_name.lower():
                        logger.info(f"‚ÑπÔ∏è AirPods –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç INPUT –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SwitchAudioSource")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å INPUT: {result_input.stderr}")
                else:
                    logger.info(f"‚úÖ INPUT –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {device_name}")
                
                # 3. –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
                logger.info("‚è≥ –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã...")
                time.sleep(1.5)
                
                # 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PortAudio
                self._refresh_portaudio()
                
                # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                time.sleep(0.5)
                
                # 5. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self._force_refresh_devices()
                
                # 6. –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks
                self._notify_callbacks('device_switched', {
                    'device_name': device_name,
                    'device_info': device_info
                })
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {device_name}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def _refresh_portaudio(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç PortAudio"""
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PortAudio...")
            sd._terminate()
            time.sleep(0.5)
            sd._initialize()
            logger.info("‚úÖ PortAudio –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PortAudio: {e}")
    
    def handle_device_removed(self, removed_devices: Set[str]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        
        –≠—Ç–æ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤!
        """
        try:
            with self._lock:
                logger.info(f"üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {list(removed_devices)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                current_removed = False
                for device_name in removed_devices:
                    if device_name == self._current_device:
                        current_removed = True
                        break
                
                if current_removed:
                    logger.info(f"üîÑ –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {self._current_device}")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    self._force_refresh_devices()
                    
                    # –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                    time.sleep(2.0)
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    self._auto_select_best_device()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks
                for device_name in removed_devices:
                    self._notify_callbacks('device_removed', {
                        'device_name': device_name
                    })
                
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def handle_device_added(self, added_devices: Set[str]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        
        –≠—Ç–æ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤!
        """
        try:
            with self._lock:
                logger.info(f"üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {list(added_devices)}")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self._force_refresh_devices()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                for device_name in added_devices:
                    if device_name in self._devices_cache:
                        device_info = self._devices_cache[device_name]
                        if device_info.priority >= 85:  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
                            self.switch_to_device(device_name)
                            break
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks
                for device_name in added_devices:
                    self._notify_callbacks('device_added', {
                        'device_name': device_name
                    })
                
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    # === –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º ===
    
    def get_current_device(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        return self._current_device
    
    def get_current_device_info(self) -> Optional[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        if self._current_device and self._current_device in self._devices_cache:
            return self._devices_cache[self._current_device]
        return None
    
    def get_available_devices(self) -> List[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        return list(self._devices_cache.values())
    
    def get_device_info(self, device_name: str) -> Optional[DeviceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        return self._devices_cache.get(device_name)
    
    def _is_virtual_device(self, device_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º"""
        name_lower = device_name.lower()
        return any(keyword in name_lower for keyword in self.virtual_device_keywords)
    
    def add_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self._callbacks.append(callback)
    
    def _notify_callbacks(self, event_type: str, data: Dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ callbacks"""
        for callback in self._callbacks:
            try:
                callback(event_type, data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
    
    def get_portaudio_indices(self) -> Tuple[Optional[int], Optional[int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ PortAudio –∏–Ω–¥–µ–∫—Å—ã"""
        current_info = self.get_current_device_info()
        if current_info:
            return current_info.portaudio_output_index, current_info.portaudio_input_index
        return None, None
    
    def refresh_devices(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        with self._lock:
            self._force_refresh_devices()
    
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞"""
        return self._initialized
    
    @property
    def running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AudioPlayer)"""
        return self._initialized and (self._realtime_monitor is not None and self._realtime_monitor.is_monitoring())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem
_global_unified_audio_system = None

def get_global_unified_audio_system(config: Optional[Dict] = None) -> UnifiedAudioSystem:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem"""
    global _global_unified_audio_system
    
    if _global_unified_audio_system is None and config:
        _global_unified_audio_system = UnifiedAudioSystem(config)
        _global_unified_audio_system.initialize()
    
    return _global_unified_audio_system

def stop_global_unified_audio_system():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedAudioSystem"""
    global _global_unified_audio_system
    _global_unified_audio_system = None
