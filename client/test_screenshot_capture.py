#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è screenshot_capture
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞ macOS
"""

import asyncio
import logging
import sys
import os
import time
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from screenshot_capture import (
    ScreenshotCapture, ScreenshotConfig, ScreenshotFormat, 
    ScreenshotQuality, ScreenshotRegion, get_global_capture
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ScreenshotCaptureTester:
    """–¢–µ—Å—Ç–µ—Ä –º–æ–¥—É–ª—è screenshot_capture"""
    
    def __init__(self):
        self.capture = None
        self.test_results = {}
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—Ö–≤–∞—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            config = ScreenshotConfig(
                format=ScreenshotFormat.JPEG,
                quality=ScreenshotQuality.MEDIUM,
                region=ScreenshotRegion.FULL_SCREEN,
                max_width=1280,
                max_height=720,
                timeout=10.0
            )
            
            self.capture = ScreenshotCapture(config)
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False
    
    async def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è"""
        logger.info("üß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è")
        
        try:
            assert self.capture is not None, "–ó–∞—Ö–≤–∞—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
            assert self.capture._initialized == True, "–ó–∞—Ö–≤–∞—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = self.capture.get_status()
            assert status["initialized"] == True, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"
            assert status["bridge_available"] == True, "Bridge –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
            
            self.test_results["initialization"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.test_results["initialization"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_screen_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Ä–∞–Ω–µ"""
        logger.info("üß™ –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ")
        
        try:
            screen_info = self.capture.get_screen_info()
            
            assert screen_info is not None, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞"
            assert screen_info.width > 0, "–®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            assert screen_info.height > 0, "–í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            
            logger.info(f"üì∫ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: {screen_info.width}x{screen_info.height}")
            logger.info(f"üì∫ –ú–∞—Å—à—Ç–∞–±: {screen_info.scale_factor}")
            logger.info(f"üì∫ –ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞: {screen_info.color_depth} –±–∏—Ç")
            
            self.test_results["screen_info"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
            
        except Exception as e:
            self.test_results["screen_info"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_capture_capability(self):
        """–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ö–≤–∞—Ç–∞"""
        logger.info("üß™ –¢–µ—Å—Ç 3: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞")
        
        try:
            can_capture = await self.capture.test_capture()
            
            assert isinstance(can_capture, bool), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean"
            
            if can_capture:
                logger.info("‚úÖ –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–æ–∑–º–æ–∂–µ–Ω")
                self.test_results["capture_capability"] = "‚úÖ PASSED"
            else:
                logger.warning("‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)")
                self.test_results["capture_capability"] = "‚ö†Ô∏è NO_PERMISSION"
            
        except Exception as e:
            self.test_results["capture_capability"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_full_screen_capture(self):
        """–¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        logger.info("üß™ –¢–µ—Å—Ç 4: –ó–∞—Ö–≤–∞—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞")
        
        try:
            start_time = time.time()
            result = await self.capture.capture_screenshot()
            capture_time = time.time() - start_time
            
            assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω"
            
            if result.success:
                assert result.data is not None, "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã"
                assert result.data.base64_data is not None, "Base64 –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã"
                assert len(result.data.base64_data) > 0, "Base64 –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
                assert result.data.format == ScreenshotFormat.JPEG, "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JPEG"
                assert result.data.mime_type == "image/jpeg", "MIME —Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å image/jpeg"
                
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω: {result.data.width}x{result.data.height}")
                logger.info(f"üì∏ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(result.data.base64_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üì∏ –í—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞: {capture_time:.2f} —Å–µ–∫—É–Ω–¥")
                
                self.test_results["full_screen_capture"] = "‚úÖ PASSED"
                logger.info("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞—Ö–≤–∞—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            else:
                logger.warning(f"‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–µ—É–¥–∞—á–µ–Ω: {result.error}")
                self.test_results["full_screen_capture"] = f"‚ö†Ô∏è FAILED: {result.error}"
                
        except Exception as e:
            self.test_results["full_screen_capture"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_region_capture(self):
        """–¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 5: –ó–∞—Ö–≤–∞—Ç –æ–±–ª–∞—Å—Ç–∏")
        
        try:
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å 800x600 –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
            screen_info = self.capture.get_screen_info()
            center_x = screen_info.width // 2
            center_y = screen_info.height // 2
            region = (center_x - 400, center_y - 300, 800, 600)
            
            start_time = time.time()
            result = await self.capture.capture_region(region)
            capture_time = time.time() - start_time
            
            assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω"
            
            if result.success:
                assert result.data is not None, "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã"
                assert result.data.width == 800, f"–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 800, –ø–æ–ª—É—á–µ–Ω–æ {result.data.width}"
                assert result.data.height == 600, f"–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 600, –ø–æ–ª—É—á–µ–Ω–æ {result.data.height}"
                
                logger.info(f"üì∏ –û–±–ª–∞—Å—Ç—å –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {result.data.width}x{result.data.height}")
                logger.info(f"üì∏ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(result.data.base64_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üì∏ –í—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞: {capture_time:.2f} —Å–µ–∫—É–Ω–¥")
                
                self.test_results["region_capture"] = "‚úÖ PASSED"
                logger.info("‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞—Ö–≤–∞—Ç –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            else:
                logger.warning(f"‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—É–¥–∞—á–µ–Ω: {result.error}")
                self.test_results["region_capture"] = f"‚ö†Ô∏è FAILED: {result.error}"
                
        except Exception as e:
            self.test_results["region_capture"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 5 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_jpeg_qualities(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ JPEG"""
        logger.info("üß™ –¢–µ—Å—Ç 6: –†–∞–∑–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ JPEG")
        
        try:
            qualities_to_test = [
                ScreenshotQuality.LOW,
                ScreenshotQuality.MEDIUM,
                ScreenshotQuality.HIGH,
                ScreenshotQuality.MAXIMUM
            ]
            
            for quality in qualities_to_test:
                config = ScreenshotConfig(
                    format=ScreenshotFormat.JPEG,
                    quality=quality,
                    region=ScreenshotRegion.FULL_SCREEN,
                    max_width=640,
                    max_height=480
                )
                
                result = await self.capture.capture_screenshot(config)
                
                if result.success:
                    assert result.data.format == ScreenshotFormat.JPEG, "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JPEG"
                    assert result.data.mime_type == "image/jpeg", "MIME —Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å image/jpeg"
                    logger.info(f"‚úÖ JPEG {quality.value.upper()}: {len(result.data.base64_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è JPEG {quality.value.upper()}: {result.error}")
            
            self.test_results["jpeg_qualities"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –†–∞–∑–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ JPEG —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        except Exception as e:
            self.test_results["jpeg_qualities"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 6 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_global_capture(self):
        """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç—á–∏–∫–∞"""
        logger.info("üß™ –¢–µ—Å—Ç 7: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫
            global_capture = get_global_capture()
            
            assert global_capture is not None, "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
            assert global_capture._initialized == True, "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫
            result = await global_capture.capture_screenshot()
            
            if result.success:
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.test_results["global_capture"] = "‚úÖ PASSED"
            else:
                logger.warning(f"‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫: {result.error}")
                self.test_results["global_capture"] = f"‚ö†Ô∏è FAILED: {result.error}"
            
        except Exception as e:
            self.test_results["global_capture"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 7 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "="*60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SCREENSHOT_CAPTURE")
        logger.info("="*60)
        
        for test_name, result in self.test_results.items():
            logger.info(f"{test_name.replace('_', ' ').title()}: {result}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result.startswith("‚úÖ"))
        failed_tests = sum(1 for result in self.test_results.values() if result.startswith("‚ùå"))
        warning_tests = sum(1 for result in self.test_results.values() if result.startswith("‚ö†Ô∏è"))
        
        logger.info("-"*60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_tests}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            logger.warning(f"‚ö†Ô∏è {failed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        logger.info("="*60)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.capture:
            self.capture.cleanup()
            logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è screenshot_capture...")
        
        if not await self.setup():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            await self.test_initialization()
            await self.test_screen_info()
            await self.test_capture_capability()
            await self.test_full_screen_capture()
            await self.test_region_capture()
            await self.test_jpeg_qualities()
            await self.test_global_capture()
            
        finally:
            await self.cleanup()
        
        self.print_results()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ScreenshotCaptureTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
