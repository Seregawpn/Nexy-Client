#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
–°–≤—è–∑—ã–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π CoreAudio —Å –º–æ–Ω–∏—Ç–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import logging
import time
import sys
from pathlib import Path
from Foundation import NSRunLoop, NSDefaultRunLoopMode, NSDate

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from macos_coreaudio_listener import start_listening, stop_listening
from ideal_audio_monitor_v2 import IdealAudioMonitorV2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AudioDeviceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π."""
    
    def __init__(self):
        self.monitor = None
        self.listener_loop = None
        self.is_running = False
        self.events_received = []
        
        logger.info("üéØ AudioDeviceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def on_audio_change(self, **payload):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        logger.info("üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ê–£–î–ò–û–£–°–¢–†–û–ô–°–¢–í:")
        
        changes = payload.get('changes', {})
        active_headphones = payload.get('active_headphones')
        active_speakers = payload.get('active_speakers')
        system_default = payload.get('system_default')
        all_devices = payload.get('all_devices', [])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for change_type, changed in changes.items():
            if changed:
                logger.info(f"   ‚úÖ {change_type}: –î–ê")
            else:
                logger.info(f"   ‚ùå {change_type}: –ù–ï–¢")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if active_headphones:
            logger.info(f"   üéß –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏: {active_headphones.name} (UID: {active_headphones.device_uid})")
        else:
            logger.info(f"   üéß –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏: –ù–ï –ù–ê–ô–î–ï–ù–´")
        
        if active_speakers:
            logger.info(f"   üì± –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏: {active_speakers.name} (UID: {active_speakers.device_uid})")
        else:
            logger.info(f"   üì± –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏: –ù–ï –ù–ê–ô–î–ï–ù–´")
        
        if system_default:
            logger.info(f"   üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π default: {system_default.name} (UID: {system_default.device_uid})")
        else:
            logger.info(f"   üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π default: –ù–ï –ù–ê–ô–î–ï–ù")
        
        logger.info(f"   üìä –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(all_devices)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.events_received.append({
            'timestamp': time.time(),
            'changes': changes,
            'active_headphones': active_headphones.name if active_headphones else None,
            'active_speakers': active_speakers.name if active_speakers else None,
            'system_default': system_default.name if system_default else None
        })
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä–∞
        self._handle_audio_switch(changes, active_headphones, active_speakers, system_default)
    
    def _handle_audio_switch(self, changes, active_headphones, active_speakers, system_default):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            priority_device = active_headphones or active_speakers or system_default
            
            if priority_device:
                logger.info(f"üéØ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {priority_device.name}")
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É:
                # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                # 2. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
                # 3. –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                
                if changes.get('headphones_connected'):
                    logger.info("üéß –ù–∞—É—à–Ω–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–∏—Ö")
                elif changes.get('headphones_disconnected'):
                    logger.info("üéß –ù–∞—É—à–Ω–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–∏–Ω–∞–º–∏–∫–∏")
                elif changes.get('system_default_changed'):
                    logger.info("üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–π default –∏–∑–º–µ–Ω–∏–ª—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        logger.info("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ê–£–î–ò–û–£–°–¢–†–û–ô–°–¢–í")
        logger.info("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
            logger.info("üì± –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            self.monitor = IdealAudioMonitorV2(callback=self.on_audio_change, logger=logger)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            self.monitor.start_monitoring()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            logger.info("üéß –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
            self.listener_loop = start_listening(self.monitor.on_system_event)
            
            if not self.listener_loop:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
                self.stop()
                return False
            
            self.is_running = True
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info("")
            logger.info("üéß –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            logger.info("   1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏")
            logger.info("   2. –û—Ç–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏")
            logger.info("   3. –ò–∑–º–µ–Ω–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            logger.info("   4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            logger.info("")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.stop()
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        if not self.is_running:
            logger.info("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        logger.info("üõë –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        logger.info("=" * 40)
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
            if self.listener_loop:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
                stop_listening()
                self.listener_loop = None
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
            if self.monitor:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
                self.monitor.stop_monitoring()
                self.monitor = None
            
            self.is_running = False
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._show_statistics()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def _show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´:")
        logger.info(f"   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(self.events_received)}")
        
        if self.events_received:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º
            event_types = {}
            for event in self.events_received:
                for change_type, changed in event['changes'].items():
                    if changed:
                        event_types[change_type] = event_types.get(change_type, 0) + 1
            
            logger.info("   –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:")
            for event_type, count in event_types.items():
                logger.info(f"     {event_type}: {count} —Ä–∞–∑")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            logger.info("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
            for i, event in enumerate(self.events_received[-3:], 1):
                timestamp = time.strftime("%H:%M:%S", time.localtime(event['timestamp']))
                changes = [k for k, v in event['changes'].items() if v]
                logger.info(f"     {i}. {timestamp}: {', '.join(changes)}")
        else:
            logger.warning("   ‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
    
    def run_interactive(self, duration=60):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
        if not self.start():
            return False
        
        try:
            logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
            logger.info("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            start_time = time.time()
            while time.time() - start_time < duration:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ RunLoop
                if self.listener_loop:
                    self.listener_loop.runMode_beforeDate_(NSDefaultRunLoopMode, NSDate.dateWithTimeIntervalSinceNow_(0.1))
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C...")
        
        finally:
            self.stop()
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã."""
    logger.info("üéØ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ê–£–î–ò–û–£–°–¢–†–û–ô–°–¢–í")
    logger.info("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = AudioDeviceManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    success = manager.run_interactive(duration=60)
    
    if success:
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return success

if __name__ == "__main__":
    main()
