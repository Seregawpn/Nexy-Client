import pyaudio
import numpy as np
import speech_recognition as sr
import threading
import time
from rich.console import Console

console = Console()

class StreamRecognizer:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ —Å push-to-talk –ª–æ–≥–∏–∫–æ–π.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–±–µ–ª–∞.
    """
    
    def __init__(self, sample_rate=16000, chunk_size=1024, channels=1):
        self.sample_rate = sample_rate
        self.chunk_size = chunk_size
        self.channels = channels
        self.format = pyaudio.paInt16
        
        self.audio = pyaudio.PyAudio()
        self.stream = None
        self.is_recording = False
        self.audio_chunks = []
        self.recording_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        self.recognizer = sr.Recognizer()
        
    def start_recording(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞"""
        if self.is_recording:
            return
            
        self.is_recording = True
        self.audio_chunks = []
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
        self.stream = self.audio.open(
            format=self.format,
            channels=self.channels,
            rate=self.sample_rate,
            input=True,
            frames_per_buffer=self.chunk_size
        )
        
        console.print("[bold green]üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...[/bold green]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.recording_thread = threading.Thread(target=self._record_audio)
        self.recording_thread.daemon = True
        self.recording_thread.start()
        
    def stop_recording_and_recognize(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å"""
        if not self.is_recording:
            return None
            
        self.is_recording = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∑–∞–ø–∏—Å–∏
        if self.recording_thread:
            self.recording_thread.join()
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()
            self.stream = None
            
        console.print("[bold blue]üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...[/bold blue]")
        
        if not self.audio_chunks:
            console.print("[yellow]‚ö†Ô∏è –ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∞—É–¥–∏–æ[/yellow]")
            return None
            
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≤ –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç
            audio_data = np.concatenate(self.audio_chunks)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è SpeechRecognition
            audio_bytes = audio_data.tobytes()
            
            # –°–æ–∑–¥–∞–µ–º AudioData –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            audio = sr.AudioData(audio_bytes, self.sample_rate, 2)  # 2 bytes per sample
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = self.recognizer.recognize_google(audio, language='ru-RU')
            console.print(f"[bold magenta]‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}[/bold magenta]")
            return text
            
        except sr.UnknownValueError:
            console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å[/red]")
            return None
        except sr.RequestError as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}[/red]")
            return None
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}[/red]")
            return None
            
    def _record_audio(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            while self.is_recording:
                if self.stream and self.stream.is_active():
                    # –ß–∏—Ç–∞–µ–º —á–∞–Ω–∫ –∞—É–¥–∏–æ
                    data = self.stream.read(self.chunk_size, exception_on_overflow=False)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
                    audio_chunk = np.frombuffer(data, dtype=np.int16)
                    self.audio_chunks.append(audio_chunk)
                    
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}[/red]")
            
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()
        if self.audio:
            self.audio.terminate()

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def listen_for_command(lang: str = 'ru-RU') -> str | None:
    """
    –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ StreamRecognizer –¥–ª—è push-to-talk.
    """
    r = sr.Recognizer()
    with sr.Microphone() as source:
        console.print("[bold cyan]–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ–¥ –æ–∫—Ä—É–∂–∞—é—â–∏–π —à—É–º...[/bold cyan]")
        r.adjust_for_ambient_noise(source, duration=1)
        
        console.print("[bold green]–°–ª—É—à–∞—é...[/bold green]")
        try:
            audio = r.listen(source, timeout=5, phrase_time_limit=15)
        except sr.WaitTimeoutError:
            console.print("[yellow]–ù–µ –±—ã–ª–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã.[/yellow]")
            return None

    try:
        console.print("[bold blue]–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...[/bold blue]")
        text = r.recognize_google(audio, language=lang)
        console.print(f"[bold magenta]–í—ã —Å–∫–∞–∑–∞–ª–∏:[/bold magenta] {text}")
        return text
    except sr.UnknownValueError:
        console.print("[red]–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å[/red]")
        return None
    except sr.RequestError as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è; {e}[/red]")
        return None
    except Exception as e:
        console.print(f"[red]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return None

if __name__ == '__main__':
    # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ StreamRecognizer
    recognizer = StreamRecognizer()
    
    try:
        console.print("[bold green]üé§ –¢–µ—Å—Ç push-to-talk —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/bold green]")
        console.print("[yellow]–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª –¥–ª—è –∑–∞–ø–∏—Å–∏...[/yellow]")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞
        recognizer.start_recording()
        time.sleep(3)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞
        text = recognizer.stop_recording_and_recognize()
        
        if text:
            console.print(f"[bold green]‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}[/bold green]")
        else:
            console.print("[yellow]‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/yellow]")
            
    finally:
        recognizer.cleanup()
