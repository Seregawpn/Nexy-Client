import sounddevice as sd
import numpy as np
import speech_recognition as sr
import threading
import time
import os
from rich.console import Console

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FLAC –¥–ª—è Apple Silicon
os.environ['FLAC_PATH'] = '/opt/homebrew/bin/flac'

console = Console()

class StreamRecognizer:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ —Å push-to-talk –ª–æ–≥–∏–∫–æ–π.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–±–µ–ª–∞.
    """
    
    def __init__(self, sample_rate=16000, chunk_size=1024, channels=1):
        self.sample_rate = sample_rate  # 16kHz - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        self.chunk_size = chunk_size
        self.channels = channels
        self.dtype = 'int16'
        
        self.stream = None
        self.is_recording = False
        self.audio_chunks = []
        self.recording_thread = None
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–∏–º–æ–º –∏ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
        self.stream_lock = threading.Lock()
        self.current_input_device = None
        self.device_monitor_thread = None
        self.stop_device_monitor = threading.Event()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 100  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.recognizer.dynamic_energy_threshold = True  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
        self.recognizer.pause_threshold = 0.5  # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ –ø–∞—É–∑—ã
        self.recognizer.phrase_threshold = 0.3  # –ü–æ—Ä–æ–≥ —Ñ—Ä–∞–∑—ã
        self.recognizer.non_speaking_duration = 0.3  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ-—Ä–µ—á–∏
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä (–∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.audio_player = None
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        self._cached_stream_config = None
        self._stream_cache_valid = False
        self._cache_lock = threading.Lock()

    def set_audio_player(self, audio_player):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ AudioPlayer –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."""
        self.audio_player = audio_player
    
    def _get_cached_stream_config(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é STT –ø–æ—Ç–æ–∫–∞"""
        with self._cache_lock:
            if self._stream_cache_valid and self._cached_stream_config:
                return self._cached_stream_config.copy()
            return None
    
    def _cache_stream_config(self, config):
        """–ö—ç—à–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é STT –ø–æ—Ç–æ–∫–∞"""
        with self._cache_lock:
            self._cached_stream_config = config.copy()
            self._stream_cache_valid = True
    
    def _invalidate_stream_cache(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à STT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with self._cache_lock:
            self._stream_cache_valid = False
            self._cached_stream_config = None
    
    def _start_recording_with_config(self, config):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            with self.stream_lock:
                self.stream = sd.InputStream(
                    device=config.get('device'),
                    channels=config.get('channels', self.channels),
                    samplerate=config.get('samplerate', self.sample_rate),
                    dtype=config.get('dtype', self.dtype),
                    callback=lambda indata, frames, time_info, status: self._input_callback_proxy(indata, frames, status),
                    blocksize=self.chunk_size
                )
                self.stream.start()
            
            console.print(f"[dim]‚ö° STT –∑–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π[/dim]")
            console.print(f"[dim]üéôÔ∏è start_recording: input={config.get('device_name', 'Unknown')} (index={config.get('device')})[/dim]")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ STT: {e}[/red]")
            raise
    
    def prepare_for_recording(self):
        """–£–º–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø–∏—Å–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç."""
        try:
            ap = getattr(self, 'audio_player', None)
            if ap and hasattr(ap, 'is_playing') and ap.is_playing:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç
                logger.info("üé§ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏")
                ap.stop_playback()
            else:
                logger.debug("üé§ –ü–ª–µ–µ—Ä —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∑–∞–ø–∏—Å–∏: {e}")
        
    def start_recording(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ö–†–ò–¢–ò–ß–ù–û: –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º - —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å
        if self.is_recording:
            console.print("[yellow]‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç - —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â—É—é...[/yellow]")
            self.stop_recording_and_recognize()
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(0.05)
            
        self.is_recording = True
        self.audio_chunks = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        cached_config = self._get_cached_stream_config()
        if cached_config:
            console.print("[dim]‚ö° –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é STT –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞[/dim]")
            try:
                self._start_recording_with_config(cached_config)
                return
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π STT: {e}[/yellow]")
                self._invalidate_stream_cache()
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —Å–Ω–∏–º–æ–∫ CoreAudio (default + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
        try:
            import sounddevice as _sd
            hostapis = _sd.query_hostapis()
            core_idx = next((i for i,a in enumerate(hostapis) if 'core' in (a.get('name','').lower())), 0)
            api = _sd.query_hostapis(core_idx)
            din = api.get('default_input_device', -1)
            dout = api.get('default_output_device', -1)
            devs = _sd.query_devices()
            devs_count = sum(1 for d in devs if (d.get('max_input_channels',0)>0 or d.get('max_output_channels',0)>0))
            console.print(f"[dim]üß™ Snapshot @start_recording: din={None if din==-1 else din} dout={None if dout==-1 else dout} devices={devs_count}[/dim]")
        except Exception:
            pass

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–π default
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é bluetooth_policy –∏ follow_system_default
        settle_ms = int(getattr(self, 'config', {}).get('settle_ms', 400))
        retries = int(getattr(self, 'config', {}).get('retries', 3))
        bt_policy = getattr(self, 'config', {}).get('bluetooth_policy', 'prefer_quality')

        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º input
        console.print("[dim]üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...[/dim]")
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è "—á–∏—Å—Ç–æ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è
            sd.stop()
            time.sleep(0.1)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            devices = sd.query_devices()
            hostapis = sd.query_hostapis()
            core_idx = next((i for i, a in enumerate(hostapis) if 'core' in (a.get('name','').lower())), 0)
            api = sd.query_hostapis(core_idx)
            current_default_in = api.get('default_input_device', -1)
            
            console.print(f"[dim]üì± –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤[/dim]")
            console.print(f"[dim]üéôÔ∏è –¢–µ–∫—É—â–∏–π default input: {current_default_in}[/dim]")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ input)
            for i, dev in enumerate(devices):
                name = dev.get('name', 'Unknown')
                in_ch = dev.get('max_input_channels', 0)
                out_ch = dev.get('max_output_channels', 0)
                if in_ch > 0 or out_ch > 0:
                    console.print(f"[dim]  üì± {i}: {name} (in:{in_ch} out:{out_ch})[/dim]")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ñ–æ–ª—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            if current_default_in != -1 and current_default_in < len(devices):
                default_in_name = devices[current_default_in].get('name', 'Unknown')
                console.print(f"[dim]üéôÔ∏è Default input: {current_default_in} ‚Äî {default_in_name}[/dim]")
            else:
                console.print(f"[yellow]‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π default input: {current_default_in}[/yellow]")
                
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}[/yellow]")

        # –ï—Å–ª–∏ –µ—Å—Ç—å listener —Å –∫—ç—à–µ–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        input_device = None
        try:
            ca_listener = getattr(self, 'default_listener', None)
            if ca_listener is not None and hasattr(ca_listener, 'get_default_input'):
                input_device = ca_listener.get_default_input()
        except Exception:
            input_device = None
        if input_device is None:
            input_device = self._resolve_input_device()
        # –ï—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ default output = AirPods, —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω
        if bt_policy == 'prefer_quality':
            try:
                default = sd.default.device
                if isinstance(default, (list, tuple)) and len(default) >= 2:
                    out_idx = default[1]
                    if out_idx is not None and out_idx != -1:
                        info_out = sd.query_devices(out_idx)
                        name_out = (info_out.get('name') or '').lower()
                        if 'airpods' in name_out:
                            # –ò—â–µ–º Built-in Microphone
                            for idx, dev in enumerate(sd.query_devices()):
                                if dev.get('max_input_channels', 0) > 0 and 'built-in' in (dev.get('name','').lower()):
                                    input_device = idx
                                    break
            except Exception:
                pass
        elif bt_policy == 'strict_default':
            # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º —Å–∏—Å—Ç–µ–º–Ω—ã–π default input (–≤–∫–ª—é—á–∞—è AirPods)
            pass
        self.current_input_device = input_device

        # Callback –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤
        def _callback(indata, frames, time_info, status):
            if status:
                console.print(f"[yellow]‚ö†Ô∏è Sounddevice status: {status}[/yellow]")
            if self.is_recording:
                if self.channels == 1:
                    chunk = indata.copy().reshape(-1)
                else:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–æ
                    chunk = indata.copy()[:, 0]
                self.audio_chunks.append(chunk.astype(np.int16))

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ sounddevice —Å —Ä–µ—Ç—Ä–∞—è–º–∏ (–Ω–∞ —Å–ª—É—á–∞–π BT-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π)
        # –ü—Ä–µ–¥–æ—á–∏—Å—Ç–∫–∞, —á—Ç–æ–±—ã CoreAudio –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª –Ω–æ–≤—ã–π default
        try:
            if bool(getattr(self, 'config', {}).get('preflush_on_switch', True)):
                if self.stream:
                    try:
                        self.stream.stop()
                        self.stream.close()
                    except Exception:
                        pass
                    self.stream = None
                sd.stop()
                time.sleep(max(0.05, settle_ms/1000.0))
        except Exception:
            pass

        # –í–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ,
        # –µ—Å–ª–∏ –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —É main/state_manager (–ª–µ–Ω–∏–≤–æ —á–µ—Ä–µ–∑ import –∏ getattr)
        try:
            ap = getattr(self, 'audio_player', None)
            # –°–ù–ê–ß–ê–õ–ê —Ç–æ–ª—å–∫–æ –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
            if ap and hasattr(ap, 'is_playing') and ap.is_playing and hasattr(ap, 'stop_playback'):
                ap.stop_playback()
        except Exception:
            pass

        last_err = None
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å device info –∏ –µ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
        def_sr = None
        try:
            if input_device is not None:
                def_sr = int(round(sd.query_devices(input_device).get('default_samplerate')))
        except Exception:
            def_sr = None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ—Ç —Å —É—á—ë—Ç–æ–º HFP —É –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (AirPods –∏ —Ç.–ø.)
        sample_rates = []
        hfp_in = False
        try:
            if input_device is not None:
                in_info = sd.query_devices(input_device)
                name_l = (in_info.get('name') or '').lower()
                max_in_ch = int(in_info.get('max_input_channels') or 0)
                def_sr_in = int(round(in_info.get('default_samplerate') or 0))
                if any(t in name_l for t in ['airpods', 'hands-free', 'handsfree', 'hfp', 'hsp']) or max_in_ch <= 1 or def_sr_in <= 16000:
                    hfp_in = True
        except Exception:
            pass

        # –ü—Ä–∏ HFP —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º 16000/8000
        if hfp_in:
            for sr in [16000, 8000]:
                if sr not in sample_rates:
                    sample_rates.append(sr)

        if def_sr and def_sr not in sample_rates:
            sample_rates.append(def_sr)
        for sr in [self.sample_rate, 48000, 44100, 32000, 22050, 16000, 12000, 11025, 8000]:
            if sr not in sample_rates:
                sample_rates.append(sr)

        # –ï—â—ë —Ä–∞–∑ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º CoreAudio default input –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        try:
            hostapis = sd.query_hostapis()
            core_idx = next((i for i,a in enumerate(hostapis) if 'core' in (a.get('name','').lower())), 0)
            api = sd.query_hostapis(core_idx)
            din = api.get('default_input_device', -1)
            dout = api.get('default_output_device', -1)
            if din is not None and din != -1:
                input_device = din
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–±–æ—Ä input
            try:
                info_in = sd.query_devices(input_device) if input_device not in (None, -1) else None
                console.print(f"[blue]üéôÔ∏è start_recording: input={info_in['name'] if info_in else 'System Default'} (index={input_device})[/blue]")
            except Exception:
                pass
        except Exception:
            pass

        for attempt in range(max(1, retries)):
            # 1) –ü—ã—Ç–∞–µ–º—Å—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–µ–≤–∞–π—Å–∞
            for sr in sample_rates:
                try:
                    with self.stream_lock:
                        self.stream = sd.InputStream(
                            channels=self.channels,
                            samplerate=sr,
                            dtype=self.dtype,
                            blocksize=self.chunk_size,
                            device=input_device,
                            callback=_callback,
                        )
                        self.stream.start()
                    last_err = None
                    self.sample_rate = sr
                    break
                except Exception as e:
                    last_err = e
            if last_err is None:
                break
            # 2) –ü—Ä–æ–±—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø—É—Å—Ç—å CoreAudio –≤—ã–±–µ—Ä–µ—Ç default)
            for sr in sample_rates:
                try:
                    with self.stream_lock:
                        self.stream = sd.InputStream(
            channels=self.channels,
                            samplerate=sr,
                            dtype=self.dtype,
                            blocksize=self.chunk_size,
                            device=None,
                            callback=_callback,
                        )
                        self.stream.start()
                    last_err = None
                    self.sample_rate = sr
                    break
                except Exception as e:
                    last_err = e
            if last_err is None:
                break

            time.sleep(max(0.1, settle_ms/1000.0))
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º default input –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            input_device = self._resolve_input_device()

        if last_err is not None:
            # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –Ω–µ –¥–µ–ª–∞–µ–º fallback. –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å
            self.is_recording = False
            console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å InputStream –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º default: {last_err}[/red]")
            return
        
        console.print("[bold green]üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...[/bold green]")
        
        # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if self.stream and hasattr(self.stream, 'channels') and hasattr(self.stream, 'samplerate'):
            config = {
                'device': input_device,
                'channels': self.stream.channels,
                'samplerate': self.stream.samplerate,
                'dtype': self.dtype,
                'device_name': info_in['name'] if info_in else 'System Default'
            }
            self._cache_stream_config(config)
        
        # –ë–æ–ª—å—à–µ –ù–ï –º–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–º–µ–Ω—É –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
        # –í—ã–±–∏—Ä–∞–µ–º default –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
        
    def stop_recording_and_recognize(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å"""
        if not self.is_recording:
            return None
            
        self.is_recording = False
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º ‚Äî –Ω–∏—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
        if self.stream:
            try:
                with self.stream_lock:
                    if self.stream:
                        self.stream.stop()
                        self.stream.close()
                        self.stream = None
                console.print("[blue]üîá –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç[/blue]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞: {e}[/yellow]")
            
        console.print("[bold blue]üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...[/bold blue]")

        # –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Ä—É—á–Ω—É—é ‚Äî –≤—ã–≤–æ–¥–æ–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–π–Ω—ã–π listener
        
        if not self.audio_chunks:
            console.print("[yellow]‚ö†Ô∏è –ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∞—É–¥–∏–æ[/yellow]")
            return None
            
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≤ –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç
            audio_data = np.concatenate(self.audio_chunks)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
            duration = len(audio_data) / self.sample_rate
            console.print(f"[blue]üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫—É–Ω–¥[/blue]")
            
            if duration < 0.5:  # –ú–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫—É–Ω–¥—ã
                console.print("[yellow]‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/yellow]")
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è SpeechRecognition (int16 -> bytes)
            audio_data = audio_data.astype(np.int16)
            audio_bytes = audio_data.tobytes()
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û
            console.print(f"[blue]üîç –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤[/blue]")
            console.print(f"[blue]üîç –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: {audio_data.min():.4f} –¥–æ {audio_data.max():.4f}[/blue]")
            console.print(f"[blue]üîç –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {np.mean(np.abs(audio_data)):.4f}[/blue]")
            console.print(f"[blue]üîç –†–∞–∑–º–µ—Ä –±–∞–π—Ç–æ–≤: {len(audio_bytes)} –±–∞–π—Ç[/blue]")
            
            # –°–æ–∑–¥–∞–µ–º AudioData –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            # paInt16 = 16 –±–∏—Ç = 2 –±–∞–π—Ç–∞ –Ω–∞ —Å—ç–º–ø–ª
            audio = sr.AudioData(audio_bytes, self.sample_rate, 2)  # 2 bytes per sample
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ)
            languages = ['en-US', 'en-GB', 'ru-RU']
            
            for lang in languages:
                try:
                    console.print(f"[blue]üåê –ü—Ä–æ–±—É—é —è–∑—ã–∫: {lang}[/blue]")
                    text = self.recognizer.recognize_google(audio, language=lang)
                    console.print(f"[bold magenta]‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ({lang}): {text}[/bold magenta]")
                    return text
                except sr.UnknownValueError:
                    console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∞ {lang}[/yellow]")
                    continue
                except sr.RequestError as e:
                    console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ {lang}: {e}[/red]")
                    continue
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ (—Ç–æ—Ç –∂–µ –±—É—Ñ–µ—Ä –∫–∞–∫ raw)
            console.print("[blue]üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...[/blue]")
            try:
                raw_audio = b''.join([chunk.astype(np.int16).tobytes() for chunk in self.audio_chunks])
                alternative_audio = sr.AudioData(raw_audio, self.sample_rate, 2)
                for lang in languages:
                    try:
                        console.print(f"[blue]üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥, —è–∑—ã–∫: {lang}[/blue]")
                        text = self.recognizer.recognize_google(alternative_audio, language=lang)
                        console.print(f"[bold magenta]‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º ({lang}): {text}[/bold magenta]")
                        return text
                    except sr.UnknownValueError:
                        continue
                    except sr.RequestError:
                        continue
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}[/yellow]")
            
            # –ï—Å–ª–∏ –≤—Å–µ —è–∑—ã–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ[/red]")
            return None
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}[/red]")
            console.print(f"[red]–î–µ—Ç–∞–ª–∏: {type(e).__name__}: {str(e)}[/red]")
            return None
    
    def force_stop_recording(self):
        """
        –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –ë–ï–ó —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è/–æ—Ç–º–µ–Ω—ã.
        """
        if not self.is_recording:
            return
            
        console.print("[bold red]üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏![/bold red]")
        self.is_recording = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
        if self.stream:
            try:
                self.stream.stop()
                self.stream.close()
                console.print("[bold red]üö® –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω![/bold red]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}[/yellow]")
            finally:
                self.stream = None
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
        self.audio_chunks = []
        console.print("[bold green]‚úÖ –ó–∞–ø–∏—Å—å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞![/bold green]")
            
    def _record_audio(self):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–ø–æ—Ç–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å sounddevice)."""
        pass

    def _resolve_input_device(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π input: —Å–∏—Å—Ç–µ–º–Ω—ã–π default –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ–∑–µ—Ä–≤ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π/–ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)."""
        try:
            # 1) sd.default.device[0]
            default = sd.default.device  # (input, output)
            if isinstance(default, (list, tuple)) and len(default) >= 1:
                default_in = default[0]
                if default_in is not None and default_in != -1:
                    try:
                        info = sd.query_devices(default_in)
                        if info.get('max_input_channels', 0) > 0:
                            console.print(f"[dim]üéôÔ∏è Default input (sd.default): {info.get('name')}[/dim]")
                            return default_in
                    except Exception:
                        pass

            # 2) CoreAudio hostapi default input
            try:
                hostapis = sd.query_hostapis()
                core_audio_idx = None
                for i, api in enumerate(hostapis):
                    if 'core' in (api.get('name','').lower()):
                        core_audio_idx = i
                        break
                if core_audio_idx is None:
                    core_audio_idx = 0
                api = sd.query_hostapis(core_audio_idx)
                d = api.get('default_input_device', -1)
                if d is not None and d != -1:
                    info = sd.query_devices(d)
                    if info.get('max_input_channels', 0) > 0:
                        console.print(f"[dim]üéôÔ∏è Default input (CoreAudio): {info.get('name')}[/dim]")
                        return d
            except Exception:
                pass

            # 3) –†–µ–∑–µ—Ä–≤: –∏—â–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω/–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            try:
                devices = sd.query_devices()
                keywords_preferred = ['built-in', 'macbook', 'internal', '–≤—Å—Ç—Ä–æ', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', 'microphone']
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
                for idx, dev in enumerate(devices):
                    try:
                        if dev.get('max_input_channels', 0) > 0:
                            name_l = (dev.get('name','') or '').lower()
                            if any(k in name_l for k in keywords_preferred):
                                console.print(f"[yellow]‚ö†Ô∏è Default input –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Ä–µ–∑–µ—Ä–≤: {dev.get('name')}[/yellow]")
                                return idx
                    except Exception:
                        continue
                # –ó–∞—Ç–µ–º –ª—é–±–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ input-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                for idx, dev in enumerate(devices):
                    try:
                        if dev.get('max_input_channels', 0) > 0:
                            console.print(f"[yellow]‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π input: {dev.get('name')}[/yellow]")
                            return idx
                    except Exception:
                        continue
            except Exception:
                pass

            console.print("[yellow]‚ö†Ô∏è Default input –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é[/yellow]")
            return None
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å input: {e} ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º None[/yellow]")
            return None

    def _monitor_input_device_changes(self):
        """–°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ—Ç–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ."""
        try:
            while self.is_recording and not self.stop_device_monitor.is_set():
                try:
                    new_device = self._resolve_input_device()
                    if new_device != self.current_input_device:
                        old_device = self.current_input_device
                        if self._restart_input_stream(new_device):
                            self.current_input_device = new_device
                            console.print(f"[blue]üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª –≤—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {old_device} ‚Üí {new_device}[/blue]")
                except Exception:
                    pass
                time.sleep(0.5)
        except Exception:
            pass

    def _restart_input_stream(self, new_device) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π InputStream –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""
        try:
            with self.stream_lock:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.stream:
                    try:
                        self.stream.stop()
                        self.stream.close()
                    except Exception:
                        pass
                    self.stream = None

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
                self.stream = sd.InputStream(
                    channels=self.channels,
                    samplerate=self.sample_rate,
                    dtype=self.dtype,
                    blocksize=self.chunk_size,
                    device=new_device,
                    callback=lambda indata, frames, time_info, status: self._input_callback_proxy(indata, frames, status),
                )
                self.stream.start()
            return True
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}[/yellow]")
            return False

    def _input_callback_proxy(self, indata, frames, status):
        """Callback –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —á–∞–Ω–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É callback."""
        if status:
            console.print(f"[yellow]‚ö†Ô∏è Sounddevice status: {status}[/yellow]")
        if self.is_recording:
            if self.channels == 1:
                chunk = indata.copy().reshape(-1)
            else:
                chunk = indata.copy()[:, 0]
            self.audio_chunks.append(chunk.astype(np.int16))
            
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.stream:
            try:
                self.stream.stop()
                self.stream.close()
            except Exception:
                pass

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def listen_for_command(lang: str = 'en-US') -> str | None:
    """
    –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ StreamRecognizer –¥–ª—è push-to-talk.
    """
    r = sr.Recognizer()
    with sr.Microphone() as source:
        console.print("[bold cyan]–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ–¥ –æ–∫—Ä—É–∂–∞—é—â–∏–π —à—É–º...[/bold cyan]")
        r.adjust_for_ambient_noise(source, duration=1)
        
        console.print("[bold green]–°–ª—É—à–∞—é...[/bold green]")
        try:
            audio = r.listen(source, timeout=5, phrase_time_limit=15)
        except sr.WaitTimeoutError:
            console.print("[yellow]–ù–µ –±—ã–ª–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã.[/yellow]")
            return None

    try:
        console.print("[bold blue]–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...[/bold blue]")
        text = r.recognize_google(audio, language=lang)
        console.print(f"[bold magenta]–í—ã —Å–∫–∞–∑–∞–ª–∏:[/bold magenta] {text}")
        return text
    except sr.UnknownValueError:
        console.print("[red]–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å[/red]")
        return None
    except sr.RequestError as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è; {e}[/red]")
        return None
    except Exception as e:
        console.print(f"[red]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return None

if __name__ == '__main__':
    # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ StreamRecognizer
    recognizer = StreamRecognizer()
    
    try:
        console.print("[bold green]üé§ –¢–µ—Å—Ç push-to-talk —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/bold green]")
        console.print("[yellow]–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª –¥–ª—è –∑–∞–ø–∏—Å–∏...[/yellow]")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞
        recognizer.start_recording()
        time.sleep(3)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞
        text = recognizer.stop_recording_and_recognize()
        
        if text:
            console.print(f"[bold green]‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}[/bold green]")
        else:
            console.print("[yellow]‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/yellow]")
            
    finally:
        recognizer.cleanup()
