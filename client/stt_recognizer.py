import pyaudio
import numpy as np
import speech_recognition as sr
import threading
import time
from rich.console import Console

console = Console()

class StreamRecognizer:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ —Å push-to-talk –ª–æ–≥–∏–∫–æ–π.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–±–µ–ª–∞.
    """
    
    def __init__(self, sample_rate=16000, chunk_size=1024, channels=1):
        self.sample_rate = sample_rate  # 16kHz - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        self.chunk_size = chunk_size
        self.channels = channels
        self.format = pyaudio.paInt16
        
        self.audio = pyaudio.PyAudio()
        self.stream = None
        self.is_recording = False
        self.audio_chunks = []
        self.recording_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 100  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.recognizer.dynamic_energy_threshold = True  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
        self.recognizer.pause_threshold = 0.5  # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ –ø–∞—É–∑—ã
        self.recognizer.phrase_threshold = 0.3  # –ü–æ—Ä–æ–≥ —Ñ—Ä–∞–∑—ã
        self.recognizer.non_speaking_duration = 0.3  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ-—Ä–µ—á–∏
        
    def start_recording(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞"""
        # –ö–†–ò–¢–ò–ß–ù–û: –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º - —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å
        if self.is_recording:
            console.print("[yellow]‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç - —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â—É—é...[/yellow]")
            self.stop_recording_and_recognize()
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(0.05)
            
        self.is_recording = True
        self.audio_chunks = []
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.stream = self.audio.open(
            format=self.format,
            channels=self.channels,
            rate=self.sample_rate,
            input=True,
            frames_per_buffer=self.chunk_size,
            input_device_index=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        
        console.print("[bold green]üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...[/bold green]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.recording_thread = threading.Thread(target=self._record_audio)
        self.recording_thread.daemon = True
        self.recording_thread.start()
        
    def stop_recording_and_recognize(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å"""
        if not self.is_recording:
            return None
            
        self.is_recording = False
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
        if self.recording_thread and self.recording_thread.is_alive():
            # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Ç–æ–∫—É –∑–∞–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
            self.recording_thread.join(timeout=0.5)  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 500ms
            
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º
            if self.recording_thread.is_alive():
                console.print("[yellow]‚ö†Ô∏è –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞—é...[/yellow]")
                # –í Python –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —É–±–∏—Ç—å –ø–æ—Ç–æ–∫, –Ω–æ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥
                self.is_recording = False
            
        # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
        if self.stream:
            try:
                if self.stream.is_active():
                    self.stream.stop_stream()
                self.stream.close()
                console.print("[blue]üîá –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç[/blue]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞: {e}[/yellow]")
            finally:
                self.stream = None
            
        console.print("[bold blue]üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...[/bold blue]")
        
        if not self.audio_chunks:
            console.print("[yellow]‚ö†Ô∏è –ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∞—É–¥–∏–æ[/yellow]")
            return None
            
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≤ –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç
            audio_data = np.concatenate(self.audio_chunks)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
            duration = len(audio_data) / self.sample_rate
            console.print(f"[blue]üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫—É–Ω–¥[/blue]")
            
            if duration < 0.5:  # –ú–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫—É–Ω–¥—ã
                console.print("[yellow]‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/yellow]")
                return None
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            audio_data = audio_data.astype(np.float32) / 32768.0  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ [-1, 1]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è SpeechRecognition
            audio_bytes = (audio_data * 32767).astype(np.int16).tobytes()
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û
            console.print(f"[blue]üîç –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤[/blue]")
            console.print(f"[blue]üîç –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: {audio_data.min():.4f} –¥–æ {audio_data.max():.4f}[/blue]")
            console.print(f"[blue]üîç –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {np.mean(np.abs(audio_data)):.4f}[/blue]")
            console.print(f"[blue]üîç –†–∞–∑–º–µ—Ä –±–∞–π—Ç–æ–≤: {len(audio_bytes)} –±–∞–π—Ç[/blue]")
            
            # –°–æ–∑–¥–∞–µ–º AudioData –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            # paInt16 = 16 –±–∏—Ç = 2 –±–∞–π—Ç–∞ –Ω–∞ —Å—ç–º–ø–ª
            audio = sr.AudioData(audio_bytes, self.sample_rate, 2)  # 2 bytes per sample
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ)
            languages = ['en-US', 'en-GB', 'ru-RU']
            
            for lang in languages:
                try:
                    console.print(f"[blue]üåê –ü—Ä–æ–±—É—é —è–∑—ã–∫: {lang}[/blue]")
                    text = self.recognizer.recognize_google(audio, language=lang)
                    console.print(f"[bold magenta]‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ({lang}): {text}[/bold magenta]")
                    return text
                except sr.UnknownValueError:
                    console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∞ {lang}[/yellow]")
                    continue
                except sr.RequestError as e:
                    console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ {lang}: {e}[/red]")
                    continue
            
            # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î - –ø—Ä—è–º–æ–π PyAudio
            console.print("[blue]üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...[/blue]")
            try:
                # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PyAudio
                raw_audio = b''.join([chunk.tobytes() for chunk in self.audio_chunks])
                alternative_audio = sr.AudioData(raw_audio, self.sample_rate, 2)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
                for lang in languages:
                    try:
                        console.print(f"[blue]üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥, —è–∑—ã–∫: {lang}[/blue]")
                        text = self.recognizer.recognize_google(alternative_audio, language=lang)
                        console.print(f"[bold magenta]‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º ({lang}): {text}[/bold magenta]")
                        return text
                    except sr.UnknownValueError:
                        continue
                    except sr.RequestError:
                        continue
                        
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}[/yellow]")
            
            # –ï—Å–ª–∏ –≤—Å–µ —è–∑—ã–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ[/red]")
            return None
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}[/red]")
            console.print(f"[red]–î–µ—Ç–∞–ª–∏: {type(e).__name__}: {str(e)}[/red]")
            return None
    
    def force_stop_recording(self):
        """
        –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –ë–ï–ó —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è/–æ—Ç–º–µ–Ω—ã.
        """
        if not self.is_recording:
            return
            
        console.print("[bold red]üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏![/bold red]")
        self.is_recording = False
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
        if self.recording_thread and self.recording_thread.is_alive():
            self.recording_thread.join(timeout=0.2)  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            
        # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
        if self.stream:
            try:
                if self.stream.is_active():
                    self.stream.stop_stream()
                self.stream.close()
                console.print("[bold red]üö® –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω![/bold red]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}[/yellow]")
            finally:
                self.stream = None
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
        self.audio_chunks = []
        console.print("[bold green]‚úÖ –ó–∞–ø–∏—Å—å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞![/bold green]")
            
    def _record_audio(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            while self.is_recording:
                if self.stream and self.stream.is_active():
                    # –ß–∏—Ç–∞–µ–º —á–∞–Ω–∫ –∞—É–¥–∏–æ
                    data = self.stream.read(self.chunk_size, exception_on_overflow=False)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
                    audio_chunk = np.frombuffer(data, dtype=np.int16)
                    self.audio_chunks.append(audio_chunk)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    time.sleep(0.01)
                    
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}[/red]")
            console.print(f"[red]–î–µ—Ç–∞–ª–∏: {type(e).__name__}: {str(e)}[/red]")
            
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()
        if self.audio:
            self.audio.terminate()

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def listen_for_command(lang: str = 'en-US') -> str | None:
    """
    –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ StreamRecognizer –¥–ª—è push-to-talk.
    """
    r = sr.Recognizer()
    with sr.Microphone() as source:
        console.print("[bold cyan]–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ–¥ –æ–∫—Ä—É–∂–∞—é—â–∏–π —à—É–º...[/bold cyan]")
        r.adjust_for_ambient_noise(source, duration=1)
        
        console.print("[bold green]–°–ª—É—à–∞—é...[/bold green]")
        try:
            audio = r.listen(source, timeout=5, phrase_time_limit=15)
        except sr.WaitTimeoutError:
            console.print("[yellow]–ù–µ –±—ã–ª–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã.[/yellow]")
            return None

    try:
        console.print("[bold blue]–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...[/bold blue]")
        text = r.recognize_google(audio, language=lang)
        console.print(f"[bold magenta]–í—ã —Å–∫–∞–∑–∞–ª–∏:[/bold magenta] {text}")
        return text
    except sr.UnknownValueError:
        console.print("[red]–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å[/red]")
        return None
    except sr.RequestError as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è; {e}[/red]")
        return None
    except Exception as e:
        console.print(f"[red]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return None

if __name__ == '__main__':
    # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ StreamRecognizer
    recognizer = StreamRecognizer()
    
    try:
        console.print("[bold green]üé§ –¢–µ—Å—Ç push-to-talk —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/bold green]")
        console.print("[yellow]–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª –¥–ª—è –∑–∞–ø–∏—Å–∏...[/yellow]")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞
        recognizer.start_recording()
        time.sleep(3)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞
        text = recognizer.stop_recording_and_recognize()
        
        if text:
            console.print(f"[bold green]‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}[/bold green]")
        else:
            console.print("[yellow]‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è[/yellow]")
            
    finally:
        recognizer.cleanup()
