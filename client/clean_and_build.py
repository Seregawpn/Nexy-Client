#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–±–æ—Ä–æ–∫ –∏ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π —É–ø–∞–∫–æ–≤–∫–∏
"""

import os
import shutil
import subprocess
import sys
from pathlib import Path

def clean_old_builds():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–±–æ—Ä–æ–∫"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–±–æ—Ä–æ–∫...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏
    dirs_to_remove = ['dist', 'build']
    for dir_name in dirs_to_remove:
        if os.path.exists(dir_name):
            print(f"  –£–¥–∞–ª—è–µ–º {dir_name}/")
            shutil.rmtree(dir_name)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    files_to_remove = ['*.pkg', '*.dmg', '*.app']
    for pattern in files_to_remove:
        for file_path in Path('.').glob(pattern):
            if file_path.is_file():
                print(f"  –£–¥–∞–ª—è–µ–º {file_path}")
                file_path.unlink()
    
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    result = subprocess.run(['uname', '-m'], capture_output=True, text=True)
    if result.returncode != 0 or 'arm64' not in result.stdout:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Apple Silicon (arm64)")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PyInstaller
    try:
        result = subprocess.run(['pyinstaller', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print(f"  PyInstaller: {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    try:
        result = subprocess.run(['security', 'find-identity', '-p', 'codesigning', '-v'], 
                              capture_output=True, text=True)
        if 'Developer ID Application' not in result.stdout:
            print("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        if 'Developer ID Installer' not in result.stdout:
            print("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print("  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: OK")
    except FileNotFoundError:
        print("‚ùå security –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def run_build():
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏...")
    
    build_script = Path('packaging/build_all.sh')
    if not build_script.exists():
        print("‚ùå –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(build_script, 0o755)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
    try:
        result = subprocess.run([str(build_script)], 
                              cwd=os.getcwd(),
                              capture_output=False,
                              text=True)
        if result.returncode == 0:
            print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.returncode}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ NEXY AI ASSISTANT - –û–ß–ò–°–¢–ö–ê –ò –°–ë–û–†–ö–ê")
    print("=======================================")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–±–æ—Ä–∫–∏
    clean_old_builds()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_requirements():
        print("‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
    if not run_build():
        print("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)
    
    print("üéâ –í–°–ï –ì–û–¢–û–í–û!")
    print("üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É dist/ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")

if __name__ == "__main__":
    main()

