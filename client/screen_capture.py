import base64
import io
import logging
from PIL import Image
import numpy as np
from Quartz import (
    CGDisplayBounds,
    CGMainDisplayID,
    CGWindowListCreateImage,
    kCGWindowListOptionOnScreenOnly,
    kCGNullWindowID,
    CGImageGetDataProvider,
    CGDataProviderCopyData,
    CGImageGetWidth,
    CGImageGetHeight,
    CGImageGetBytesPerRow,
    CGImageGetBitsPerPixel,
    CGImageGetColorSpace,
    CGColorSpaceGetModel,
    kCGColorSpaceModelRGB
)

logger = logging.getLogger(__name__)

class ScreenCapture:
    """–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ macOS —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ WebP + Base64"""
    
    def __init__(self):
        self.main_display_id = CGMainDisplayID()
        self.display_bounds = CGDisplayBounds(self.main_display_id)
        
    def capture_screen(self, quality: int = 85) -> str:
        """
        –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Base64 —Å—Ç—Ä–æ–∫—É WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            quality (int): –ö–∞—á–µ—Å—Ç–≤–æ WebP (1-100)
            
        Returns:
            str: Base64 —Å—Ç—Ä–æ–∫–∞ WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞...")
            
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            image = CGWindowListCreateImage(
                self.display_bounds,
                kCGWindowListOptionOnScreenOnly,
                kCGNullWindowID,
                kCGNullWindowID
            )
            
            if not image:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            width = CGImageGetWidth(image)
            height = CGImageGetHeight(image)
            bytes_per_row = CGImageGetBytesPerRow(image)
            bits_per_pixel = CGImageGetBitsPerPixel(image)
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {width}x{height}, {bits_per_pixel} –±–∏—Ç/–ø–∏–∫—Å–µ–ª—å, {bytes_per_row} –±–∞–π—Ç/—Å—Ç—Ä–æ–∫–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            data_provider = CGImageGetDataProvider(image)
            if not data_provider:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å data provider")
                return None
                
            raw_data = CGDataProviderCopyData(data_provider)
            if not raw_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å raw data")
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            data_length = len(raw_data)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {data_length} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            if bits_per_pixel == 32:
                # RGBA –∏–ª–∏ BGRA
                if bytes_per_row == width * 4:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    array = np.frombuffer(raw_data, dtype=np.uint8)
                    array = array.reshape((height, width, 4))
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGRA –≤ RGB
                    rgb_array = array[:, :, [2, 1, 0]]  # BGR -> RGB
                    
                else:
                    # –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                    array = np.frombuffer(raw_data, dtype=np.uint8)
                    array = array.reshape((height, bytes_per_row // 4, 4))
                    rgb_array = array[:, :width, [2, 1, 0]]
                    
            elif bits_per_pixel == 24:
                # RGB
                array = np.frombuffer(raw_data, dtype=np.uint8)
                array = array.reshape((height, width, 3))
                rgb_array = array
                
            else:
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {bits_per_pixel} –±–∏—Ç/–ø–∏–∫—Å–µ–ª—å")
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            pil_image = Image.fromarray(rgb_array)
            
            logger.info(f"–≠–∫—Ä–∞–Ω –∑–∞—Ö–≤–∞—á–µ–Ω: {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            webp_buffer = io.BytesIO()
            pil_image.save(
                webp_buffer,
                format='WEBP',
                quality=quality,
                method=6,  # –ú–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è WebP (0-6, –≥–¥–µ 6 - –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
                lossless=False  # –°–∂–∞—Ç–∏–µ —Å –ø–æ—Ç–µ—Ä—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            )
            
            webp_data = webp_buffer.getvalue()
            webp_buffer.close()
            
            logger.info(f"WebP —Å–æ–∑–¥–∞–Ω: {len(webp_data)} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Base64
            base64_string = base64.b64encode(webp_data).decode('utf-8')
            
            logger.info(f"Base64 —Å–æ–∑–¥–∞–Ω: {len(base64_string)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return base64_string
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
            return None
    
    def capture_active_window(self, quality: int = 85) -> str:
        """
        –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        
        Args:
            quality (int): –ö–∞—á–µ—Å—Ç–≤–æ WebP (1-100)
            
        Returns:
            str: Base64 —Å—Ç—Ä–æ–∫–∞ WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é –∑–∞—Ö–≤–∞—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
            
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            return self.capture_screen(quality)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            return None
    
    def get_screen_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ
        """
        try:
            width = int(self.display_bounds.size.width)
            height = int(self.display_bounds.size.height)
            
            return {
                'width': width,
                'height': height,
                'main_display_id': self.main_display_id,
                'bounds': {
                    'x': int(self.display_bounds.origin.x),
                    'y': int(self.display_bounds.origin.y),
                    'width': width,
                    'height': height
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Ä–∞–Ω–µ: {e}")
            return {}

if __name__ == "__main__":
    # –¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞
    import logging
    logging.basicConfig(level=logging.INFO)
    
    capture = ScreenCapture()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ
    info = capture.get_screen_info()
    print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ: {info}")
    
    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
    print("–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é —ç–∫—Ä–∞–Ω...")
    base64_webp = capture.capture_screen(quality=80)
    
    if base64_webp:
        print(f"‚úÖ –ó–∞—Ö–≤–∞—Ç —É—Å–ø–µ—à–µ–Ω!")
        print(f"Base64 –¥–ª–∏–Ω–∞: {len(base64_webp)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {base64_webp[:100]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            decoded = base64.b64decode(base64_webp)
            with open("test_screenshot.webp", "wb") as f:
                f.write(decoded)
            print("üíæ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ test_screenshot.webp")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    else:
        print("‚ùå –ó–∞—Ö–≤–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è")
