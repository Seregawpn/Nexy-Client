#!/usr/bin/env python3
"""
üì∏ –†–ï–ê–õ–¨–ù–´–ô –ó–ê–•–í–ê–¢ –≠–ö–†–ê–ù–ê –ß–ï–†–ï–ó MSS
üéØ –ë—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ mss

‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: mss (–±—ã—Å—Ç—Ä—ã–π, Windows/Linux/macOS)
"""

import base64
import io
import logging
from PIL import Image

logger = logging.getLogger(__name__)

class ScreenCapture:
    """–†–µ–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ mss"""
    
    def __init__(self):
        logger.info("üì∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ mss...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å mss
        self.mss_available = False
        
        try:
            import mss
            self.mss_available = True
            logger.info("‚úÖ mss –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞")
        except ImportError:
            logger.error("‚ùå mss –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install mss")
            raise ImportError("mss –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mss")
    
    def capture_screen(self, quality: int = 85, max_size: int = 1024) -> str:
        """
        –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ mss
        
        Args:
            quality (int): –ö–∞—á–µ—Å—Ç–≤–æ JPEG (1-100)
            max_size (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            str: Base64 —Å—Ç—Ä–æ–∫–∞ JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Raises:
            RuntimeError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
        """
        try:
            logger.info("üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ mss...")
            
            if not self.mss_available:
                error_msg = "‚ùå mss –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞!"
                logger.error(error_msg)
                raise RuntimeError(error_msg)
            
            import mss
            with mss.mss() as sct:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
                monitor = sct.monitors[1]  # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
                logger.info(f"üì± –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä: {monitor}")
                
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
                pil_image = sct.grab(monitor)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                pil_image = Image.frombytes('RGB', pil_image.size, pil_image.bgra, 'raw', 'BGRX')
                
                logger.info(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞—Ö–≤–∞—á–µ–Ω: {pil_image.size[0]}x{pil_image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
                return self._convert_to_base64(pil_image, quality)
                
        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ mss: {e}"
            logger.error(error_msg)
            raise RuntimeError(error_msg)
    
    def _convert_to_base64(self, pil_image: Image.Image, quality: int) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Base64 JPEG"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            jpeg_buffer = io.BytesIO()
            pil_image.save(
                jpeg_buffer,
                format='JPEG',
                quality=quality,
                optimize=True
            )
            
            jpeg_data = jpeg_buffer.getvalue()
            jpeg_buffer.close()
            
            logger.info(f"üíæ JPEG —Å–æ–∑–¥–∞–Ω: {len(jpeg_data)} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Base64
            base64_string = base64.b64encode(jpeg_data).decode('utf-8')
            
            logger.info(f"üî§ Base64 —Å–æ–∑–¥–∞–Ω: {len(base64_string)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info("‚úÖ –†–µ–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Base64!")
            
            return base64_string
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ Base64: {e}"
            logger.error(error_msg)
            raise RuntimeError(error_msg)
    
    def capture_active_window(self, quality: int = 85, max_size: int = 1024) -> str:
        """
        –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ (—á–µ—Ä–µ–∑ mss)
        
        Args:
            quality (int): –ö–∞—á–µ—Å—Ç–≤–æ JPEG (1-100)
            max_size (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            str: Base64 —Å—Ç—Ä–æ–∫–∞ JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            logger.info("ü™ü –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ mss...")
            
            # –ß–µ—Ä–µ–∑ mss –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω (–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ)
            return self.capture_screen(quality, max_size)
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}"
            logger.error(error_msg)
            raise RuntimeError(error_msg)
    
    def get_screen_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ mss
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ
        """
        try:
            if not self.mss_available:
                logger.warning("‚ö†Ô∏è mss –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                return self._get_default_screen_info()
            
            import mss
            with mss.mss() as sct:
                monitor = sct.monitors[1]  # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
                logger.info(f"üì± –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ mss: {monitor}")
                return {
                    'width': monitor['width'],
                    'height': monitor['height'],
                    'main_display_id': 1,
                    'bounds': monitor
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Ä–∞–Ω–µ: {e}")
            return self._get_default_screen_info()
    
    def _get_default_screen_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'width': 1920,
            'height': 1080,
            'main_display_id': 1,
            'bounds': {
                'x': 0,
                'y': 0,
                'width': 1920,
                'height': 1080
            }
        }

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —á–µ—Ä–µ–∑ mss
    capture = ScreenCapture()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ
    info = capture.get_screen_info()
    print(f"üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ: {info}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    print("üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ mss...")
    try:
        screenshot_data = capture.capture_screen(quality=85, max_size=1024)
        if screenshot_data:
            print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω!")
            print(f"Base64 –¥–ª–∏–Ω–∞: {len(screenshot_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {screenshot_data[:100]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                jpeg_data = base64.b64decode(screenshot_data)
                with open("test_screenshot_mss.jpg", "wb") as f:
                    f.write(jpeg_data)
                print(f"üíæ –†–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ test_screenshot_mss.jpg ({len(jpeg_data)} –±–∞–π—Ç)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        else:
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    except RuntimeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
