#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ bundle —Å—Ü–µ–Ω–∞—Ä–∏—è
"""

import sys
from pathlib import Path

def simulate_bundle_scenario():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∏—Å–∫–∞ –≤ bundle"""
    print("üîç –°–ò–ú–£–õ–Ø–¶–ò–Ø BUNDLE –°–¶–ï–ù–ê–†–ò–Ø")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    temp_dir = Path("/tmp/nexy_bundle_test")
    temp_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É .app bundle
    app_dir = temp_dir / "Nexy.app"
    contents_dir = app_dir / "Contents"
    macos_dir = contents_dir / "MacOS"
    resources_dir = contents_dir / "Resources"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    macos_dir.mkdir(parents=True)
    resources_dir.mkdir(parents=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ Resources
    audio_dir = resources_dir / "assets" / "audio"
    audio_dir.mkdir(parents=True)
    test_audio = audio_dir / "welcome_en.mp3"
    test_audio.write_text("fake audio content")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Python —Ñ–∞–π–ª –≤ MacOS (—Å–∏–º—É–ª–∏—Ä—É–µ–º types.py)
    modules_dir = macos_dir / "modules" / "welcome_message" / "core"
    modules_dir.mkdir(parents=True)
    test_py = modules_dir / "types.py"
    test_py.write_text("# Test file")
    
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print(f"   App: {app_dir}")
    print(f"   MacOS: {macos_dir}")
    print(f"   Resources: {resources_dir}")
    print(f"   –ê—É–¥–∏–æ —Ñ–∞–π–ª: {test_audio}")
    print(f"   Test Python: {test_py}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
    print(f"\nüîç –¢–ï–°–¢–ò–†–£–ï–ú –õ–û–ì–ò–ö–£ –ü–û–ò–°–ö–ê:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ test_py
    original_file = __file__
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º __file__ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import types
    test_module = types.ModuleType('test_module')
    test_module.__file__ = str(test_py)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ MacOS –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    resolved_path = Path(test_py).resolve()
    macos_dir_found = None
    for parent in resolved_path.parents:
        if parent.name == "MacOS":
            macos_dir_found = parent
            break
    
    print(f"   –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {resolved_path}")
    print(f"   –ù–∞–π–¥–µ–Ω–Ω–∞—è MacOS: {macos_dir_found}")
    
    if macos_dir_found is not None:
        contents_dir_found = macos_dir_found.parent
        resources_path_found = contents_dir_found / "Resources"
        audio_path = resources_path_found / "assets" / "audio" / "welcome_en.mp3"
        
        print(f"   Contents: {contents_dir_found}")
        print(f"   Resources: {resources_path_found}")
        print(f"   –ê—É–¥–∏–æ –ø—É—Ç—å: {audio_path}")
        print(f"   –ê—É–¥–∏–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_path.exists()}")
        
        if audio_path.exists():
            print(f"   ‚úÖ –£–°–ü–ï–•: –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω!")
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: MacOS –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    # –û—á–∏—Å—Ç–∫–∞
    import shutil
    shutil.rmtree(temp_dir)
    print(f"\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞")

if __name__ == "__main__":
    simulate_bundle_scenario()
