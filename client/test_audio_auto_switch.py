#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –°—Ä–∞–∑—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É  
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
"""

import asyncio
import time
import signal
import sys
import logging
from datetime import datetime
from typing import List, Optional

# –í–∫–ª—é—á–∞–µ–º DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
try:
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    from audio_device_manager import AudioDeviceManager, AudioDevice, DeviceType, DevicePriority
    print("‚úÖ –ú–æ–¥—É–ª—å audio_device_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


class SimpleAudioSwitchTest:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.manager = None
        self.running = False
        self.start_time = None
        self.current_device = None
        self.device_changes = []
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            self.manager = AudioDeviceManager()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏
            self.manager.set_device_changed_callback(self.on_device_changed)
            self.manager.set_device_switched_callback(self.on_device_switched)
            
            print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        await self.show_all_devices()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        success = await self.manager.start()
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        await self.select_best_device()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.running = True
        self.start_time = time.time()
        
        print("\n‚ö° –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ü–£–©–ï–ù!")
        print("üéß –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ/–æ—Ç–∫–ª—é—á–∞–π—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        
        return True
    
    async def show_all_devices(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("\nüì± –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê:")
        print("-" * 50)
        
        try:
            devices = await self.manager.get_available_devices()
            
            if not devices:
                print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            current_device = await self.manager.get_current_device()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            output_devices = [d for d in devices if d.type == DeviceType.OUTPUT]
            input_devices = [d for d in devices if d.type == DeviceType.INPUT]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)
            if output_devices:
                print("üîä –£–°–¢–†–û–ô–°–¢–í–ê –í–´–í–û–î–ê (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É):")
                for i, device in enumerate(output_devices, 1):
                    priority_text = self.get_priority_text(device.priority)
                    channels_text = "–Ω–∞—É—à–Ω–∏–∫–∏" if device.channels == 2 else "–¥–∏–Ω–∞–º–∏–∫–∏"
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    active_marker = "üéØ –ê–ö–¢–ò–í–ù–û!" if current_device and device.id == current_device.id else ""
                    
                    print(f"   {i}. {device.name} {active_marker}")
                    print(f"      –ö–∞–Ω–∞–ª—ã: {device.channels} ({channels_text})")
                    print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value} ({priority_text})")
                    print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            if current_device:
                print("üéØ –¢–ï–ö–£–©–ï–ï –ê–ö–¢–ò–í–ù–û–ï –£–°–¢–†–û–ô–°–¢–í–û:")
                device_icon = "üéß" if current_device.channels == 2 else "üîä"
                priority_text = self.get_priority_text(current_device.priority)
                channels_text = "–Ω–∞—É—à–Ω–∏–∫–∏" if current_device.channels == 2 else "–¥–∏–Ω–∞–º–∏–∫–∏"
                print(f"   {device_icon} {current_device.name}")
                print(f"      –ö–∞–Ω–∞–ª—ã: {current_device.channels} ({channels_text})")
                print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {current_device.priority.value} ({priority_text})")
                print()
            else:
                print("‚ö†Ô∏è –ê–ö–¢–ò–í–ù–û–ï –£–°–¢–†–û–ô–°–¢–í–û –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–û")
                print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
            if input_devices:
                print("üé§ –£–°–¢–†–û–ô–°–¢–í–ê –í–í–û–î–ê:")
                for i, device in enumerate(input_devices, 1):
                    print(f"   {i}. {device.name} (–∫–∞–Ω–∞–ª—ã: {device.channels})")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    async def select_best_device(self):
        """–í—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        print("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –£–°–¢–†–û–ô–°–¢–í–ê...")
        
        try:
            devices = await self.manager.get_available_devices()
            if not devices:
                print("‚ùå –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            output_devices = [d for d in devices if d.type == DeviceType.OUTPUT and d.is_available]
            
            if not output_devices:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            best_device = min(output_devices, key=lambda x: x.priority.value)
            
            print(f"üèÜ –õ–£–ß–®–ï–ï –£–°–¢–†–û–ô–°–¢–í–û: {best_device.name}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_device.priority.value} ({self.get_priority_text(best_device.priority)})")
            print(f"   –ö–∞–Ω–∞–ª—ã: {best_device.channels} ({'–Ω–∞—É—à–Ω–∏–∫–∏' if best_device.channels == 2 else '–¥–∏–Ω–∞–º–∏–∫–∏'})")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
            success = await self.manager.switch_to_device(best_device)
            
            if success:
                self.current_device = best_device
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {best_device.name}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {best_device.name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def get_priority_text(self, priority: DevicePriority) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        priority_map = {
            DevicePriority.HIGHEST: "–°–ê–ú–´–ô –í–´–°–û–ö–ò–ô",
            DevicePriority.HIGH: "–í–´–°–û–ö–ò–ô", 
            DevicePriority.MEDIUM: "–°–†–ï–î–ù–ò–ô",
            DevicePriority.NORMAL: "–û–ë–´–ß–ù–´–ô",
            DevicePriority.LOW: "–ù–ò–ó–ö–ò–ô",
            DevicePriority.LOWEST: "–°–ê–ú–´–ô –ù–ò–ó–ö–ò–ô"
        }
        return priority_map.get(priority, "–ù–ï–ò–ó–í–ï–°–¢–ù–û")
    
    def on_device_changed(self, change):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for device in change.added:
            if device.type == DeviceType.OUTPUT:
                print(f"\nüîî [{timestamp}] –ù–ê–£–®–ù–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–´!")
                print(f"üéß {device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority.value})")
                print("‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                self.device_changes.append({
                    'time': timestamp,
                    'device': device.name,
                    'action': '–ü–û–î–ö–õ–Æ–ß–ï–ù–û'
                })
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞  
        for device in change.removed:
            if device.type == DeviceType.OUTPUT:
                print(f"\nüîî [{timestamp}] –ù–ê–£–®–ù–ò–ö–ò –û–¢–ö–õ–Æ–ß–ï–ù–´!")
                print(f"üéß {device.name}")
                print("‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                self.device_changes.append({
                    'time': timestamp,
                    'device': device.name,
                    'action': '–û–¢–ö–õ–Æ–ß–ï–ù–û'
                })
    
    def on_device_switched(self, from_device: Optional[AudioDevice], to_device: AudioDevice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        print(f"\nüîÑ [{timestamp}] –£–°–¢–†–û–ô–°–¢–í–û –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–û!")
        if from_device is not None:
            print(f"   –û—Ç: {from_device.name}")
        else:
            print(f"   –û—Ç: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        print(f"   –ù–∞: {to_device.name}")
        
        self.current_device = to_device
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        self.device_changes.append({
            'time': timestamp,
            'from': from_device.name if from_device is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            'to': to_device.name,
            'action': '–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–û'
        })
    
    async def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        if not self.running:
            return
            
        runtime = time.time() - self.start_time if self.start_time else 0
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        self.current_device = await self.manager.get_current_device()
        
        print(f"\nüìä –°–¢–ê–¢–£–° ({runtime:.0f}—Å):")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if self.current_device:
            device_icon = "üéß" if self.current_device.channels == 2 else "üîä"
            priority_text = self.get_priority_text(self.current_device.priority)
            channels_text = "–Ω–∞—É—à–Ω–∏–∫–∏" if self.current_device.channels == 2 else "–¥–∏–Ω–∞–º–∏–∫–∏"
            print(f"   üéØ –ê–ö–¢–ò–í–ù–û: {device_icon} {self.current_device.name}")
            print(f"      –¢–∏–ø: {channels_text}")
            print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self.current_device.priority.value} ({priority_text})")
            print(f"      –ö–∞–Ω–∞–ª—ã: {self.current_device.channels}")
        else:
            print(f"   üéØ –ê–ö–¢–ò–í–ù–û: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            print(f"   ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            devices = await self.manager.get_available_devices()
            if devices:
                output_devices = [d for d in devices if d.type == DeviceType.OUTPUT and d.is_available]
                if output_devices:
                    best_device = min(output_devices, key=lambda x: x.priority.value)
                    print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {best_device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_device.priority.value})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"   üìù –°–æ–±—ã—Ç–∏–π: {len(self.device_changes)}")
        if self.device_changes:
            last_event = self.device_changes[-1]
            print(f"   üîî –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_event['action']} –≤ {last_event['time']}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
            if not await self.setup():
                return
            
            # –ó–∞–ø—É—Å–∫
            if not await self.start():
                return
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                await self.show_status()
                await asyncio.sleep(5)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
        except KeyboardInterrupt:
            print("\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        
        if self.manager:
            await self.manager.stop()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if self.device_changes:
            print(f"\nüìù –°–û–ë–´–¢–ò–Ø ({len(self.device_changes)}):")
            for event in self.device_changes[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π
                print(f"   {event['time']}: {event['action']}")
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ê–£–î–ò–û –£–°–¢–†–û–ô–°–¢–í")
    print("=" * 60)
    
    test = SimpleAudioSwitchTest()
    await test.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
