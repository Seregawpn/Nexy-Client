# Nexy Client Development Rules

## 1. Документы перед началом
Перед изменениями обнови контекст по ключевым файлам:
- `client/Docs/PRODUCT_CONCEPT.md` — пользовательские сценарии и режимы
- `client/Docs/ARCHITECTURE_OVERVIEW.md` — связь модулей и интеграций
- `client/Docs/PACKAGING_FINAL_GUIDE.md` и `client/modules/*/MACOS_PACKAGING_GUIDE.md` — пайплайн сборки и подписи
- `client/Docs/CURRENT_STATUS_REPORT.md` — актуальные истории и фичи
- `client/Docs/GLOBAL_DELIVERY_PLAN.md` — требования к доставке и Azure VM
- `PERMISSIONS_REPORT.md` — актуальные статусы системных разрешений

## 2. Среда и запуск
- macOS 13+, Python 3.11, работа ведётся из `client/`.
- Точка входа: `python client/main.py` (создаёт EventBus и запускает `SimpleModuleCoordinator`).
- ffmpeg для pydub должен лежать в `client/resources/ffmpeg/ffmpeg` или паковаться внутрь `.app`.
- При разработке держи `PYTHONPATH` чистым: `client/main.py` сам добавляет нужные пути.
- Сборка `.app`/PKG описана в `client/Docs/PACKAGING_FINAL_GUIDE.md` (PyInstaller + pkgbuild/productbuild).

## 3. Архитектурное устройство
- **Core** (`client/integration/core/`): `EventBus`, `SimpleModuleCoordinator`, `ApplicationStateManager`, `ErrorHandler`.
- **Модули** (`client/modules/`): ответственны за низкоуровневую логику (audio_device_manager, mode_management, grpc_client и т.д.).
- **Интеграции** (`client/integration/integrations/`): тонкие обёртки над модулями, все почти завершены, включая `voiceover_ducking_integration.py`.
- **Workflows** (`client/integration/workflows/`): `ListeningWorkflow`, `ProcessingWorkflow` управляют переходами между режимами.
- **Режимы** (`AppMode`): SLEEPING → LISTENING → PROCESSING, переходы только через события `mode.request`.
- **EventBus**: все коммуникации — события, приоритеты задаются через `EventPriority`.

## 4. Порядок модулей и инициализации
`SimpleModuleCoordinator` инициализирует интеграции в фиксированной последовательности: InstanceManager → HardwareId → Tray → ModeManagement → InputProcessing → VoiceRecognition → Permissions → AudioDevice → NetworkManager → InterruptManagement → ScreenshotCapture → GrpcClient → SpeechPlayback → Updater → Signal → WelcomeMessage → VoiceOverDucking. Не меняй порядок без веских причин — это влияет на зависимости и режимы.

**Политика расширения:** прежде чем изменять структуру или добавлять новую интеграцию, проверь существующие модули и workflows; их допускается расширять конфигом или событиями. Новый модуль/интеграция создаём только если требуемого поведения нет и его нельзя разумно добавить через текущие компоненты. В этом случае документируй причину и зависимостей в `CURRENT_STATUS_REPORT.md` и обнови `unified_config.yaml`.

## 5. Паттерн интеграции
- Наследуй `BaseIntegration` и подключай существующий модуль.
- Подписки и публикации только через `event_bus`.
- Обработка ошибок — через `error_handler.handle_error` с указанием контекста.
- Все инициирующие события включают `session_id` (строка uuid4).
- Возвращаемые события именуй `<feature>.<action>`.

## 6. Конфигурация
- Единственный источник правды: `client/config/unified_config.yaml` (загрузка через `UnifiedConfigLoader`).
- Раздел `integrations` управляет включением и приоритетами обёрток; не дублируй настройки в коде.
- Новые параметры добавляй в `unified_config.yaml`, обновляя документацию и пример (если нужен).
- Секреты не коммить: используем Keychain/окружение.

## 7. Взаимодействие с сервером
- gRPC настройки (`grpc.server_host`, `grpc.server_port`, TLS) берутся из unified_config.
- Сообщения/стриминг определены `server/streaming.proto`; при изменениях сервера обновляй клиентские stubs и проводи совместное тестирование.
- Сетевые ошибки должны транслироваться через события ошибок и обрабатываться дружелюбно (без падения режима).

## 8. Логирование и телеметрия
- Формат: `YYYY-MM-DD HH:MM:SS - Nexy - LEVEL - Message` (см. `client/main.py`).
- Логируй переходы режимов, сетевые события, ошибки устройств, автообновления.
- Избегай логирования PII/секретов (микрофонные данные, токены, URL).

## 9. Разрешения и системные интеграции
- При работе с микрофоном, screen capture или Accessibility выполняй проверки через `permissions` модуль.
- Обновляй `PERMISSIONS_REPORT.md`, если добавляешь новые запросы или меняешь UX.
- В VoiceOver режимах следи за `voiceover_control` и `voiceover_ducking_integration` — они должны уважать системные настройки.

## 10. Тестирование
- Модульные тесты (если есть) держим рядом с модулями (`modules/*/tests` или `integration/tests`).
- Обязательные ручные проверки: push-to-talk, переходы режимов, Tray меню, автообновление Sparkle, VoiceOver ducking.
- Для регрессии глянь сценарии в `client/Docs/CURRENT_STATUS_REPORT.md` и адаптируй плейлист.

## 11. Чеклист изменений
**Перед началом**
- Просмотри существующие модули/интеграции, чтобы не дублировать функционал.
- Проверь unified_config и активность нужных интеграций.
- Определи какие события EventBus потребуются и как они влияют на режимы.

**Во время**
- Соблюдай архитектуру: интеграция → модуль → EventBus, никаких прямых вызовов между модулями.
- Сохраняй порядок инициализации SimpleModuleCoordinator.
- Сначала ищи возможность переиспользовать существующий модуль/интеграцию; если расширяешь, делай это через конфигурацию или дополнительные события.
- Добавляй новые события в явный список и документируй формат payload.
- Не забывай о `session_id`, `source` в событиях и об обработке ошибок.

**После**
- Если добавлена новая интеграция/модуль — зафиксируй обоснование в `CURRENT_STATUS_REPORT.md` и обнови список в корневом `.cursorrules`.
- Добавь интеграцию в SimpleModuleCoordinator (если новая) и настрой приоритеты.
- Обнови `unified_config.yaml`, документацию и при необходимости паковочные гайты.
- Прогоняй ручные проверки и убедись, что логи чисты от ошибок.
- Если менялись gRPC контракты — синхронизируй изменения с серверной командой.

## 12. Распространённые риски
- Изменение режима без `mode.request` ломает FSM и workflows.
- Дублирование конфигурации приводят к рассинхронизации при сборке.
- Прямые вызовы модулей минуя интеграции нарушают масштабируемость.
- Отсутствие проверок разрешений вызывает краши в production.
- Непрожатые события `session_id` делают сложным трекинг цепочек в логах.

## 13. Напоминание
Клиентская часть должна оставаться совместимой с уже завершёнными интеграциями (см. список в корневом `.cursorrules`). При сомнениях синхронизируйся с владельцем сервера и UX прежде чем менять контракт или пользовательский поток.
