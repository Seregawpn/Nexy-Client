import asyncio
import logging
import numpy as np
import grpc
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streaming_pb2
import streaming_pb2_grpc
from audio_player import AudioPlayer
from rich.console import Console

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console = Console()

class GrpcClient:
    """gRPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, server_address: str = "localhost:50051"):
        self.server_address = server_address
        self.audio_player = AudioPlayer(sample_rate=48000)
        self.channel = None
        self.stub = None
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∫–∞–Ω–∞–ª
            self.channel = grpc.aio.insecure_channel(self.server_address)
            self.stub = streaming_pb2_grpc.StreamingServiceStub(self.channel)
            
            console.print(f"[bold green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É {self.server_address} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ[/bold green]")
            return True
            
        except Exception as e:
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}[/bold red]")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.channel:
            await self.channel.close()
            console.print("[bold yellow]üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞[/bold yellow]")
    
    async def stream_audio(self, prompt: str):
        """–°—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not self.stub:
            console.print("[bold red]‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold red]")
            return
        
        try:
            console.print(f"[bold yellow]üöÄ –ó–∞–ø—É—Å–∫ gRPC —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è: {prompt}[/bold yellow]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
            self.audio_player.start_playback()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            request = streaming_pb2.StreamRequest(prompt=prompt)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
            async for response in self.stub.StreamAudio(request):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
                if response.HasField('text_chunk'):
                    console.print(f"[green]üìÑ –¢–µ–∫—Å—Ç: {response.text_chunk}[/green]")
                
                elif response.HasField('audio_chunk'):
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NumPy –º–∞—Å—Å–∏–≤ –∏–∑ AudioChunk
                    audio_chunk = np.frombuffer(
                        response.audio_chunk.audio_data, 
                        dtype=response.audio_chunk.dtype
                    ).reshape(response.audio_chunk.shape)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–µ–µ—Ä
                    self.audio_player.add_chunk(audio_chunk)
                
                elif response.HasField('end_message'):
                    console.print(f"[bold green]‚úÖ {response.end_message}[/bold green]")
                    break
                
                elif response.HasField('error_message'):
                    console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.error_message}[/bold red]")
                    break
            
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ –∞—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ
            self.audio_player.wait_for_queue_empty()
            self.audio_player.stop_playback()
            
        except grpc.RpcError as e:
            if e.code() == grpc.StatusCode.UNAVAILABLE:
                console.print("[bold red]‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/bold red]")
            elif e.code() == grpc.StatusCode.CANCELLED:
                console.print("[bold yellow]‚ö†Ô∏è –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω[/bold yellow]")
            else:
                console.print(f"[bold red]‚ùå gRPC –æ—à–∏–±–∫–∞: {e.details()}[/bold red]")
        except Exception as e:
            console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
        finally:
            if self.audio_player.is_playing:
                self.audio_player.stop_playback()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client = GrpcClient()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        if not await client.connect():
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            prompt = console.input("[bold cyan]üé§ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç (–∏–ª–∏ 'quit'): [/bold cyan]")
            if prompt.lower() == 'quit':
                break
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
            await client.stream_audio(prompt)
    
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
    finally:
        await client.disconnect()
        logger.info("gRPC –∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
