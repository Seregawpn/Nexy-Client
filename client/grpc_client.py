import asyncio
import logging
import numpy as np
import grpc
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streaming_pb2
import streaming_pb2_grpc
from audio_player import AudioPlayer
from rich.console import Console

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console = Console()

class GrpcClient:
    """gRPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, server_address: str = "localhost:50051"):
        self.server_address = server_address
        self.audio_player = AudioPlayer(sample_rate=48000)
        self.channel = None
        self.stub = None
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞—É–¥–∏–æ + —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)
            options = [
                ('grpc.max_send_message_length', 50 * 1024 * 1024),  # 50MB
                ('grpc.max_receive_message_length', 50 * 1024 * 1024),  # 50MB
                ('grpc.max_metadata_size', 1024 * 1024),  # 1MB –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            ]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∫–∞–Ω–∞–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
            self.channel = grpc.aio.insecure_channel(self.server_address, options=options)
            self.stub = streaming_pb2_grpc.StreamingServiceStub(self.channel)
            
            console.print(f"[bold green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É {self.server_address} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ[/bold green]")
            console.print(f"[blue]üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: 50MB[/blue]")
            return True
            
        except Exception as e:
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}[/bold red]")
            return False
    
    def connect_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞—É–¥–∏–æ + —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)
            options = [
                ('grpc.max_send_message_length', 50 * 1024 * 1024),  # 50MB
                ('grpc.max_receive_message_length', 50 * 1024 * 1024),  # 50MB
                ('grpc.max_metadata_size', 1024 * 1024),  # 1MB –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            ]
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
            import grpc
            self.channel = grpc.insecure_channel(self.server_address, options=options)
            self.stub = streaming_pb2_grpc.StreamingServiceStub(self.channel)
            
            console.print(f"[bold green]‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É {self.server_address} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ[/bold green]")
            console.print(f"[blue]üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: 50MB[/blue]")
            return True
            
        except Exception as e:
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}[/bold red]")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.channel:
            await self.channel.close()
            console.print("[bold yellow]üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞[/bold yellow]")
    
    def interrupt_stream(self):
        """–ú–ì–ù–û–í–ï–ù–ù–û –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π gRPC —Å—Ç—Ä–∏–º–∏–Ω–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"""
        try:
            console.print(f"[bold red]üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê gRPC: channel={self.channel}, stub={self.stub}[/bold red]")
            
            if self.channel:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
                try:
                    is_closed = self.channel.closed()
                    console.print(f"[blue]üîç –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç: {is_closed}[/blue]")
                except AttributeError:
                    console.print("[blue]üîç –ú–µ—Ç–æ–¥ .closed() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±[/blue]")
                    is_closed = False
                
                if not is_closed:
                    # –ú–ì–ù–û–í–ï–ù–ù–û –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª - —ç—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä–≤–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã!
                    console.print("[bold red]üö® –ó–ê–ö–†–´–í–ê–Æ gRPC –∫–∞–Ω–∞–ª...[/bold red]")
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: channel.close() - —ç—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω–∞, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞
                        console.print("[blue]üîç –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞...[/blue]")
                        loop.create_task(self._close_channel_and_recreate())
                    else:
                        # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é
                        console.print("[blue]üîç –°–æ–∑–¥–∞—é –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é...[/blue]")
                        self.channel = grpc.aio.insecure_channel(self.server_address)
                        self.stub = streaming_pb2_grpc.StreamingServiceStub(self.channel)
                        console.print("[bold green]‚úÖ –ù–æ–≤—ã–π gRPC –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤[/bold green]")
                else:
                    console.print("[yellow]‚ö†Ô∏è gRPC –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç[/yellow]")
            else:
                console.print("[yellow]‚ö†Ô∏è gRPC –∫–∞–Ω–∞–ª = None[/yellow]")
        except Exception as e:
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è gRPC —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}[/red]")
            import traceback
            console.print(f"[red]üîç Traceback: {traceback.format_exc()}[/red]")
    
    def force_interrupt_server(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ InterruptSession!"""
        logger.info(f"üö® force_interrupt_server() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        
        try:
            console.print("[bold red]üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ –°–ï–†–í–ï–†–ï![/bold red]")
            logger.info("   üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ –°–ï–†–í–ï–†–ï!")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –≤—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ InterruptSession –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
            if self.stub:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                    interrupt_request = streaming_pb2.InterruptSessionRequest(
                        session_id="force_interrupt",
                        reason="user_interruption"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                    console.print("[blue]üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...[/blue]")
                    logger.info("   üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                        loop.create_task(self._send_interrupt_request(interrupt_request))
                    else:
                        console.print("[yellow]‚ö†Ô∏è –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω[/yellow]")
                        
                except Exception as e:
                    console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}[/red]")
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}")
            else:
                console.print("[yellow]‚ö†Ô∏è gRPC stub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
                logger.warning("   ‚ö†Ô∏è gRPC stub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ force_interrupt_server: {e}[/red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ force_interrupt_server: {e}")
    
    async def _send_interrupt_request(self, interrupt_request):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            console.print("[blue]üîç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...[/blue]")
            logger.info("   üîç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
            
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ InterruptSession
            response = await self.stub.InterruptSession(interrupt_request)
            
            console.print(f"[bold green]‚úÖ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ! –û—Ç–≤–µ—Ç: {response}[/bold green]")
            logger.info(f"   ‚úÖ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ! –û—Ç–≤–µ—Ç: {response}")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}[/red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}")
    
    def close_connection(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã–≤–∞–µ—Ç gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        logger.info(f"üö® close_connection() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        
        try:
            console.print("[bold red]üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã–≤–∞—é gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ![/bold red]")
            logger.info("   üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã–≤–∞—é gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!")
            
            # 1Ô∏è‚É£ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            if self.channel:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                        close_task = loop.create_task(self._force_close_channel())
                        console.print("[blue]üîç –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∞[/blue]")
                    else:
                        # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                        self.channel.close()
                        console.print("[bold green]‚úÖ gRPC –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –Ω–∞–ø—Ä—è–º—É—é[/bold green]")
                except Exception as e:
                    console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞: {e}[/red]")
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            
            # 2Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º stub
            self.stub = None
            console.print("[bold green]‚úÖ gRPC stub —Å–±—Ä–æ—à–µ–Ω[/bold green]")
            
            # 3Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            self.channel = None
            console.print("[bold green]‚úÖ gRPC –∫–∞–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω[/bold green]")
            
            logger.info("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ close_connection: {e}[/red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ close_connection: {e}")
    
    async def _force_close_channel(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç gRPC –∫–∞–Ω–∞–ª"""
        try:
            console.print("[blue]üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—é gRPC –∫–∞–Ω–∞–ª...[/blue]")
            logger.info("   üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—é gRPC –∫–∞–Ω–∞–ª...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.channel is None:
                console.print("[yellow]‚ö†Ô∏è gRPC –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/yellow]")
                logger.info("   ‚ö†Ô∏è gRPC –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            await self.channel.close()
            
            console.print("[bold green]‚úÖ gRPC –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç[/bold green]")
            logger.info("   ‚úÖ gRPC –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞: {e}[/red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
    
    def reset_state(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info(f"üö® reset_state() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        
        try:
            console.print("[bold blue]üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞...[/bold blue]")
            logger.info("   üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # 1Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º stub
            self.stub = None
            console.print("[green]‚úÖ gRPC stub —Å–±—Ä–æ—à–µ–Ω[/green]")
            
            # 2Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            self.channel = None
            console.print("[green]‚úÖ gRPC –∫–∞–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω[/green]")
            
            # 3Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
            if self.audio_player:
                try:
                    if hasattr(self.audio_player, 'clear_all_audio_data'):
                        self.audio_player.clear_all_audio_data()
                        console.print("[green]‚úÖ –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –æ—á–∏—â–µ–Ω[/green]")
                    elif hasattr(self.audio_player, 'force_stop'):
                        self.audio_player.force_stop()
                        console.print("[green]‚úÖ –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/green]")
                except Exception as e:
                    console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞: {e}[/yellow]")
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞: {e}")
            
            console.print("[bold green]‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ![/bold green]")
            logger.info("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ!")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ reset_state: {e}[/red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ reset_state: {e}")
    
    def clear_buffers(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ gRPC –±—É—Ñ–µ—Ä—ã"""
        logger.info(f"üßπ clear_buffers() –≤—ã–∑–≤–∞–Ω –≤ {time.time():.3f}")
        
        try:
            console.print("[bold blue]üßπ –û—á–∏—â–∞—é –≤—Å–µ gRPC –±—É—Ñ–µ—Ä—ã...[/bold blue]")
            logger.info("   üßπ –û—á–∏—â–∞—é –≤—Å–µ gRPC –±—É—Ñ–µ—Ä—ã...")
            
            # 1Ô∏è‚É£ –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –∫–∞–Ω–∞–ª–∞
            if self.channel and hasattr(self.channel, 'close'):
                try:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–æ–≤
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    import asyncio
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        loop.create_task(self._force_close_channel())
                        console.print("[blue]üîç –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ gRPC –±—É—Ñ–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞[/blue]")
                    else:
                        # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                        self.channel.close()
                        console.print("[bold green]‚úÖ gRPC –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é[/bold green]")
                except Exception as e:
                    console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ gRPC –±—É—Ñ–µ—Ä–æ–≤: {e}[/yellow]")
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ gRPC –±—É—Ñ–µ—Ä–æ–≤: {e}")
            else:
                console.print("[blue]‚ÑπÔ∏è gRPC –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/blue]")
                logger.info("   ‚ÑπÔ∏è gRPC –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # 2Ô∏è‚É£ –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã stub
            if self.stub:
                self.stub = None
                console.print("[green]‚úÖ gRPC stub –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã[/green]")
            
            # 3Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
            import gc
            gc.collect()
            console.print("[green]‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã[/green]")
            
            console.print("[bold green]‚úÖ –í—Å–µ gRPC –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã![/bold green]")
            logger.info("   ‚úÖ –í—Å–µ gRPC –±—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã!")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ clear_buffers: {e}[/red]")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ clear_buffers: {e}")
    
    def interrupt_immediately(self):
        """–°–ò–ù–•–†–û–ù–ù–û–ï –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ - –∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!"""
        try:
            console.print("[bold red]üö® –°–ò–ù–•–†–û–ù–ù–û–ï –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ![/bold red]")
            
            # 1. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤
            if hasattr(self, 'current_call') and self.current_call and not self.current_call.done():
                self.current_call.cancel()
                console.print("[bold red]üö® –¢–µ–∫—É—â–∏–π gRPC –≤—ã–∑–æ–≤ –û–¢–ú–ï–ù–ï–ù![/bold red]")
            
            # 2. –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –∫–∞–Ω–∞–ª –¢–û–õ–¨–ö–û –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            import grpc
            interrupt_channel = grpc.insecure_channel(self.server_address)
            interrupt_stub = streaming_pb2_grpc.StreamingServiceStub(interrupt_channel)
            
            # 3. –°–ò–ù–•–†–û–ù–ù–û –≤—ã–∑—ã–≤–∞–µ–º InterruptSession
            if hasattr(self, 'hardware_id') and self.hardware_id:
                request = streaming_pb2.InterruptRequest(hardware_id=self.hardware_id)
                try:
                    response = interrupt_stub.InterruptSession(request, timeout=0.5)
                    console.print(f"[bold green]‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–µ—Ä–≤–∞–ª {len(response.interrupted_sessions)} —Å–µ—Å—Å–∏–π![/bold green]")
                except Exception as e:
                    console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ InterruptSession: {e}[/red]")
                finally:
                    interrupt_channel.close()
                    console.print("[bold red]üö® –ö–∞–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç![/bold red]")
            else:
                console.print("[yellow]‚ö†Ô∏è Hardware ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è[/yellow]")
                
        except Exception as e:
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}[/red]")
            import traceback
            console.print(f"[red]üîç Traceback: {traceback.format_exc()}[/red]")
    
    async def _force_interrupt_server_call(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info(f"üö® _force_interrupt_server_call() –Ω–∞—á–∞—Ç –≤ {time.time():.3f}")
        
        try:
            if hasattr(self, 'hardware_id') and self.hardware_id:
                logger.info(f"   üÜî Hardware ID: {self.hardware_id[:20]}...")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                request = streaming_pb2.InterruptRequest(hardware_id=self.hardware_id)
                logger.info("   üì§ –°–æ–∑–¥–∞–Ω InterruptRequest")
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                logger.info("   üîÑ –í—ã–∑—ã–≤–∞—é stub.InterruptSession...")
                start_time = time.time()
                response = await self.stub.InterruptSession(request)
                call_time = (time.time() - start_time) * 1000
                logger.info(f"   ‚è±Ô∏è stub.InterruptSession: {call_time:.1f}ms")
                
                if response.success:
                    logger.info(f"   ‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ—Ä–≤–∞–ª {len(response.interrupted_sessions)} —Å–µ—Å—Å–∏–π")
                    console.print(f"[bold green]‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ—Ä–≤–∞–ª {len(response.interrupted_sessions)} —Å–µ—Å—Å–∏–π![/bold green]")
                    console.print(f"[bold green]‚úÖ –ü—Ä–µ—Ä–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {response.interrupted_sessions}[/bold green]")
                else:
                    logger.warning("   ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                    console.print(f"[yellow]‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è[/yellow]")
            else:
                logger.warning("   ‚ö†Ô∏è Hardware ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                console.print("[yellow]‚ö†Ô∏è Hardware ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è[/yellow]")
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}[/red]")
        
        logger.info(f"   üèÅ _force_interrupt_server_call –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {time.time():.3f}")
    
    def _force_interrupt_server_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (fallback)"""
        try:
            if hasattr(self, 'hardware_id') and self.hardware_id:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                request = streaming_pb2.InterruptRequest(hardware_id=self.hardware_id)
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                response = self.stub.InterruptSession(request)
                
                if response.success:
                    console.print(f"[bold green]‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ—Ä–≤–∞–ª {len(response.interrupted_sessions)} —Å–µ—Å—Å–∏–π![/bold green]")
                    console.print(f"[bold green]‚úÖ –ü—Ä–µ—Ä–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {response.interrupted_sessions}[/bold green]")
                else:
                    console.print(f"[yellow]‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è[/yellow]")
            else:
                console.print("[yellow]‚ö†Ô∏è Hardware ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è[/yellow]")
        except Exception as e:
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}[/red]")
    
    async def _force_recreate_channel(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª
            if self.channel:
                try:
                    await self.channel.close()
                    console.print("[bold red]üö® –°—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã—Ç![/bold red]")
                except:
                    pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            self.channel = grpc.aio.insecure_channel(self.server_address)
            self.stub = streaming_pb2_grpc.StreamingServiceStub(self.channel)
            console.print("[bold green]‚úÖ –ù–æ–≤—ã–π gRPC –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è[/bold green]")
        except Exception as e:
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}[/red]")
    
    async def _close_channel_and_recreate(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –∏ –≤–æ—Å—Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ"""
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            await self.channel.close()
            console.print("[bold red]üö® –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ gRPC –∫–∞–Ω–∞–ª–∞![/bold red]")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            await self._recreate_channel()
        except Exception as e:
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞: {e}[/red]")
    
    async def _recreate_channel(self):
        """–í–æ—Å—Å–æ–∑–¥–∞–µ—Ç gRPC –∫–∞–Ω–∞–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        try:
            self.channel = grpc.aio.insecure_channel(self.server_address)
            self.stub = streaming_pb2_grpc.StreamingServiceStub(self.channel)
            console.print("[bold green]‚úÖ –ù–æ–≤—ã–π gRPC –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤[/bold green]")
        except Exception as e:
            console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è gRPC –∫–∞–Ω–∞–ª–∞: {e}[/red]")
    
    async def stream_audio(self, prompt: str, screenshot_base64: str = None, screen_info: dict = None, hardware_id: str = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞.
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
        –æ–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã), –∞ –∑–∞—Ç–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, 
        –ø–æ—Å–∫–æ–ª—å–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏.
        """
        if not self.stub:
            console.print("[bold red]‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold red]")
            return
        
        call = None
        try:
            console.print(f"[bold yellow]üöÄ –ó–∞–ø—É—Å–∫ gRPC —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è: {prompt}[/bold yellow]")
            
            if screenshot_base64:
                console.print(f"[bold blue]üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç: {screen_info.get('width', 0)}x{screen_info.get('height', 0)} –ø–∏–∫—Å–µ–ª–µ–π[/bold blue]")
            
            if hardware_id:
                console.print(f"[bold blue]üÜî –û—Ç–ø—Ä–∞–≤–ª—è—é Hardware ID: {hardware_id[:16]}...[/bold blue]")
            
            self.audio_player.start_playback()
            
            request = streaming_pb2.StreamRequest(
                prompt=prompt,
                screenshot=screenshot_base64 if screenshot_base64 else "",
                screen_width=screen_info.get('width', 0) if screen_info else 0,
                screen_height=screen_info.get('height', 0) if screen_info else 0,
                hardware_id=hardware_id if hardware_id else ""
            )
            
            call = self.stub.StreamAudio(request)
            
            # –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞, —á—Ç–æ–±—ã main –º–æ–≥ –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å
            yield call
            
            async for response in call:
                if response.HasField('text_chunk'):
                    console.print(f"[green]üìÑ –¢–µ–∫—Å—Ç: {response.text_chunk}[/green]")
                
                elif response.HasField('audio_chunk'):
                    audio_chunk = np.frombuffer(
                        response.audio_chunk.audio_data, 
                        dtype=response.audio_chunk.dtype
                    ).reshape(response.audio_chunk.shape)
                    console.print(f"[blue]üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω: {len(audio_chunk)} —Å—ç–º–ø–ª–æ–≤[/blue]")
                    self.audio_player.add_chunk(audio_chunk)
                
                elif response.HasField('end_message'):
                    console.print(f"[bold green]‚úÖ {response.end_message}[/bold green]")
                    break
                
                elif response.HasField('error_message'):
                    console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.error_message}[/bold red]")
                    break
            
            # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º wait_for_queue_empty - –ø—É—Å—Ç—å –∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            # self.audio_player.wait_for_queue_empty()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            # self.audio_player.wait_for_natural_completion()  # ‚Üê –≠–¢–û–¢ –ú–ï–¢–û–î –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            if hasattr(self.audio_player, 'wait_for_queue_empty'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                is_completed = self.audio_player.wait_for_queue_empty()
                if is_completed:
                    console.print("[blue]üéµ –ê—É–¥–∏–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/blue]")
                else:
                    console.print("[blue]üéµ –ê—É–¥–∏–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è...[/blue]")
            else:
                console.print("[yellow]‚ö†Ô∏è –ú–µ—Ç–æ–¥ wait_for_queue_empty –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞, –Ω–æ –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            console.print("[bold green]‚úÖ gRPC —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω, –∞—É–¥–∏–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è...[/bold green]")
            
        except grpc.aio.AioRpcError as e:
            if e.code() == grpc.StatusCode.CANCELLED:
                console.print("[bold yellow]‚ö†Ô∏è –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º[/bold yellow]")
            else:
                console.print(f"[bold red]‚ùå gRPC –æ—à–∏–±–∫–∞: {e.details()}[/bold red]")
        except Exception as e:
            console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ: {e}[/bold red]")
        finally:
            # –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—É—Å—Ç—å –∞—É–¥–∏–æ –∏–≥—Ä–∞–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞
            # if self.audio_player.is_playing:
            #     self.audio_player.stop_playback()
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ call –∑–∞–≤–µ—Ä—à–µ–Ω, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if call and not call.done():
                call.cancel()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client = GrpcClient()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        if not await client.connect():
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            prompt = console.input("[bold cyan]üé§ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç (–∏–ª–∏ 'quit'): [/bold cyan]")
            if prompt.lower() == 'quit':
                break
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
            await client.stream_audio(prompt)
    
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
    except Exception as e:
        console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
    finally:
        await client.disconnect()
        logger.info("gRPC –∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold yellow]üëã –í—ã—Ö–æ–¥...[/bold yellow]")
