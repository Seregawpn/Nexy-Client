"""
RealtimeDeviceMonitor - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
"""

import subprocess
import time
import threading
import logging
from typing import Set, Dict, List, Optional, Callable
from dataclasses import dataclass
from enum import Enum
import queue

logger = logging.getLogger(__name__)

class DeviceEventType(Enum):
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    DEVICE_ADDED = "device_added"
    DEVICE_REMOVED = "device_removed"
    DEVICE_CHANGED = "device_changed"

@dataclass
class DeviceEvent:
    """–°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    event_type: DeviceEventType
    device_name: str
    timestamp: float
    previous_devices: Set[str]
    current_devices: Set[str]

class RealtimeDeviceMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    4. –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    """
    
    def __init__(self, switch_audio_path: str = '/opt/homebrew/bin/SwitchAudioSource'):
        self.switch_audio_path = switch_audio_path
        self.monitoring = False
        self.monitor_thread = None
        self.monitor_interval = 1.0  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        # –ö—ç—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self._previous_devices: Set[str] = set()
        self._current_devices: Set[str] = set()
        
        # Callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._callbacks: List[Callable] = []
        
        # –û—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._event_queue = queue.Queue()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π
        self._lock = threading.RLock()
        
        logger.info("üéµ RealtimeDeviceMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            with self._lock:
                if self.monitoring:
                    logger.info("‚ôªÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return
                
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                self._current_devices = self._get_current_devices()
                self._previous_devices = self._current_devices.copy()
                
                logger.info(f"üì± –ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self._current_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                for device in self._current_devices:
                    logger.info(f"  üì± {device}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                self.monitoring = True
                self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
                self.monitor_thread.start()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
                self.event_thread = threading.Thread(target=self._event_processor_loop, daemon=True)
                self.event_thread.start()
                
                logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            with self._lock:
                if not self.monitoring:
                    logger.info("‚ôªÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return
                
                logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
                
                self.monitoring = False
                
                if self.monitor_thread and self.monitor_thread.is_alive():
                    self.monitor_thread.join(timeout=2.0)
                
                if hasattr(self, 'event_thread') and self.event_thread.is_alive():
                    self.event_thread.join(timeout=2.0)
                
                logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        while self.monitoring:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                current_devices = self._get_current_devices()
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–ø–∏—Å–∫–æ–º
                if current_devices != self._previous_devices:
                    logger.info("üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö!")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    added_devices = current_devices - self._previous_devices
                    removed_devices = self._previous_devices - current_devices
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                    if added_devices:
                        event = DeviceEvent(
                            event_type=DeviceEventType.DEVICE_ADDED,
                            device_name=list(added_devices)[0],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ
                            timestamp=time.time(),
                            previous_devices=self._previous_devices.copy(),
                            current_devices=current_devices.copy()
                        )
                        self._event_queue.put(event)
                        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {added_devices}")
                    
                    if removed_devices:
                        event = DeviceEvent(
                            event_type=DeviceEventType.DEVICE_REMOVED,
                            device_name=list(removed_devices)[0],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                            timestamp=time.time(),
                            previous_devices=self._previous_devices.copy(),
                            current_devices=current_devices.copy()
                        )
                        self._event_queue.put(event)
                        logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {removed_devices}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    self._previous_devices = current_devices.copy()
                    self._current_devices = current_devices
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(self.monitor_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(self.monitor_interval)
    
    def _event_processor_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π...")
        
        while self.monitoring:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                event = self._event_queue.get(timeout=1.0)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                self._process_device_event(event)
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self._event_queue.task_done()
                
            except queue.Empty:
                # –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def _process_device_event(self, event: DeviceEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            logger.info(f"üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: {event.event_type.value} - {event.device_name}")
            
            if event.event_type == DeviceEventType.DEVICE_ADDED:
                self._handle_device_added(event)
            elif event.event_type == DeviceEventType.DEVICE_REMOVED:
                self._handle_device_removed(event)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks
            self._notify_callbacks(event)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def _handle_device_added(self, event: DeviceEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            logger.info(f"‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {event.device_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º
            if self._is_high_priority_device(event.device_name):
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {event.device_name}")
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                success = self._switch_to_device(event.device_name)
                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {event.device_name}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {event.device_name}")
            else:
                logger.info(f"‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {event.device_name} –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def _handle_device_removed(self, event: DeviceEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            logger.info(f"‚ûñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {event.device_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            current_device = self._get_current_device()
            
            if current_device == event.device_name:
                logger.info(f"üîÑ –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {event.device_name}")
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                best_device = self._find_best_available_device(event.current_devices)
                
                if best_device:
                    logger.info(f"üéØ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device}")
                    success = self._switch_to_device(best_device)
                    if success:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {best_device}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {best_device}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
            else:
                logger.info(f"‚ÑπÔ∏è –û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {event.device_name} –Ω–µ –±—ã–ª–æ —Ç–µ–∫—É—â–∏–º")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def _get_current_devices(self) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            result = subprocess.run([self.switch_audio_path, '-a'],
                                  capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                devices = {line.strip() for line in result.stdout.strip().split('\n') if line.strip()}
                return devices
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {result.stderr}")
                return set()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SwitchAudioSource: {e}")
            return set()
    
    def _get_current_device(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            result = subprocess.run([self.switch_audio_path, '-c'],
                                  capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {result.stderr}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SwitchAudioSource: {e}")
            return None
    
    def _is_high_priority_device(self, device_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º"""
        name_lower = device_name.lower()
        
        # –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        high_priority_keywords = [
            'airpods', 'beats', 'bluetooth', 'wireless', 'bt'
        ]
        
        return any(keyword in name_lower for keyword in high_priority_keywords)
    
    def _find_best_available_device(self, available_devices: Set[str]) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            # –ò—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã
            real_devices = [name for name in available_devices 
                          if not self._is_virtual_device(name) 
                          and 'microphone' not in name.lower()]
            
            if not real_devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return None
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            device_priorities = {
                'airpods': 95,
                'beats': 90,
                'bluetooth': 85,
                'wireless': 85,
                'bt': 85,
                'usb': 80,
                'speakers': 70
            }
            
            # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            best_device = None
            best_priority = 0
            
            for device in real_devices:
                device_lower = device.lower()
                priority = 50  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                for keyword, device_priority in device_priorities.items():
                    if keyword in device_lower:
                        priority = device_priority
                        break
                
                if priority > best_priority:
                    best_priority = priority
                    best_device = device
            
            return best_device
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return None
    
    def _is_virtual_device(self, device_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º"""
        name_lower = device_name.lower()
        virtual_keywords = ['blackhole', 'loopback', 'virtual']
        return any(keyword in name_lower for keyword in virtual_keywords)
    
    def _switch_to_device(self, device_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º OUTPUT
            result_output = subprocess.run([self.switch_audio_path, '-s', device_name],
                                         capture_output=True, text=True, timeout=5)
            
            if result_output.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è OUTPUT: {result_output.stderr}")
                return False
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º INPUT (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
            result_input = subprocess.run([self.switch_audio_path, '-i', device_name],
                                        capture_output=True, text=True, timeout=5)
            
            if result_input.returncode != 0:
                # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AirPods)
                if 'airpods' in device_name.lower():
                    logger.info(f"‚ÑπÔ∏è AirPods –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç INPUT –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SwitchAudioSource")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å INPUT: {result_input.stderr}")
            else:
                logger.info(f"‚úÖ INPUT –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {device_name}")
            
            # –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
            time.sleep(1.0)
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {device_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def add_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self._callbacks.append(callback)
    
    def _notify_callbacks(self, event: DeviceEvent):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ callbacks"""
        for callback in self._callbacks:
            try:
                callback(event)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
    
    def get_current_devices(self) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        return self._current_devices.copy()
    
    def is_monitoring(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        return self.monitoring

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RealtimeDeviceMonitor
_global_realtime_monitor = None

def get_global_realtime_monitor() -> RealtimeDeviceMonitor:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RealtimeDeviceMonitor"""
    global _global_realtime_monitor
    
    if _global_realtime_monitor is None:
        _global_realtime_monitor = RealtimeDeviceMonitor()
    
    return _global_realtime_monitor

def stop_global_realtime_monitor():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RealtimeDeviceMonitor"""
    global _global_realtime_monitor
    
    if _global_realtime_monitor:
        _global_realtime_monitor.stop_monitoring()
        _global_realtime_monitor = None
