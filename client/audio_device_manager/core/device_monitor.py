"""
Device Monitor - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import asyncio
import logging
from typing import Dict, List, Optional, Callable
from .types import AudioDevice, DeviceChange, DeviceChangeCallback
from ..macos.switchaudio_bridge import SwitchAudioBridge

logger = logging.getLogger(__name__)

class DeviceMonitor:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    def __init__(self):
        self._is_monitoring = False
        self._callbacks: Dict[str, DeviceChangeCallback] = {}
        self._core_audio_bridge = SwitchAudioBridge()
        self._device_cache: Dict[str, AudioDevice] = {}
        self._monitoring_task: Optional[asyncio.Task] = None
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self._is_monitoring:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            self._is_monitoring = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Core Audio –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self._core_audio_bridge.start_monitoring(self._on_device_changed)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            initial_devices = await self._core_audio_bridge.get_available_devices()
            self._device_cache = {device.id: device for device in initial_devices}
            
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(initial_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self._is_monitoring = False
            raise
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self._is_monitoring:
            return
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Core Audio –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self._core_audio_bridge.stop_monitoring()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._is_monitoring = False
            self._callbacks.clear()
            self._device_cache.clear()
            
            if self._monitoring_task and not self._monitoring_task.done():
                self._monitoring_task.cancel()
                try:
                    await self._monitoring_task
                except asyncio.CancelledError:
                    pass
            
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def register_callback(self, module_name: str, callback: DeviceChangeCallback):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
        try:
            self._callbacks[module_name] = callback
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è –º–æ–¥—É–ª—è: {module_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback –¥–ª—è {module_name}: {e}")
    
    def unregister_callback(self, module_name: str):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback"""
        try:
            if module_name in self._callbacks:
                del self._callbacks[module_name]
                logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –º–æ–¥—É–ª—è: {module_name}")
            else:
                logger.warning(f"‚ö†Ô∏è Callback –¥–ª—è –º–æ–¥—É–ª—è {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback –¥–ª—è {module_name}: {e}")
    
    async def get_available_devices(self) -> List[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            return await self._core_audio_bridge.get_available_devices()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return []
    
    async def get_current_devices(self) -> List[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if self._is_monitoring:
                return list(self._device_cache.values())
            else:
                # –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
                return await self._core_audio_bridge.get_available_devices()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return []
    
    async def get_default_device(self) -> Optional[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            return await self._core_audio_bridge.get_default_output_device()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return None
    
    async def set_default_device(self, device_id: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            return await self._core_audio_bridge.set_default_output_device(device_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return False
    
    async def _on_device_changed(self, changes: DeviceChange):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Ç Core Audio"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._device_cache = changes.current_devices
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if changes.added:
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {[d.name for d in changes.added]}")
            if changes.removed:
                logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {[d.name for d in changes.removed]}")
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if changes.added or changes.removed:
                logger.info(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ–±–∞–≤–ª–µ–Ω–æ={len(changes.added)}, —É–¥–∞–ª–µ–Ω–æ={len(changes.removed)}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            await self._notify_callbacks(changes)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    async def _notify_callbacks(self, changes: DeviceChange):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback'–æ–≤"""
        try:
            if not self._callbacks:
                logger.debug("üîç –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback'–æ–≤")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            tasks = []
            for module_name, callback in self._callbacks.items():
                task = asyncio.create_task(
                    self._safe_callback_execution(module_name, callback, changes)
                )
                tasks.append(task)
            
            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö callback'–æ–≤
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è callback'–æ–≤: {e}")
    
    async def _safe_callback_execution(self, module_name: str, callback: DeviceChangeCallback, changes: DeviceChange):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ callback'–∞"""
        try:
            await callback(changes)
            logger.debug(f"‚úÖ Callback –º–æ–¥—É–ª—è {module_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –º–æ–¥—É–ª—è {module_name}: {e}")
    
    def is_monitoring(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        return self._is_monitoring
    
    def get_registered_modules(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        return list(self._callbacks.keys())
    
    def get_device_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        return len(self._device_cache)
