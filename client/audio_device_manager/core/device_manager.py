"""
–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import asyncio
import logging
from typing import Optional, Dict, Any, List, Callable

from .types import (
    AudioDevice, DeviceChange, DeviceType, DeviceStatus, 
    DeviceMetrics, AudioDeviceManagerConfig,
    DeviceChangeCallback, DeviceSwitchCallback, ErrorCallback, MetricsCallback
)
from .device_monitor import DeviceMonitor
from .device_switcher import DeviceSwitcher

logger = logging.getLogger(__name__)


class AudioDeviceManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    def __init__(self, config: Optional[AudioDeviceManagerConfig] = None):
        self.config = config or AudioDeviceManagerConfig()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥—É–ª—è
        self.device_monitor = DeviceMonitor()
        self.device_switcher = DeviceSwitcher(self.device_monitor)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.current_device: Optional[AudioDevice] = None
        self.metrics = DeviceMetrics()
        
        # Callbacks
        self.on_device_changed: Optional[DeviceChangeCallback] = None
        self.on_device_switched: Optional[DeviceSwitchCallback] = None
        self.on_error: Optional[ErrorCallback] = None
        self.on_metrics_updated: Optional[MetricsCallback] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._setup_components()
    
    def _setup_components(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DeviceMonitor
            self.device_monitor.register_callback("device_manager", self._on_device_changed)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DeviceSwitcher
            self.device_switcher.set_switch_callback(self._on_device_switched)
            
            logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã AudioDeviceManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if self.is_running:
                logger.warning("‚ö†Ô∏è AudioDeviceManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ AudioDeviceManager...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.device_monitor.start_monitoring()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ DeviceMonitor
            devices = await self.device_monitor.get_available_devices()
            self.metrics.total_devices = len(devices)
            self.metrics.available_devices = len([d for d in devices if d.is_available])
            self.metrics.unavailable_devices = len([d for d in devices if not d.is_available])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            self.current_device = self._find_current_device(devices)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if self.config.auto_switch_enabled:
                await self._auto_switch_to_best_device()
            
            self.is_running = True
            logger.info(f"‚úÖ AudioDeviceManager –∑–∞–ø—É—â–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –º–µ—Ç—Ä–∏–∫–∞—Ö
            self._notify_metrics_updated()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AudioDeviceManager: {e}")
            self._notify_error(e, "start")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if not self.is_running:
                logger.warning("‚ö†Ô∏è AudioDeviceManager –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AudioDeviceManager...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.device_monitor.stop_monitoring()
            
            self.is_running = False
            self.current_device = None
            
            logger.info("‚úÖ AudioDeviceManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AudioDeviceManager: {e}")
            self._notify_error(e, "stop")
            return False
    
    async def get_available_devices(self, device_type: Optional[DeviceType] = None) -> List[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            devices = await self.device_monitor.get_available_devices()
            
            if device_type:
                devices = [d for d in devices if d.type == device_type]
            
            return devices
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            self._notify_error(e, "get_available_devices")
            return []
    
    async def get_current_device(self) -> Optional[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            if not self.is_running:
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            devices = await self.device_monitor.get_available_devices()
            self.current_device = self._find_current_device(devices)
            
            return self.current_device
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            self._notify_error(e, "get_current_device")
            return None
    
    async def switch_to_device(self, device: AudioDevice) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            if not self.is_running:
                logger.warning("‚ö†Ô∏è AudioDeviceManager –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DeviceSwitcher
            success = await self.device_switcher._switch_to_device(device)
            
            if success:
                self.current_device = device
                self.metrics.total_switches += 1
                self.metrics.successful_switches += 1
                self.metrics.last_switch_time = device.last_seen
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {device.name}")
            else:
                self.metrics.total_switches += 1
                self.metrics.failed_switches += 1
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {device.name}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            self._notify_device_switched(device, success)
            self._notify_metrics_updated()
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            self._notify_error(e, "switch_to_device")
            return False
    
    async def get_best_device(self, device_type: DeviceType = DeviceType.OUTPUT) -> Optional[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø—É"""
        try:
            devices = await self.get_available_devices(device_type)
            if not devices:
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É DeviceSwitcher –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if hasattr(self.device_switcher, '_find_best_device'):
                return self.device_switcher._find_best_device(devices)
            else:
                # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
                output_devices = [d for d in devices if d.type == DeviceType.OUTPUT and d.is_available]
                if output_devices:
                    return min(output_devices, key=lambda x: x.priority.value)
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            self._notify_error(e, "get_best_device")
            return None
    
    def get_metrics(self) -> DeviceMetrics:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        return self.metrics
    
    def is_device_available(self, device_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device = self.device_monitor.get_device_by_id(device_id)
            return device is not None and device.is_available
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def set_auto_switch_enabled(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
        self.config.auto_switch_enabled = enabled
        self.device_switcher.auto_switch_enabled = enabled
        logger.info(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}")
    
    def set_device_priority(self, device_id: str, priority: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            self.config.device_priorities[device_id] = priority
            logger.info(f"üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {priority}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e}")
            self._notify_error(e, "set_device_priority")
    
    # Callback –º–µ—Ç–æ–¥—ã
    def set_device_changed_callback(self, callback: DeviceChangeCallback):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.on_device_changed = callback
    
    def set_device_switched_callback(self, callback: DeviceSwitchCallback):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.on_device_switched = callback
    
    def set_error_callback(self, callback: ErrorCallback):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –æ—à–∏–±–æ–∫"""
        self.on_error = callback
    
    def set_metrics_callback(self, callback: MetricsCallback):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –º–µ—Ç—Ä–∏–∫"""
        self.on_metrics_updated = callback
    
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    def _find_current_device(self, devices: List[AudioDevice]) -> Optional[AudioDevice]:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_devices = [d for d in devices if d.is_default and d.is_available]
            if default_devices:
                return default_devices[0]
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—â–µ–º –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            output_devices = [d for d in devices if d.type == DeviceType.OUTPUT and d.is_available]
            if output_devices:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                best_device = min(output_devices, key=lambda x: x.priority.value)
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_device.priority.value})")
                return best_device
            
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return None
    
    async def _auto_switch_to_best_device(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            devices = await self.get_available_devices()
            if not devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            best_device = self._find_current_device(devices)
            if not best_device:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                return
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            logger.info(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞: {best_device.name}")
            success = await self.device_switcher.switch_to_device_type(DeviceType.OUTPUT)
            
            if success:
                self.current_device = best_device
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {best_device.name}")
                self.metrics.total_switches += 1
                self.metrics.successful_switches += 1
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {best_device.name}")
                self.metrics.total_switches += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def _handle_device_changes_async(self, change: DeviceChange):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            logger.debug("üîç [DEBUG] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ DeviceSwitcher –¥–æ—Å—Ç—É–ø–µ–Ω
            if not self.device_switcher:
                logger.warning("‚ö†Ô∏è DeviceSwitcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            logger.debug(f"üîç [DEBUG] DeviceSwitcher: {type(self.device_switcher)}")
            logger.debug(f"üîç [DEBUG] DeviceSwitcher –º–µ—Ç–æ–¥—ã: {dir(self.device_switcher)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ DeviceSwitcher
            if hasattr(self.device_switcher, 'handle_device_changes'):
                logger.debug("üîç [DEBUG] –í—ã–∑—ã–≤–∞–µ–º device_switcher.handle_device_changes")
                result = await self.device_switcher.handle_device_changes(change)
                logger.debug(f"üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç handle_device_changes: {result}")
            else:
                logger.warning("‚ö†Ô∏è DeviceSwitcher –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ handle_device_changes")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ
            if change.added:
                logger.info(f"‚ûï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {[d.name for d in change.added]}")
                logger.debug("üîç [DEBUG] –í—ã–∑—ã–≤–∞–µ–º _auto_switch_to_best_device")
                await self._auto_switch_to_best_device()
            
            logger.debug("üîç [DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            import traceback
            logger.error(f"üîç [DEBUG] Traceback: {traceback.format_exc()}")
    
    def _on_device_changed(self, change: DeviceChange):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.metrics.total_devices = len(change.current_devices)
            self.metrics.available_devices = len([d for d in change.current_devices.values() if d.is_available])
            self.metrics.unavailable_devices = len([d for d in change.current_devices.values() if not d.is_available])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ DeviceSwitcher (–±–µ–∑ await)
            if hasattr(self.config, 'auto_switch_enabled') and self.config.auto_switch_enabled:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                try:
                    logger.debug("üîç [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                    loop = asyncio.get_event_loop()
                    logger.debug(f"üîç [DEBUG] Event loop: {loop}")
                    logger.debug(f"üîç [DEBUG] Event loop –∑–∞–ø—É—â–µ–Ω: {loop.is_running()}")
                    
                    if loop.is_running():
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_task –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                        logger.debug("üîç [DEBUG] –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É _handle_device_changes_async")
                        task = loop.create_task(self._handle_device_changes_async(change))
                        logger.debug(f"üîç [DEBUG] –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task}")
                        # –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                    else:
                        logger.debug("Event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                except RuntimeError as e:
                    logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop: {e}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
                    import traceback
                    logger.error(f"üîç [DEBUG] Traceback —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {traceback.format_exc()}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            self._notify_device_changed(change)
            self._notify_metrics_updated()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            self._notify_error(e, "_on_device_changed")
    
    def _on_device_switched(self, device: AudioDevice, success: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if success:
                self.current_device = device
                self.metrics.successful_switches += 1
            else:
                self.metrics.failed_switches += 1
            
            self.metrics.total_switches += 1
            self.metrics.last_switch_time = device.last_seen
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            self._notify_device_switched(device, success)
            self._notify_metrics_updated()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            self._notify_error(e, "_on_device_switched")
    
    def _notify_device_changed(self, change: DeviceChange):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self.on_device_changed:
            try:
                self.on_device_changed(change)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def _notify_device_switched(self, device: AudioDevice, success: bool):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self.on_device_switched:
            try:
                self.on_device_switched(device, success)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def _notify_error(self, error: Exception, context: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö"""
        if self.on_error:
            try:
                self.on_error(error, context)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error callback: {e}")
    
    def _notify_metrics_updated(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫"""
        if self.on_metrics_updated:
            try:
                self.on_metrics_updated(self.metrics)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ metrics callback: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await self.stop()
            logger.info("üßπ AudioDeviceManager –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ AudioDeviceManager: {e}")
