"""
Device Switcher - –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import logging
from typing import List, Optional, Dict, Callable
from .types import AudioDevice, DeviceChange, DeviceType
from .device_monitor import DeviceMonitor

logger = logging.getLogger(__name__)

class DeviceSwitcher:
    """–õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    def __init__(self, device_monitor: DeviceMonitor):
        self.device_monitor = device_monitor
        self.current_device: Optional[AudioDevice] = None
        self.auto_switch_enabled = True
        
        # Callbacks
        self.on_device_switched: Optional[Callable] = None
        self.on_error: Optional[Callable] = None
    
    def set_switch_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.on_device_switched = callback
    
    def set_error_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –æ—à–∏–±–æ–∫"""
        self.on_error = callback
        
    async def handle_device_changes(self, changes: DeviceChange):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            if not self.auto_switch_enabled:
                logger.debug("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                return
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
            if changes.added:
                await self._handle_new_devices(changes.added, changes.current_devices)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            if changes.removed:
                await self._handle_removed_devices(changes.removed, changes.current_devices)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            await self._update_current_device(changes.current_devices)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    async def _handle_new_devices(self, new_devices: List[AudioDevice], all_devices: Dict[str, AudioDevice]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if not new_devices:
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö
            best_new_device = self._find_best_device(new_devices)
            if not best_new_device:
                return
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            if self.current_device:
                if best_new_device.priority.value > self.current_device.priority.value:
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_new_device.name}")
                    await self._switch_to_device(best_new_device)
                else:
                    logger.info(f"‚ÑπÔ∏è –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {best_new_device.name} –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_new_device.name}")
                await self._switch_to_device(best_new_device)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    async def _handle_removed_devices(self, removed_devices: List[AudioDevice], all_devices: Dict[str, AudioDevice]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if not removed_devices:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            current_removed = False
            if self.current_device:
                for removed_device in removed_devices:
                    if removed_device.id == self.current_device.id:
                        current_removed = True
                        logger.info(f"‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {removed_device.name}")
                        break
            
            if current_removed:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                best_available = self._find_best_device(list(all_devices.values()))
                if best_available:
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_available.name}")
                    await self._switch_to_device(best_available)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                    self.current_device = None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    async def _update_current_device(self, all_devices: Dict[str, AudioDevice]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        try:
            if not all_devices:
                self.current_device = None
                return
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ
            if not self.current_device:
                best_device = self._find_best_device(list(all_devices.values()))
                if best_device:
                    self.current_device = best_device
                    logger.info(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                if self.current_device.id in all_devices:
                    self.current_device = all_devices[self.current_device.id]
                else:
                    # –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                    self.current_device = None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    
    def _find_best_device(self, devices: List[AudioDevice]) -> Optional[AudioDevice]:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        try:
            if not devices:
                return None
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã)
            connected_devices = [
                d for d in devices 
                if d.status.value == "available" and d.type == DeviceType.OUTPUT
            ]
            
            if not connected_devices:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–±—ã–≤–∞–Ω–∏–µ)
            sorted_devices = sorted(connected_devices, key=lambda x: x.priority.value, reverse=True)
            
            best_device = sorted_devices[0]
            logger.info(f"üèÜ –õ—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device.name} (—Ç–∏–ø: {best_device.type.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_device.priority})")
            
            return best_device
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return None
    
    async def _switch_to_device(self, device: AudioDevice):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name} ({device.type.value})")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            success = await self.device_monitor.set_default_device(device.id)
            if success:
                self.current_device = device
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: {device.name}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                self._log_device_info(device)
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {device.name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device.name}: {e}")
    
    def _log_device_info(self, device: AudioDevice):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        try:
            logger.info(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}")
            logger.info(f"   –¢–∏–ø: {device.type.value}")
            logger.info(f"   –ö–∞–Ω–∞–ª—ã: {device.channels}")
            logger.info(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {device.priority}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            name_lower = device.name.lower()
            is_bluetooth = 'bluetooth' in name_lower or 'airpods' in name_lower
            is_usb = 'usb' in name_lower
            is_builtin = 'built-in' in name_lower or 'internal' in name_lower or 'macbook' in name_lower
            
            logger.info(f"   Bluetooth: {'–î–∞' if is_bluetooth else '–ù–µ—Ç'}")
            logger.info(f"   USB: {'–î–∞' if is_usb else '–ù–µ—Ç'}")
            logger.info(f"   –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ: {'–î–∞' if is_builtin else '–ù–µ—Ç'}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
    
    async def switch_to_best_device(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            devices = await self.device_monitor.get_current_devices()
            best_device = self._find_best_device(devices)
            
            if best_device:
                await self._switch_to_device(best_device)
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}")
            return False
    
    async def switch_to_device_type(self, device_type: DeviceType) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            devices = await self.device_monitor.get_current_devices()
            type_devices = [d for d in devices if d.type == device_type and d.status.value == "available"]
            
            if not type_devices:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ç–∏–ø–∞ {device_type.value}")
                return False
            
            best_device = self._find_best_device(type_devices)
            if best_device:
                await self._switch_to_device(best_device)
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–∏–ø–∞ {device_type.value}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_type.value}: {e}")
            return False
    
    def enable_auto_switch(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
        self.auto_switch_enabled = True
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
    
    def disable_auto_switch(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
        self.auto_switch_enabled = False
        logger.info("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    
    def get_current_device(self) -> Optional[AudioDevice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return self.current_device
    
    def is_auto_switch_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ"""
        return self.auto_switch_enabled











































