"""
–°–∏–º—É–ª—è—Ü–∏—è —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ä–µ—Å—É—Ä—Å–∞–º
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã PyInstaller –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
"""

import sys
import os
from pathlib import Path
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
CLIENT_ROOT = Path(__file__).parent
sys.path.insert(0, str(CLIENT_ROOT))
sys.path.insert(0, str(CLIENT_ROOT / "modules"))

def simulate_pyinstaller_onefile():
    """
    –°–∏–º—É–ª—è—Ü–∏—è PyInstaller onefile —Ä–µ–∂–∏–º–∞
    –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç sys._MEIPASS
    """
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢ 1: –°–∏–º—É–ª—è—Ü–∏—è PyInstaller ONEFILE —Ä–µ–∂–∏–º–∞")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ _MEIPASS
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ PyInstaller)
        assets_src = CLIENT_ROOT / "assets"
        assets_dst = temp_path / "assets"
        
        print(f"üìÅ –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤: {temp_path}")
        shutil.copytree(assets_src, assets_dst)
        print(f"   ‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã assets/ -> {assets_dst}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sys._MEIPASS
        sys._MEIPASS = str(temp_path)
        print(f"   ‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω sys._MEIPASS = {sys._MEIPASS}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
            from modules.welcome_message.utils.resource_path import (
                get_resource_base_path,
                get_resource_path,
                resource_exists
            )
            from modules.welcome_message.core.types import WelcomeConfig
            
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            
            base_path = get_resource_base_path()
            print(f"   ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: {base_path}")
            print(f"   ‚Ä¢ –†–∞–≤–µ–Ω _MEIPASS: {str(base_path) == sys._MEIPASS}")
            
            config = WelcomeConfig()
            audio_path = config.get_audio_path()
            print(f"   ‚Ä¢ –ü—É—Ç—å –∫ –∞—É–¥–∏–æ: {audio_path}")
            print(f"   ‚Ä¢ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_path.exists()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã
            test_resources = [
                "assets/audio/welcome_en.mp3",
                "assets/audio/welcome_en.wav",
            ]
            
            print("\n   üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:")
            all_ok = True
            for resource in test_resources:
                exists = resource_exists(resource)
                status = "‚úì" if exists else "‚úó"
                print(f"      {status} {resource}")
                if not exists:
                    all_ok = False
            
            if all_ok and audio_path.exists():
                print("\n   ‚úÖ –£–°–ü–ï–•: –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã –≤ ONEFILE —Ä–µ–∂–∏–º–µ!")
            else:
                print("\n   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
            return all_ok and audio_path.exists()
            
        finally:
            # –£–¥–∞–ª—è–µ–º sys._MEIPASS –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
            if hasattr(sys, "_MEIPASS"):
                delattr(sys, "_MEIPASS")
                print("\n   üßπ –û—á–∏—Å—Ç–∫–∞: sys._MEIPASS —É–¥–∞–ª–µ–Ω")

def simulate_pyinstaller_bundle():
    """
    –°–∏–º—É–ª—è—Ü–∏—è PyInstaller bundle —Ä–µ–∂–∏–º–∞ (.app)
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Contents/MacOS/ –∏ Contents/Resources/
    """
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢ 2: –°–∏–º—É–ª—è—Ü–∏—è PyInstaller BUNDLE —Ä–µ–∂–∏–º–∞ (.app)")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É .app
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É .app bundle
        app_bundle = temp_path / "Nexy.app"
        contents = app_bundle / "Contents"
        macos_dir = contents / "MacOS"
        resources_dir = contents / "Resources"
        
        macos_dir.mkdir(parents=True)
        resources_dir.mkdir(parents=True)
        
        print(f"üìÅ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É .app bundle –≤: {app_bundle}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
        assets_src = CLIENT_ROOT / "assets"
        assets_dst = resources_dir / "assets"
        shutil.copytree(assets_src, assets_dst)
        print(f"   ‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã assets/ -> {assets_dst}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
        fake_exe = macos_dir / "Nexy"
        fake_exe.write_text("#!/bin/bash\necho 'Nexy'\n")
        fake_exe.chmod(0o755)
        print(f"   ‚úì –°–æ–∑–¥–∞–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {fake_exe}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π sys.argv[0]
        original_argv0 = sys.argv[0]
        
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∏–∑ .app bundle
            sys.argv[0] = str(fake_exe)
            print(f"   ‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω sys.argv[0] = {sys.argv[0]}")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π
            import importlib
            import modules.welcome_message.utils.resource_path
            import modules.welcome_message.core.types
            
            importlib.reload(modules.welcome_message.utils.resource_path)
            importlib.reload(modules.welcome_message.core.types)
            
            from modules.welcome_message.utils.resource_path import (
                get_resource_base_path,
                get_resource_path,
                resource_exists
            )
            from modules.welcome_message.core.types import WelcomeConfig
            
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            
            base_path = get_resource_base_path()
            print(f"   ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: {base_path}")
            print(f"   ‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Resources: {'Resources' in str(base_path)}")
            
            config = WelcomeConfig()
            audio_path = config.get_audio_path()
            print(f"   ‚Ä¢ –ü—É—Ç—å –∫ –∞—É–¥–∏–æ: {audio_path}")
            print(f"   ‚Ä¢ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_path.exists()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
            test_resources = [
                "assets/audio/welcome_en.mp3",
                "assets/audio/welcome_en.wav",
            ]
            
            print("\n   üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:")
            all_ok = True
            for resource in test_resources:
                exists = resource_exists(resource)
                status = "‚úì" if exists else "‚úó"
                print(f"      {status} {resource}")
                if not exists:
                    all_ok = False
            
            if all_ok and audio_path.exists():
                print("\n   ‚úÖ –£–°–ü–ï–•: –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã –≤ BUNDLE —Ä–µ–∂–∏–º–µ!")
            else:
                print("\n   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
            return all_ok and audio_path.exists()
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π sys.argv[0]
            sys.argv[0] = original_argv0
            print("\n   üßπ –û—á–∏—Å—Ç–∫–∞: sys.argv[0] –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ
            importlib.reload(modules.welcome_message.utils.resource_path)
            importlib.reload(modules.welcome_message.core.types)

def test_development_mode():
    """
    –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ development —Ä–µ–∂–∏–º–∞ (baseline)
    """
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢ 3: Development —Ä–µ–∂–∏–º (baseline)")
    print("=" * 80)
    
    from modules.welcome_message.utils.resource_path import (
        get_resource_base_path,
        resource_exists
    )
    from modules.welcome_message.core.types import WelcomeConfig
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    
    base_path = get_resource_base_path()
    print(f"   ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: {base_path}")
    print(f"   ‚Ä¢ –†–∞–≤–µ–Ω client/: {base_path == CLIENT_ROOT}")
    
    config = WelcomeConfig()
    audio_path = config.get_audio_path()
    print(f"   ‚Ä¢ –ü—É—Ç—å –∫ –∞—É–¥–∏–æ: {audio_path}")
    print(f"   ‚Ä¢ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_path.exists()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    test_resources = [
        "assets/audio/welcome_en.mp3",
        "assets/audio/welcome_en.wav",
    ]
    
    print("\n   üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:")
    all_ok = True
    for resource in test_resources:
        exists = resource_exists(resource)
        status = "‚úì" if exists else "‚úó"
        print(f"      {status} {resource}")
        if not exists:
            all_ok = False
    
    if all_ok and audio_path.exists():
        print("\n   ‚úÖ –£–°–ü–ï–•: –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã –≤ Development —Ä–µ–∂–∏–º–µ!")
    else:
        print("\n   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    return all_ok and audio_path.exists()

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 80)
    print("üöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –£–ü–ê–ö–û–í–ê–ù–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("=" * 80)
    print("\n–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã PyInstaller")
    print("–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ .app\n")
    
    results = {}
    
    try:
        # –¢–µ—Å—Ç 1: Development —Ä–µ–∂–∏–º (baseline)
        results['development'] = test_development_mode()
        
        # –¢–µ—Å—Ç 2: PyInstaller onefile
        results['onefile'] = simulate_pyinstaller_onefile()
        
        # –¢–µ—Å—Ç 3: PyInstaller bundle (.app)
        results['bundle'] = simulate_pyinstaller_bundle()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
    print("=" * 80)
    
    for mode, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"   {status} - {mode.upper()}")
    
    all_passed = all(results.values())
    
    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π .app:")
        print("   cd /Users/sergiyzasorin/Development/Nexy/client")
        print("   ./packaging/build_final.sh")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ resource_path.py")
    
    print("=" * 80)
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)



