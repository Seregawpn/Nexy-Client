#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ InputHandler - –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–±—ã—Ç–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
"""

import asyncio
import time
import threading
from input_handler import InputHandler

async def test_input_handler_speed():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å InputHandler –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ InputHandler (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("üìå –¢–µ—Å—Ç–∏—Ä—É–µ–º: –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞ –¥–æ–ª–∂–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å interrupt_or_cancel")
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    queue = asyncio.Queue()
    loop = asyncio.get_event_loop()
    
    # –°–æ–∑–¥–∞–µ–º InputHandler
    input_handler = InputHandler(loop, queue)
    
    # –°—á–µ—Ç—á–∏–∫–∏
    interrupt_events = []
    start_time = time.time()
    
    async def event_consumer():
        """–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π"""
        event_count = 0
        while event_count < 5:  # –ñ–¥–µ–º 5 —Å–æ–±—ã—Ç–∏–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            try:
                event = await asyncio.wait_for(queue.get(), timeout=10.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                current_time = time.time()
                
                if event == "interrupt_or_cancel":
                    event_count += 1
                    time_from_start = (current_time - start_time) * 1000
                    interrupt_events.append(time_from_start)
                    print(f"üì® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ {event_count}: –≤—Ä–µ–º—è {time_from_start:.1f}ms –æ—Ç –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞")
                    
                    if event_count >= 5:
                        break
                else:
                    print(f"üì° –î—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
                    
            except asyncio.TimeoutError:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
                break
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å
    consumer_task = asyncio.create_task(event_consumer())
    
    print("\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("   1. –ë—ã—Å—Ç—Ä–æ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥")
    print("   2. –ù–ï –£–î–ï–†–ñ–ò–í–ê–ô–¢–ï - –ø—Ä–æ—Å—Ç–æ –±—ã—Å—Ç—Ä—ã–µ –Ω–∞–∂–∞—Ç–∏—è")
    print("   3. –ö–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    print("\n‚è±Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ...")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await consumer_task
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    if len(interrupt_events) >= 2:
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {len(interrupt_events)}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
        intervals = []
        for i in range(1, len(interrupt_events)):
            interval = interrupt_events[i] - interrupt_events[i-1]
            intervals.append(interval)
            print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª {i}: {interval:.1f}ms")
        
        if intervals:
            avg_interval = sum(intervals) / len(intervals)
            min_interval = min(intervals)
            max_interval = max(intervals)
            
            print(f"\n   üî¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"      –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {avg_interval:.1f}ms")
            print(f"      –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min_interval:.1f}ms")
            print(f"      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max_interval:.1f}ms")
            
            print(f"\n   üìà –û–¶–ï–ù–ö–ê:")
            if avg_interval < 200:
                print("      ‚úÖ –û–¢–õ–ò–ß–ù–û - InputHandler —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä–æ!")
            elif avg_interval < 500:
                print("      ‚ö†Ô∏è –•–û–†–û–®–û - InputHandler —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            elif avg_interval < 1000:
                print("      ‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û - –µ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏")
            else:
                print("      ‚ùå –û–ß–ï–ù–¨ –ú–ï–î–õ–ï–ù–ù–û - –±–æ–ª—å—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏!")
    else:
        print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    print("\nüîç –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_input_handler_speed())
