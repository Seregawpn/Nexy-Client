#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É gRPC —Å–µ—Ä–≤–µ—Ä—É
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from grpc_client import GrpcClient
from rich.console import Console

console = Console()

async def test_remote_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
    
    console.print("[bold blue]üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É[/bold blue]")
    console.print("[blue]IP: 20.151.51.172:50051[/blue]")
    console.print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = GrpcClient()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        console.print("[yellow]üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...[/yellow]")
        connected = await client.connect()
        
        if connected:
            console.print("[bold green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ![/bold green]")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            console.print("[yellow]üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...[/yellow]")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            request = client.stub.StreamAudio(
                iter([{
                    'prompt': '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',
                    'hardware_id': 'test_client_001'
                }])
            )
            
            console.print("[bold green]‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç![/bold green]")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await client.disconnect()
            
        else:
            console.print("[bold red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É[/bold red]")
            return False
            
    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}[/bold red]")
        return False
    
    return True

async def test_http_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTTP endpoints —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    console.print("\n[bold blue]üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP endpoints[/bold blue]")
    console.print("=" * 50)
    
    try:
        import aiohttp
        
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
            async with session.get('http://20.151.51.172/health') as response:
                if response.status == 200:
                    health_text = await response.text()
                    console.print(f"[green]‚úÖ /health: {health_text.strip()}[/green]")
                else:
                    console.print(f"[red]‚ùå /health: HTTP {response.status}[/red]")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º status
            async with session.get('http://20.151.51.172/status') as response:
                if response.status == 200:
                    status_json = await response.json()
                    console.print(f"[green]‚úÖ /status: {status_json['status']}[/green]")
                else:
                    console.print(f"[red]‚ùå /status: HTTP {response.status}[/red]")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º root
            async with session.get('http://20.151.51.172/') as response:
                if response.status == 200:
                    root_text = await response.text()
                    console.print(f"[green]‚úÖ /: {root_text.strip()}[/green]")
                else:
                    console.print(f"[red]‚ùå /: HTTP {response.status}[/red]")
                    
    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HTTP: {e}[/bold red]")
        return False
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    console.print("[bold green]üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞[/bold green]")
    console.print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP endpoints
    http_success = await test_http_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º gRPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    grpc_success = await test_remote_connection()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.print("\n" + "=" * 60)
    if http_success and grpc_success:
        console.print("[bold green]üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ![/bold green]")
        console.print("[green]‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ[/green]")
    else:
        console.print("[bold red]‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏[/bold red]")
        if not http_success:
            console.print("[red]‚ùå HTTP endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã[/red]")
        if not grpc_success:
            console.print("[red]‚ùå gRPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç[/red]")

if __name__ == "__main__":
    asyncio.run(main())
