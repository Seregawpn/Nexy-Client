import asyncio
import time
from pynput import keyboard
from threading import Thread, Timer
from rich.console import Console

console = Console()

class InputHandler:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è push-to-talk.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    
    def __init__(self, loop: asyncio.AbstractEventLoop, queue: asyncio.Queue):
        self.loop = loop
        self.queue = queue
        self.press_time = None
        self.short_press_threshold = 0.3   # –ü–æ—Ä–æ–≥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∂–∞—Ç–∏–π (300ms - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        self.space_pressed = False
        self.last_event_time = 0
        self.event_cooldown = 0.1
        self.recording_started = False
        self.recording_timer = None # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏

        # –ó–∞–ø—É—Å–∫–∞–µ–º listener –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.listener_thread = Thread(target=self._run_listener, daemon=True)
        self.listener_thread.start()

    def _run_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç listener –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        with keyboard.Listener(on_press=self.on_press, on_release=self.on_release) as listener:
            listener.join()

    def on_press(self, key):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        if key == keyboard.Key.space and not self.space_pressed:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if current_time - self.last_event_time < self.event_cooldown:
                return
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            self.space_pressed = True
            self.press_time = current_time
            self.last_event_time = current_time
            
            # 1. –í–°–ï–ì–î–ê –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            self.loop.call_soon_threadsafe(self.queue.put_nowait, "interrupt_or_cancel")
            console.print("[bold red]üîá –ü–†–û–ë–ï–õ –ù–ê–ñ–ê–¢ - –ú–ì–ù–û–í–ï–ù–ù–û–ï –ü–†–ï–†–´–í–ê–ù–ò–ï –†–ï–ß–ò![/bold red]")
            
            # 2. –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.recording_timer:
                self.recording_timer.cancel()

            # 3. –£–ú–ï–ù–¨–®–ê–ï–ú –∑–∞–¥–µ—Ä–∂–∫—É —Å 50ms –¥–æ 10ms –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞!
            def start_recording_action():
                # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞, –µ—Å–ª–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º—Å
                self.loop.call_soon_threadsafe(self.queue.put_nowait, "start_recording")
                console.print("[bold green]üé§ –ú–ò–ö–†–û–§–û–ù –ê–ö–¢–ò–í–ò–†–û–í–ê–ù - –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥—ã![/bold green]")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 10–º—Å - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–∑–∞–º–µ—Ç–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            self.recording_timer = Timer(0.01, start_recording_action)
            self.recording_timer.start()

    def on_release(self, key):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        if key == keyboard.Key.space and self.space_pressed:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if current_time - self.last_event_time < self.event_cooldown:
                return
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è
            self.space_pressed = False
            
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            if self.recording_timer:
                self.recording_timer.cancel()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏—è
            duration = current_time - self.press_time
            self.press_time = None
            self.last_event_time = current_time

            # –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if duration >= self.short_press_threshold:
                # –î–õ–ò–ù–ù–û–ï –Ω–∞–∂–∞—Ç–∏–µ: —Ç–∞–π–º–µ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª start_recording, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º stop_recording
                console.print(f"‚èπÔ∏è –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ({duration:.2f}s) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É")
                self.loop.call_soon_threadsafe(self.queue.put_nowait, "stop_recording")
            else:
                # –ö–û–†–û–¢–ö–û–ï –Ω–∞–∂–∞—Ç–∏–µ: —Ç–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, start_recording –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
                # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ on_press. –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
                console.print(f"üîá –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ({duration:.2f}s) - —Ç–æ–ª—å–∫–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            console.print("üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–æ–±—ã—Ç–∏—è–º")

async def main_test():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è InputHandler"""
    print("üß™ –¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ InputHandler:")
    print("‚Ä¢ –ó–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –°–†–ê–ó–£ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–∏–∫—Ä–æ—Ñ–æ–Ω")
    print("‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å")
    print("‚Ä¢ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å + –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
    print("‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    print("‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    event_queue = asyncio.Queue()
    loop = asyncio.get_running_loop()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    InputHandler(loop, event_queue)
    
    while True:
        event = await event_queue.get()
        print(f"üì° –°–æ–±—ã—Ç–∏–µ: {event}")
        if event == "exit":
            break

if __name__ == "__main__":
    try:
        asyncio.run(main_test())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥.")

