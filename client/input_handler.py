import asyncio
import time
from pynput import keyboard
from threading import Thread
from threading import Timer
from rich.console import Console

console = Console()

class InputHandler:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è push-to-talk.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    
    def __init__(self, loop: asyncio.AbstractEventLoop, queue: asyncio.Queue, state_manager=None):
        self.loop = loop
        self.queue = queue
        self.state_manager = state_manager
        self.press_time = None
        self.short_press_threshold = 0.1   # –ü–æ—Ä–æ–≥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∂–∞—Ç–∏–π (100ms) - –±—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è
        self.space_pressed = False
        self.last_event_time = 0
        self.event_cooldown = 0.3  # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú cooldown –¥–æ 300ms –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        self.recording_started = False
        self._start_timer = None
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.interrupting = False
        # üÜï –§–ª–∞–≥: –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ deactivate_microphone
        self.command_processed = False
        # üÜï –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        self.processing_event = False

        # –ó–∞–ø—É—Å–∫–∞–µ–º listener –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.listener_thread = Thread(target=self._run_listener, daemon=True)
        self.listener_thread.start()

    def _run_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç listener –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        with keyboard.Listener(on_press=self.on_press, on_release=self.on_release) as listener:
            listener.join()

    def on_press(self, key):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        if key == keyboard.Key.space and not self.space_pressed:
            current_time = time.time()
            
            # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            if self.processing_event:
                console.print(f"[dim]‚è∞ –°–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—é –Ω–∞–∂–∞—Ç–∏–µ[/dim]")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if current_time - self.last_event_time < self.event_cooldown:
                console.print(f"[dim]‚è∞ Cooldown –∞–∫—Ç–∏–≤–µ–Ω: {self.event_cooldown - (current_time - self.last_event_time):.3f}s[/dim]")
                return
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è –∏ –≤—Ä–µ–º—è
            self.space_pressed = True
            self.press_time = current_time
            self.last_event_time = current_time
            self.recording_started = False
            self.processing_event = True  # üÜï –ë–õ–û–ö–ò–†–£–ï–ú –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
            
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
            try:
                if self._start_timer and self._start_timer.is_alive():
                    self._start_timer.cancel()
            except Exception:
                pass
            
            # 1. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø
            self.interrupting = True
            console.print(f"[bold red]üîá –ü–†–û–ë–ï–õ –ù–ê–ñ–ê–¢ - –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ü–†–ï–†–´–í–ê–ù–ò–Æ! (–≤—Ä–µ–º—è: {current_time:.3f})[/bold red]")
            console.print(f"[dim]üîç –§–ª–∞–≥ interrupting —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.interrupting}[/dim]")
            
            # 2. –ó–ê–ü–£–°–ö –ó–ê–ü–ò–°–ò –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –¥–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞
            def start_if_still_pressed():
                try:
                    if self.space_pressed and not self.recording_started:
                        # –ü–†–û–í–ï–†–Ø–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ StateManager
                        if self.state_manager and hasattr(self.state_manager, 'can_start_recording') and not self.state_manager.can_start_recording():
                            console.print(f"[yellow]‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ - –º–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ[/yellow]")
                            return
                            
                        # –°–ë–†–ê–°–´–í–ê–ï–ú —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π start_recording
                        self.interrupting = False
                        console.print(f"[dim]üîÑ –§–ª–∞–≥ interrupting —Å–±—Ä–æ—à–µ–Ω –ø–µ—Ä–µ–¥ start_recording[/dim]")
                        self.recording_started = True
                        self.loop.call_soon_threadsafe(self.queue.put_nowait, "start_recording")
                        console.print(f"[dim]üì§ –ü–æ—Ä–æ–≥ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω ‚Üí start_recording –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω[/dim]")
                except Exception:
                    pass

            try:
                self._start_timer = Timer(self.short_press_threshold, start_if_still_pressed)
                self._start_timer.daemon = True
                self._start_timer.start()
            except Exception:
                self._start_timer = None

    def on_release(self, key):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        if key == keyboard.Key.space and self.space_pressed:
            current_time = time.time()

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏ –î–û –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            try:
                if self._start_timer and self._start_timer.is_alive():
                    self._start_timer.cancel()
            except Exception:
                pass

            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ cooldown ‚Äî –ª–∏—à—å –ª–æ–≥–∏—Ä—É–µ–º
            if current_time - self.last_event_time < self.event_cooldown:
                console.print(f"[dim]‚è∞ Cooldown –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏: {self.event_cooldown - (current_time - self.last_event_time):.3f}s (–ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É) [/dim]")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è
            self.space_pressed = False
            console.print(f"[dim]üîç –§–ª–∞–≥ space_pressed —Å–±—Ä–æ—à–µ–Ω –≤ {current_time:.3f}[/dim]")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏—è
            duration = current_time - self.press_time
            self.press_time = None
            self.last_event_time = current_time
            console.print(f"[dim]üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏—è: {duration:.3f}s[/dim]")

            if self.recording_started:
                # –ó–∞–ø–∏—Å—å —É—Å–ø–µ–ª–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë –Ω–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏
                console.print(f"üîá –ü—Ä–æ–±–µ–ª –æ—Ç–ø—É—â–µ–Ω - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ SLEEPING")
                self.loop.call_soon_threadsafe(self.queue.put_nowait, "deactivate_microphone")
                console.print(f"[dim]üì§ –°–æ–±—ã—Ç–∏–µ deactivate_microphone –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å[/dim]")
            else:
                # –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí –¢–û–õ–¨–ö–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)
                console.print(f"üîá –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ({duration:.2f}s) - —Ç–æ–ª—å–∫–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ")
                console.print(f"[dim]üîç –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration:.3f}s < {self.short_press_threshold}s - –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ[/dim]")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û interrupt_or_cancel –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                self.loop.call_soon_threadsafe(self.queue.put_nowait, "interrupt_or_cancel")
                console.print(f"[dim]üì§ –°–æ–±—ã—Ç–∏–µ interrupt_or_cancel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å[/dim]")
                # –£–ë–ò–†–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É start_recording
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª –µ—â–µ —Ä–∞–∑ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            
            # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –ü–†–ï–†–´–í–ê–ù–ò–Ø
            console.print(f"[dim]üîç –§–ª–∞–≥ interrupting –î–û —Å–±—Ä–æ—Å–∞: {self.interrupting}[/dim]")
            self.interrupting = False
            console.print(f"[dim]üîç –§–ª–∞–≥ interrupting –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞: {self.interrupting}[/dim]")
            console.print("üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–æ–±—ã—Ç–∏—è–º")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏
            self.recording_started = False
            self._start_timer = None
            
            # üÜï –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            def unblock_events():
                self.processing_event = False
                console.print(f"[dim]üîÑ –°–æ–±—ã—Ç–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã[/dim]")
            
            try:
                Timer(0.1, unblock_events).start()  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 100ms
            except Exception:
                self.processing_event = False

    def reset_interrupt_flag(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ StateManager"""
        current_time = time.time()
        console.print(f"[dim]üîç reset_interrupt_flag() –≤—ã–∑–≤–∞–Ω –≤ {current_time:.3f}[/dim]")
        console.print(f"[dim]üîç –§–ª–∞–≥ interrupting –î–û —Å–±—Ä–æ—Å–∞: {self.interrupting}[/dim]")
        self.interrupting = False
        console.print(f"[dim]üîç –§–ª–∞–≥ interrupting –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞: {self.interrupting}[/dim]")
        console.print("[dim]üîÑ –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω[/dim]")
    
    def reset_command_processed_flag(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        current_time = time.time()
        console.print(f"[dim]üîç reset_command_processed_flag() –≤—ã–∑–≤–∞–Ω –≤ {current_time:.3f}[/dim]")
        console.print(f"[dim]üîç –§–ª–∞–≥ command_processed –î–û —Å–±—Ä–æ—Å–∞: {self.command_processed}[/dim]")
        self.command_processed = False
        console.print(f"[dim]üîç –§–ª–∞–≥ command_processed –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞: {self.command_processed}[/dim]")
        console.print("[dim]üîÑ –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—à–µ–Ω[/dim]")
    
    def get_interrupt_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        return self.interrupting

async def main_test():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è InputHandler"""
    print("üß™ –¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ InputHandler:")
    print("‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞ ‚Üí —Ç–æ–ª—å–∫–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    print("‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ + –∑–∞–ø–∏—Å—å")
    print("‚Ä¢ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å + –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
    print("‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    event_queue = asyncio.Queue()
    loop = asyncio.get_running_loop()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    InputHandler(loop, event_queue)
    
    while True:
        event = await event_queue.get()
        print(f"üì° –°–æ–±—ã—Ç–∏–µ: {event}")
        if event == "exit":
            break

if __name__ == "__main__":
    try:
        asyncio.run(main_test())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥.")

