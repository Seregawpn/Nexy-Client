import asyncio
import time
from pynput import keyboard
from threading import Thread

class InputHandler:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è push-to-talk –ª–æ–≥–∏–∫–∏:
    - –ó–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞ = –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    - –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞ = –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    - –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ = –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    def __init__(self, loop: asyncio.AbstractEventLoop, queue: asyncio.Queue):
        self.loop = loop
        self.queue = queue
        self.press_time = None
        self.short_press_threshold = 0.15  # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∂–∞—Ç–∏–π
        self.space_pressed = False
        self.recording_started = False
        self.last_event_time = 0  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        self.event_cooldown = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ (100ms)

        # –ó–∞–ø—É—Å–∫–∞–µ–º listener –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.listener_thread = Thread(target=self._run_listener, daemon=True)
        self.listener_thread.start()

    def _run_listener(self):
        with keyboard.Listener(on_press=self.on_press, on_release=self.on_release) as listener:
            listener.join()

    def on_press(self, key):
        if key == keyboard.Key.space and not self.space_pressed:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if current_time - self.last_event_time < self.event_cooldown:
                return
                
            self.space_pressed = True
            self.press_time = current_time
            self.last_event_time = current_time
            
            # –°–†–ê–ó–£ –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if not self.recording_started:
                self.recording_started = True
                self.loop.call_soon_threadsafe(self.queue.put_nowait, "start_recording")
                print("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–±–µ–ª –∑–∞–∂–∞—Ç)")

    def on_release(self, key):
        if key == keyboard.Key.space and self.space_pressed:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if current_time - self.last_event_time < self.event_cooldown:
                return
                
            self.space_pressed = False
            duration = current_time - self.press_time
            self.press_time = None
            self.last_event_time = current_time
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∞–≤–∏—à–∞ –æ—Ç–ø—É—â–µ–Ω–∞
            if self.recording_started:
                self.recording_started = False

            if duration < self.short_press_threshold:
                # –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: –ø—Ä–µ—Ä–≤–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                print(f"üîá –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ({duration:.2f}s) - –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞")
                self.loop.call_soon_threadsafe(self.queue.put_nowait, "interrupt_or_cancel")
            else:
                # –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                print(f"‚èπÔ∏è –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ({duration:.2f}s) - –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self.loop.call_soon_threadsafe(self.queue.put_nowait, "stop_recording")

async def main_test():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è InputHandler"""
    print("üß™ –¢–µ—Å—Ç push-to-talk –ª–æ–≥–∏–∫–∏:")
    print("‚Ä¢ –ó–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –°–†–ê–ó–£ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–∏–∫—Ä–æ—Ñ–æ–Ω")
    print("‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å")
    print("‚Ä¢ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–µ–ª ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å + –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
    print("‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    print("‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    event_queue = asyncio.Queue()
    loop = asyncio.get_running_loop()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    InputHandler(loop, event_queue)
    
    while True:
        event = await event_queue.get()
        print(f"üì° –°–æ–±—ã—Ç–∏–µ: {event}")
        if event == "exit":
            break

if __name__ == "__main__":
    try:
        asyncio.run(main_test())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥.")
        print("\nüëã –í—ã—Ö–æ–¥.")

        print("\nüëã –í—ã—Ö–æ–¥.")

