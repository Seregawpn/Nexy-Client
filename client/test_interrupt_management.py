#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è interrupt_management
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
"""

import asyncio
import logging
import time
import sys
import os
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from interrupt_management import (
    InterruptCoordinator, InterruptDependencies,
    InterruptEvent, InterruptType, InterruptPriority, InterruptStatus,
    InterruptConfig, InterruptMetrics,
    SpeechInterruptHandler, RecordingInterruptHandler,
    InterruptModuleConfig, DEFAULT_INTERRUPT_CONFIG
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MockSpeechPlayer:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è speech_player"""
    
    def __init__(self):
        self.is_playing = False
        self.is_paused = False
        self.stop_called = False
        self.pause_called = False
        self.resume_called = False
    
    def stop_playback(self) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        self.stop_called = True
        self.is_playing = False
        self.is_paused = False
        logger.info("üéµ Mock: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    
    def pause_playback(self) -> bool:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        self.pause_called = True
        self.is_paused = True
        logger.info("‚è∏Ô∏è Mock: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    
    def resume_playback(self) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        self.resume_called = True
        self.is_paused = False
        self.is_playing = True
        logger.info("‚ñ∂Ô∏è Mock: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        return True

class MockSpeechRecognizer:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è speech_recognizer"""
    
    def __init__(self):
        self.is_recording = False
        self.stop_called = False
        self.start_called = False
        self.recognized_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    
    async def stop_recording(self) -> Optional[str]:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å"""
        self.stop_called = True
        self.is_recording = False
        logger.info("üé§ Mock: –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return self.recognized_text
    
    async def start_recording(self) -> bool:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å"""
        self.start_called = True
        self.is_recording = True
        logger.info("üé§ Mock: –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞")
        return True

class MockGrpcClient:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è grpc_client"""
    
    def __init__(self):
        self.interrupt_called = False
        self.interrupt_count = 0
    
    async def interrupt_session(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        self.interrupt_called = True
        self.interrupt_count += 1
        logger.info("üì° Mock: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

class InterruptManagementTester:
    """–¢–µ—Å—Ç–µ—Ä –º–æ–¥—É–ª—è interrupt_management"""
    
    def __init__(self):
        self.speech_player = MockSpeechPlayer()
        self.speech_recognizer = MockSpeechRecognizer()
        self.grpc_client = MockGrpcClient()
        self.coordinator = None
        self.test_results = {}
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = InterruptConfig(
            max_concurrent_interrupts=3,
            interrupt_timeout=5.0,
            retry_attempts=2,
            retry_delay=0.5,
            enable_logging=True,
            enable_metrics=True
        )
        
        self.coordinator = InterruptCoordinator(config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = InterruptDependencies(
            speech_player=self.speech_player,
            speech_recognizer=self.speech_recognizer,
            grpc_client=self.grpc_client,
            state_manager=None
        )
        
        self.coordinator.initialize(dependencies)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        speech_handler = SpeechInterruptHandler(self.speech_player, self.grpc_client)
        recording_handler = RecordingInterruptHandler(self.speech_recognizer)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        async def mock_speech_stop_handler(event):
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            return await speech_handler.handle_speech_stop(event)
        
        async def mock_speech_pause_handler(event):
            await asyncio.sleep(0.05)
            return await speech_handler.handle_speech_pause(event)
        
        async def mock_recording_stop_handler(event):
            await asyncio.sleep(0.05)
            return await recording_handler.handle_recording_stop(event)
        
        self.coordinator.register_handler(InterruptType.SPEECH_STOP, mock_speech_stop_handler)
        self.coordinator.register_handler(InterruptType.SPEECH_PAUSE, mock_speech_pause_handler)
        self.coordinator.register_handler(InterruptType.RECORDING_STOP, mock_recording_stop_handler)
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    async def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            event = InterruptEvent(
                type=InterruptType.SPEECH_STOP,
                priority=InterruptPriority.HIGH,
                source="test",
                timestamp=time.time()
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            result = await self.coordinator.trigger_interrupt(event)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result == True, "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
            assert event.status == InterruptStatus.COMPLETED, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å COMPLETED"
            assert self.speech_player.stop_called == True, "stop_playback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            assert self.grpc_client.interrupt_called == True, "interrupt_session –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            
            self.test_results["basic_functionality"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.test_results["basic_functionality"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_multiple_interrupts(self):
        """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ grpc_client
            self.grpc_client.interrupt_count = 0
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
            events = []
            for i in range(3):
                event = InterruptEvent(
                    type=InterruptType.SPEECH_STOP,
                    priority=InterruptPriority.HIGH,
                    source=f"test_{i}",
                    timestamp=time.time()
                )
                events.append(event)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [self.coordinator.trigger_interrupt(event) for event in events]
            results = await asyncio.gather(*tasks)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert all(results), "–í—Å–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            assert all(event.status == InterruptStatus.COMPLETED for event in events), "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å COMPLETED"
            assert self.grpc_client.interrupt_count == 3, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –≤—ã–∑–æ–≤–∞ interrupt_session, –ø–æ–ª—É—á–µ–Ω–æ: {self.grpc_client.interrupt_count}"
            
            self.test_results["multiple_interrupts"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        except Exception as e:
            self.test_results["multiple_interrupts"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_different_interrupt_types(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç 3: –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π")
        
        try:
            # –¢–µ—Å—Ç SPEECH_PAUSE
            pause_event = InterruptEvent(
                type=InterruptType.SPEECH_PAUSE,
                priority=InterruptPriority.NORMAL,
                source="test_pause",
                timestamp=time.time()
            )
            
            result = await self.coordinator.trigger_interrupt(pause_event)
            assert result == True, "SPEECH_PAUSE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            assert self.speech_player.pause_called == True, "pause_playback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            
            # –¢–µ—Å—Ç RECORDING_STOP
            recording_event = InterruptEvent(
                type=InterruptType.RECORDING_STOP,
                priority=InterruptPriority.NORMAL,
                source="test_recording",
                timestamp=time.time()
            )
            
            result = await self.coordinator.trigger_interrupt(recording_event)
            assert result == True, "RECORDING_STOP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            assert self.speech_recognizer.stop_called == True, "stop_recording –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
            assert recording_event.data["recognized_text"] == "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
            
            self.test_results["different_interrupt_types"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        except Exception as e:
            self.test_results["different_interrupt_types"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_concurrent_limit(self):
        """–¢–µ—Å—Ç –ª–∏–º–∏—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç 4: –õ–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π")
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ grpc_client
            self.grpc_client.interrupt_count = 0
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π, —á–µ–º –ª–∏–º–∏—Ç
            events = []
            for i in range(5):  # –õ–∏–º–∏—Ç = 3
                event = InterruptEvent(
                    type=InterruptType.SPEECH_STOP,
                    priority=InterruptPriority.HIGH,
                    source=f"test_limit_{i}",
                    timestamp=time.time()
                )
                events.append(event)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            tasks = [self.coordinator.trigger_interrupt(event) for event in events]
            results = await asyncio.gather(*tasks)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
            successful_count = sum(1 for r in results if r)
            failed_count = sum(1 for r in results if not r)
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —É—Å–ø–µ—à–Ω—ã—Ö={successful_count}, –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö={failed_count}")
            logger.info(f"üìä –í—ã–∑–æ–≤–æ–≤ grpc_client: {self.grpc_client.interrupt_count}")
            
            assert successful_count <= 3, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ: {successful_count}"
            assert failed_count >= 2, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ: {failed_count}"
            
            self.test_results["concurrent_limit"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –õ–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.test_results["concurrent_limit"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_metrics(self):
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫"""
        logger.info("üß™ –¢–µ—Å—Ç 5: –ú–µ—Ç—Ä–∏–∫–∏")
        
        try:
            metrics = self.coordinator.get_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            assert metrics.total_interrupts > 0, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"
            assert metrics.successful_interrupts > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"
            assert metrics.average_processing_time >= 0, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º
            assert InterruptType.SPEECH_STOP in metrics.interrupts_by_type, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è SPEECH_STOP"
            assert metrics.interrupts_by_type[InterruptType.SPEECH_STOP] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è SPEECH_STOP"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            assert InterruptPriority.HIGH in metrics.interrupts_by_priority, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"
            assert metrics.interrupts_by_priority[InterruptPriority.HIGH] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"
            
            self.test_results["metrics"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            self.test_results["metrics"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 5 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_status_and_history(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 6: –°—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—è")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = self.coordinator.get_status()
            assert "active_interrupts" in status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å active_interrupts –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert "total_interrupts" in status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å total_interrupts –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert "success_rate" in status, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å success_rate –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert status["success_rate"] >= 0, "Success rate –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = self.coordinator.get_interrupt_history(5)
            assert len(history) > 0, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"
            assert all(event.status in [InterruptStatus.COMPLETED, InterruptStatus.FAILED] for event in history), "–í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            active = self.coordinator.get_active_interrupts()
            assert len(active) == 0, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            
            self.test_results["status_and_history"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            self.test_results["status_and_history"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 6 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            async def failing_handler(event):
                raise Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.coordinator.register_handler(InterruptType.SESSION_CLEAR, failing_handler)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            event = InterruptEvent(
                type=InterruptType.SESSION_CLEAR,
                priority=InterruptPriority.HIGH,
                source="test_error",
                timestamp=time.time()
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            result = await self.coordinator.trigger_interrupt(event)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            assert result == False, "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π"
            assert event.status == InterruptStatus.FAILED, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å FAILED"
            assert event.error is not None, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—à–∏–±–∫–∞"
            assert "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞" in event.error, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞"
            
            self.test_results["error_handling"] = "‚úÖ PASSED"
            logger.info("‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            self.test_results["error_handling"] = f"‚ùå FAILED: {e}"
            logger.error(f"‚ùå –¢–µ—Å—Ç 7 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "="*60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø INTERRUPT_MANAGEMENT")
        logger.info("="*60)
        
        for test_name, result in self.test_results.items():
            logger.info(f"{test_name.replace('_', ' ').title()}: {result}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result.startswith("‚úÖ"))
        failed_tests = total_tests - passed_tests
        
        logger.info("-"*60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            logger.warning(f"‚ö†Ô∏è {failed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        logger.info("="*60)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è interrupt_management...")
        
        await self.setup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        await self.test_basic_functionality()
        await self.test_multiple_interrupts()
        await self.test_different_interrupt_types()
        await self.test_concurrent_limit()
        await self.test_metrics()
        await self.test_status_and_history()
        await self.test_error_handling()
        
        self.print_results()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = InterruptManagementTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
