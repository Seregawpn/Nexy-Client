#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–µ–π –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º
"""

import sys
from pathlib import Path

def test_path_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø—É—Ç–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö"""
    print("üîç –ü–†–û–î–í–ò–ù–£–¢–´–ô –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–£–¢–ï–ô")
    print("=" * 50)
    
    audio_file = "assets/audio/welcome_en.mp3"
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ _find_base_path
    def find_base_path():
        # 1. PyInstaller onefile/onedir
        if hasattr(sys, "_MEIPASS"):
            candidate = Path(sys._MEIPASS)
            audio_path = candidate / audio_file
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é PyInstaller _MEIPASS: {audio_path}")
            if audio_path.exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤ _MEIPASS: {audio_path}")
                return candidate
            
            # –ß–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π: —Ä–µ—Å—É—Ä—Å—ã –ª–µ–∂–∞—Ç –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–µ Resources
            resources_candidate = candidate / "Resources"
            audio_path = resources_candidate / audio_file
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é _MEIPASS/Resources: {audio_path}")
            if audio_path.exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤ _MEIPASS/Resources: {audio_path}")
                return resources_candidate
        
        # 2. PyInstaller bundle (.app): –∏—â–µ–º –∫–∞—Ç–∞–ª–æ–≥ MacOS -> Contents -> Resources
        resolved_path = Path(__file__).resolve()
        macos_dir = None
        for parent in resolved_path.parents:
            if parent.name == "MacOS":
                macos_dir = parent
                break
        
        if macos_dir is not None:
            contents_dir = macos_dir.parent  # MacOS -> Contents
            resources_path = contents_dir / "Resources"  # Contents -> Resources
            audio_path = resources_path / audio_file
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é bundle Resources: {audio_path}")
            if audio_path.exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤ bundle: {audio_path}")
                return resources_path
        
        # 3. Dev-—Ä–µ–∂–∏–º (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
        dev_path = Path(__file__).parent
        audio_path = dev_path / audio_file
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é dev-—Ä–µ–∂–∏–º: {audio_path}")
        if audio_path.exists():
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤ dev-—Ä–µ–∂–∏–º–µ: {audio_path}")
            return dev_path
        
        # 4. Fallback
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ!")
        return dev_path
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    print("\nüìã –¢–ï–ö–£–©–ò–ô –°–¶–ï–ù–ê–†–ò–ô:")
    print(f"   –§–∞–π–ª: {Path(__file__).resolve()}")
    print(f"   PyInstaller onefile: {hasattr(sys, '_MEIPASS')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ bundle
    resolved_path = Path(__file__).resolve()
    macos_dir = None
    for parent in resolved_path.parents:
        if parent.name == "MacOS":
            macos_dir = parent
            break
    
    if macos_dir is not None:
        print(f"   –í bundle: –î–∞ (MacOS: {macos_dir})")
        contents_dir = macos_dir.parent
        resources_path = contents_dir / "Resources"
        print(f"   Contents: {contents_dir}")
        print(f"   Resources: {resources_path}")
        print(f"   Resources —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {resources_path.exists()}")
    else:
        print(f"   –í bundle: –ù–µ—Ç")
    
    print(f"   Dev-—Ä–µ–∂–∏–º: {Path(__file__).parent / audio_file}")
    print(f"   Dev —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {(Path(__file__).parent / audio_file).exists()}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    print("\nüîç –ó–ê–ü–£–°–ö –ü–û–ò–°–ö–ê:")
    result = find_base_path()
    print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: {result}")

if __name__ == "__main__":
    test_path_logic()
