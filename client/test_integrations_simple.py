#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
"""

import sys
import os
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

def test_module_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from modules.instance_manager import InstanceManager, InstanceStatus, InstanceManagerConfig
        print("‚úÖ InstanceManager –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ InstanceManager: {e}")
        return False
    
    try:
        from modules.autostart_manager import AutostartManager, AutostartStatus, AutostartConfig
        print("‚úÖ AutostartManager –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AutostartManager: {e}")
        return False
    
    return True

def test_integration_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    
    try:
        from integration.integrations.instance_manager_integration import InstanceManagerIntegration
        print("‚úÖ InstanceManagerIntegration –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ InstanceManagerIntegration: {e}")
        return False
    
    try:
        from integration.integrations.autostart_manager_integration import AutostartManagerIntegration
        print("‚úÖ AutostartManagerIntegration –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AutostartManagerIntegration: {e}")
        return False
    
    return True

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config.unified_config_loader import UnifiedConfigLoader
        config_loader = UnifiedConfigLoader()
        config = config_loader._load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ —Å–µ–∫—Ü–∏–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'instance_manager' in config:
            print("‚úÖ –°–µ–∫—Ü–∏—è instance_manager –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            print("‚ùå –°–µ–∫—Ü–∏—è instance_manager –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        if 'autostart' in config:
            print("‚úÖ –°–µ–∫—Ü–∏—è autostart –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            print("‚ùå –°–µ–∫—Ü–∏—è autostart –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        if 'installation' in config:
            print("‚úÖ –°–µ–∫—Ü–∏—è installation –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            print("‚ùå –°–µ–∫—Ü–∏—è installation –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_instance_manager_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç InstanceManager."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ InstanceManager...")
    
    try:
        from modules.instance_manager import InstanceManager, InstanceManagerConfig
        
        config = InstanceManagerConfig(
            enabled=True,
            lock_file="/tmp/test_nexy.lock",
            timeout_seconds=30,
            pid_check=True
        )
        
        manager = InstanceManager(config)
        print("‚úÖ InstanceManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert hasattr(manager, 'check_single_instance'), "–ú–µ—Ç–æ–¥ check_single_instance –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(manager, 'acquire_lock'), "–ú–µ—Ç–æ–¥ acquire_lock –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(manager, 'release_lock'), "–ú–µ—Ç–æ–¥ release_lock –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã InstanceManager –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è InstanceManager: {e}")
        return False

def test_autostart_manager_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç AutostartManager."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AutostartManager...")
    
    try:
        from modules.autostart_manager import AutostartManager, AutostartConfig
        
        config = AutostartConfig(
            enabled=True,
            method="launch_agent",
            bundle_id="com.nexy.assistant"
        )
        
        manager = AutostartManager(config)
        print("‚úÖ AutostartManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert hasattr(manager, 'enable_autostart'), "–ú–µ—Ç–æ–¥ enable_autostart –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(manager, 'disable_autostart'), "–ú–µ—Ç–æ–¥ disable_autostart –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(manager, 'get_autostart_status'), "–ú–µ—Ç–æ–¥ get_autostart_status –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã AutostartManager –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AutostartManager: {e}")
        return False

def test_pyinstaller_spec():
    """–¢–µ—Å—Ç PyInstaller spec."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PyInstaller spec...")
    
    try:
        spec_file = "tools/packaging/Nexy.spec"
        if not os.path.exists(spec_file):
            print(f"‚ùå –§–∞–π–ª {spec_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(spec_file, 'r') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ hiddenimports
        required_imports = [
            'modules.instance_manager.core.instance_manager',
            'modules.autostart_manager.core.autostart_manager',
            'integration.integrations.instance_manager_integration',
            'integration.integrations.autostart_manager_integration'
        ]
        
        for import_name in required_imports:
            if import_name in content:
                print(f"‚úÖ {import_name} –Ω–∞–π–¥–µ–Ω –≤ PyInstaller spec")
            else:
                print(f"‚ùå {import_name} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ PyInstaller spec")
                return False
        
        print("‚úÖ PyInstaller spec —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PyInstaller spec: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ù–û–í–´–• –ò–ù–¢–ï–ì–†–ê–¶–ò–ô")
    print("=" * 50)
    
    tests = [
        test_module_imports,
        test_integration_imports,
        test_configuration,
        test_instance_manager_basic,
        test_autostart_manager_basic,
        test_pyinstaller_spec
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            print()
    
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
