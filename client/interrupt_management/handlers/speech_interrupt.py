"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ—á–∏ - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø —Å speech_playback
"""

import logging
from typing import Optional, Dict, Any
from ..core.types import InterruptEvent, InterruptType

logger = logging.getLogger(__name__)

class SpeechInterruptHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–µ—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç speech_playback"""
    
    def __init__(self, speech_player=None, grpc_client=None):
        self.speech_player = speech_player
        self.grpc_client = grpc_client
        
    async def handle_speech_stop(self, event: InterruptEvent) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ—á–∏ —á–µ—Ä–µ–∑ speech_playback"""
        try:
            logger.info("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ—á–∏")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä —á–µ—Ä–µ–∑ speech_playback
            if self.speech_player:
                success = self.speech_player.stop_playback()
                if success:
                    logger.info("‚úÖ –†–µ—á—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ speech_playback")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—á—å —á–µ—Ä–µ–∑ speech_playback")
                    
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if self.grpc_client:
                try:
                    await self.grpc_client.interrupt_session()
                    logger.info("üì° –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ—á–∏: {e}")
            return False
            
    async def handle_speech_pause(self, event: InterruptEvent) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—É–∑—É —Ä–µ—á–∏ —á–µ—Ä–µ–∑ speech_playback"""
        try:
            logger.info("‚è∏Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã —Ä–µ—á–∏")
            
            if self.speech_player:
                success = self.speech_player.pause_playback()
                if success:
                    logger.info("‚úÖ –†–µ—á—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ speech_playback")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—á—å")
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã —Ä–µ—á–∏: {e}")
            return False
            
    async def handle_speech_resume(self, event: InterruptEvent) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ speech_playback"""
        try:
            logger.info("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—á–∏")
            
            if self.speech_player:
                success = self.speech_player.resume_playback()
                if success:
                    logger.info("‚úÖ –†–µ—á—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ speech_playback")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—á—å")
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—á–∏: {e}")
            return False
