"""
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è–º–∏
"""

import asyncio
import logging
import time
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass

from .types import (
    InterruptEvent, InterruptType, InterruptPriority, InterruptStatus,
    InterruptConfig, InterruptMetrics
)

logger = logging.getLogger(__name__)

@dataclass
class InterruptDependencies:
    """–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
    speech_player: Optional[Any] = None
    speech_recognizer: Optional[Any] = None
    grpc_client: Optional[Any] = None
    state_manager: Optional[Any] = None

class InterruptCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π - —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
    
    def __init__(self, config: InterruptConfig = None):
        self.config = config or InterruptConfig()
        self.dependencies = InterruptDependencies()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.active_interrupts: List[InterruptEvent] = []
        self.interrupt_history: List[InterruptEvent] = []
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
        self.interrupt_handlers: Dict[InterruptType, Callable] = {}
        self.priority_handlers: Dict[InterruptPriority, List[Callable]] = {}
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.metrics = InterruptMetrics()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safety
        self._lock = asyncio.Lock()
        
    def initialize(self, dependencies: InterruptDependencies):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        self.dependencies = dependencies
        logger.info("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def register_handler(self, interrupt_type: InterruptType, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        self.interrupt_handlers[interrupt_type] = handler
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {interrupt_type.value}")
        
    def register_priority_handler(self, priority: InterruptPriority, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        if priority not in self.priority_handlers:
            self.priority_handlers[priority] = []
        self.priority_handlers[priority].append(handler)
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ {priority.value}")
        
    async def trigger_interrupt(self, event: InterruptEvent) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"""
        async with self._lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
                if len(self.active_interrupts) >= self.config.max_concurrent_interrupts:
                    logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π: {self.config.max_concurrent_interrupts}")
                    return False
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                event.status = InterruptStatus.PROCESSING
                self.active_interrupts.append(event)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.metrics.total_interrupts += 1
                self.metrics.interrupts_by_type[event.type] += 1
                self.metrics.interrupts_by_priority[event.priority] += 1
                
                logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è {event.type.value} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {event.priority.value})")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                result = await self._execute_interrupt(event)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if result:
                    event.status = InterruptStatus.COMPLETED
                    self.metrics.successful_interrupts += 1
                    logger.info(f"‚úÖ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ {event.type.value} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    event.status = InterruptStatus.FAILED
                    self.metrics.failed_interrupts += 1
                    logger.error(f"‚ùå –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ {event.type.value} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.interrupt_history.append(event)
                self.active_interrupts.remove(event)
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
                if len(self.interrupt_history) > 100:
                    self.interrupt_history = self.interrupt_history[-100:]
                
                return result
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è {event.type.value}: {e}")
                event.status = InterruptStatus.FAILED
                event.error = str(e)
                self.metrics.failed_interrupts += 1
                return False
                
    async def _execute_interrupt(self, event: InterruptEvent) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —Ç–∏–ø—É
            handler = self.interrupt_handlers.get(event.type)
            if handler:
                start_time = time.time()
                result = await handler(event)
                processing_time = time.time() - start_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if self.metrics.total_interrupts > 0:
                    self.metrics.average_processing_time = (
                        (self.metrics.average_processing_time * (self.metrics.total_interrupts - 1) + processing_time) 
                        / self.metrics.total_interrupts
                    )
                
                event.result = result
                return result
            else:
                logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {event.type.value} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {event.type.value}: {e}")
            event.error = str(e)
            return False
            
    def is_interrupting(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"""
        return len(self.active_interrupts) > 0
        
    def get_active_interrupts(self) -> List[InterruptEvent]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        return self.active_interrupts.copy()
        
    def get_interrupt_history(self, limit: int = 10) -> List[InterruptEvent]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        return self.interrupt_history[-limit:]
        
    def get_metrics(self) -> InterruptMetrics:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        return self.metrics
        
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        self.interrupt_history.clear()
        logger.info("üßπ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
        
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        return {
            "active_interrupts": len(self.active_interrupts),
            "total_interrupts": self.metrics.total_interrupts,
            "successful_interrupts": self.metrics.successful_interrupts,
            "failed_interrupts": self.metrics.failed_interrupts,
            "success_rate": (
                self.metrics.successful_interrupts / max(self.metrics.total_interrupts, 1) * 100
            ),
            "average_processing_time": self.metrics.average_processing_time,
            "handlers_registered": len(self.interrupt_handlers),
            "config": {
                "max_concurrent_interrupts": self.config.max_concurrent_interrupts,
                "interrupt_timeout": self.config.interrupt_timeout,
                "retry_attempts": self.config.retry_attempts,
            }
        }
