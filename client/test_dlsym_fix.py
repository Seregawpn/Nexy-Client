#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è dlsym –æ—à–∏–±–æ–∫
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NSMakeRect –∏ CGRectMake —Ñ—É–Ω–∫—Ü–∏–π
"""

import sys
import os

def test_dlsym_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö macOS —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dlsym —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        import Foundation
        import AppKit
        
        print("‚úÖ –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º NSMakeRect
        try:
            from Foundation import NSMakeRect
            rect = NSMakeRect(0, 0, 100, 100)
            print(f"‚úÖ NSMakeRect —Ä–∞–±–æ—Ç–∞–µ—Ç: {rect}")
        except Exception as e:
            print(f"‚ùå NSMakeRect –æ—à–∏–±–∫–∞: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º CGRectMake —á–µ—Ä–µ–∑ AppKit (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        try:
            from AppKit import NSRect
            # CGRectMake –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ AppKit
            import objc
            CGRectMake = objc.lookUpClass('NSRect')
            if CGRectMake:
                print("‚úÖ CGRectMake –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ AppKit")
            else:
                print("‚ö†Ô∏è CGRectMake –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è CGRectMake —á–µ—Ä–µ–∑ AppKit: {e}")
            # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ NSMakeRect —Ä–∞–±–æ—Ç–∞–µ—Ç
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º rumps
        try:
            import rumps
            print("‚úÖ rumps –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå rumps –æ—à–∏–±–∫–∞: {e}")
            return False
        
        print("üéâ –í—Å–µ dlsym —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_pyinstaller_build():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É PyInstaller"""
    print("\nüî® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PyInstaller —Å–±–æ—Ä–∫–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PyInstaller –¥–æ—Å—Ç—É–ø–µ–Ω
        import PyInstaller
        print(f"‚úÖ PyInstaller –≤–µ—Ä—Å–∏—è: {PyInstaller.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º spec —Ñ–∞–π–ª
        spec_path = "packaging/Nexy.spec"
        if os.path.exists(spec_path):
            print("‚úÖ Spec —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
            
            # –ß–∏—Ç–∞–µ–º spec —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º binaries
            with open(spec_path, 'r') as f:
                content = f.read()
                if 'Foundation.framework' in content and 'CoreGraphics.framework' in content:
                    print("‚úÖ –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ spec —Ñ–∞–π–ª")
                    return True
                else:
                    print("‚ùå –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ spec —Ñ–∞–π–ª–µ")
                    return False
        else:
            print("‚ùå Spec —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PyInstaller: {e}")
        return False

if __name__ == "__main__":
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ dlsym –ø—Ä–æ–±–ª–µ–º...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    dlsym_ok = test_dlsym_functions()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º PyInstaller
    pyinstaller_ok = test_pyinstaller_build()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"dlsym —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úÖ –†–ê–ë–û–¢–ê–Æ–¢' if dlsym_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–¢'}")
    print(f"PyInstaller: {'‚úÖ –ù–ê–°–¢–†–û–ï–ù' if pyinstaller_ok else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
    
    if dlsym_ok and pyinstaller_ok:
        print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    else:
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –ù–ï –†–ï–®–ï–ù–ê. –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
