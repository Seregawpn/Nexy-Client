"""
macOS Hardware Detector –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Hardware UUID
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ Hardware UUID
"""

import logging
import uuid
from typing import Optional, Dict, Any
from .system_profiler import SystemProfilerBridge
from ..core.types import HardwareIdResult, HardwareIdStatus, HardwareIdError, HardwareIdNotFoundError

logger = logging.getLogger(__name__)


class HardwareDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è macOS"""
    
    def __init__(self, timeout: int = 5):
        self.system_profiler = SystemProfilerBridge(timeout)
        self.timeout = timeout
    
    def detect_hardware_uuid(self) -> HardwareIdResult:
        """
        –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç Hardware UUID
        
        Returns:
            HardwareIdResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Hardware UUID...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å system_profiler
            if not self.system_profiler.is_available():
                logger.error("‚ùå system_profiler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return HardwareIdResult(
                    uuid="",
                    status=HardwareIdStatus.ERROR,
                    source="system_profiler",
                    cached=False,
                    error_message="system_profiler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
            
            # –ü–æ–ª—É—á–∞–µ–º Hardware UUID —á–µ—Ä–µ–∑ system_profiler
            hardware_uuid = self.system_profiler.get_hardware_uuid()
            
            if hardware_uuid:
                logger.info(f"‚úÖ Hardware UUID –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {hardware_uuid}")
                return HardwareIdResult(
                    uuid=hardware_uuid,
                    status=HardwareIdStatus.SUCCESS,
                    source="system_profiler",
                    cached=False,
                    metadata={
                        "detection_method": "system_profiler",
                        "timestamp": self._get_timestamp()
                    }
                )
            else:
                logger.warning("‚ö†Ô∏è Hardware UUID –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ system_profiler")
                return HardwareIdResult(
                    uuid="",
                    status=HardwareIdStatus.NOT_FOUND,
                    source="system_profiler",
                    cached=False,
                    error_message="Hardware UUID –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Hardware UUID: {e}")
            return HardwareIdResult(
                uuid="",
                status=HardwareIdStatus.ERROR,
                source="system_profiler",
                cached=False,
                error_message=str(e)
            )
    
    def detect_hardware_info(self) -> Dict[str, Any]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ system_profiler
            hardware_info = self.system_profiler.get_hardware_info()
            
            if hardware_info:
                logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                return hardware_info
            else:
                logger.warning("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏: {e}")
            return {}
    
    def validate_hardware_uuid(self, uuid_str: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Hardware UUID
        
        Args:
            uuid_str: UUID –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ UUID –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            if not uuid_str:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç UUID
            if not self._is_valid_uuid_format(uuid_str):
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID: {uuid_str}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω—ã–π UUID
            if self._is_random_uuid(uuid_str):
                logger.warning(f"‚ö†Ô∏è UUID –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å–ª—É—á–∞–π–Ω—ã–π: {uuid_str}")
                return False
            
            logger.debug(f"‚úÖ UUID –≤–∞–ª–∏–¥–µ–Ω: {uuid_str}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ UUID: {e}")
            return False
    
    def _is_valid_uuid_format(self, uuid_str: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç UUID
        
        Args:
            uuid_str: UUID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å UUID –æ–±—ä–µ–∫—Ç
            uuid.UUID(uuid_str)
            return True
        except ValueError:
            return False
    
    def _is_random_uuid(self, uuid_str: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ UUID —Å–ª—É—á–∞–π–Ω—ã–º
        
        Args:
            uuid_str: UUID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ UUID –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–º
        """
        try:
            # –°–æ–∑–¥–∞–µ–º UUID –æ–±—ä–µ–∫—Ç
            uuid_obj = uuid.UUID(uuid_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é UUID
            # –í–µ—Ä—Å–∏—è 4 - —Å–ª—É—á–∞–π–Ω—ã–π UUID
            if uuid_obj.version == 4:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UUID
            # Hardware UUID –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –≤–µ—Ä—Å–∏—é 1 –∏–ª–∏ 2
            return False
            
        except ValueError:
            return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–º
    
    def _get_timestamp(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timestamp"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    def is_macos(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º—ã –Ω–∞ macOS
        
        Returns:
            bool: True –µ—Å–ª–∏ macOS
        """
        try:
            import platform
            return platform.system() == "Darwin"
        except Exception:
            return False
    
    def get_system_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        """
        try:
            import platform
            import sys
            
            return {
                "system": platform.system(),
                "release": platform.release(),
                "version": platform.version(),
                "machine": platform.machine(),
                "processor": platform.processor(),
                "python_version": sys.version,
                "is_macos": self.is_macos()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
            return {}
