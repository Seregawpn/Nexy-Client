"""
AudioDeviceManager - –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏:
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
"""

import logging
from typing import Optional, Dict, List, Set
from utils.device_utils import is_headphones, get_device_type_keywords

logger = logging.getLogger(__name__)

class AudioDeviceManager:
    """
    –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    2. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    4. Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    
    def __init__(self, config: Dict = None):
        self.config = config or {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._unified_system = None
        self._realtime_monitor = None
        self._initialized = False
        
        logger.info("üéõÔ∏è AudioDeviceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize(self, unified_system=None, realtime_monitor=None) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioDeviceManager...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if unified_system:
                self._unified_system = unified_system
            else:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from unified_audio_system import get_global_unified_audio_system
                self._unified_system = get_global_unified_audio_system()
            
            if not self._unified_system:
                logger.error("‚ùå UnifiedAudioSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            if realtime_monitor:
                self._realtime_monitor = realtime_monitor
            else:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from realtime_device_monitor import get_global_realtime_monitor
                self._realtime_monitor = get_global_realtime_monitor()
            
            if not self._realtime_monitor:
                logger.error("‚ùå RealtimeDeviceMonitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            self._initialized = True
            logger.info("‚úÖ AudioDeviceManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioDeviceManager: {e}")
            return False
    
    def switch_to_device(self, device_name: str) -> bool:
        """
        –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
        
        Args:
            device_name: –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self._initialized:
            logger.error("‚ùå AudioDeviceManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            logger.info(f"üéõÔ∏è [AudioDeviceManager] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
            success = self._unified_system.switch_to_device(device_name)
            
            if success:
                logger.info(f"‚úÖ [AudioDeviceManager] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {device_name}")
            else:
                logger.error(f"‚ùå [AudioDeviceManager] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞: {device_name}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def switch_to_system_device(self) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–¥–∏–Ω–∞–º–∏–∫–∏)
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self._initialized:
            logger.error("‚ùå AudioDeviceManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            logger.info("üéõÔ∏è [AudioDeviceManager] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            system_device = self._unified_system.get_system_device()
            if not system_device:
                logger.error("‚ùå [AudioDeviceManager] –°–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            success = self.switch_to_device(system_device.name)
            
            if success:
                logger.info(f"‚úÖ [AudioDeviceManager] –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {system_device.name}")
            else:
                logger.error(f"‚ùå [AudioDeviceManager] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}")
            return False
    
    def auto_switch_to_best(self) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self._initialized:
            logger.error("‚ùå AudioDeviceManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            logger.info("üéõÔ∏è [AudioDeviceManager] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
            success = self._unified_system.auto_switch_to_best()
            
            if success:
                logger.info("‚úÖ [AudioDeviceManager] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            else:
                logger.error("‚ùå [AudioDeviceManager] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_current_device(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
        Returns:
            str: –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ None
        """
        if not self._initialized:
            logger.error("‚ùå AudioDeviceManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            return self._unified_system.get_current_device()
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return None
    
    def get_current_device_info(self) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ None
        """
        if not self._initialized:
            logger.error("‚ùå AudioDeviceManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            current_device = self.get_current_device()
            if current_device:
                return self._unified_system.get_device_info(current_device)
            return None
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
            return None
    
    def get_available_devices(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        """
        if not self._initialized:
            logger.error("‚ùå AudioDeviceManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        try:
            return self._unified_system.get_available_devices()
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return []
    
    def is_device_available(self, device_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
        Args:
            device_name: –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self._initialized:
            return False
        
        try:
            devices = self.get_available_devices()
            return any(device.get('name') == device_name for device in devices)
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def get_system_device(self) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–¥–∏–Ω–∞–º–∏–∫–∏)
        
        Returns:
            Dict: –°–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ None
        """
        if not self._initialized:
            return None
        
        try:
            return self._unified_system.get_system_device()
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return None
    
    def find_best_available_device(self, available_devices: List[str]) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            if not self._unified_system:
                logger.warning("‚ö†Ô∏è [AudioDeviceManager] UnifiedAudioSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return available_devices[0] if available_devices else None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            device_priorities = self._unified_system.device_priorities
            
            best_device = None
            best_priority = 0
            
            for device in available_devices:
                device_lower = device.lower()
                priority = 50  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if 'airpods' in device_lower:
                    priority = device_priorities.get('airpods', 100)
                elif 'beats' in device_lower:
                    priority = device_priorities.get('beats', 95)
                elif 'bluetooth' in device_lower and is_headphones(device):
                    priority = device_priorities.get('bluetooth_headphones', 90)
                elif 'usb' in device_lower and is_headphones(device):
                    priority = device_priorities.get('usb_headphones', 85)
                elif 'bluetooth' in device_lower:
                    priority = device_priorities.get('bluetooth_speakers', 70)
                elif 'usb' in device_lower:
                    priority = device_priorities.get('usb_audio', 60)
                elif any(tag in device_lower for tag in ['macbook', 'built-in', 'internal', 'speakers']):
                    priority = device_priorities.get('system_speakers', 40)
                elif any(tag in device_lower for tag in ['blackhole', 'soundflower', 'loopback', 'virtual']):
                    priority = device_priorities.get('virtual_device', 1)
                else:
                    priority = device_priorities.get('other', 10)
                
                if priority > best_priority:
                    best_priority = priority
                    best_device = device
            
            logger.info(f"üéØ [AudioDeviceManager] –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_priority})")
            return best_device
            
        except Exception as e:
            logger.error(f"‚ùå [AudioDeviceManager] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return available_devices[0] if available_devices else None
    
    # _is_headphones —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ utils.device_utils

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_global_audio_device_manager = None

def get_global_audio_device_manager() -> Optional[AudioDeviceManager]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AudioDeviceManager"""
    return _global_audio_device_manager

def initialize_global_audio_device_manager(config: Dict = None, unified_system=None, realtime_monitor=None) -> AudioDeviceManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AudioDeviceManager"""
    global _global_audio_device_manager
    
    if _global_audio_device_manager is None:
        _global_audio_device_manager = AudioDeviceManager(config)
        _global_audio_device_manager.initialize(unified_system, realtime_monitor)
    
    return _global_audio_device_manager
