"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–¥–∞–ª–∏—Ç—å:
1. –°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
2. –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
3. –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
4. –£—Å—Ç–∞—Ä–µ–≤—à—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
5. –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–µ—Å—É—Ä—Å—ã

–ë–ï–ó–û–ü–ê–°–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
"""

import sys
from pathlib import Path
from typing import List, Dict, Tuple

CLIENT_ROOT = Path(__file__).parent

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
CLEANUP_CATEGORIES = {
    "old_audio_tests": {
        "description": "–°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∞—É–¥–∏–æ (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã)",
        "files": [
            "diagnose_audio.py",
            "test_audio_simple.py",
            "test_channel_conversion.py",
            "test_device_channels.py",
            "test_exact_playback.py",
            "test_playback_chain.py",
            "test_player_config.py",
        ]
    },
    
    "old_audio_files": {
        "description": "–°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–¥—É–±–ª–∏–∫–∞—Ç—ã)",
        "files": [
            "assets/audio/welcome_en_old.mp3",
            "assets/audio/welcome_en_new.aiff",
            # –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        ]
    },
    
    "old_config_duplicates": {
        "description": "–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (—Å ' 2' –≤ –∏–º–µ–Ω–∏)",
        "files": [
            "config/logging_config 2.yaml",
            "config/network_config 2.yaml",
            "config/tray_config 2.yaml",
        ]
    },
    
    "old_resource_duplicates": {
        "description": "–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–µ—Å—É—Ä—Å—ã (—Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–∫–æ–Ω–æ–∫)",
        "files": [
            "assets/icons/app_icon 2.icns",
            "assets/icons/app_icon 3.icns",
            "assets/icons/app_icon 4.icns",
            "resources/logo 2.icns",
        ]
    },
    
    "old_documentation": {
        "description": "–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ WELCOME_SOUND_FIX.md)",
        "files": [
            "AUDIO_FIX_REPORT.md",
            "AUDIO_PATH_FIX.md",
        ]
    },
    
    "test_scripts": {
        "description": "–¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏)",
        "files": [
            "test_pyobjc_fix.py",
            "test_resource_path.py",
            "test_packaged_simulation.py",
            # test_all_before_packaging.py –æ—Å—Ç–∞–≤–ª—è–µ–º - —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç
        ],
        "optional": True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    },
}

def analyze_files() -> Dict[str, List[Tuple[Path, bool]]]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    Returns:
        Dict —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏ (–ø—É—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç_–ª–∏_—Ñ–∞–π–ª)
    """
    results = {}
    
    for category, info in CLEANUP_CATEGORIES.items():
        files_info = []
        
        for file_path in info["files"]:
            full_path = CLIENT_ROOT / file_path
            exists = full_path.exists()
            files_info.append((full_path, exists))
        
        results[category] = {
            "description": info["description"],
            "files": files_info,
            "optional": info.get("optional", False)
        }
    
    return results

def print_analysis(results: Dict):
    """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤"""
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê - –§–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
    print("=" * 80)
    
    total_files = 0
    total_size = 0
    existing_files = 0
    
    for category, info in results.items():
        optional = " (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)" if info["optional"] else ""
        print(f"\nüìÅ {category.upper()}{optional}")
        print(f"   {info['description']}")
        print("-" * 80)
        
        for file_path, exists in info["files"]:
            if exists:
                size = file_path.stat().st_size
                size_kb = size / 1024
                status = f"‚úì EXISTS ({size_kb:.1f} KB)"
                total_size += size
                existing_files += 1
            else:
                status = "‚úó NOT FOUND"
            
            relative_path = file_path.relative_to(CLIENT_ROOT)
            print(f"   {status:25} {relative_path}")
            total_files += 1
    
    print("\n" + "=" * 80)
    print(f"üìä –ò–¢–û–ì–û:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {total_files}")
    print(f"   ‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {existing_files}")
    print(f"   ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024:.1f} KB ({total_size / (1024*1024):.2f} MB)")
    print("=" * 80)

def delete_files(results: Dict, skip_optional: bool = True):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã"""
    print("\nüóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í...")
    print("-" * 80)
    
    deleted_count = 0
    failed_count = 0
    skipped_count = 0
    
    for category, info in results.items():
        if info["optional"] and skip_optional:
            print(f"\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
            skipped_count += len([f for f, exists in info["files"] if exists])
            continue
        
        print(f"\nüìÅ {category}")
        
        for file_path, exists in info["files"]:
            if not exists:
                continue
            
            try:
                file_path.unlink()
                print(f"   ‚úÖ –£–¥–∞–ª—ë–Ω: {file_path.relative_to(CLIENT_ROOT)}")
                deleted_count += 1
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path.name}: {e}")
                failed_count += 1
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {deleted_count}")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}")
    print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): {skipped_count}")
    print("=" * 80)
    
    return deleted_count > 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 80)
    print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê NEXY")
    print("=" * 80)
    print("\n–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤.")
    print("–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n")
    
    # –ê–Ω–∞–ª–∏–∑
    results = analyze_files()
    print_analysis(results)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n‚ùì –ß–¢–û –î–ï–õ–ê–¢–¨?")
    print("-" * 80)
    print("1. –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. –£–¥–∞–ª–∏—Ç—å –í–°–ï —Ñ–∞–π–ª—ã (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã)")
    print("3. –û—Ç–º–µ–Ω–∞ (–Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è—Ç—å)")
    print()
    
    try:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2/3): ").strip()
        
        if choice == "1":
            print("\n‚úÖ –£–¥–∞–ª—è—é —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã...")
            if delete_files(results, skip_optional=True):
                print("\n‚úÖ –ì–û–¢–û–í–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")
                print("\nüí° –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±—É–¥—É—â–µ–π –æ—Ç–ª–∞–¥–∫–∏.")
                print("   –ò—Ö –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ —Å –æ–ø—Ü–∏–µ–π 2.")
            else:
                print("\n‚ö†Ô∏è  –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å - –≤—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        
        elif choice == "2":
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã!")
            confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (yes/no): ").strip().lower()
            
            if confirm == "yes":
                print("\n‚úÖ –£–¥–∞–ª—è—é –í–°–ï —Ñ–∞–π–ª—ã...")
                if delete_files(results, skip_optional=False):
                    print("\n‚úÖ –ì–û–¢–û–í–û! –í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")
                else:
                    print("\n‚ö†Ô∏è  –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å - –≤—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            else:
                print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        
        else:
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –§–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã.")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –§–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã.")
        return 1
    
    print("\n" + "=" * 80)
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)





