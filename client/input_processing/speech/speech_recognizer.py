"""
–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∏–∑ stt_recognizer.py
"""

import asyncio
import threading
import time
import logging
from typing import Optional, Callable, Dict, Any

import sounddevice as sd
import numpy as np
import speech_recognition as sr

from .types import SpeechEvent, SpeechEventType, SpeechState, SpeechConfig

logger = logging.getLogger(__name__)

class SpeechRecognizer:
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    
    def __init__(self, config: SpeechConfig):
        self.config = config
        self.sample_rate = config.sample_rate
        self.chunk_size = config.chunk_size
        self.channels = config.channels
        self.dtype = config.dtype
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = SpeechState.IDLE
        self.is_recording = False
        self.audio_chunks = []
        
        # Threading
        self.recording_thread = None
        self.stream_lock = threading.Lock()
        self.stop_event = threading.Event()
        
        # Callbacks
        self.state_callbacks: Dict[SpeechState, Callable] = {}
        self.event_callbacks: Dict[SpeechEventType, Callable] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        self._init_recognizer()
    
    def _init_recognizer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏"""
        try:
            self.recognizer = sr.Recognizer()
            self.recognizer.energy_threshold = self.config.energy_threshold
            self.recognizer.dynamic_energy_threshold = self.config.dynamic_energy_threshold
            self.recognizer.pause_threshold = self.config.pause_threshold
            self.recognizer.phrase_threshold = self.config.phrase_threshold
            self.recognizer.non_speaking_duration = self.config.non_speaking_duration
            
            logger.info("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è: {e}")
            self.state = SpeechState.ERROR
    
    async def start_recording(self) -> bool:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏"""
        try:
            if self.state != SpeechState.IDLE:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {self.state.value}")
                return False
                
            self.state = SpeechState.RECORDING
            self.is_recording = True
            self.audio_chunks = []
            self.stop_event.clear()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏
            await self._notify_state_change(SpeechState.RECORDING)
            await self._notify_event(SpeechEventType.RECORDING_START)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
            self.recording_thread = threading.Thread(
                target=self._run_recording,
                name="SpeechRecording",
                daemon=True
            )
            self.recording_thread.start()
            
            logger.info("üé§ –ó–∞–ø–∏—Å—å —Ä–µ—á–∏ –Ω–∞—á–∞—Ç–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
            self.state = SpeechState.ERROR
            await self._notify_state_change(SpeechState.ERROR, error=str(e))
            return False
    
    async def stop_recording(self) -> str:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            if self.state != SpeechState.RECORDING:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {self.state.value}")
                return ""
                
            self.state = SpeechState.PROCESSING
            self.is_recording = False
            self.stop_event.set()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏
            await self._notify_event(SpeechEventType.RECORDING_STOP)
            await self._notify_state_change(SpeechState.PROCESSING)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∑–∞–ø–∏—Å–∏
            if self.recording_thread and self.recording_thread.is_alive():
                self.recording_thread.join(timeout=5.0)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            text = await self._recognize_audio()
            
            self.state = SpeechState.IDLE
            await self._notify_state_change(SpeechState.IDLE)
            
            if text:
                await self._notify_event(SpeechEventType.TEXT_RECOGNIZED, text=text)
                logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text[:50]}...")
            else:
                logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            self.state = SpeechState.ERROR
            await self._notify_state_change(SpeechState.ERROR, error=str(e))
            return ""
    
    def _run_recording(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ"""
        try:
            with sd.InputStream(
                samplerate=self.sample_rate,
                channels=self.channels,
                dtype=self.dtype,
                blocksize=self.chunk_size,
                callback=self._audio_callback
            ) as stream:
                
                while self.is_recording and not self.stop_event.is_set():
                    time.sleep(0.1)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
            self.state = SpeechState.ERROR
    
    def _audio_callback(self, indata, frames, time, status):
        """Callback –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ"""
        try:
            if status:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ: {status}")
                
            if self.is_recording:
                with self.stream_lock:
                    self.audio_chunks.append(indata.copy())
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ audio callback: {e}")
    
    async def _recognize_audio(self) -> str:
        """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ"""
        try:
            if not self.audio_chunks:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                return ""
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫–∏
            with self.stream_lock:
                audio_data = np.concatenate(self.audio_chunks, axis=0)
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            if self.channels > 1:
                audio_data = np.mean(audio_data, axis=1)
                
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—É–¥–∏–æ
            audio_data = audio_data.astype(np.float32) / np.iinfo(np.int16).max
            
            # –°–æ–∑–¥–∞–µ–º AudioData –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            audio_bytes = (audio_data * 32767).astype(np.int16).tobytes()
            audio_data_obj = sr.AudioData(audio_bytes, self.sample_rate, 2)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            try:
                text = self.recognizer.recognize_google(audio_data_obj, language='ru-RU')
                return text
            except sr.UnknownValueError:
                logger.warning("‚ö†Ô∏è –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                return ""
            except sr.RequestError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                return ""
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return ""
    
    def register_callback(self, state: SpeechState, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç callback –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.state_callbacks[state] = callback
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state.value}")
    
    def register_event_callback(self, event_type: SpeechEventType, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        self.event_callbacks[event_type] = callback
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type.value}")
    
    async def _notify_state_change(self, state: SpeechState, **kwargs):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            callback = self.state_callbacks.get(state)
            if callback:
                event = SpeechEvent(
                    event_type=SpeechEventType.STATE_CHANGED,
                    state=state,
                    timestamp=time.time(),
                    **kwargs
                )
                await callback(event)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    async def _notify_event(self, event_type: SpeechEventType, **kwargs):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–æ–±—ã—Ç–∏–∏"""
        try:
            callback = self.event_callbacks.get(event_type)
            if callback:
                event = SpeechEvent(
                    event_type=event_type,
                    state=self.state,
                    timestamp=time.time(),
                    **kwargs
                )
                await callback(event)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        return {
            "state": self.state.value,
            "is_recording": self.is_recording,
            "audio_chunks_count": len(self.audio_chunks),
            "config": {
                "sample_rate": self.sample_rate,
                "chunk_size": self.chunk_size,
                "channels": self.channels,
            },
            "callbacks_registered": len(self.state_callbacks) + len(self.event_callbacks)
        }
