#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import platform
import subprocess
import sys

def check_system_architecture():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã...")
    
    # Python –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    python_arch = platform.machine()
    print(f"üêç Python –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {python_arch}")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    system_arch = platform.processor()
    print(f"üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {system_arch}")
    
    # macOS –≤–µ—Ä—Å–∏—è
    try:
        result = subprocess.run(['sw_vers', '-productVersion'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            macos_version = result.stdout.strip()
            print(f"üçé macOS –≤–µ—Ä—Å–∏—è: {macos_version}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é macOS")
            macos_version = "Unknown"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ macOS: {e}")
        macos_version = "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    is_arm64 = python_arch == "arm64"
    is_macos_12_plus = False
    
    if macos_version != "Unknown":
        try:
            major_version = int(macos_version.split('.')[0])
            is_macos_12_plus = major_version >= 12
        except:
            is_macos_12_plus = False
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"   ARM64 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {'‚úÖ –î–ê' if is_arm64 else '‚ùå –ù–ï–¢'}")
    print(f"   macOS 12.0+: {'‚úÖ –î–ê' if is_macos_12_plus else '‚ùå –ù–ï–¢'}")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if is_arm64 and is_macos_12_plus:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–∞!")
        print("   ‚úÖ –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è M1/M2")
        print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è macOS 12.0+")
        return True
    elif is_arm64:
        print("\n‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞")
        print("   ‚úÖ ARM64 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        print("   ‚ùå macOS –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ 12.0")
        print("   üí° –û–±–Ω–æ–≤–∏—Ç–µ macOS –¥–æ –≤–µ—Ä—Å–∏–∏ 12.0+")
        return False
    else:
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º–∞!")
        print("   ‚ùå Intel –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        print("   üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ M1/M2 Mac")
        return False

def check_rosetta():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Rosetta 2"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é Rosetta 2...")
    
    try:
        result = subprocess.run(['softwareupdate', '--list-rosetta'], 
                              capture_output=True, text=True, timeout=10)
        
        if "Rosetta 2 is already installed" in result.stdout:
            print("‚úÖ Rosetta 2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Rosetta 2 –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å Intel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            print("üí° –î–ª—è —á–∏—Å—Ç–æ–≥–æ ARM64 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å Rosetta 2")
            return True
        elif "Rosetta 2 is not installed" in result.stdout:
            print("‚úÖ Rosetta 2 –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∏—Å—Ç–æ–º ARM64 —Ä–µ–∂–∏–º–µ")
            return False
        else:
            print("‚ùì –°—Ç–∞—Ç—É—Å Rosetta 2 –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Rosetta 2: {e}")
        return None

def check_required_tools():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∫–∏"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∫–∏...")
    
    tools = {
        "PyInstaller": "pyinstaller",
        "Python 3.12+": "python3",
        "Homebrew": "brew",
        "FLAC": "flac",
        "FFmpeg": "ffmpeg"
    }
    
    missing_tools = []
    
    for tool_name, command in tools.items():
        try:
            # FFmpeg –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–ª–∞–≥
            if command == "ffmpeg":
                result = subprocess.run([command, '-version'], 
                                      capture_output=True, text=True, timeout=10)
                # FFmpeg –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏—é –≤ stdout
                if result.stdout and "ffmpeg version" in result.stdout:
                    version = result.stdout.strip().split('\n')[0]
                    print(f"‚úÖ {tool_name}: {version}")
                else:
                    print(f"‚ùå {tool_name}: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    missing_tools.append(tool_name)
            else:
                result = subprocess.run([command, '--version'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    version = result.stdout.strip().split('\n')[0]
                    print(f"‚úÖ {tool_name}: {version}")
                else:
                    print(f"‚ùå {tool_name}: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    missing_tools.append(tool_name)
        except FileNotFoundError:
            print(f"‚ùå {tool_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing_tools.append(tool_name)
        except Exception as e:
            print(f"‚ùå {tool_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
            missing_tools.append(tool_name)
    
    if missing_tools:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(missing_tools)}")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    arch_compatible = check_system_architecture()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Rosetta 2
    rosetta_status = check_rosetta()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tools_ready = check_required_tools()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("="*50)
    
    if arch_compatible and tools_ready:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –°–ë–û–†–ö–ï!")
        print("   ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ARM64 (M1/M2)")
        print("   ‚úÖ macOS 12.0+")
        print("   ‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("\nüí° –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–±–æ—Ä–∫—É:")
        print("   ./build/pyinstaller/build_script.sh")
        return True
    else:
        print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –°–ë–û–†–ö–ï")
        if not arch_compatible:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        if not tools_ready:
            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
