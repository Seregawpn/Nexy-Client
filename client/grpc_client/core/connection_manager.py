"""
–ú–µ–Ω–µ–¥–∂–µ—Ä gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import asyncio
import logging
import time
from typing import Optional, Dict, Any
import grpc
import grpc.aio

from .types import ConnectionState, ServerConfig, ConnectionMetrics
from .health_checker import HealthChecker

logger = logging.getLogger(__name__)


class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.servers: Dict[str, ServerConfig] = {}
        self.current_server: Optional[str] = None
        self.connection_state = ConnectionState.DISCONNECTED
        self.metrics = ConnectionMetrics()
        
        # gRPC –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.channel: Optional[grpc.aio.Channel] = None
        self.stub: Optional[Any] = None
        
        # Thread safety
        self._connection_lock = asyncio.Lock()
        
        # Health checker
        self.health_checker = HealthChecker()
        
        # Callbacks
        self.on_connection_changed: Optional[callable] = None
        self.on_error: Optional[callable] = None
    
    def add_server(self, name: str, config: ServerConfig):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self.servers[name] = config
        if not self.current_server:
            self.current_server = name
        logger.info(f"üåê –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä {name}: {config.address}:{config.port}")
    
    async def connect(self, server_name: Optional[str] = None) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            async with self._connection_lock:
                if server_name and server_name in self.servers:
                    self.current_server = server_name
                
                return await self._connect()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def _connect(self) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            if not self.current_server or self.current_server not in self.servers:
                logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return False
            
            self.connection_state = ConnectionState.CONNECTING
            self._notify_connection_changed()
            
            server_config = self.servers[self.current_server]
            address = f"{server_config.address}:{server_config.port}"
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.channel:
                try:
                    await self.channel.close()
                except:
                    pass
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ gRPC
            options = self._create_grpc_options(server_config)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
            if server_config.use_ssl:
                self.channel = grpc.aio.secure_channel(
                    address, 
                    grpc.aio.ssl_channel_credentials(), 
                    options=options
                )
            else:
                self.channel = grpc.aio.insecure_channel(address, options=options)
            
            # –°–æ–∑–¥–∞–µ–º stub
            self.stub = self._create_stub()
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
            try:
                await asyncio.wait_for(
                    self.channel.channel_ready(),
                    timeout=server_config.timeout
                )
                
                self.connection_state = ConnectionState.CONNECTED
                self.metrics.successful_connections += 1
                self.metrics.last_connection_time = time.time()
                self._notify_connection_changed()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º health checker
                self.health_checker.start(self._check_connection_health)
                
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {address} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
                
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {address}")
                self.connection_state = ConnectionState.FAILED
                self.metrics.failed_connections += 1
                self._notify_connection_changed()
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.connection_state = ConnectionState.FAILED
            self.metrics.failed_connections += 1
            self.metrics.last_error = str(e)
            self._notify_connection_changed()
            return False
    
    def _create_grpc_options(self, server_config: ServerConfig) -> list:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ü–∏–∏ gRPC"""
        return [
            ('grpc.max_send_message_length', server_config.max_message_size),
            ('grpc.max_receive_message_length', server_config.max_message_size),
            ('grpc.max_metadata_size', 1024 * 1024),
            ('grpc.keepalive_time_ms', server_config.keep_alive_time * 1000),
            ('grpc.keepalive_timeout_ms', server_config.keep_alive_timeout * 1000),
            ('grpc.keepalive_permit_without_calls', server_config.keep_alive_permit_without_calls),
            ('grpc.http2.max_pings_without_data', 0),
            ('grpc.http2.min_time_between_pings_ms', 10000),
            ('grpc.http2.min_ping_interval_without_data_ms', 300000)
        ]
    
    def _create_stub(self):
        """–°–æ–∑–¥–∞–µ—Ç gRPC stub (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        # –≠—Ç–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å, stub —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        return None
    
    def _check_connection_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.channel:
                state = self.channel.get_state()
                return state == grpc.ChannelConnectivity.READY
            return False
        except Exception:
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async with self._connection_lock:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health checker
                self.health_checker.stop()
                
                if self.channel:
                    await self.channel.close()
                    self.channel = None
                    self.stub = None
                
                self.connection_state = ConnectionState.DISCONNECTED
                self._notify_connection_changed()
                logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def reconnect(self) -> bool:
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            await self.disconnect()
            await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
            return await self._connect()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def switch_server(self, server_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä"""
        try:
            if server_name not in self.servers:
                logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_name}")
            self.current_server = server_name
            return await self.reconnect()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def get_connection_state(self) -> ConnectionState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.connection_state
    
    def get_metrics(self) -> ConnectionMetrics:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.metrics
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç"""
        return self.connection_state == ConnectionState.CONNECTED
    
    def set_connection_callback(self, callback: callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.on_connection_changed = callback
    
    def set_error_callback(self, callback: callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ—à–∏–±–æ–∫"""
        self.on_error = callback
    
    def _notify_connection_changed(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.on_connection_changed:
            try:
                self.on_connection_changed(self.connection_state)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def _notify_error(self, error: Exception, context: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        if self.on_error:
            try:
                self.on_error(error, context)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error callback: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.health_checker.stop()
            await self.disconnect()
            logger.info("üßπ ConnectionManager –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ConnectionManager: {e}")
