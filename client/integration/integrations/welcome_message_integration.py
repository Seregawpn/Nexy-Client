"""
WelcomeMessageIntegration ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å EventBus

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏ TTS fallback
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å SpeechPlaybackIntegration –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
"""

import asyncio
import contextlib
import logging
import sys
from pathlib import Path
from typing import Optional, Dict, Any
import numpy as np

from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager
from integration.core.error_handler import ErrorHandler

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
from modules.welcome_message.core.welcome_player import WelcomePlayer
from modules.welcome_message.core.types import WelcomeConfig, WelcomeResult
from modules.welcome_message.config.welcome_config import WelcomeConfigLoader

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.unified_config_loader import UnifiedConfigLoader

logger = logging.getLogger(__name__)


class WelcomeMessageIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å EventBus"""
    
    def __init__(
        self,
        event_bus: EventBus,
        state_manager: ApplicationStateManager,
        error_handler: ErrorHandler,
    ):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            unified_config = UnifiedConfigLoader()
            config_loader = WelcomeConfigLoader.from_unified_config(unified_config)
            self.config = config_loader.load_config()
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.config = WelcomeConfig()
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        self.welcome_player = WelcomePlayer(self.config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏
        self.welcome_player.set_callbacks(
            on_started=self._on_welcome_started,
            on_completed=self._on_welcome_completed,
            on_error=self._on_welcome_error
        )
        
        self._initialized = False
        self._running = False
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (granted/denied/not_determined/None)
        self._microphone_status: Optional[str] = None
        self._pending_welcome = False
        self._permission_prompted = False
        self._permission_recheck_task: Optional[asyncio.Task] = None
        self._enforce_permissions = self._detect_packaged_environment()
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîß [WELCOME_INTEGRATION] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.MEDIUM)
            await self.event_bus.subscribe("permissions.status_checked", self._on_permission_event, EventPriority.HIGH)
            await self.event_bus.subscribe("permissions.changed", self._on_permission_event, EventPriority.HIGH)
            await self.event_bus.subscribe("permissions.requested", self._on_permission_event, EventPriority.MEDIUM)
            await self.event_bus.subscribe("permissions.integration_ready", self._on_permissions_ready, EventPriority.MEDIUM)
            
            self._initialized = True
            logger.info("‚úÖ [WELCOME_INTEGRATION] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º initialize)
            asyncio.create_task(self._request_initial_permission_status())
            return True
            
        except Exception as e:
            await self._handle_error(e, where="welcome.initialize")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        if not self._initialized:
            logger.error("‚ùå [WELCOME_INTEGRATION] –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        self._running = True
        logger.info("‚úÖ [WELCOME_INTEGRATION] –ó–∞–ø—É—â–µ–Ω")
        return True
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            self._running = False
            await self._cancel_permission_recheck_task()
            logger.info("‚úÖ [WELCOME_INTEGRATION] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            await self._handle_error(e, where="welcome.stop", severity="warning")
            return False
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if not self.config.enabled:
                logger.info("üîá [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            logger.info("üöÄ [WELCOME_INTEGRATION] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            if self.config.delay_sec > 0:
                await asyncio.sleep(self.config.delay_sec)
            
            if not self._enforce_permissions:
                await self._play_welcome_message(trigger="app_startup")
                return

            await self._ensure_permission_status()

            if self._is_microphone_granted():
                await self._play_welcome_message(trigger="app_startup")
            else:
                logger.info("üéôÔ∏è [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
                self._pending_welcome = True
                await self._prompt_microphone_permission()
            
        except Exception as e:
            await self._handle_error(e, where="welcome.on_app_startup", severity="warning")
    
    async def _play_welcome_message(self, trigger: str = "app_startup"):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            logger.info(f"üéµ [WELCOME_INTEGRATION] –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (trigger={trigger})")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ –ø–ª–µ–µ—Ä
            result = await self.welcome_player.play_welcome()
            
            if result.success:
                logger.info(f"‚úÖ [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: {result.method}, {result.duration_sec:.1f}s")
            else:
                logger.warning(f"‚ö†Ô∏è [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.error}")
            
        except Exception as e:
            await self._handle_error(e, where="welcome.play_message", severity="warning")
    
    def _on_welcome_started(self):
        """–ö–æ–ª–ª–±–µ–∫ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            logger.info("üéµ [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞
            asyncio.create_task(self.event_bus.publish("welcome.started", {
                "text": self.config.text,
                "method": "prerecorded"  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ _on_welcome_completed
            }))
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –≤ _on_welcome_started: {e}")
    
    def _on_welcome_completed(self, result: WelcomeResult):
        """–ö–æ–ª–ª–±–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            logger.info(f"üéµ [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result.method}, success={result.success}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            asyncio.create_task(self.event_bus.publish("welcome.completed", {
                "success": result.success,
                "method": result.method,
                "duration_sec": result.duration_sec,
                "error": result.error,
                "metadata": result.metadata or {}
            }))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ SpeechPlaybackIntegration
            if result.success and result.method in ["prerecorded", "tts"]:
                audio_data = self.welcome_player.get_audio_data()
                if audio_data is not None:
                    asyncio.create_task(self._send_audio_to_playback(audio_data))
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –≤ _on_welcome_completed: {e}")
    
    def _on_welcome_error(self, error: str):
        """–ö–æ–ª–ª–±–µ–∫ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {error}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
            asyncio.create_task(self.event_bus.publish("welcome.failed", {
                "error": error,
                "text": self.config.text
            }))
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –≤ _on_welcome_error: {e}")
    
    async def _send_audio_to_playback(self, audio_data: np.ndarray):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ SpeechPlaybackIntegration –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            logger.info(f"üéµ [WELCOME_INTEGRATION] –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ –≤ SpeechPlaybackIntegration: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤")
            
            # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üîç [WELCOME_INTEGRATION] –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: dtype={audio_data.dtype}, shape={audio_data.shape}")
            logger.info(f"üîç [WELCOME_INTEGRATION] –î–∏–∞–ø–∞–∑–æ–Ω: min={audio_data.min()}, max={audio_data.max()}")
            
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º numpy –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–ª–µ–µ—Ä
            # –ë–ï–ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ bytes - –ø–ª–µ–µ—Ä —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º
            await self.event_bus.publish("playback.raw_audio", {
                "audio_data": audio_data,  # numpy array
                "sample_rate": self.config.sample_rate,
                "channels": self.config.channels,
                "dtype": "int16",  # –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                "priority": 5,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                "pattern": "welcome_message"
            })
            
            logger.info("‚úÖ [WELCOME_INTEGRATION] –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ SpeechPlaybackIntegration")
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")

    async def _on_permission_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        try:
            data = (event or {}).get("data") or {}
            event_type = (event or {}).get("type", "permissions.unknown")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
            if "permission" in data:
                perm = data.get("permission")
                status = data.get("status") or data.get("new_status")
                self._process_permission_update(perm, status, source=event_type)

            # –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            permissions_map = data.get("permissions")
            if permissions_map:
                self._process_permissions_map(permissions_map, source=event_type)

        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")

    async def _on_permissions_ready(self, event: Dict[str, Any]):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç PermissionsIntegration"""
        try:
            data = (event or {}).get("data") or {}
            permissions_map = data.get("permissions")
            if permissions_map:
                self._process_permissions_map(permissions_map, source="permissions.integration_ready")
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ permissions.integration_ready: {e}")

    def _process_permissions_map(self, permissions_map: Dict[Any, Any], source: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        try:
            for perm_key, status_value in permissions_map.items():
                # –°–ª–æ–≤–∞—Ä—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å PermissionResult –∏–ª–∏ —á–∏—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                status = status_value
                if isinstance(status_value, dict):
                    status = status_value.get("status") or status_value.get("new_status")
                self._process_permission_update(perm_key, status, source=source)
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π ({source}): {e}")

    def _process_permission_update(self, raw_permission: Any, raw_status: Any, source: str):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        if raw_permission is None:
            return

        perm_name = getattr(raw_permission, "value", raw_permission)
        if perm_name is None:
            return
        perm_name = str(perm_name).lower()
        if perm_name != "microphone":
            return

        status_value = getattr(raw_status, "value", raw_status)
        if status_value is None:
            return

        status_normalized = str(status_value).lower()
        previous = self._microphone_status

        if previous == status_normalized:
            return

        self._microphone_status = status_normalized
        logger.info(
            "üéôÔ∏è [WELCOME_INTEGRATION] –°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: %s ‚Üí %s (source=%s)",
            previous or "unknown",
            status_normalized,
            source,
        )

        if not self._enforce_permissions:
            return

        if status_normalized == "granted":
            self._pending_welcome = False
            self._permission_prompted = False
            asyncio.create_task(self._cancel_permission_recheck_task())
            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if self.config.enabled and self.welcome_player:
                asyncio.create_task(self._play_welcome_message(trigger="permissions"))
        else:
            # –õ—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫—Ä–æ–º–µ granted –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
            self._pending_welcome = True
            self._schedule_permission_recheck()

    def _is_microphone_granted(self) -> bool:
        return (self._microphone_status or "").lower() == "granted"

    async def _prompt_microphone_permission(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if not self._enforce_permissions:
            return
        if self._permission_prompted:
            self._schedule_permission_recheck()
            return

        self._permission_prompted = True
        logger.warning(
            "üéôÔ∏è [WELCOME_INTEGRATION] –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω. "
            "–û—Ç–∫—Ä–æ–π—Ç–µ '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –ú–∏–∫—Ä–æ—Ñ–æ–Ω' –∏ –≤–∫–ª—é—á–∏—Ç–µ Nexy."
        )

        try:
            await self.event_bus.publish("permissions.request_required", {
                "source": "welcome_message",
                "permissions": ["microphone"],
            })
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")

        await self._ensure_permission_status()
        self._schedule_permission_recheck()

    async def _ensure_permission_status(self):
        """–£—Ç–æ—á–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ PermissionsIntegration"""
        if not self._enforce_permissions:
            return
        try:
            await self.event_bus.publish("permissions.check_required", {
                "source": "welcome_message"
            })
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")

    async def _request_initial_permission_status(self):
        """–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if not self._enforce_permissions:
            return
        await asyncio.sleep(0)  # yield event loop
        await self._ensure_permission_status()

    def _schedule_permission_recheck(self, interval: float = 5.0, max_attempts: int = 12):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞"""
        if not self._enforce_permissions:
            return
        if self._is_microphone_granted():
            return

        if self._permission_recheck_task and not self._permission_recheck_task.done():
            return

        async def _recheck_loop():
            attempts = 0
            try:
                while not self._is_microphone_granted() and attempts < max_attempts:
                    await asyncio.sleep(interval)
                    attempts += 1
                    await self.event_bus.publish("permissions.check_required", {
                        "source": f"welcome_message.recheck#{attempts}"
                    })
            except asyncio.CancelledError:
                logger.debug("üõë [WELCOME_INTEGRATION] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞")
                raise
            except Exception as e:
                logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
            finally:
                self._permission_recheck_task = None

        self._permission_recheck_task = asyncio.create_task(_recheck_loop())

    async def _cancel_permission_recheck_task(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        if self._permission_recheck_task and not self._permission_recheck_task.done():
            self._permission_recheck_task.cancel()
            with contextlib.suppress(asyncio.CancelledError):
                await self._permission_recheck_task
        self._permission_recheck_task = None

    @staticmethod
    def _detect_packaged_environment() -> bool:
        if getattr(sys, "frozen", False) or hasattr(sys, "_MEIPASS"):
            return True
        try:
            exe_path = Path(sys.argv[0]).resolve()
            return ".app/Contents/MacOS" in str(exe_path)
        except Exception:
            return False

    
    async def _handle_error(self, e: Exception, *, where: str, severity: str = "error"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        if hasattr(self.error_handler, 'handle'):
            await self.error_handler.handle(
                error=e,
                category="welcome_message",
                severity=severity,
                context={"where": where}
            )
        else:
            logger.error(f"Welcome message error at {where}: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "initialized": self._initialized,
            "running": self._running,
            "config": {
                "enabled": self.config.enabled,
                "text": self.config.text,
                "audio_file": self.config.audio_file,
                "fallback_to_tts": self.config.fallback_to_tts,
                "delay_sec": self.config.delay_sec
            },
            "player_state": self.welcome_player.state.value if hasattr(self.welcome_player, 'state') else "unknown"
        }
