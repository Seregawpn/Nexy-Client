"""
WelcomeMessageIntegration ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å EventBus

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏ TTS fallback
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å SpeechPlaybackIntegration –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
"""

import asyncio
import logging
from typing import Optional, Dict, Any
import numpy as np

from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager
from integration.core.error_handler import ErrorHandler

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
from modules.welcome_message.core.welcome_player import WelcomePlayer
from modules.welcome_message.core.types import WelcomeConfig, WelcomeResult
from modules.welcome_message.config.welcome_config import WelcomeConfigLoader

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.unified_config_loader import UnifiedConfigLoader

logger = logging.getLogger(__name__)


class WelcomeMessageIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å EventBus"""
    
    def __init__(
        self,
        event_bus: EventBus,
        state_manager: ApplicationStateManager,
        error_handler: ErrorHandler,
    ):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            unified_config = UnifiedConfigLoader()
            config_loader = WelcomeConfigLoader.from_unified_config(unified_config)
            self.config = config_loader.load_config()
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.config = WelcomeConfig()
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        self.welcome_player = WelcomePlayer(self.config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏
        self.welcome_player.set_callbacks(
            on_started=self._on_welcome_started,
            on_completed=self._on_welcome_completed,
            on_error=self._on_welcome_error
        )
        
        self._initialized = False
        self._running = False
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîß [WELCOME_INTEGRATION] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.MEDIUM)
            
            self._initialized = True
            logger.info("‚úÖ [WELCOME_INTEGRATION] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            await self._handle_error(e, where="welcome.initialize")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        if not self._initialized:
            logger.error("‚ùå [WELCOME_INTEGRATION] –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        self._running = True
        logger.info("‚úÖ [WELCOME_INTEGRATION] –ó–∞–ø—É—â–µ–Ω")
        return True
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            self._running = False
            logger.info("‚úÖ [WELCOME_INTEGRATION] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            await self._handle_error(e, where="welcome.stop", severity="warning")
            return False
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if not self.config.enabled:
                logger.info("üîá [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            logger.info("üöÄ [WELCOME_INTEGRATION] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            if self.config.delay_sec > 0:
                await asyncio.sleep(self.config.delay_sec)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await self._play_welcome_message()
            
        except Exception as e:
            await self._handle_error(e, where="welcome.on_app_startup", severity="warning")
    
    async def _play_welcome_message(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            logger.info("üéµ [WELCOME_INTEGRATION] –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ –ø–ª–µ–µ—Ä
            result = await self.welcome_player.play_welcome()
            
            if result.success:
                logger.info(f"‚úÖ [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: {result.method}, {result.duration_sec:.1f}s")
            else:
                logger.warning(f"‚ö†Ô∏è [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.error}")
            
        except Exception as e:
            await self._handle_error(e, where="welcome.play_message", severity="warning")
    
    def _on_welcome_started(self):
        """–ö–æ–ª–ª–±–µ–∫ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            logger.info("üéµ [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞
            asyncio.create_task(self.event_bus.publish("welcome.started", {
                "text": self.config.text,
                "method": "prerecorded"  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ _on_welcome_completed
            }))
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –≤ _on_welcome_started: {e}")
    
    def _on_welcome_completed(self, result: WelcomeResult):
        """–ö–æ–ª–ª–±–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            logger.info(f"üéµ [WELCOME_INTEGRATION] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result.method}, success={result.success}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            asyncio.create_task(self.event_bus.publish("welcome.completed", {
                "success": result.success,
                "method": result.method,
                "duration_sec": result.duration_sec,
                "error": result.error,
                "metadata": result.metadata or {}
            }))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ SpeechPlaybackIntegration
            if result.success and result.method in ["prerecorded", "tts"]:
                audio_data = self.welcome_player.get_audio_data()
                if audio_data is not None:
                    asyncio.create_task(self._send_audio_to_playback(audio_data))
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –≤ _on_welcome_completed: {e}")
    
    def _on_welcome_error(self, error: str):
        """–ö–æ–ª–ª–±–µ–∫ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {error}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
            asyncio.create_task(self.event_bus.publish("welcome.failed", {
                "error": error,
                "text": self.config.text
            }))
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –≤ _on_welcome_error: {e}")
    
    async def _send_audio_to_playback(self, audio_data: np.ndarray):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ SpeechPlaybackIntegration –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            logger.info(f"üéµ [WELCOME_INTEGRATION] –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ –≤ SpeechPlaybackIntegration: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PCM s16le mono –¥–ª—è SpeechPlaybackIntegration
            pcm_data = audio_data.astype(np.int16).tobytes()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ playback.signal —Å–æ–±—ã—Ç–∏–µ
            await self.event_bus.publish("playback.signal", {
                "pcm": pcm_data,
                "sample_rate": self.config.sample_rate,
                "channels": self.config.channels,
                "gain": self.config.volume,
                "priority": 5,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                "pattern": "welcome_message"
            })
            
            logger.info("‚úÖ [WELCOME_INTEGRATION] –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ SpeechPlaybackIntegration")
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_INTEGRATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    async def _handle_error(self, e: Exception, *, where: str, severity: str = "error"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        if hasattr(self.error_handler, 'handle'):
            await self.error_handler.handle(
                error=e,
                category="welcome_message",
                severity=severity,
                context={"where": where}
            )
        else:
            logger.error(f"Welcome message error at {where}: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "initialized": self._initialized,
            "running": self._running,
            "config": {
                "enabled": self.config.enabled,
                "text": self.config.text,
                "audio_file": self.config.audio_file,
                "fallback_to_tts": self.config.fallback_to_tts,
                "delay_sec": self.config.delay_sec
            },
            "player_state": self.welcome_player.state.value if hasattr(self.welcome_player, 'state') else "unknown"
        }
