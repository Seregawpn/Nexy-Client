"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å EventBus –∏ ApplicationStateManager
"""

import asyncio
import logging
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
from modules.update_manager import UpdateManager, UpdateConfig, UpdateStatus, UpdateInfo

logger = logging.getLogger(__name__)

class UpdateManagerIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: 'UpdateManagerIntegrationConfig'):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        self.config = config
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_config = UpdateConfig(
            enabled=config.enabled,
            check_interval=config.check_interval,
            check_time=config.check_time,
            auto_install=config.auto_install,
            announce_updates=config.announce_updates,
            check_on_startup=config.check_on_startup,
            appcast_url=config.appcast_url,
            retry_attempts=config.retry_attempts,
            retry_delay=config.retry_delay,
            silent_mode=config.silent_mode,
            log_updates=config.log_updates
        )
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_manager = UpdateManager(
            config=self.update_config,
            event_bus=self.event_bus,
            state_manager=self.state_manager
        )
        
        self.is_running = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UpdateManagerIntegration...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if not self.update_manager.is_enabled():
                logger.warning("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω - Sparkle Framework –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers()
            
            logger.info("‚úÖ UpdateManagerIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UpdateManagerIntegration: {e}")
            await self.error_handler.handle_error(
                severity=ErrorSeverity.WARNING,
                category=ErrorCategory.INTEGRATION,
                message=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UpdateManagerIntegration: {e}",
                context={"where": "UpdateManagerIntegration.initialize"}
            )
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.update_manager.is_enabled():
                logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—É—Å–∫ UpdateManagerIntegration - –æ—Ç–∫–ª—é—á–µ–Ω")
                return True
                
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ UpdateManagerIntegration...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await self.update_manager.start()
            
            self.is_running = True
            logger.info("‚úÖ UpdateManagerIntegration –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UpdateManagerIntegration: {e}")
            await self.error_handler.handle_error(
                severity=ErrorSeverity.ERROR,
                category=ErrorCategory.INTEGRATION,
                message=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UpdateManagerIntegration: {e}",
                context={"where": "UpdateManagerIntegration.start"}
            )
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_running:
                return True
                
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ UpdateManagerIntegration...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await self.update_manager.stop()
            
            self.is_running = False
            logger.info("‚úÖ UpdateManagerIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ UpdateManagerIntegration: {e}")
            await self.error_handler.handle_error(
                severity=ErrorSeverity.ERROR,
                category=ErrorCategory.INTEGRATION,
                message=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ UpdateManagerIntegration: {e}",
                context={"where": "UpdateManagerIntegration.stop"}
            )
            return False
    
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await self.event_bus.subscribe("update.available", self._on_update_available, EventPriority.HIGH)
        await self.event_bus.subscribe("update.status_changed", self._on_update_status_changed, EventPriority.MEDIUM)
        await self.event_bus.subscribe("update.restarting", self._on_update_restarting, EventPriority.HIGH)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.MEDIUM)
        await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
        
    async def _on_update_available(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            version = event_data.get("version", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
            build_number = event_data.get("build_number", 0)
            
            logger.info(f"üì¢ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ {version} (build {build_number})")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.event_bus.publish("integration.update_available", {
                "version": version,
                "build_number": build_number,
                "integration": "update_manager"
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è update.available: {e}")
    
    async def _on_update_status_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            old_status = event_data.get("old_status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            new_status = event_data.get("new_status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            
            logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {old_status} ‚Üí {new_status}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.event_bus.publish("integration.update_status_changed", {
                "old_status": old_status,
                "new_status": new_status,
                "integration": "update_manager"
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è update.status_changed: {e}")
    
    async def _on_update_restarting(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            version = event_data.get("version", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
            build_number = event_data.get("build_number", 0)
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–µ—Ä—Å–∏–µ–π {version} (build {build_number})")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.event_bus.publish("integration.update_restarting", {
                "version": version,
                "build_number": build_number,
                "integration": "update_manager"
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è update.restarting: {e}")
    
    async def _on_app_startup(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ UpdateManagerIntegration")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.event_bus.publish("integration.app_startup", {
                "integration": "update_manager"
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è app.startup: {e}")
    
    async def _on_app_shutdown(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ UpdateManagerIntegration")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await self.stop()
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.event_bus.publish("integration.app_shutdown", {
                "integration": "update_manager"
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è app.shutdown: {e}")
    
    def get_current_status(self) -> UpdateStatus:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        return self.update_manager.get_current_status()
    
    def get_available_update(self) -> Optional[UpdateInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        return self.update_manager.get_available_update()
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        return self.update_manager.is_enabled()
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        return self.is_running
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å UpdateManagerIntegration"""
        return {
            "initialized": self.is_initialized,
            "running": self.is_running,
            "enabled": self.is_enabled(),
            "current_status": self.get_current_status().value if self.get_current_status() else "unknown",
            "available_update": self.get_available_update() is not None
        }

class UpdateManagerIntegrationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, enabled: bool = True, check_interval: int = 24, 
                 check_time: str = "02:00", auto_install: bool = True,
                 announce_updates: bool = False, check_on_startup: bool = True,
                 appcast_url: str = "", retry_attempts: int = 3,
                 retry_delay: int = 300, silent_mode: bool = True,
                 log_updates: bool = True):
        self.enabled = enabled
        self.check_interval = check_interval
        self.check_time = check_time
        self.auto_install = auto_install
        self.announce_updates = announce_updates
        self.check_on_startup = check_on_startup
        self.appcast_url = appcast_url
        self.retry_attempts = retry_attempts
        self.retry_delay = retry_delay
        self.silent_mode = silent_mode
        self.log_updates = log_updates
