"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è input_processing
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass
import time

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π input_processing
from modules.input_processing.keyboard.keyboard_monitor import KeyboardMonitor
from modules.input_processing.keyboard.types import KeyEvent, KeyEventType, KeyboardConfig

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from core.event_bus import EventBus, EventPriority
from core.state_manager import ApplicationStateManager, AppMode
from core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

logger = logging.getLogger(__name__)

@dataclass
class InputProcessingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ input_processing (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
    keyboard_config: KeyboardConfig
    enable_keyboard_monitoring: bool = True
    auto_start: bool = True
    keyboard_backend: str = "auto"  # auto|quartz|pynput

class InputProcessingIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è input_processing"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: InputProcessingConfig):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        self.config = config
        # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ backend
        self._using_quartz = False

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.keyboard_monitor: Optional[KeyboardMonitor] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.is_running = False
        self._current_session_id: Optional[float] = None
        self._session_recognized: bool = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è input_processing (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è input_processing...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if self.config.enable_keyboard_monitoring:
                await self._initialize_keyboard_monitor()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers()
            
            self.is_initialized = True
            logger.info("‚úÖ input_processing –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.INITIALIZATION,
                message=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ InputProcessingIntegration: {e}",
                context={"where": "input_processing_integration.initialize"}
            )
            return False
            
    async def _initialize_keyboard_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º backend
            backend = (self.config.keyboard_backend or "auto").lower()
            use_quartz = False
            try:
                import platform
                is_macos = platform.system() == "Darwin"
            except Exception:
                is_macos = False

            if is_macos and backend in ("auto", "quartz"):
                try:
                    from modules.input_processing.keyboard.mac.quartz_monitor import QuartzKeyboardMonitor
                    self.keyboard_monitor = QuartzKeyboardMonitor(self.config.keyboard_config)
                    use_quartz = True
                    self._using_quartz = True
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è QuartzKeyboardMonitor (macOS)")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å QuartzKeyboardMonitor: {e}. –§–æ–ª–ª–±–µ–∫ –Ω–∞ pynput")

            if not use_quartz:
                self.keyboard_monitor = KeyboardMonitor(self.config.keyboard_config)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: –¥–ª—è Quartz –º–æ–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å async-–º–µ—Ç–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é,
            # –¥–ª—è pynput –∏—Å–ø–æ–ª—å–∑—É–µ–º sync wrapper'—ã
            if self._using_quartz:
                self.keyboard_monitor.register_callback(KeyEventType.PRESS, self._handle_press)
                self.keyboard_monitor.register_callback(KeyEventType.SHORT_PRESS, self._handle_short_press)
                self.keyboard_monitor.register_callback(KeyEventType.LONG_PRESS, self._handle_long_press)
                self.keyboard_monitor.register_callback(KeyEventType.RELEASE, self._handle_key_release)
            else:
                self.keyboard_monitor.register_callback(KeyEventType.PRESS, self._sync_handle_press)
                self.keyboard_monitor.register_callback(KeyEventType.SHORT_PRESS, self._sync_handle_short_press)
                self.keyboard_monitor.register_callback(KeyEventType.LONG_PRESS, self._sync_handle_long_press)
                self.keyboard_monitor.register_callback(KeyEventType.RELEASE, self._sync_handle_key_release)
            
            logger.info("‚úÖ KeyboardMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.INITIALIZATION,
                message=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ keyboard monitor: {e}",
                context={"where": "input_processing_integration.initialize_keyboard_monitor"}
            )
            raise
    async def _handle_press(self, event: KeyEvent):
        """–ù–∞—á–∞–ª–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è: –≤–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ LISTENING"""
        try:
            logger.info(f"üîë PRESS EVENT: {event.timestamp} - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å")
            logger.debug(f"PRESS: session(before)={self._current_session_id}, recognized={self._session_recognized}")
            print(f"üîë PRESS EVENT: {event.timestamp} - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            self._current_session_id = event.timestamp or time.monotonic()
            self._session_recognized = False
            logger.debug(f"PRESS: session(after)={self._current_session_id}, recognized reset to {self._session_recognized}")
            # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏
            await self.event_bus.publish(
                "voice.recording_start",
                {
                    "source": "keyboard",
                    "timestamp": event.timestamp,
                    "session_id": self._current_session_id,
                }
            )
            logger.debug("PRESS: voice.recording_start –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤ LISTENING
            if hasattr(self.state_manager, 'set_mode'):
                logger.debug("PRESS: –≤—ã–∑—ã–≤–∞–µ–º state_manager.set_mode(LISTENING)")
                if asyncio.iscoroutinefunction(self.state_manager.set_mode):
                    await self.state_manager.set_mode(AppMode.LISTENING)
                else:
                    self.state_manager.set_mode(AppMode.LISTENING)
                logger.info("PRESS: —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω LISTENING")

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π (—Ç—Ä–µ–π –∏ —Ç.–¥.)
            try:
                await self.event_bus.publish("app.mode_changed", {"mode": AppMode.LISTENING})
            except Exception as e:
                logger.debug(f"PRESS: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å app.mode_changed: {e}")
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ press: {e}",
                context={"where": "input_processing_integration.handle_press"}
            )
            
            
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
        await self.event_bus.subscribe("mode.switch", self._handle_mode_switch, EventPriority.HIGH)
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è)
        await self.event_bus.subscribe("voice.recognition_completed", self._on_recognition_completed, EventPriority.HIGH)

    async def _on_recognition_completed(self, event):
        """–§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        try:
            data = event.get("data") or {}
            session_id = data.get("session_id")
            if self._current_session_id is not None and session_id == self._current_session_id:
                self._session_recognized = True
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.LOW,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ recognition_completed: {e}",
                context={"where": "input_processing_integration.on_recognition_completed"}
            )
        
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ input_processing"""
        print(f"üîß DEBUG: InputProcessingIntegration.start() –≤—ã–∑–≤–∞–Ω")
        try:
            if not self.is_initialized:
                logger.warning("‚ö†Ô∏è input_processing –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if self.keyboard_monitor:
                # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π event loop –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã async –∫–æ–ª–±—ç–∫–æ–≤
                import asyncio
                # –í –∏–¥–µ–∞–ª–µ —Å—é–¥–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –æ–±—â–∏–π background loop
                try:
                    loop = asyncio.get_running_loop()
                except RuntimeError:
                    loop = None
                if loop:
                    self.keyboard_monitor.set_loop(loop)
                self.keyboard_monitor.start_monitoring()
                logger.info("üéπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω")
                
                # –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = self.keyboard_monitor.get_status()
                print(f"üîß DEBUG: KeyboardMonitor —Å—Ç–∞—Ç—É—Å: {status}")
                print(f"üîß DEBUG: Callbacks –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {status.get('callbacks_registered', 0)}")
                print(f"üîß DEBUG: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {status.get('is_monitoring', False)}")
                print(f"‚å®Ô∏è DEBUG: –ù–ê–ñ–ú–ò–¢–ï –ü–†–û–ë–ï–õ –°–ï–ô–ß–ê–° –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!")
                
            self.is_running = True
            logger.info("‚úÖ input_processing –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ InputProcessingIntegration: {e}",
                context={"where": "input_processing_integration.start"}
            )
            return False
            
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ input_processing"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if self.keyboard_monitor:
                self.keyboard_monitor.stop_monitoring()
                logger.info("üéπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            self.is_running = False
            logger.info("‚úÖ input_processing –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ InputProcessingIntegration: {e}",
                context={"where": "input_processing_integration.stop"}
            )
            return False
            
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    async def _handle_short_press(self, event: KeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞"""
        try:
            logger.debug(f"üîë SHORT_PRESS: {event.duration:.3f}—Å")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            logger.debug("SHORT_PRESS: –ø—É–±–ª–∏–∫—É–µ–º keyboard.short_press")
            await self.event_bus.publish(
                "keyboard.short_press",
                {
                    "event": event,
                    "timestamp": event.timestamp,
                    "duration": event.duration
                }
            )
            logger.debug("SHORT_PRESS: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ short press: {e}",
                context={"where": "input_processing_integration.handle_short_press"}
            )
            
    async def _handle_long_press(self, event: KeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞"""
        try:
            logger.debug(f"üîë LONG_PRESS: {event.duration:.3f}—Å")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            logger.debug("LONG_PRESS: –ø—É–±–ª–∏–∫—É–µ–º keyboard.long_press")
            await self.event_bus.publish(
                "keyboard.long_press",
                {
                    "event": event,
                    "timestamp": event.timestamp,
                    "duration": event.duration
                }
            )
            logger.debug("LONG_PRESS: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ long press: {e}",
                context={"where": "input_processing_integration.handle_long_press"}
            )
            
    async def _handle_key_release(self, event: KeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞"""
        try:
            logger.info(f"üîë RELEASE EVENT: {event.duration:.3f}—Å")
            logger.debug(f"RELEASE: session={self._current_session_id}, recognized={self._session_recognized}")
            print(f"üîë RELEASE EVENT: {event.duration:.3f}—Å")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            logger.debug("RELEASE: –ø—É–±–ª–∏–∫—É–µ–º keyboard.release")
            await self.event_bus.publish(
                "keyboard.release",
                {
                    "event": event,
                    "timestamp": event.timestamp,
                    "duration": event.duration
                }
            )
            logger.debug("RELEASE: keyboard.release –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            logger.debug("RELEASE: –ø—É–±–ª–∏–∫—É–µ–º voice.recording_stop")
            await self.event_bus.publish(
                "voice.recording_stop",
                {
                    "source": "keyboard",
                    "timestamp": event.timestamp,
                    "duration": event.duration,
                    "session_id": self._current_session_id,
                }
            )
            logger.debug("RELEASE: voice.recording_stop –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")

            # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            recognized = bool(self._session_recognized)
            logger.info(f"RELEASE: recognized={recognized}")

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if hasattr(self.state_manager, 'set_mode'):
                logger.debug("RELEASE: –≤—ã–∑—ã–≤–∞–µ–º state_manager.set_mode")
                if recognized:
                    if asyncio.iscoroutinefunction(self.state_manager.set_mode):
                        await self.state_manager.set_mode(AppMode.PROCESSING)
                    else:
                        self.state_manager.set_mode(AppMode.PROCESSING)
                    logger.info("RELEASE: —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PROCESSING")
                else:
                    if asyncio.iscoroutinefunction(self.state_manager.set_mode):
                        await self.state_manager.set_mode(AppMode.SLEEPING)
                    else:
                        self.state_manager.set_mode(AppMode.SLEEPING)
                    logger.info("RELEASE: —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SLEEPING")

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å UI
            try:
                await self.event_bus.publish(
                    "app.mode_changed",
                    {"mode": AppMode.PROCESSING if recognized else AppMode.SLEEPING}
                )
            except Exception as e:
                logger.debug(f"RELEASE: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å app.mode_changed: {e}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            self._current_session_id = None
            self._session_recognized = False
            logger.debug("RELEASE: —Å–±—Ä–æ—à–µ–Ω—ã session_id –∏ recognized")
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ key release: {e}",
                context={"where": "input_processing_integration.handle_key_release"}
            )
            
            
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
    async def _handle_mode_switch(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        try:
            # EventBus –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ dict
            if isinstance(event, dict):
                mode = event.get("data")
            else:
                mode = getattr(event, "data", None)
            logger.debug(f"üîÑ –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞: {mode}")
            
            if mode == AppMode.LISTENING:
                # –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è - –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø–∏—Å–∏
                pass
            elif mode == AppMode.SLEEPING:
                # –í —Ä–µ–∂–∏–º–µ —Å–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                pass
                    
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.LOW,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ mode switch: {e}",
                context={"where": "input_processing_integration.handle_mode_switch"}
            )
    
    # Sync wrapper'—ã –¥–ª—è callback'–æ–≤ KeyboardMonitor
    def _sync_handle_press(self, event):
        """Sync wrapper –¥–ª—è async _handle_press"""
        try:
            print(f"üîë SYNC PRESS: {event.timestamp} - –ü–û–õ–£–ß–ï–ù CALLBACK!")  # –û—Ç–ª–∞–¥–∫–∞
            import asyncio
            try:
                loop = asyncio.get_running_loop()
                print(f"üîë DEBUG: –ù–∞–π–¥–µ–Ω running loop, –ø–ª–∞–Ω–∏—Ä—É—é async task")
                future = asyncio.run_coroutine_threadsafe(self._handle_press(event), loop)
                print(f"üîë DEBUG: Task –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: {future}")
            except RuntimeError:
                print(f"üîë DEBUG: –ù–µ—Ç running loop, –∑–∞–ø—É—Å–∫–∞—é –Ω–∞–ø—Ä—è–º—É—é")
                asyncio.run(self._handle_press(event))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ sync_handle_press: {e}")
            import traceback
            traceback.print_exc()
    
    def _sync_handle_short_press(self, event):
        """Sync wrapper –¥–ª—è async _handle_short_press"""
        try:
            print(f"üîë SYNC SHORT: {event.duration:.3f}—Å")  # –û—Ç–ª–∞–¥–∫–∞
            import asyncio
            loop = asyncio.get_event_loop()
            if loop.is_running():
                asyncio.run_coroutine_threadsafe(self._handle_short_press(event), loop)
            else:
                asyncio.run(self._handle_short_press(event))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ sync_handle_short_press: {e}")
    
    def _sync_handle_long_press(self, event):
        """Sync wrapper –¥–ª—è async _handle_long_press"""
        try:
            print(f"üîë SYNC LONG: {event.duration:.3f}—Å")  # –û—Ç–ª–∞–¥–∫–∞
            import asyncio
            loop = asyncio.get_event_loop()
            if loop.is_running():
                asyncio.run_coroutine_threadsafe(self._handle_long_press(event), loop)
            else:
                asyncio.run(self._handle_long_press(event))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ sync_handle_long_press: {e}")
    
    def _sync_handle_key_release(self, event):
        """Sync wrapper –¥–ª—è async _handle_key_release"""
        try:
            print(f"üîë SYNC RELEASE: {event.duration:.3f}—Å")  # –û—Ç–ª–∞–¥–∫–∞
            import asyncio
            loop = asyncio.get_event_loop()
            if loop.is_running():
                asyncio.run_coroutine_threadsafe(self._handle_key_release(event), loop)
            else:
                asyncio.run(self._handle_key_release(event))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ sync_handle_key_release: {e}")
            
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "keyboard_monitor": {
                "enabled": self.keyboard_monitor is not None,
                "monitoring": self.keyboard_monitor.is_monitoring if self.keyboard_monitor else False,
                "status": self.keyboard_monitor.get_status() if self.keyboard_monitor else None
            }
        }
