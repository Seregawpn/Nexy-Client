"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è input_processing
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π input_processing
from modules.input_processing.keyboard.keyboard_monitor import KeyboardMonitor
from modules.input_processing.keyboard.types import KeyEvent, KeyEventType, KeyboardConfig

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from core.event_bus import EventBus, EventPriority
from core.state_manager import ApplicationStateManager, AppMode
from core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

logger = logging.getLogger(__name__)

@dataclass
class InputProcessingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ input_processing (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
    keyboard_config: KeyboardConfig
    enable_keyboard_monitoring: bool = True
    auto_start: bool = True

class InputProcessingIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è input_processing"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: InputProcessingConfig):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        self.config = config
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.keyboard_monitor: Optional[KeyboardMonitor] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.is_running = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è input_processing (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è input_processing...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if self.config.enable_keyboard_monitoring:
                await self._initialize_keyboard_monitor()
            
            self.is_initialized = True
            logger.info("‚úÖ input_processing –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.INITIALIZATION,
                message=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ InputProcessingIntegration: {e}",
                context={"where": "input_processing_integration.initialize"}
            )
            return False
            
    async def _initialize_keyboard_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            self.keyboard_monitor = KeyboardMonitor(self.config.keyboard_config)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.keyboard_monitor.register_callback(
                KeyEventType.SHORT_PRESS, 
                self._handle_short_press
            )
            self.keyboard_monitor.register_callback(
                KeyEventType.LONG_PRESS, 
                self._handle_long_press
            )
            self.keyboard_monitor.register_callback(
                KeyEventType.RELEASE, 
                self._handle_key_release
            )
            
            logger.info("‚úÖ KeyboardMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.INITIALIZATION,
                message=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ keyboard monitor: {e}",
                context={"where": "input_processing_integration.initialize_keyboard_monitor"}
            )
            raise
            
            
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
        self.event_bus.subscribe("mode.switch", self._handle_mode_switch, EventPriority.HIGH)
        
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ input_processing"""
        try:
            if not self.is_initialized:
                logger.warning("‚ö†Ô∏è input_processing –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if self.keyboard_monitor:
                self.keyboard_monitor.start_monitoring()
                logger.info("üéπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω")
                
            self.is_running = True
            logger.info("‚úÖ input_processing –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ InputProcessingIntegration: {e}",
                context={"where": "input_processing_integration.start"}
            )
            return False
            
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ input_processing"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if self.keyboard_monitor:
                self.keyboard_monitor.stop_monitoring()
                logger.info("üéπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            self.is_running = False
            logger.info("‚úÖ input_processing –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ InputProcessingIntegration: {e}",
                context={"where": "input_processing_integration.stop"}
            )
            return False
            
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    async def _handle_short_press(self, event: KeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞"""
        try:
            logger.debug(f"üîë –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: {event.duration:.3f}—Å")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.publish_async(
                "keyboard.short_press", 
                {
                    "event": event,
                    "timestamp": event.timestamp,
                    "duration": event.duration
                },
                EventPriority.HIGH,
                "input_processing_integration"
            )
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ short press: {e}",
                context={"where": "input_processing_integration.handle_short_press"}
            )
            
    async def _handle_long_press(self, event: KeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞"""
        try:
            logger.debug(f"üîë –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: {event.duration:.3f}—Å")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.publish_async(
                "keyboard.long_press", 
                {
                    "event": event,
                    "timestamp": event.timestamp,
                    "duration": event.duration
                },
                EventPriority.HIGH,
                "input_processing_integration"
            )
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ long press: {e}",
                context={"where": "input_processing_integration.handle_long_press"}
            )
            
    async def _handle_key_release(self, event: KeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞"""
        try:
            logger.debug(f"üîë –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ: {event.duration:.3f}—Å")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.publish_async(
                "keyboard.release", 
                {
                    "event": event,
                    "timestamp": event.timestamp,
                    "duration": event.duration
                },
                EventPriority.HIGH,
                "input_processing_integration"
            )
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ key release: {e}",
                context={"where": "input_processing_integration.handle_key_release"}
            )
            
            
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
    async def _handle_mode_switch(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        try:
            mode = event.data
            logger.debug(f"üîÑ –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞: {mode}")
            
            if mode == AppMode.LISTENING:
                # –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è - –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø–∏—Å–∏
                pass
            elif mode == AppMode.SLEEPING:
                # –í —Ä–µ–∂–∏–º–µ —Å–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                pass
                    
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.LOW,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ mode switch: {e}",
                context={"where": "input_processing_integration.handle_mode_switch"}
            )
            
            
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "keyboard_monitor": {
                "enabled": self.keyboard_monitor is not None,
                "monitoring": self.keyboard_monitor.is_monitoring if self.keyboard_monitor else False,
                "status": self.keyboard_monitor.get_status() if self.keyboard_monitor else None
            }
        }
