"""
TrayController Integration
–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è TrayController —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ EventBus
–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π (–ù–ï –¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É!)
from modules.tray_controller import TrayController, TrayStatus, TrayConfig
from modules.tray_controller.core.tray_types import TrayEvent

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.unified_config_loader import UnifiedConfigLoader

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

logger = logging.getLogger(__name__)

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º TrayConfig –∏–∑ –º–æ–¥—É–ª—è

class TrayControllerIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TrayController —Å EventBus –∏ ApplicationStateManager"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: Optional[TrayConfig] = None):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ unified_config.yaml
        unified_config = UnifiedConfigLoader()
        if config is None:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è –∏–∑ unified_config
            config_data = unified_config._load_config()
            tray_cfg = config_data['integrations']['tray_controller']
            
            config = TrayConfig(
                icon_size=tray_cfg['icon_size'],
                show_status=tray_cfg['show_status_in_menu'],  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
                show_menu=True,  # –ò–∑ –º–æ–¥—É–ª—è
                enable_click_events=True,  # –ò–∑ –º–æ–¥—É–ª—è
                enable_right_click=True,  # –ò–∑ –º–æ–¥—É–ª—è
                auto_hide=False,  # –ò–∑ –º–æ–¥—É–ª—è
                animation_speed=0.5,  # –ò–∑ –º–æ–¥—É–ª—è
                menu_font_size=13,  # –ò–∑ –º–æ–¥—É–ª—è
                enable_sound=tray_cfg['enable_notifications'],  # –ú–∞–ø–ø–∏–Ω–≥
                debug_mode=tray_cfg['debug_mode']
            )
        
        self.config = config
        
        # TrayController (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
        self.tray_controller: Optional[TrayController] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.is_initialized = False
        self.is_running = False
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã —Ç—Ä–µ—è
        self.mode_to_status = {
            AppMode.SLEEPING: TrayStatus.SLEEPING,
            AppMode.LISTENING: TrayStatus.LISTENING,
            AppMode.PROCESSING: TrayStatus.PROCESSING,
            AppMode.SPEAKING: TrayStatus.PROCESSING  # –í–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–æ–∂–µ PROCESSING
        }
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TrayControllerIntegration...")
            
            # –°–æ–∑–¥–∞–µ–º TrayController (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
            self.tray_controller = TrayController()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TrayController
            success = await self.tray_controller.initialize()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayController")
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers()
            
            self.is_initialized = True
            logger.info("‚úÖ TrayControllerIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayControllerIntegration: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_initialized:
                logger.error("TrayControllerIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if self.is_running:
                logger.warning("TrayControllerIntegration —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ TrayControllerIntegration...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º TrayController
            success = await self.tray_controller.start()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TrayController")
                return False
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self._sync_with_app_mode()
            
            self.is_running = True
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            await self.event_bus.publish("tray.integration_ready", {
                "integration": "tray_controller",
                "status": "running"
            })
            
            logger.info("‚úÖ TrayControllerIntegration –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TrayControllerIntegration: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_running:
                logger.warning("TrayControllerIntegration –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TrayControllerIntegration...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TrayController
            if self.tray_controller:
                success = await self.tray_controller.stop()
                if not success:
                    logger.warning("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrayController")
            
            self.is_running = False
            
            logger.info("‚úÖ TrayControllerIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrayControllerIntegration: {e}")
            return False
    
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.HIGH)
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.HIGH)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await self.event_bus.subscribe("keyboard.long_press", self._on_keyboard_event, EventPriority.MEDIUM)
            await self.event_bus.subscribe("keyboard.release", self._on_keyboard_event, EventPriority.MEDIUM)
            await self.event_bus.subscribe("keyboard.short_press", self._on_keyboard_event, EventPriority.MEDIUM)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞/—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
            await self.event_bus.subscribe("voice.mic_opened", self._on_voice_mic_opened, EventPriority.HIGH)
            await self.event_bus.subscribe("voice.mic_closed", self._on_voice_mic_closed, EventPriority.HIGH)
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
            await self.event_bus.subscribe("audio.device_switched", self._on_audio_device_switched, EventPriority.MEDIUM)
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–Ω–∞–ø—à–æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            await self.event_bus.subscribe("audio.device_snapshot", self._on_audio_device_snapshot, EventPriority.MEDIUM)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π TrayControllerIntegration –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def _sync_with_app_mode(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            current_mode = self.state_manager.get_current_mode()
            if current_mode in self.mode_to_status:
                target_status = self.mode_to_status[current_mode]
                await self._update_tray_status(target_status)
                
                logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {current_mode.value} ‚Üí {target_status.value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _update_tray_status(self, status: TrayStatus):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è"""
        try:
            if not self.tray_controller or not self.is_running:
                return
            
            success = await self.tray_controller.update_status(status)
            if success:
                logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å —Ç—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω: {status.value}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                human = {
                    TrayStatus.SLEEPING: "Sleeping",
                    TrayStatus.LISTENING: "Listening",
                    TrayStatus.PROCESSING: "Processing",
                }.get(status, status.value.title())
                await self.tray_controller.update_menu_status_text(human)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ—è: {status.value}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π EventBus (–ù–ï –¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –º–æ–¥—É–ª—è!)
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            data = (event.get("data") or {})
            new_mode = data.get("mode")
            logger.info(f"TrayIntegration: app.mode_changed received mode={getattr(new_mode,'value',new_mode)}")
            logger.debug(f"TrayIntegration: app.mode_changed received data={data}, parsed new_mode={new_mode}")
            if new_mode in self.mode_to_status:
                target_status = self.mode_to_status[new_mode]
                logger.debug(f"TrayIntegration: mapping mode -> status: {new_mode} -> {target_status}")
                await self._update_tray_status(target_status)
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                await self.event_bus.publish("tray.status_updated", {
                    "status": target_status.value,
                    "mode": new_mode.value,
                    "integration": "tray_controller"
                })
                
                logger.info(f"üîÑ –†–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω: {new_mode.value} ‚Üí {target_status.value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
    
    async def _on_keyboard_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            if isinstance(event, dict):
                event_type = event.get("type", "unknown")
            else:
                event_type = getattr(event, 'event_type', 'unknown')
            
            logger.info(f"‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ TrayControllerIntegration: {event_type}")
            
            # Push-to-talk: —Ä–µ–∂–∏–º—ã –º–µ–Ω—è—é—Ç—Å—è –≤ InputProcessingIntegration
            # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º/–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            import traceback
            logger.debug(f"–°—Ç–µ–∫—Ç—Ä–µ–π—Å: {traceback.format_exc()}")

    async def _on_voice_mic_opened(self, event):
        """–ò–∫–æ–Ω–∫–∞ LISTENING –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        try:
            await self._update_tray_status(TrayStatus.LISTENING)
            await self.event_bus.publish("tray.status_updated", {
                "status": TrayStatus.LISTENING.value,
                "reason": "voice.mic_opened",
                "integration": "tray_controller"
            })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ voice.mic_opened: {e}")

    async def _on_voice_mic_closed(self, event):
        """–ò–∫–æ–Ω–∫–∞ PROCESSING/SLEEPING –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        try:
            mode = self.state_manager.get_current_mode()
            target = self.mode_to_status.get(mode, TrayStatus.SLEEPING)
            await self._update_tray_status(target)
            await self.event_bus.publish("tray.status_updated", {
                "status": target.value,
                "mode": getattr(mode, 'value', str(mode)),
                "reason": "voice.mic_closed",
                "integration": "tray_controller"
            })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ voice.mic_closed: {e}")

    async def _on_audio_device_switched(self, event):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ."""
        try:
            data = (event or {}).get("data", {})
            to_device = data.get("to_device") or data.get("device") or "Unknown"
            device_type = data.get("device_type", "output")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é "Output: ..."
            if self.tray_controller:
                await self.tray_controller.update_menu_output_device(to_device)
                # –ù–µ–Ω–∞–≤—è–∑—á–∏–≤–∞—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–±–µ–∑ –∑–≤—É–∫–∞)
                await self.tray_controller.show_notification(
                    title="Audio device switched",
                    message=f"Now using: {to_device}",
                    subtitle=device_type
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ audio.device_switched: {e}")

    async def _on_audio_device_snapshot(self, event):
        """–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –º–µ–Ω—é –Ω–∞ —Å—Ç–∞—Ä—Ç–µ."""
        try:
            data = (event or {}).get("data", {})
            cur = data.get("current_device") or "Unknown"
            if self.tray_controller:
                await self.tray_controller.update_menu_output_device(cur)
        except Exception as e:
            logger.debug(f"Failed to handle audio.device_snapshot in tray: {e}")
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ TrayControllerIntegration")
            await self._sync_with_app_mode()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_app_shutdown(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ TrayControllerIntegration")
            await self.stop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "tray_controller": {
                "initialized": self.tray_controller is not None,
                "running": self.tray_controller.is_running if self.tray_controller else False,
                "current_status": self.tray_controller.current_status.value if self.tray_controller else None
            },
            "config": {
                "icon_size": self.config.icon_size,
                "show_status_in_menu": self.config.show_status_in_menu,
                "enable_notifications": self.config.enable_notifications,
                "auto_update_status": self.config.auto_update_status,
                "debug_mode": self.config.debug_mode
            }
        }
    
    def get_app(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.tray_controller:
            return self.tray_controller.get_app()
        return None
