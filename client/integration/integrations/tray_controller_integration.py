"""
TrayController Integration
–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è TrayController —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ EventBus
–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π (–ù–ï –¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É!)
from modules.tray_controller import TrayController, TrayStatus, TrayConfig
from modules.tray_controller.core.tray_types import TrayEvent

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from core.event_bus import EventBus, EventPriority
from core.state_manager import ApplicationStateManager, AppMode
from core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

logger = logging.getLogger(__name__)

@dataclass
class TrayControllerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TrayController Integration"""
    icon_size: int = 16
    show_status_in_menu: bool = True
    enable_notifications: bool = True
    auto_update_status: bool = True
    debug_mode: bool = False

class TrayControllerIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TrayController —Å EventBus –∏ ApplicationStateManager"""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: TrayControllerConfig):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        self.config = config
        
        # TrayController (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
        self.tray_controller: Optional[TrayController] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.is_initialized = False
        self.is_running = False
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã —Ç—Ä–µ—è
        self.mode_to_status = {
            AppMode.SLEEPING: TrayStatus.SLEEPING,
            AppMode.LISTENING: TrayStatus.LISTENING,
            AppMode.PROCESSING: TrayStatus.PROCESSING,
            AppMode.SPEAKING: TrayStatus.PROCESSING  # –í–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–æ–∂–µ PROCESSING
        }
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TrayControllerIntegration...")
            
            # –°–æ–∑–¥–∞–µ–º TrayController (–æ–±–µ—Ä—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å)
            self.tray_controller = TrayController()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TrayController
            success = await self.tray_controller.initialize()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayController")
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers()
            
            self.is_initialized = True
            logger.info("‚úÖ TrayControllerIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayControllerIntegration: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_initialized:
                logger.error("TrayControllerIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if self.is_running:
                logger.warning("TrayControllerIntegration —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ TrayControllerIntegration...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º TrayController
            success = await self.tray_controller.start()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TrayController")
                return False
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self._sync_with_app_mode()
            
            self.is_running = True
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            await self.event_bus.publish("tray.integration_ready", {
                "integration": "tray_controller",
                "status": "running"
            })
            
            logger.info("‚úÖ TrayControllerIntegration –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TrayControllerIntegration: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            if not self.is_running:
                logger.warning("TrayControllerIntegration –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TrayControllerIntegration...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TrayController
            if self.tray_controller:
                success = await self.tray_controller.stop()
                if not success:
                    logger.warning("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrayController")
            
            self.is_running = False
            
            logger.info("‚úÖ TrayControllerIntegration –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrayControllerIntegration: {e}")
            return False
    
    async def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.HIGH)
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.HIGH)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await self.event_bus.subscribe("keyboard.long_press", self._on_keyboard_event, EventPriority.MEDIUM)
            await self.event_bus.subscribe("keyboard.release", self._on_keyboard_event, EventPriority.MEDIUM)
            await self.event_bus.subscribe("keyboard.short_press", self._on_keyboard_event, EventPriority.MEDIUM)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π TrayControllerIntegration –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def _sync_with_app_mode(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            current_mode = self.state_manager.get_current_mode()
            if current_mode in self.mode_to_status:
                target_status = self.mode_to_status[current_mode]
                await self._update_tray_status(target_status)
                
                logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {current_mode.value} ‚Üí {target_status.value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _update_tray_status(self, status: TrayStatus):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è"""
        try:
            if not self.tray_controller or not self.is_running:
                return
            
            success = await self.tray_controller.update_status(status)
            if success:
                logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å —Ç—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω: {status.value}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ—è: {status.value}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π EventBus (–ù–ï –¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –º–æ–¥—É–ª—è!)
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            new_mode = event.data.get("mode")
            if new_mode in self.mode_to_status:
                target_status = self.mode_to_status[new_mode]
                await self._update_tray_status(target_status)
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                await self.event_bus.publish("tray.status_updated", {
                    "status": target_status.value,
                    "mode": new_mode.value,
                    "integration": "tray_controller"
                })
                
                logger.info(f"üîÑ –†–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω: {new_mode.value} ‚Üí {target_status.value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
    
    async def _on_keyboard_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            event_type = event.event_type
            logger.info(f"‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ TrayControllerIntegration: {event_type}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if event_type == "keyboard.long_press":
                self.state_manager.set_mode(AppMode.LISTENING)
            elif event_type == "keyboard.release":
                self.state_manager.set_mode(AppMode.PROCESSING)
            elif event_type == "keyboard.short_press":
                self.state_manager.set_mode(AppMode.SLEEPING)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ TrayControllerIntegration")
            await self._sync_with_app_mode()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_app_shutdown(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ TrayControllerIntegration")
            await self.stop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "tray_controller": {
                "initialized": self.tray_controller is not None,
                "running": self.tray_controller.is_running if self.tray_controller else False,
                "current_status": self.tray_controller.current_status.value if self.tray_controller else None
            },
            "config": {
                "icon_size": self.config.icon_size,
                "show_status_in_menu": self.config.show_status_in_menu,
                "enable_notifications": self.config.enable_notifications,
                "auto_update_status": self.config.auto_update_status,
                "debug_mode": self.config.debug_mode
            }
        }
    
    def get_app(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.tray_controller:
            return self.tray_controller.get_app()
        return None