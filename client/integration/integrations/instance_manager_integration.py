"""
Instance Manager Integration

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–ï–†–í–û–ô –∏ —è–≤–ª—è–µ—Ç—Å—è –ë–õ–û–ö–ò–†–£–Æ–©–ï–ô.
"""

import sys
import asyncio
import logging
from typing import Optional, Dict, Any

from modules.instance_manager import InstanceManager, InstanceStatus, InstanceManagerConfig
from integration.core.error_handler import ErrorHandler
from integration.core.state_manager import ApplicationStateManager
from integration.core.event_bus import EventBus

logger = logging.getLogger(__name__)


class InstanceManagerIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self, event_bus: EventBus, state_manager: ApplicationStateManager, 
                 error_handler: ErrorHandler, config: Optional[Dict[str, Any]] = None):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        self.config = config or {}
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
        instance_config = InstanceManagerConfig(
            enabled=self.config.get('enabled', True),
            lock_file=self.config.get('lock_file', '~/Library/Application Support/Nexy/nexy.lock'),
            timeout_seconds=self.config.get('timeout_seconds', 30),
            cleanup_on_startup=self.config.get('cleanup_on_startup', True),
            show_duplicate_message=self.config.get('show_duplicate_message', True),
            pid_check=self.config.get('pid_check', True)
        )
        
        self.instance_manager = InstanceManager(instance_config)
        self._initialized = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ù–ï –ë–õ–û–ö–ò–†–£–Æ–©–ê–Ø."""
        try:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown)
            await self.event_bus.subscribe("instance.check_request", self._on_instance_check_request)
            
            self._initialized = True
            print("‚úÖ InstanceManagerIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error("instance_manager_initialize", e)
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ë–õ–û–ö–ò–†–£–Æ–©–ò–ô –ú–ï–¢–û–î."""
        try:
            print("üöÄ InstanceManagerIntegration.start() –≤—ã–∑–≤–∞–Ω")
            
            if not self._initialized:
                await self.initialize()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤...")
            status = await self.instance_manager.check_single_instance()
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {status}")
            
            if status == InstanceStatus.DUPLICATE:
                # –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û - –ó–ê–í–ï–†–®–ê–ï–ú –†–ê–ë–û–¢–£
                print("‚ùå Nexy —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç.")
                try:
                    logger.warning("üö´ InstanceManager: duplicate instance detected ‚Äî exiting with code 1")
                except Exception:
                    pass
                
                # –ê–£–î–ò–û-–°–ò–ì–ù–ê–õ –î–õ–Ø –ù–ï–ó–†–Ø–ß–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
                try:
                    await self.event_bus.publish("signal.duplicate_instance", {
                        "message": "Nexy —É–∂–µ –∑–∞–ø—É—â–µ–Ω",
                        "sound": "error"
                    })
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ-—Å–∏–≥–Ω–∞–ª: {e}")
                
                if self.instance_manager.config.show_duplicate_message:
                    print("‚ùå Nexy —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—é-–±–∞—Ä.")
                
                # –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï
                print("üíÄ –í–´–•–û–î –ò–ó –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –° –ö–û–î–û–ú 1")
                sys.exit(1)
            
            elif status == InstanceStatus.ERROR:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
                await self.error_handler.handle_error("instance_check_error", 
                                                     Exception("Failed to check instance status"))
                return False
            
            # –ü–ï–†–í–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† - –ü–†–û–î–û–õ–ñ–ê–ï–ú
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É...")
            lock_acquired = await self.instance_manager.acquire_lock()
            
            if not lock_acquired:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
                await self.error_handler.handle_error("lock_acquisition_failed", 
                                                     Exception("Failed to acquire lock"))
                return False
            
            print("‚úÖ Nexy –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (–ø–µ—Ä–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
            try:
                lock_info = await self.instance_manager.get_lock_info()
                await self.event_bus.publish("instance.status_checked", {
                    "status": InstanceStatus.SINGLE.value,
                    "lock_info": lock_info
                })
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ: {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ InstanceManagerIntegration.start(): {e}")
            import traceback
            traceback.print_exc()
            await self.error_handler.handle_error("instance_manager_start", e)
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
        try:
            # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if self.instance_manager:
                await self.instance_manager.release_lock()
                print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            
            # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
            try:
                await self.event_bus.unsubscribe("app.startup", self._on_app_startup)
                await self.event_bus.unsubscribe("app.shutdown", self._on_app_shutdown)
                await self.event_bus.unsubscribe("instance.check_request", self._on_instance_check_request)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π: {e}")
            
            return True
            
        except Exception as e:
            await self.error_handler.handle_error("instance_manager_stop", e)
            return False
    
    # Event handlers
    async def _on_app_startup(self, event: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            print("üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è app.startup")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        except Exception as e:
            await self.error_handler.handle_error("app_startup_handler", e)
    
    async def _on_app_shutdown(self, event: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            print("üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è app.shutdown")
            # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await self.stop()
        except Exception as e:
            await self.error_handler.handle_error("app_shutdown_handler", e)
    
    async def _on_instance_check_request(self, event: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞."""
        try:
            print("üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è instance.check_request")
            status = await self.instance_manager.check_single_instance()
            
            await self.event_bus.publish("instance.status_response", {
                "status": status.value,
                "timestamp": asyncio.get_event_loop().time()
            })
        except Exception as e:
            await self.error_handler.handle_error("instance_check_request_handler", e)
