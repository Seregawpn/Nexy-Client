"""
VoiceRecognitionIntegration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å EventBus –∏ ApplicationStateManager
"""

import asyncio
import logging
import time
import uuid
from dataclasses import dataclass
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ core
from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª—è
from modules.voice_recognition.core.types import RecognitionConfig, RecognitionResult, RecognitionState
from modules.voice_recognition.core.speech_recognizer import SpeechRecognizer

logger = logging.getLogger(__name__)

@dataclass
class VoiceRecognitionIntegrationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VoiceRecognitionIntegration"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    enabled: bool = True
    simulation_mode: bool = True  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    simulation_delay: float = 1.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    simulation_success_rate: float = 0.8  # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    language: str = "en-US"
    timeout: float = 3.0
    phrase_timeout: float = 0.3
    energy_threshold: int = 100
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    sample_rate: int = 16000
    chunk_size: int = 1024
    channels: int = 1

class VoiceRecognitionIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SpeechRecognizer —Å EventBus –∏ ApplicationStateManager"""
    
    def __init__(
        self,
        event_bus: EventBus,
        state_manager: ApplicationStateManager,
        error_handler: ErrorHandler,
        config: Optional[VoiceRecognitionIntegrationConfig] = None,
    ):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        self.config = config or VoiceRecognitionIntegrationConfig()
        
        self._recognizer: Optional[SpeechRecognizer] = None
        self._initialized = False
        self._running = False
        
        # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        self._current_session_id: Optional[str] = None
        self._recognition_start_time: Optional[float] = None
        
        logger.info("VoiceRecognitionIntegration created")
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VoiceRecognitionIntegration"""
        try:
            if not self.config.enabled:
                logger.info("VoiceRecognitionIntegration –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return True
            
            logger.info("Initializing VoiceRecognitionIntegration...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            recognition_config = RecognitionConfig(
                language=self.config.language,
                sample_rate=self.config.sample_rate,
                chunk_size=self.config.chunk_size,
                channels=self.config.channels,
                energy_threshold=self.config.energy_threshold,
                timeout=self.config.timeout,
                phrase_timeout=self.config.phrase_timeout,
                enable_logging=True,
                enable_metrics=True
            )
            
            # –°–æ–∑–¥–∞–µ–º SpeechRecognizer
            self._recognizer = SpeechRecognizer(recognition_config)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
            self._recognizer.register_callback(RecognitionState.LISTENING, self._on_listening_start)
            self._recognizer.register_callback(RecognitionState.PROCESSING, self._on_processing_start)
            self._recognizer.register_callback(RecognitionState.COMPLETED, self._on_recognition_complete)
            self._recognizer.register_callback(RecognitionState.ERROR, self._on_recognition_error)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.MEDIUM)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.MEDIUM)
            await self.event_bus.subscribe("app.state_changed", self._on_app_state_changed, EventPriority.HIGH)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏
            await self.event_bus.subscribe("voice.recording_start", self._on_recording_start, EventPriority.HIGH)
            await self.event_bus.subscribe("voice.recording_stop", self._on_recording_stop, EventPriority.HIGH)
            
            self._initialized = True
            logger.info("VoiceRecognitionIntegration initialized successfully")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.INITIALIZATION,
                message=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VoiceRecognitionIntegration: {e}",
                context={"where": "voice_recognition_integration.initialize"}
            )
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ VoiceRecognitionIntegration"""
        try:
            if not self._initialized:
                logger.warning("VoiceRecognitionIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if not self.config.enabled:
                logger.info("VoiceRecognitionIntegration –æ—Ç–∫–ª—é—á–µ–Ω")
                return True
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
            if self._recognizer:
                logger.info("SpeechRecognizer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            self._running = True
            logger.info("VoiceRecognitionIntegration started successfully")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VoiceRecognitionIntegration: {e}",
                context={"where": "voice_recognition_integration.start"}
            )
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ VoiceRecognitionIntegration"""
        try:
            if self._recognizer:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ
                if self._recognizer.is_listening:
                    await self._recognizer.stop_listening()
                logger.info("SpeechRecognizer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self._running = False
            logger.info("VoiceRecognitionIntegration stopped successfully")
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VoiceRecognitionIntegration: {e}",
                context={"where": "voice_recognition_integration.stop"}
            )
            return False
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("App startup - initializing voice recognition")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        except Exception as e:
            logger.error(f"Error handling app startup: {e}")
    
    async def _on_app_shutdown(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("App shutdown - stopping voice recognition")
            await self.stop()
        except Exception as e:
            logger.error(f"Error handling app shutdown: {e}")
    
    async def _on_app_state_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            data = event.get("data", {})
            old_mode = data.get("old_mode")
            new_mode = data.get("new_mode")
            
            if new_mode == AppMode.LISTENING:
                logger.info("App mode changed to LISTENING - voice recognition ready")
            elif new_mode == AppMode.PROCESSING:
                logger.info("App mode changed to PROCESSING - voice recognition processing")
            elif new_mode == AppMode.SLEEPING:
                logger.info("App mode changed to SLEEPING - voice recognition idle")
                
        except Exception as e:
            logger.error(f"Error handling app state change: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø–∏—Å–∏
    async def _on_recording_start(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏"""
        try:
            data = event.get("data", {})
            session_id = data.get("session_id")
            source = data.get("source", "unknown")
            
            if source != "keyboard":
                return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
            logger.info(f"üé§ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ (—Å–µ—Å—Å–∏—è: {session_id})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏
            self._current_session_id = session_id
            self._recognition_start_time = time.time()
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            if self.config.simulation_mode:
                await self._simulate_recognition()
            else:
                # –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                if self._recognizer:
                    await self._recognizer.start_listening()
                
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}",
                context={"where": "voice_recognition_integration.on_recording_start"}
            )
    
    async def _on_recording_stop(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏"""
        try:
            data = event.get("data", {})
            session_id = data.get("session_id")
            source = data.get("source", "unknown")
            
            if source != "keyboard" or session_id != self._current_session_id:
                return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            
            logger.info(f"üé§ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (—Å–µ—Å—Å–∏—è: {session_id})")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            if self._recognizer and not self.config.simulation_mode:
                await self._recognizer.stop_listening()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            self._current_session_id = None
            self._recognition_start_time = None
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}",
                context={"where": "voice_recognition_integration.on_recording_stop"}
            )
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async def _simulate_recognition(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        try:
            if not self._current_session_id:
                return
            
            logger.info(f"üé≠ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (—Å–µ—Å—Å–∏—è: {self._current_session_id})")
            
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(self.config.simulation_delay)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            if not self._current_session_id:
                logger.info("–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            import random
            is_successful = random.random() < self.config.simulation_success_rate
            
            if is_successful:
                # –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                result = RecognitionResult(
                    text="Hello, this is a simulated recognition result",
                    confidence=0.85,
                    language=self.config.language,
                    duration=time.time() - (self._recognition_start_time or time.time()),
                    timestamp=time.time()
                )
                
                logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: '{result.text}'")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                await self.event_bus.publish("voice.recognition_completed", {
                    "session_id": self._current_session_id,
                    "text": result.text,
                    "confidence": result.confidence,
                    "language": result.language,
                    "duration": result.duration,
                    "timestamp": result.timestamp
                })
                
            else:
                # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                logger.info("‚ùå –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                await self.event_bus.publish("voice.recognition_failed", {
                    "session_id": self._current_session_id,
                    "error": "No speech detected",
                    "timestamp": time.time()
                })
                
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}",
                context={"where": "voice_recognition_integration.simulate_recognition"}
            )
    
    # Callbacks —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
    def _on_listening_start(self, state: RecognitionState):
        """Callback –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        logger.info("üéß –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è")
    
    def _on_processing_start(self, state: RecognitionState):
        """Callback –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
    
    def _on_recognition_complete(self, result: RecognitionResult):
        """Callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: '{result.text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence})")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            if self.event_bus and self._current_session_id:
                asyncio.create_task(self.event_bus.publish("voice.recognition_completed", {
                    "session_id": self._current_session_id,
                    "text": result.text,
                    "confidence": result.confidence,
                    "language": result.language,
                    "duration": result.duration,
                    "timestamp": result.timestamp
                }))
                
        except Exception as e:
            logger.error(f"Error handling recognition complete: {e}")
    
    def _on_recognition_error(self, error: str):
        """Callback –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {error}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            if self.event_bus and self._current_session_id:
                asyncio.create_task(self.event_bus.publish("voice.recognition_failed", {
                    "session_id": self._current_session_id,
                    "error": error,
                    "timestamp": time.time()
                }))
                
        except Exception as e:
            logger.error(f"Error handling recognition error: {e}")
    
    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å VoiceRecognitionIntegration"""
        return {
            "initialized": self._initialized,
            "running": self._running,
            "enabled": self.config.enabled,
            "simulation_mode": self.config.simulation_mode,
            "current_session": self._current_session_id,
            "recognizer_state": self._recognizer.state.value if self._recognizer else "unknown"
        }
    
    async def start_recognition(self, session_id: str) -> bool:
        """–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        try:
            if not self._running or not self._recognizer:
                return False
            
            self._current_session_id = session_id
            self._recognition_start_time = time.time()
            
            if self.config.simulation_mode:
                await self._simulate_recognition()
            else:
                await self._recognizer.start_listening()
            
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}",
                context={"where": "voice_recognition_integration.start_recognition"}
            )
            return False
    
    async def stop_recognition(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ"""
        try:
            if not self._running or not self._recognizer:
                return False
            
            if not self.config.simulation_mode:
                await self._recognizer.stop_listening()
            
            self._current_session_id = None
            self._recognition_start_time = None
            
            return True
            
        except Exception as e:
            await self.error_handler.handle_error(
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.RUNTIME,
                message=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}",
                context={"where": "voice_recognition_integration.stop_recognition"}
            )
            return False
