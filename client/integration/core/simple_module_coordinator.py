"""
SimpleModuleCoordinator - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π, –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Optional, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent.parent))
sys.path.append(str(Path(__file__).parent.parent))

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π (–ù–ï –º–æ–¥—É–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é!)
from integrations.tray_controller_integration import TrayControllerIntegration
from modules.tray_controller.core.tray_types import TrayConfig
from integrations.input_processing_integration import InputProcessingIntegration, InputProcessingConfig
from integrations.permissions_integration import PermissionsIntegration
from modules.permissions.core.types import PermissionConfig
from integrations.update_manager_integration import UpdateManagerIntegration, UpdateManagerIntegrationConfig
from integrations.network_manager_integration import NetworkManagerIntegration
from modules.network_manager.core.config import NetworkManagerConfig
from integrations.audio_device_integration import AudioDeviceIntegration
from modules.audio_device_manager.core.types import AudioDeviceManagerConfig
from integrations.interrupt_management_integration import InterruptManagementIntegration, InterruptManagementIntegrationConfig
from modules.input_processing.keyboard.types import KeyboardConfig

# –ò–º–ø–æ—Ä—Ç—ã core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.unified_config_loader import UnifiedConfigLoader

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
_app_running = False

class SimpleModuleCoordinator:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π –¥–ª—è Nexy AI Assistant"""
    
    def __init__(self):
        # Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ)
        self.event_bus: Optional[EventBus] = None
        self.state_manager: Optional[ApplicationStateManager] = None
        self.error_handler: Optional[ErrorHandler] = None
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π)
        self.integrations: Dict[str, Any] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = UnifiedConfigLoader()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.is_running = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            print("\n" + "="*60)
            print("üöÄ SIMPLE MODULE COORDINATOR - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø")
            print("="*60)
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            print("="*60 + "\n")
            
            # 1. –°–æ–∑–¥–∞–µ–º core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self.event_bus = EventBus()
            self.state_manager = ApplicationStateManager()
            self.error_handler = ErrorHandler(self.event_bus)
            print("‚úÖ Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # 2. –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            await self._create_integrations()
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            await self._initialize_integrations()
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏...")
            await self._setup_coordination()
            print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            self.is_initialized = True
            
            print("\n" + "="*60)
            print("‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–´!")
            print("="*60)
            print("üéØ –ò–∫–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –º–µ–Ω—é-–±–∞—Ä–µ macOS")
            print("üñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∏–∫–æ–Ω–∫–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é")
            print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            print("="*60 + "\n")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def _create_integrations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            # TrayController Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ TrayControllerIntegration
            tray_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['tray'] = TrayControllerIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=tray_config
            )
            
            # InputProcessing Integration - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_data = self.config._load_config()
            kbd_cfg = config_data['integrations']['keyboard']
            keyboard_config = KeyboardConfig(
                key_to_monitor=kbd_cfg['key_to_monitor'],
                short_press_threshold=kbd_cfg['short_press_threshold'],
                long_press_threshold=kbd_cfg['long_press_threshold'],
                event_cooldown=kbd_cfg['event_cooldown'],
                hold_check_interval=kbd_cfg['hold_check_interval'],
                debounce_time=kbd_cfg['debounce_time']
            )
            
            input_cfg = config_data['integrations']['input_processing']
            input_config = InputProcessingConfig(
                keyboard_config=keyboard_config,
                enable_keyboard_monitoring=input_cfg['enable_keyboard_monitoring'],
                auto_start=input_cfg['auto_start'],
                keyboard_backend=kbd_cfg.get('backend', 'auto')
            )
            
            self.integrations['input'] = InputProcessingIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=input_config
            )
            
            # Permissions Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ PermissionsIntegration
            permissions_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['permissions'] = PermissionsIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=permissions_config
            )
            
            # Update Manager Integration - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            upd_cfg = config_data['update_manager']
            update_config = UpdateManagerIntegrationConfig(
                enabled=upd_cfg['enabled'],
                check_interval=upd_cfg['check_interval'],
                check_time=upd_cfg['check_time'],
                auto_install=upd_cfg['auto_install'],
                announce_updates=upd_cfg['announce_updates'],
                check_on_startup=upd_cfg['check_on_startup'],
                appcast_url=config_data['network']['appcast']['base_url'] + "/appcast.xml",
                retry_attempts=upd_cfg['retry_attempts'],
                retry_delay=upd_cfg['retry_delay'],
                silent_mode=upd_cfg['silent_mode'],
                log_updates=upd_cfg['log_updates']
            )
            
            self.integrations['update_manager'] = UpdateManagerIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=update_config
            )
            
            # Network Manager Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ NetworkManagerIntegration
            network_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['network'] = NetworkManagerIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=network_config
            )
            
            # Audio Device Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ AudioDeviceIntegration
            audio_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['audio'] = AudioDeviceIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=audio_config
            )
            
            # Interrupt Management Integration - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            int_cfg = config_data['integrations']['interrupt_management']
            interrupt_config = InterruptManagementIntegrationConfig(
                max_concurrent_interrupts=int_cfg['max_concurrent_interrupts'],
                interrupt_timeout=int_cfg['interrupt_timeout'],
                retry_attempts=int_cfg['retry_attempts'],
                retry_delay=int_cfg['retry_delay'],
                enable_speech_interrupts=int_cfg['enable_speech_interrupts'],
                enable_recording_interrupts=int_cfg['enable_recording_interrupts'],
                enable_session_interrupts=int_cfg['enable_session_interrupts'],
                enable_full_reset=int_cfg['enable_full_reset']
            )
            
            self.integrations['interrupt'] = InterruptManagementIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=interrupt_config
            )
            
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: tray, input, permissions, update_manager, network, audio, interrupt")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
            raise
    
    async def _initialize_integrations(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            for name, integration in self.integrations.items():
                print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {name}...")
                success = await integration.initialize()
                if not success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}")
                    raise Exception(f"Failed to initialize {name}")
                print(f"‚úÖ {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
            raise
    
    async def _setup_coordination(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.HIGH)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
            await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.MEDIUM)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await self.event_bus.subscribe("keyboard.long_press", self._on_keyboard_event, EventPriority.HIGH)
            await self.event_bus.subscribe("keyboard.release", self._on_keyboard_event, EventPriority.HIGH)
            await self.event_bus.subscribe("keyboard.short_press", self._on_keyboard_event, EventPriority.HIGH)
            
            print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {e}")
            raise
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            if not self.is_initialized:
                print("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return False
            
            if self.is_running:
                print("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã")
                return True
            
            print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            for name, integration in self.integrations.items():
                print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
                success = await integration.start()
                if not success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}")
                    return False
                print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω")
            
            self.is_running = True
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞
            await self.event_bus.publish("app.startup", {
                "coordinator": "simple_module_coordinator",
                "integrations": list(self.integrations.keys())
            })
            
            print("‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            if not self.is_running:
                print("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
                return True
            
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.event_bus.publish("app.shutdown", {
                "coordinator": "simple_module_coordinator"
            })
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            for name, integration in self.integrations.items():
                print(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                success = await integration.stop()
                if not success:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}")
                else:
                    print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.is_running = False
            print("‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        global _app_running
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if _app_running or self.is_running:
                print("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
                return
            
            _app_running = True
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            success = await self.initialize()
            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            success = await self.start()
            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
            tray_integration = self.integrations.get('tray')
            if not tray_integration:
                print("‚ùå TrayController –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            app = tray_integration.get_app()
            if not app:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ—è")
                return
            
            print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–æ–π –≤ –º–µ–Ω—é-–±–∞—Ä–µ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            app.run()
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            _app_running = False
            await self.stop()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è, –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏)
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ")
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º —á–µ—Ä–µ–∑ EventBus
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –Ω–µ –¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª–µ–π!
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_app_shutdown(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ")
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º —á–µ—Ä–µ–∑ EventBus
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # EventBus –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ dict: {"type", "data", "timestamp"}
            if isinstance(event, dict):
                data = event.get("data") or {}
                new_mode = data.get("mode", None)
            else:
                # fallback –Ω–∞ –æ–±—ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                data = getattr(event, "data", {}) or {}
                new_mode = data.get("mode", None)

            printable_mode = getattr(new_mode, "value", None) or str(new_mode) if new_mode is not None else "unknown"
            print(f"üîÑ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {printable_mode}")
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç!
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
    
    async def _on_keyboard_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            # EventBus –ø–µ—Ä–µ–¥–∞–µ—Ç dict —Å –∫–ª—é—á–æ–º "type"
            if isinstance(event, dict):
                event_type = event.get("type", "unknown")
            else:
                event_type = getattr(event, "event_type", "unknown")
            print(f"‚å®Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {event_type}")
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç!
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "core_components": {
                "event_bus": self.event_bus is not None,
                "state_manager": self.state_manager is not None,
                "error_handler": self.error_handler is not None
            },
            "integrations": {
                name: integration.get_status() 
                for name, integration in self.integrations.items()
            }
        }
