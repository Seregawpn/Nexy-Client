"""
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
"""

import asyncio
import logging
import time
from typing import Dict, Any, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
from speech_playback import SequentialSpeechPlayer, PlayerConfig
from audio_device_manager import DeviceManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from input_processing import KeyboardMonitor, SpeechRecognizer, KeyEvent, KeyEventType, SpeechEvent, SpeechState
from interrupt_management import InterruptCoordinator, InterruptDependencies, InterruptEvent, InterruptType, InterruptPriority
from mode_management import ModeController, AppMode, ModeTransition, ModeTransitionType

logger = logging.getLogger(__name__)

@dataclass
class ModuleDependencies:
    """–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
    speech_player: Optional[SequentialSpeechPlayer] = None
    audio_device_manager: Optional[DeviceManager] = None
    grpc_client: Optional[Any] = None
    state_manager: Optional[Any] = None
    screen_capture: Optional[Any] = None

class ModuleCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π - —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏"""
    
    def __init__(self):
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ (–ù–ï –¢–†–û–ì–ê–ï–ú)
        self.speech_player = None
        self.audio_device_manager = None
        self.grpc_client = None
        self.state_manager = None
        self.screen_capture = None
        
        # –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        self.keyboard_monitor = None
        self.speech_recognizer = None
        self.interrupt_coordinator = None
        self.mode_controller = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.is_running = False
        
    def initialize(self, dependencies: ModuleDependencies):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
            self.speech_player = dependencies.speech_player
            self.audio_device_manager = dependencies.audio_device_manager
            self.grpc_client = dependencies.grpc_client
            self.state_manager = dependencies.state_manager
            self.screen_capture = dependencies.screen_capture
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
            self._initialize_keyboard_monitor()
            self._initialize_speech_recognizer()
            self._initialize_interrupt_coordinator()
            self._initialize_mode_controller()
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏
            self._connect_modules()
            
            self.is_initialized = True
            logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: {e}")
            raise
            
    def _initialize_keyboard_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        from ...input_processing import KeyboardConfig
        
        config = KeyboardConfig(
            key_to_monitor="space",
            short_press_threshold=0.6,
            long_press_threshold=2.0,
            event_cooldown=0.1,
            hold_check_interval=0.05,
            debounce_time=0.1
        )
        
        self.keyboard_monitor = KeyboardMonitor(config)
        self.keyboard_monitor.register_callback(KeyEventType.SHORT_PRESS, self._handle_short_press)
        self.keyboard_monitor.register_callback(KeyEventType.LONG_PRESS, self._handle_long_press)
        self.keyboard_monitor.register_callback(KeyEventType.RELEASE, self._handle_key_release)
        
    def _initialize_speech_recognizer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"""
        from ...input_processing import SpeechConfig
        
        config = SpeechConfig(
            sample_rate=16000,
            chunk_size=1024,
            channels=1,
            energy_threshold=100,
            dynamic_energy_threshold=True,
            pause_threshold=0.5,
            phrase_threshold=0.3,
            non_speaking_duration=0.3,
            max_duration=30.0,
            auto_start=True
        )
        
        self.speech_recognizer = SpeechRecognizer(config)
        
    def _initialize_interrupt_coordinator(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        self.interrupt_coordinator = InterruptCoordinator()
        
        dependencies = InterruptDependencies(
            speech_player=self.speech_player,
            speech_recognizer=self.speech_recognizer,
            grpc_client=self.grpc_client,
            state_manager=self.state_manager
        )
        
        self.interrupt_coordinator.initialize(dependencies)
        
    def _initialize_mode_controller(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–∂–∏–º–æ–≤"""
        self.mode_controller = ModeController()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–∂–∏–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
        from mode_management.modes.speaking_mode import SpeakingMode
        from mode_management.modes.recording_mode import RecordingMode
        
        speaking_mode = SpeakingMode(
            speech_player=self.speech_player,
            audio_device_manager=self.audio_device_manager
        )
        
        recording_mode = RecordingMode(
            speech_recognizer=self.speech_recognizer
        )
        
        self.mode_controller.register_mode_handler(AppMode.SPEAKING, speaking_mode)
        self.mode_controller.register_mode_handler(AppMode.RECORDING, recording_mode)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
        self._register_mode_transitions()
        
    def _register_mode_transitions(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏"""
        # IDLE ‚Üí LISTENING
        transition = ModeTransition(
            from_mode=AppMode.IDLE,
            to_mode=AppMode.LISTENING,
            transition_type=ModeTransitionType.AUTOMATIC,
            priority=1
        )
        self.mode_controller.register_transition(transition)
        
        # LISTENING ‚Üí RECORDING (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ)
        transition = ModeTransition(
            from_mode=AppMode.LISTENING,
            to_mode=AppMode.RECORDING,
            transition_type=ModeTransitionType.MANUAL,
            priority=1
        )
        self.mode_controller.register_transition(transition)
        
        # SPEAKING ‚Üí RECORDING (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ–º)
        transition = ModeTransition(
            from_mode=AppMode.SPEAKING,
            to_mode=AppMode.RECORDING,
            transition_type=ModeTransitionType.INTERRUPT,
            priority=1
        )
        self.mode_controller.register_transition(transition)
        
        # RECORDING ‚Üí PROCESSING (–æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏)
        transition = ModeTransition(
            from_mode=AppMode.RECORDING,
            to_mode=AppMode.PROCESSING,
            transition_type=ModeTransitionType.AUTOMATIC,
            priority=1
        )
        self.mode_controller.register_transition(transition)
        
        # PROCESSING ‚Üí IDLE (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        transition = ModeTransition(
            from_mode=AppMode.PROCESSING,
            to_mode=AppMode.IDLE,
            transition_type=ModeTransitionType.AUTOMATIC,
            priority=1
        )
        self.mode_controller.register_transition(transition)
        
    def _connect_modules(self):
        """–°–≤—è–∑—ã–≤–∞–µ—Ç –º–æ–¥—É–ª–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
        from interrupt_management.handlers.speech_interrupt import SpeechInterruptHandler
        from interrupt_management.handlers.recording_interrupt import RecordingInterruptHandler
        
        speech_interrupt_handler = SpeechInterruptHandler(
            speech_player=self.speech_player,
            grpc_client=self.grpc_client
        )
        
        recording_interrupt_handler = RecordingInterruptHandler(
            speech_recognizer=self.speech_recognizer
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.interrupt_coordinator.register_handler(
            InterruptType.SPEECH_STOP,
            speech_interrupt_handler.handle_speech_stop
        )
        
        self.interrupt_coordinator.register_handler(
            InterruptType.RECORDING_STOP,
            recording_interrupt_handler.handle_recording_stop
        )
        
    async def _handle_short_press(self, event: KeyEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞"""
        logger.info("üîë –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞")
        
        # –ï—Å–ª–∏ —Ä–µ—á—å –∏–¥–µ—Ç - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ speech_playback
        if self.mode_controller.current_mode == AppMode.SPEAKING:
            interrupt_event = InterruptEvent(
                type=InterruptType.SPEECH_STOP,
                priority=InterruptPriority.HIGH,
                source="keyboard_short_press",
                timestamp=event.timestamp
            )
            await self.interrupt_coordinator.trigger_interrupt(interrupt_event)
            logger.info("üõë –†–µ—á—å –ø—Ä–µ—Ä–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ speech_playback")
            
    async def _handle_long_press(self, event: KeyEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞"""
        logger.info("üîë –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞")
        
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ—á—å –µ—Å–ª–∏ –∏–¥–µ—Ç
        if self.mode_controller.current_mode == AppMode.SPEAKING:
            interrupt_event = InterruptEvent(
                type=InterruptType.SPEECH_STOP,
                priority=InterruptPriority.HIGH,
                source="keyboard_long_press",
                timestamp=event.timestamp
            )
            await self.interrupt_coordinator.trigger_interrupt(interrupt_event)
            logger.info("üõë –†–µ—á—å –ø—Ä–µ—Ä–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ speech_playback")
            
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏
        await self.mode_controller.switch_mode(AppMode.RECORDING)
        
    async def _handle_key_release(self, event: KeyEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞"""
        logger.info("üîë –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞")
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        if self.mode_controller.current_mode == AppMode.RECORDING:
            interrupt_event = InterruptEvent(
                type=InterruptType.RECORDING_STOP,
                priority=InterruptPriority.NORMAL,
                source="keyboard_release",
                timestamp=event.timestamp
            )
            await self.interrupt_coordinator.trigger_interrupt(interrupt_event)
            await self.mode_controller.switch_mode(AppMode.PROCESSING)
            logger.info("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"""
        if not self.is_initialized:
            raise RuntimeError("–ú–æ–¥—É–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            self.keyboard_monitor.start_monitoring()
            self.is_running = True
            logger.info("üöÄ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}")
            raise
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"""
        try:
            if self.keyboard_monitor:
                self.keyboard_monitor.stop_monitoring()
                
            self.is_running = False
            logger.info("üõë –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}")
            
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "current_mode": self.mode_controller.current_mode.value if self.mode_controller else None,
            "keyboard_monitor": self.keyboard_monitor.get_status() if self.keyboard_monitor else None,
            "speech_recognizer": self.speech_recognizer.get_status() if self.speech_recognizer else None,
            "interrupt_coordinator": self.interrupt_coordinator.get_status() if self.interrupt_coordinator else None,
            "mode_controller": self.mode_controller.get_status() if self.mode_controller else None,
        }
