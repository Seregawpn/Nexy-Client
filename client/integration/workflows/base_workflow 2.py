"""
BaseWorkflow - –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö workflow'–æ–≤
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å EventBus
"""

import asyncio
import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, Set
from enum import Enum

# –ò–º–ø–æ—Ä—Ç —Ä–µ–∂–∏–º–æ–≤ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
try:
    from modules.mode_management import AppMode
except ImportError:
    from enum import Enum
    class AppMode(Enum):
        SLEEPING = "sleeping"
        LISTENING = "listening" 
        PROCESSING = "processing"

from integration.core.event_bus import EventBus, EventPriority

logger = logging.getLogger(__name__)

class WorkflowState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è workflow'–∞"""
    IDLE = "idle"
    ACTIVE = "active"
    TRANSITIONING = "transitioning"
    CANCELLED = "cancelled"
    ERROR = "error"

class BaseWorkflow(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è workflow'–æ–≤ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    - –ù–ï —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è)
    - –ù–ï –¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    - –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    """
    
    def __init__(self, event_bus: EventBus, workflow_name: str):
        self.event_bus = event_bus
        self.workflow_name = workflow_name
        self.state = WorkflowState.IDLE
        self.current_session_id: Optional[str] = None
        self.active_tasks: Set[asyncio.Task] = set()
        self._shutdown_requested = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è workflow'–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
        try:
            await self._setup_subscriptions()
            logger.info(f"üîÑ {self.workflow_name}: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå {self.workflow_name}: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - {e}")
            raise
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ workflow'–∞"""
        try:
            self.state = WorkflowState.ACTIVE
            await self._on_start()
            logger.info(f"üöÄ {self.workflow_name}: –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå {self.workflow_name}: –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ - {e}")
            self.state = WorkflowState.ERROR
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ workflow'–∞"""
        try:
            self._shutdown_requested = True
            self.state = WorkflowState.IDLE
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for task in list(self.active_tasks):
                if not task.done():
                    task.cancel()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            if self.active_tasks:
                await asyncio.gather(*self.active_tasks, return_exceptions=True)
            
            await self._on_stop()
            logger.info(f"üõë {self.workflow_name}: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå {self.workflow_name}: –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - {e}")
    
    @abstractmethod
    async def _setup_subscriptions(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        pass
    
    @abstractmethod
    async def _on_start(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        pass
    
    async def _on_stop(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"""
        pass
    
    def _create_task(self, coro, name: str = None) -> asyncio.Task:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –∑–∞–¥–∞—á–∏"""
        task = asyncio.create_task(coro, name=f"{self.workflow_name}:{name or 'task'}")
        self.active_tasks.add(task)
        task.add_done_callback(self._task_done_callback)
        return task
    
    def _task_done_callback(self, task: asyncio.Task):
        """Callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        self.active_tasks.discard(task)
        if task.cancelled():
            logger.debug(f"üîÑ {self.workflow_name}: –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ - {task.get_name()}")
        elif task.exception():
            logger.error(f"‚ùå {self.workflow_name}: –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task.get_name()} - {task.exception()}")
    
    async def _wait_for_event(self, event_type: str, timeout: float = 30.0, 
                            session_filter: bool = True) -> Optional[Dict[str, Any]]:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            session_filter: –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        """
        event_received = asyncio.Event()
        event_data = {}
        
        async def event_handler(event):
            nonlocal event_data
            try:
                data = event.get("data", {})
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
                if session_filter and self.current_session_id:
                    event_session = data.get("session_id")
                    if event_session and event_session != self.current_session_id:
                        return
                
                event_data = data
                event_received.set()
            except Exception as e:
                logger.error(f"‚ùå {self.workflow_name}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type} - {e}")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
        await self.event_bus.subscribe(event_type, event_handler, EventPriority.HIGH)
        
        try:
            # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            await asyncio.wait_for(event_received.wait(), timeout=timeout)
            return event_data
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ {self.workflow_name}: —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event_type}")
            return None
        finally:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
            try:
                await self.event_bus.unsubscribe(event_type, event_handler)
            except Exception:
                pass
    
    async def _publish_mode_request(self, target_mode: AppMode, source: str, 
                                   session_id: Optional[str] = None, priority: int = 50):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        try:
            await self.event_bus.publish("mode.request", {
                "target": target_mode,
                "source": f"{self.workflow_name}.{source}",
                "session_id": session_id or self.current_session_id,
                "priority": priority
            })
            logger.debug(f"üîÑ {self.workflow_name}: –∑–∞–ø—Ä–æ—Å —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ {target_mode.value}")
        except Exception as e:
            logger.error(f"‚ùå {self.workflow_name}: –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ mode.request - {e}")
    
    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ workflow'–∞"""
        return self.state == WorkflowState.ACTIVE and not self._shutdown_requested
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ workflow'–∞"""
        return {
            "name": self.workflow_name,
            "state": self.state.value,
            "session_id": self.current_session_id,
            "active_tasks": len(self.active_tasks),
            "shutdown_requested": self._shutdown_requested
        }
