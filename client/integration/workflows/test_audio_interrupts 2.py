#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –µ–¥–∏–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∞—É–¥–∏–æ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤–µ–¥—É—Ç –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent.parent))

from integration.core.event_bus import EventBus, EventPriority

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AudioInterruptTester:
    """–¢–µ—Å—Ç–µ—Ä –µ–¥–∏–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∞—É–¥–∏–æ"""
    
    def __init__(self):
        self.event_bus = EventBus()
        self.events_received = []
        self.interrupt_methods = []
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∞—É–¥–∏–æ...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ï–î–ò–ù–´–ô –∫–∞–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self.event_bus.subscribe("playback.cancelled", self._on_unified_interrupt, EventPriority.HIGH)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        await self.event_bus.subscribe("keyboard.short_press", self._on_input_event, EventPriority.LOW)
        await self.event_bus.subscribe("interrupt.request", self._on_input_event, EventPriority.LOW)
        
        print("‚úÖ –¢–µ—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    async def _on_unified_interrupt(self, event):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ï–î–ò–ù–û–ì–û –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        data = event.get("data", {})
        source = data.get("source", "unknown")
        reason = data.get("reason", "unknown")
        
        self.events_received.append("playback.cancelled")
        print(f"‚úÖ –ï–î–ò–ù–´–ô –∫–∞–Ω–∞–ª: playback.cancelled (source={source}, reason={reason})")
    
    async def _on_input_event(self, event):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        event_type = event.get("type", "unknown")
        print(f"üì• –í—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
    
    async def test_keyboard_interrupt(self):
        """–¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        print("\nüéπ === –¢–ï–°–¢ –ü–†–ï–†–´–í–ê–ù–ò–Ø –ß–ï–†–ï–ó –ö–õ–ê–í–ò–ê–¢–£–†–£ ===")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        print("1. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        await self.event_bus.publish("playback.started", {
            "session_id": "keyboard_test",
            "audio_format": "pcm_s16le"
        })
        
        await asyncio.sleep(0.1)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        print("2. –°–∏–º—É–ª–∏—Ä—É–µ–º keyboard.short_press...")
        await self.event_bus.publish("keyboard.short_press", {
            "session_id": "keyboard_test",
            "reason": "user_interrupt"
        })
        
        await asyncio.sleep(0.1)
        
        self.interrupt_methods.append({
            "method": "keyboard.short_press", 
            "events": self.events_received.copy()
        })
        self.events_received.clear()
        
        print("‚úÖ –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def test_workflow_interrupt(self):
        """–¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ ProcessingWorkflow"""
        print("\n‚öôÔ∏è === –¢–ï–°–¢ –ü–†–ï–†–´–í–ê–ù–ò–Ø –ß–ï–†–ï–ó WORKFLOW ===")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        print("1. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        await self.event_bus.publish("playback.started", {
            "session_id": "workflow_test",
            "audio_format": "pcm_s16le"
        })
        
        await asyncio.sleep(0.1)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç ProcessingWorkflow (—á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –∫–∞–Ω–∞–ª)
        print("2. –°–∏–º—É–ª–∏—Ä—É–µ–º playback.cancelled –æ—Ç ProcessingWorkflow...")
        await self.event_bus.publish("playback.cancelled", {
            "session_id": "workflow_test",
            "reason": "user_interrupt",
            "source": "processing_workflow"
        })
        
        await asyncio.sleep(0.1)
        
        self.interrupt_methods.append({
            "method": "processing_workflow",
            "events": self.events_received.copy()
        })
        self.events_received.clear()
        
        print("‚úÖ –¢–µ—Å—Ç workflow –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def test_general_interrupt(self):
        """–¢–µ—Å—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        print("\nüõë === –¢–ï–°–¢ –û–ë–©–ï–ì–û –ü–†–ï–†–´–í–ê–ù–ò–Ø ===")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        print("1. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
        await self.event_bus.publish("playback.started", {
            "session_id": "general_test",
            "audio_format": "pcm_s16le"
        })
        
        await asyncio.sleep(0.1)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—â–µ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        print("2. –°–∏–º—É–ª–∏—Ä—É–µ–º interrupt.request...")
        await self.event_bus.publish("interrupt.request", {
            "session_id": "general_test",
            "scope": "playback",
            "reason": "user_interrupt"
        })
        
        await asyncio.sleep(0.1)
        
        self.interrupt_methods.append({
            "method": "interrupt.request",
            "events": self.events_received.copy()
        })
        self.events_received.clear()
        
        print("‚úÖ –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def analyze_consistency(self):
        """–ê–Ω–∞–ª–∏–∑ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        print("\nüìä === –ê–ù–ê–õ–ò–ó –ï–î–ò–ù–û–û–ë–†–ê–ó–ò–Ø –ü–†–ï–†–´–í–ê–ù–ò–ô ===")
        
        if not self.interrupt_methods:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        first_result = self.interrupt_methods[0]["events"]
        consistent = True
        
        print(f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({self.interrupt_methods[0]['method']}):")
        for event in first_result:
            print(f"  - {event}")
        
        print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:")
        for method_data in self.interrupt_methods[1:]:
            method_name = method_data["method"]
            method_events = method_data["events"]
            
            print(f"\n{method_name}:")
            for event in method_events:
                print(f"  - {event}")
            
            if set(method_events) != set(first_result):
                print(f"  ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï —Å —ç—Ç–∞–ª–æ–Ω–æ–º!")
                consistent = False
            else:
                print(f"  ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É")
        
        print(f"\n{'‚úÖ –ï–î–ò–ù–û–û–ë–†–ê–ó–ò–ï –î–û–°–¢–ò–ì–ù–£–¢–û' if consistent else '‚ùå –ï–î–ò–ù–û–û–ë–†–ê–ó–ò–ï –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–û'}")
        return consistent
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–ï–†–´–í–ê–ù–ò–ô –ê–£–î–ò–û")
            print("=" * 60)
            
            await self.setup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            await self.test_keyboard_interrupt()
            await self.test_workflow_interrupt()
            await self.test_general_interrupt()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            consistent = await self.analyze_consistency()
            
            print("\nüìã === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===")
            print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {len(self.interrupt_methods)}")
            print(f"–ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {'‚úÖ –î–ê' if consistent else '‚ùå –ù–ï–¢'}")
            
            if consistent:
                print("\nüéâ –í–°–ï –ü–†–ï–†–´–í–ê–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ï–î–ò–ù–û–û–ë–†–ê–ó–ù–û!")
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –æ–ø—ã—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.")
            else:
                print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–ó–õ–ò–ß–ò–Ø –í –ü–†–ï–†–´–í–ê–ù–ò–Ø–•!")
                print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π.")
            
            return consistent
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            import traceback
            traceback.print_exc()
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–ï–†–´–í–ê–ù–ò–ô –ê–£–î–ò–û")
    print("=" * 70)
    
    tester = AudioInterruptTester()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüéØ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Ä–∞–±–æ—Ç–∞—é—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ!")
        return True
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π!")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
