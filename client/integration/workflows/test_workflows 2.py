#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Workflows - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ —Ä–µ–∂–∏–º–æ–≤
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent.parent))

from integration.core.event_bus import EventBus, EventPriority
from integration.workflows import ListeningWorkflow, ProcessingWorkflow
from integration.workflows.workflow_config import WorkflowsConfig, DEFAULT_MACOS_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class WorkflowTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Workflows"""
    
    def __init__(self):
        self.event_bus = EventBus()
        self.config = WorkflowsConfig.from_dict(DEFAULT_MACOS_CONFIG)
        
        # Workflows
        self.listening_workflow = ListeningWorkflow(self.event_bus)
        self.processing_workflow = ProcessingWorkflow(self.event_bus)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        self.test_session_id = "test_session_123"
        self.events_received = []
    
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞ workflows...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self.event_bus.subscribe("*", self._event_monitor, EventPriority.LOW)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º workflows
        await self.listening_workflow.initialize()
        await self.processing_workflow.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º workflows
        await self.listening_workflow.start()
        await self.processing_workflow.start()
        
        print("‚úÖ –¢–µ—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    async def _event_monitor(self, event):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"""
        event_type = event.get("type", "unknown")
        self.events_received.append(event_type)
        print(f"üì° –°–æ–±—ã—Ç–∏–µ: {event_type}")
    
    async def test_listening_workflow(self):
        """–¢–µ—Å—Ç ListeningWorkflow"""
        print("\nüé§ === –¢–ï–°–¢ LISTENING WORKFLOW ===")
        
        # 1. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
        print("1. –°–∏–º—É–ª–∏—Ä—É–µ–º voice.recording_start...")
        await self.event_bus.publish("voice.recording_start", {
            "session_id": self.test_session_id,
            "timestamp": "2025-09-19T12:00:00"
        })
        
        await asyncio.sleep(1)
        
        # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞
        print("2. –°–∏–º—É–ª–∏—Ä—É–µ–º voice.activity_detected...")
        await self.event_bus.publish("voice.activity_detected", {
            "session_id": self.test_session_id,
            "level": 0.8
        })
        
        await asyncio.sleep(0.5)
        
        # 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        print("3. –°–∏–º—É–ª–∏—Ä—É–µ–º voice.recording_stop...")
        await self.event_bus.publish("voice.recording_stop", {
            "session_id": self.test_session_id,
            "duration": 2.5
        })
        
        await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = self.listening_workflow.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å ListeningWorkflow: {status}")
        
        print("‚úÖ –¢–µ—Å—Ç ListeningWorkflow –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def test_processing_workflow(self):
        """–¢–µ—Å—Ç ProcessingWorkflow"""
        print("\n‚öôÔ∏è === –¢–ï–°–¢ PROCESSING WORKFLOW ===")
        
        # 1. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ PROCESSING
        print("1. –°–∏–º—É–ª–∏—Ä—É–µ–º app.mode_changed ‚Üí PROCESSING...")
        await self.event_bus.publish("app.mode_changed", {
            "mode": "processing",
            "session_id": self.test_session_id,
            "previous_mode": "listening"
        })
        
        await asyncio.sleep(0.5)
        
        # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        print("2. –°–∏–º—É–ª–∏—Ä—É–µ–º screenshot.captured...")
        await self.event_bus.publish("screenshot.captured", {
            "session_id": self.test_session_id,
            "path": "/tmp/test_screenshot.png",
            "size": "1920x1080"
        })
        
        await asyncio.sleep(0.5)
        
        # 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ gRPC –∑–∞–ø—Ä–æ—Å–∞
        print("3. –°–∏–º—É–ª–∏—Ä—É–µ–º grpc.request_started...")
        await self.event_bus.publish("grpc.request_started", {
            "session_id": self.test_session_id,
            "server": "production"
        })
        
        await asyncio.sleep(1)
        
        # 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        print("4. –°–∏–º—É–ª–∏—Ä—É–µ–º playback.started...")
        await self.event_bus.publish("playback.started", {
            "session_id": self.test_session_id,
            "audio_format": "pcm_s16le"
        })
        
        await asyncio.sleep(0.5)
        
        # 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ gRPC
        print("5. –°–∏–º—É–ª–∏—Ä—É–µ–º grpc.request_completed...")
        await self.event_bus.publish("grpc.request_completed", {
            "session_id": self.test_session_id,
            "response_size": 1024
        })
        
        await asyncio.sleep(0.5)
        
        # 6. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–ö–õ–Æ–ß–ï–í–û–ï!)
        print("6. –°–∏–º—É–ª–∏—Ä—É–µ–º playback.completed...")
        await self.event_bus.publish("playback.completed", {
            "session_id": self.test_session_id,
            "duration": 5.2
        })
        
        await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = self.processing_workflow.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å ProcessingWorkflow: {status}")
        
        print("‚úÖ –¢–µ—Å—Ç ProcessingWorkflow –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def test_interrupt_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
        print("\nüõë === –¢–ï–°–¢ –ü–†–ï–†–´–í–ê–ù–ò–ô ===")
        
        # 1. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        print("1. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...")
        new_session = "interrupt_test_456"
        
        await self.event_bus.publish("app.mode_changed", {
            "mode": "processing",
            "session_id": new_session
        })
        
        await asyncio.sleep(0.5)
        
        # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        print("2. –°–∏–º—É–ª–∏—Ä—É–µ–º keyboard.short_press (–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ)...")
        await self.event_bus.publish("keyboard.short_press", {
            "session_id": new_session,
            "reason": "user_interrupt"
        })
        
        await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ workflow –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        status = self.processing_workflow.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {status}")
        
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í WORKFLOWS")
            print("=" * 50)
            
            await self.setup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            await self.test_listening_workflow()
            await self.test_processing_workflow() 
            await self.test_interrupt_handling()
            
            print("\nüìä === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
            print(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(self.events_received)}")
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {len(set(self.events_received))}")
            
            print(f"\n–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:")
            for event_type in set(self.events_received):
                count = self.events_received.count(event_type)
                print(f"  - {event_type}: {count}")
            
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º workflows
            await self.listening_workflow.stop()
            await self.processing_workflow.stop()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOWS NEXY AI ASSISTANT")
    print("=" * 60)
    
    tester = WorkflowTester()
    await tester.run_all_tests()
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
