#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –µ–¥–∏–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∞—É–¥–∏–æ
–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é SpeechPlaybackIntegration
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent.parent))

from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager
from integration.core.error_handler import ErrorHandler
from integration.integrations.speech_playback_integration import SpeechPlaybackIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class UnifiedInterruptTester:
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –µ–¥–∏–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π"""
    
    def __init__(self):
        self.event_bus = EventBus()
        self.state_manager = ApplicationStateManager()
        self.error_handler = ErrorHandler(self.event_bus)
        
        # –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.speech_integration = SpeechPlaybackIntegration(
            event_bus=self.event_bus,
            state_manager=self.state_manager,
            error_handler=self.error_handler
        )
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.unified_interrupts = []
        self.input_events = []
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        await self.speech_integration.initialize()
        await self.speech_integration.start()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ï–î–ò–ù–´–ô –∫–∞–Ω–∞–ª
        await self.event_bus.subscribe("playback.cancelled", self._on_unified_interrupt, EventPriority.LOW)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        await self.event_bus.subscribe("keyboard.short_press", self._on_input_event, EventPriority.LOW)
        await self.event_bus.subscribe("interrupt.request", self._on_input_event, EventPriority.LOW)
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    async def _on_unified_interrupt(self, event):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ–¥–∏–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        data = event.get("data", {})
        source = data.get("source", "unknown")
        reason = data.get("reason", "unknown")
        original = data.get("original_event", "direct")
        
        self.unified_interrupts.append({
            "source": source,
            "reason": reason,
            "original_event": original
        })
        
        print(f"‚úÖ –ï–î–ò–ù–´–ô –∫–∞–Ω–∞–ª: source={source}, reason={reason}, original={original}")
    
    async def _on_input_event(self, event):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        event_type = event.get("type", "unknown")
        self.input_events.append(event_type)
        print(f"üì• –í—Ö–æ–¥—è—â–µ–µ: {event_type}")
    
    async def test_keyboard_interrupt(self):
        """–¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        print("\nüéπ === –¢–ï–°–¢ –ö–õ–ê–í–ò–ê–¢–£–†–ù–û–ì–û –ü–†–ï–†–´–í–ê–ù–ò–Ø ===")
        
        # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.unified_interrupts.clear()
        self.input_events.clear()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        print("–°–∏–º—É–ª–∏—Ä—É–µ–º keyboard.short_press...")
        await self.event_bus.publish("keyboard.short_press", {
            "session_id": "keyboard_test",
            "reason": "user_interrupt"
        })
        
        await asyncio.sleep(0.2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        print(f"–í—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(self.input_events)}")
        print(f"–ï–¥–∏–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π: {len(self.unified_interrupts)}")
        
        return len(self.unified_interrupts) > 0
    
    async def test_general_interrupt(self):
        """–¢–µ—Å—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        print("\nüõë === –¢–ï–°–¢ –û–ë–©–ï–ì–û –ü–†–ï–†–´–í–ê–ù–ò–Ø ===")
        
        # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.unified_interrupts.clear()
        self.input_events.clear()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        print("–°–∏–º—É–ª–∏—Ä—É–µ–º interrupt.request...")
        await self.event_bus.publish("interrupt.request", {
            "session_id": "general_test",
            "scope": "playback",
            "reason": "user_interrupt"
        })
        
        await asyncio.sleep(0.2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        print(f"–í—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(self.input_events)}")
        print(f"–ï–¥–∏–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π: {len(self.unified_interrupts)}")
        
        return len(self.unified_interrupts) > 0
    
    async def test_direct_interrupt(self):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        print("\n‚öôÔ∏è === –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –ü–†–ï–†–´–í–ê–ù–ò–Ø ===")
        
        # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.unified_interrupts.clear()
        self.input_events.clear()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ (–æ—Ç ProcessingWorkflow)
        print("–°–∏–º—É–ª–∏—Ä—É–µ–º playback.cancelled –Ω–∞–ø—Ä—è–º—É—é...")
        await self.event_bus.publish("playback.cancelled", {
            "session_id": "direct_test",
            "reason": "user_interrupt",
            "source": "processing_workflow"
        })
        
        await asyncio.sleep(0.2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        print(f"–í—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(self.input_events)}")
        print(f"–ï–¥–∏–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π: {len(self.unified_interrupts)}")
        
        return len(self.unified_interrupts) > 0
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–´–• –ü–†–ï–†–´–í–ê–ù–ò–ô")
            print("=" * 60)
            
            await self.setup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            results = []
            results.append(await self.test_keyboard_interrupt())
            results.append(await self.test_general_interrupt())
            results.append(await self.test_direct_interrupt())
            
            print("\nüìä === –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó ===")
            print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}/{len(results)}")
            
            if all(results):
                print("\nüéâ –í–°–ï –ü–†–ï–†–´–í–ê–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ß–ï–†–ï–ó –ï–î–ò–ù–´–ô –ö–ê–ù–ê–õ!")
                print("‚úÖ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ:")
                print("  - keyboard.short_press ‚Üí playback.cancelled")
                print("  - interrupt.request ‚Üí playback.cancelled") 
                print("  - –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã ‚Üí playback.cancelled")
                return True
            else:
                print("\n‚ùå –ù–ï –í–°–ï –ü–†–ï–†–´–í–ê–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ï–î–ò–ù–û–û–ë–†–ê–ó–ù–û!")
                print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            import traceback
            traceback.print_exc()
            return False
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            try:
                await self.speech_integration.stop()
            except:
                pass

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéß –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–´–• –ü–†–ï–†–´–í–ê–ù–ò–ô –ê–£–î–ò–û")
    print("=" * 70)
    
    tester = UnifiedInterruptTester()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüéØ –ï–¥–∏–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è!")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
