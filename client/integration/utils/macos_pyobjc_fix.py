"""
macOS PyObjC Fix –¥–ª—è —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

–ü–†–û–ë–õ–ï–ú–ê:
–í PyInstaller —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ rumps –ø—ã—Ç–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
NSMakeRect –∏–∑ Foundation, –Ω–æ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ AppKit.
–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É: "dlsym cannot find symbol NSMakeRect in CFBundle ... Foundation.framework"

–†–ï–®–ï–ù–ò–ï:
–ó–∞–≥—Ä—É–∂–∞–µ–º AppKit –ø–µ—Ä–≤—ã–º –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º NSMakeRect –≤ Foundation –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º rumps.
–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –î–û –ª—é–±—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ rumps.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    from integration.utils.macos_pyobjc_fix import fix_pyobjc_foundation
    
    # –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ main.py, –¥–æ –∏–º–ø–æ—Ä—Ç–∞ rumps
    fix_pyobjc_foundation()
"""

import logging
import sys

logger = logging.getLogger(__name__)


def fix_pyobjc_foundation():
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å NSMakeRect –≤ Foundation –¥–ª—è PyInstaller.
    
    –î–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–æ –∏–º–ø–æ—Ä—Ç–∞ rumps.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ macOS
        if sys.platform != "darwin":
            return
        
        logger.info("üîß –ü—Ä–∏–º–µ–Ω—è—é PyObjC Foundation fix –¥–ª—è NSMakeRect...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AppKit –ø–µ—Ä–≤—ã–º (–∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π NSMakeRect)
        import AppKit
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Foundation
        import Foundation
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ñ–∏–∫—Å
        if not hasattr(Foundation, "NSMakeRect"):
            # –ö–æ–ø–∏—Ä—É–µ–º NSMakeRect –∏–∑ AppKit –≤ Foundation
            Foundation.NSMakeRect = getattr(AppKit, "NSMakeRect")
            logger.info("‚úÖ NSMakeRect —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ AppKit –≤ Foundation")
        else:
            logger.info("‚úÖ NSMakeRect —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Foundation")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        problematic_symbols = [
            "NSMakePoint",
            "NSMakeSize",
            "NSMakeRange",
        ]
        
        fixed_symbols = []
        for symbol in problematic_symbols:
            if not hasattr(Foundation, symbol) and hasattr(AppKit, symbol):
                setattr(Foundation, symbol, getattr(AppKit, symbol))
                fixed_symbols.append(symbol)
        
        if fixed_symbols:
            logger.info(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã: {', '.join(fixed_symbols)}")
        
        logger.info("‚úÖ PyObjC Foundation fix –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except ImportError as e:
        # PyObjC –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logger.warning(f"‚ö†Ô∏è PyObjC –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é fix: {e}")
        
    except Exception as e:
        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ PyObjC Foundation fix: {e}")
        # –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ª—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è


def check_pyobjc_status():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å PyObjC –∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å PyObjC –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    status = {
        "platform": sys.platform,
        "pyobjc_available": False,
        "appkit_available": False,
        "foundation_available": False,
        "symbols": {}
    }
    
    try:
        import Foundation
        status["foundation_available"] = True
        status["pyobjc_available"] = True
        
        import AppKit
        status["appkit_available"] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        symbols_to_check = [
            "NSMakeRect",
            "NSMakePoint",
            "NSMakeSize",
            "NSMakeRange",
        ]
        
        for symbol in symbols_to_check:
            status["symbols"][symbol] = {
                "in_foundation": hasattr(Foundation, symbol),
                "in_appkit": hasattr(AppKit, symbol),
            }
        
    except ImportError:
        pass
    
    return status


def print_pyobjc_diagnostics():
    """
    –í—ã–≤–æ–¥–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PyObjC.
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–º–≤–æ–ª–∞–º–∏.
    """
    status = check_pyobjc_status()
    
    print("\n" + "=" * 80)
    print("üîç PyObjC Diagnostics")
    print("=" * 80)
    print(f"Platform: {status['platform']}")
    print(f"PyObjC available: {status['pyobjc_available']}")
    print(f"AppKit available: {status['appkit_available']}")
    print(f"Foundation available: {status['foundation_available']}")
    
    if status["symbols"]:
        print("\nüìä Symbol availability:")
        for symbol, availability in status["symbols"].items():
            foundation_status = "‚úì" if availability["in_foundation"] else "‚úó"
            appkit_status = "‚úì" if availability["in_appkit"] else "‚úó"
            print(f"  {symbol}:")
            print(f"    Foundation: {foundation_status}")
            print(f"    AppKit:     {appkit_status}")
    
    print("=" * 80 + "\n")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print_pyobjc_diagnostics()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞
    fix_pyobjc_foundation()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞
    print("\n–ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å–∞:")
    print_pyobjc_diagnostics()



