#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import logging
import logging.handlers
import os
import sys
from pathlib import Path

def setup_logging_for_app():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è .app —Ñ–∞–π–ª–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ .app
    if getattr(sys, 'frozen', False):
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∞–Ω–æ –≤ .app
        app_name = "Nexy"
        log_dir = Path.home() / "Library" / "Logs" / app_name
    else:
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–∑ Python
        app_name = "Nexy_Dev"
        log_dir = Path.cwd() / "logs"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.INFO
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
    date_format = '%Y-%m-%d %H:%M:%S'
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    main_log_file = log_dir / "app.log"
    error_log_file = log_dir / "errors.log"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(log_format, date_format)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # 1. –§–∞–π–ª –ª–æ–≥–æ–≤ (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π)
    file_handler = logging.handlers.RotatingFileHandler(
        main_log_file,
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setLevel(log_level)
    file_handler.setFormatter(formatter)
    root_logger.addHandler(file_handler)
    
    # 2. –§–∞–π–ª –æ—à–∏–±–æ–∫ (–æ—Ç–¥–µ–ª—å–Ω–æ)
    error_handler = logging.handlers.RotatingFileHandler(
        error_log_file,
        maxBytes=5*1024*1024,  # 5MB
        backupCount=3,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    root_logger.addHandler(error_handler)
    
    # 3. –ö–æ–Ω—Å–æ–ª—å (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if not getattr(sys, 'frozen', False):
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(log_level)
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)
    
    # 4. –°–∏—Å—Ç–µ–º–Ω—ã–π –∂—É—Ä–Ω–∞–ª macOS
    try:
        syslog_handler = logging.handlers.SysLogHandler(
            address='/var/run/syslog',
            facility=logging.handlers.SysLogHandler.LOG_USER
        )
        syslog_handler.setLevel(logging.WARNING)
        syslog_formatter = logging.Formatter('%(name)s: %(levelname)s - %(message)s')
        syslog_handler.setFormatter(syslog_formatter)
        root_logger.addHandler(syslog_handler)
    except Exception as e:
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –∂—É—Ä–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–±—ã—á–Ω–æ –≤ .app)
        pass
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    logger = logging.getLogger(__name__)
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è {app_name}")
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {log_dir}")
    logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {main_log_file}")
    logger.info(f"–§–∞–π–ª –æ—à–∏–±–æ–∫: {error_log_file}")
    logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {logging.getLevelName(log_level)}")
    
    return logger

def get_logger(name):
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    return logging.getLogger(name)

def test_logging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = setup_logging_for_app()
    
    logger.info("–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    logger.warning("–¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
    logger.error("–¢–µ—Å—Ç –æ—à–∏–±–∫–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥—É–ª–∏
    test_logger = get_logger("test_module")
    test_logger.info("–¢–µ—Å—Ç –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–æ–¥—É–ª—è")
    
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ!")
    print(f"üìÅ –õ–æ–≥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: {Path.home() / 'Library' / 'Logs' / 'Nexy'}")
    
    return True

if __name__ == "__main__":
    test_logging()
