#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥—É–ª—è input_processing –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
import os
import logging
import time
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥—É–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª—è input_processing...")
    
    try:
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        from input_processing import (
            KeyboardMonitor, KeyEvent, KeyEventType, KeyboardConfig,
            SpeechRecognizer, SpeechEvent, SpeechEventType, SpeechState, SpeechConfig,
            InputConfig, DEFAULT_INPUT_CONFIG
        )
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç keyboard –º–æ–¥—É–ª—è
        from input_processing.keyboard import (
            KeyboardMonitor, KeyEvent, KeyEventType, KeyboardConfig
        )
        print("‚úÖ Keyboard –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç speech –º–æ–¥—É–ª—è
        from input_processing.speech import (
            SpeechRecognizer, SpeechEvent, SpeechEventType, SpeechState, SpeechConfig
        )
        print("‚úÖ Speech –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç config –º–æ–¥—É–ª—è
        from input_processing.config import (
            InputConfig, DEFAULT_INPUT_CONFIG
        )
        print("‚úÖ Config –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_keyboard_types():
    """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
    
    try:
        from input_processing.keyboard.types import KeyEvent, KeyEventType, KeyType, KeyboardConfig
        
        # –¢–µ—Å—Ç KeyEventType
        event_types = [KeyEventType.PRESS, KeyEventType.RELEASE, KeyEventType.HOLD, 
                      KeyEventType.SHORT_PRESS, KeyEventType.LONG_PRESS]
        print(f"‚úÖ KeyEventType: {[et.value for et in event_types]}")
        
        # –¢–µ—Å—Ç KeyType
        key_types = [KeyType.SPACE, KeyType.CTRL, KeyType.ALT, KeyType.SHIFT, 
                    KeyType.ENTER, KeyType.ESC]
        print(f"‚úÖ KeyType: {[kt.value for kt in key_types]}")
        
        # –¢–µ—Å—Ç KeyEvent
        event = KeyEvent(
            key="space",
            event_type=KeyEventType.PRESS,
            timestamp=time.time(),
            duration=0.5
        )
        print(f"‚úÖ KeyEvent —Å–æ–∑–¥–∞–Ω: {event.key} - {event.event_type.value}")
        
        # –¢–µ—Å—Ç KeyboardConfig
        config = KeyboardConfig(
            key_to_monitor="space",
            short_press_threshold=0.6,
            long_press_threshold=2.0
        )
        print(f"‚úÖ KeyboardConfig —Å–æ–∑–¥–∞–Ω: {config.key_to_monitor}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_speech_types():
    """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—á–∏"""
    print("\nüé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ—á–∏...")
    
    try:
        from input_processing.speech.types import SpeechEvent, SpeechEventType, SpeechState, SpeechConfig
        
        # –¢–µ—Å—Ç SpeechEventType
        event_types = [SpeechEventType.START, SpeechEventType.END, SpeechEventType.RESULT, 
                      SpeechEventType.ERROR, SpeechEventType.TIMEOUT]
        print(f"‚úÖ SpeechEventType: {[et.value for et in event_types]}")
        
        # –¢–µ—Å—Ç SpeechState
        states = [SpeechState.IDLE, SpeechState.LISTENING, SpeechState.PROCESSING, 
                 SpeechState.ERROR]
        print(f"‚úÖ SpeechState: {[s.value for s in states]}")
        
        # –¢–µ—Å—Ç SpeechEvent
        event = SpeechEvent(
            event_type=SpeechEventType.START,
            state=SpeechState.IDLE,
            timestamp=time.time(),
            text="test speech"
        )
        print(f"‚úÖ SpeechEvent —Å–æ–∑–¥–∞–Ω: {event.event_type.value}")
        
        # –¢–µ—Å—Ç SpeechConfig
        config = SpeechConfig(
            language="en-US",
            timeout=5.0,
            phrase_timeout=0.5
        )
        print(f"‚úÖ SpeechConfig —Å–æ–∑–¥–∞–Ω: {config.language}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–æ–≤ —Ä–µ—á–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    try:
        from input_processing.config.input_config import InputConfig, DEFAULT_INPUT_CONFIG
        
        # –¢–µ—Å—Ç DEFAULT_INPUT_CONFIG
        print(f"‚úÖ DEFAULT_INPUT_CONFIG: {DEFAULT_INPUT_CONFIG}")
        
        # –¢–µ—Å—Ç InputConfig
        from input_processing.keyboard.types import KeyboardConfig
        from input_processing.speech.types import SpeechConfig
        
        config = InputConfig(
            keyboard=KeyboardConfig(key_to_monitor="space"),
            speech=SpeechConfig(language="en-US")
        )
        print(f"‚úÖ InputConfig —Å–æ–∑–¥–∞–Ω: keyboard={config.keyboard.key_to_monitor}, speech={config.speech.language}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_keyboard_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
    
    try:
        from input_processing.keyboard.keyboard_monitor import KeyboardMonitor
        from input_processing.keyboard.types import KeyboardConfig
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = KeyboardConfig(
            key_to_monitor="space",
            short_press_threshold=0.6,
            long_press_threshold=2.0
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
        monitor = KeyboardMonitor(config)
        print(f"‚úÖ KeyboardMonitor —Å–æ–∑–¥–∞–Ω: {monitor.config.key_to_monitor}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        methods = ['start_monitoring', 'stop_monitoring', 'is_monitoring', 'register_callback']
        for method in methods:
            if hasattr(monitor, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_speech_recognizer():
    """–¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è —Ä–µ—á–∏"""
    print("\nüé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏...")
    
    try:
        from input_processing.speech.speech_recognizer import SpeechRecognizer
        from input_processing.speech.types import SpeechConfig
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = SpeechConfig(
            language="en-US",
            timeout=5.0,
            phrase_timeout=0.5
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        recognizer = SpeechRecognizer(config)
        print(f"‚úÖ SpeechRecognizer —Å–æ–∑–¥–∞–Ω: {recognizer.config.language}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        methods = ['start_recording', 'stop_recording', 'is_recording', 'register_callback']
        for method in methods:
            if hasattr(recognizer, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è —Ä–µ—á–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        from input_processing import KeyboardMonitor, SpeechRecognizer, InputConfig
        from input_processing.keyboard.types import KeyboardConfig
        from input_processing.speech.types import SpeechConfig
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        keyboard_config = KeyboardConfig(key_to_monitor="space")
        speech_config = SpeechConfig(language="en-US")
        input_config = InputConfig(keyboard=keyboard_config, speech=speech_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        keyboard_monitor = KeyboardMonitor(keyboard_config)
        speech_recognizer = SpeechRecognizer(speech_config)
        
        print(f"‚úÖ KeyboardMonitor —Å–æ–∑–¥–∞–Ω: {keyboard_monitor.config.key_to_monitor}")
        print(f"‚úÖ SpeechRecognizer —Å–æ–∑–¥–∞–Ω: {speech_recognizer.config.language}")
        print(f"‚úÖ InputConfig —Å–æ–∑–¥–∞–Ω: {input_config.keyboard.key_to_monitor}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüö® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    try:
        from input_processing.keyboard.types import KeyboardConfig
        from input_processing.speech.types import SpeechConfig
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            invalid_config = KeyboardConfig(
                key_to_monitor="invalid_key",
                short_press_threshold=-1.0,  # –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                long_press_threshold=0.5     # –ú–µ–Ω—å—à–µ short_press_threshold
            )
            print("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞")
        except Exception as e:
            print(f"‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {type(e).__name__}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä–µ—á–∏
        try:
            invalid_speech_config = SpeechConfig(
                language="invalid_lang",
                timeout=-1.0,  # –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                phrase_timeout=10.0  # –ë–æ–ª—å—à–µ timeout
            )
            print("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ—á–∏ –ø—Ä–∏–Ω—è—Ç–∞")
        except Exception as e:
            print(f"‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {type(e).__name__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø INPUT_PROCESSING")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    imports_ok = test_imports()
    
    # –¢–µ—Å—Ç 2: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard_types_ok = test_keyboard_types()
    
    # –¢–µ—Å—Ç 3: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ—á–∏
    speech_types_ok = test_speech_types()
    
    # –¢–µ—Å—Ç 4: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config_ok = test_config()
    
    # –¢–µ—Å—Ç 5: –ú–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard_monitor_ok = test_keyboard_monitor()
    
    # –¢–µ—Å—Ç 6: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏
    speech_recognizer_ok = test_speech_recognizer()
    
    # –¢–µ—Å—Ç 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    integration_ok = test_integration()
    
    # –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    error_handling_ok = test_error_handling()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç—ã: {'–ü–†–û–ô–î–ï–ù' if imports_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {'–ü–†–û–ô–î–ï–ù' if keyboard_types_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ—á–∏: {'–ü–†–û–ô–î–ï–ù' if speech_types_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–ü–†–û–ô–î–ï–ù' if config_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {'–ü–†–û–ô–î–ï–ù' if keyboard_monitor_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏: {'–ü–†–û–ô–î–ï–ù' if speech_recognizer_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'–ü–†–û–ô–î–ï–ù' if integration_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: {'–ü–†–û–ô–î–ï–ù' if error_handling_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    all_tests_passed = all([
        imports_ok, keyboard_types_ok, speech_types_ok, config_ok,
        keyboard_monitor_ok, speech_recognizer_ok, integration_ok, error_handling_ok
    ])
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_tests_passed else '–ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    if all_tests_passed:
        print("üéâ –ú–æ–¥—É–ª—å input_processing –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
    
    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)