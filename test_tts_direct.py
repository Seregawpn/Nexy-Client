#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç TTS —á–µ—Ä–µ–∑ gRPC - –æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
"""

import asyncio
import grpc
import sys
import os
from pathlib import Path
import sounddevice as sd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ protobuf
client_path = Path(__file__).parent / "client"
sys.path.insert(0, str(client_path))

try:
    import streaming_pb2
    import streaming_pb2_grpc
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å protobuf —Ñ–∞–π–ª—ã")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã streaming_pb2.py –∏ streaming_pb2_grpc.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ client/")
    sys.exit(1)

async def test_edge_tts_via_grpc():
    """–¢–µ—Å—Ç Edge TTS —á–µ—Ä–µ–∑ gRPC —Å–µ—Ä–≤–µ—Ä"""
    print("üó£Ô∏è –¢–ï–°–¢ EDGE TTS –ß–ï–†–ï–ó GRPC")
    print("=" * 50)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    channel = grpc.aio.insecure_channel('localhost:50051')
    stub = streaming_pb2_grpc.StreamingServiceStub(channel)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = streaming_pb2.StreamRequest(
            hardware_id="test-hardware-id-12345",
            text_input="Hello, this is a test of Edge text to speech through gRPC server.",
            screenshot_data=b"",  # –ü—É—Å—Ç–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
            session_id="test-session-001"
        )
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: '{request.text_input}'")
        print("üîÑ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–º –æ—Ç–≤–µ—Ç–æ–≤
        response_stream = stub.ProcessVoiceStream(request)
        
        audio_chunks = []
        text_response = ""
        
        async for response in response_stream:
            if response.audio_chunk:
                print(f"üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫: {len(response.audio_chunk)} –±–∞–π—Ç")
                audio_chunks.append(response.audio_chunk)
            
            if response.text_response:
                text_response = response.text_response
                print(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {text_response}")
        
        if audio_chunks:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(audio_chunks)} –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
            full_audio = b''.join(audio_chunks)
            print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {len(full_audio)} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º int16, 48kHz, mono (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
            audio_array = np.frombuffer(full_audio, dtype=np.int16)
            
            if len(audio_array) > 0:
                print(f"üéµ –ê—É–¥–∏–æ –º–∞—Å—Å–∏–≤: {len(audio_array)} —Å—ç–º–ø–ª–æ–≤")
                print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: {audio_array.min()} - {audio_array.max()}")
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ sounddevice
                print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
                sd.play(audio_array, samplerate=48000)
                sd.wait()
                
                print("‚úÖ Edge TTS —á–µ—Ä–µ–∑ gRPC —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                print("‚ùå –ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ –º–∞—Å—Å–∏–≤")
        else:
            print("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
            
    except grpc.RpcError as e:
        print(f"‚ùå gRPC –æ—à–∏–±–∫–∞: {e}")
        print(f"   –ö–æ–¥: {e.code()}")
        print(f"   –î–µ—Ç–∞–ª–∏: {e.details()}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await channel.close()

async def test_azure_tts_via_grpc():
    """–¢–µ—Å—Ç Azure TTS —á–µ—Ä–µ–∑ gRPC —Å–µ—Ä–≤–µ—Ä"""
    print("\nüá∫üá∏ –¢–ï–°–¢ AZURE TTS –ß–ï–†–ï–ó GRPC")
    print("=" * 50)
    print("‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã Azure TTS –Ω—É–∂–Ω–æ:")
    print("   1. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å SPEECH_KEY –∏ SPEECH_REGION –≤ server/config.env")
    print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å USE_EDGE_TTS=false")
    print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
    print("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Azure TTS —Ç–µ—Å—Ç (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TTS –ß–ï–†–ï–ó GRPC")
    print("=" * 60)
    print("üéØ –û–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π - —Ç–µ—Å—Ç–∏—Ä—É–µ–º TTS –Ω–∞–ø—Ä—è–º—É—é")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å gRPC —Å–µ—Ä–≤–µ—Ä–∞
    try:
        channel = grpc.aio.insecure_channel('localhost:50051')
        await asyncio.wait_for(channel.channel_ready(), timeout=5.0)
        print("‚úÖ gRPC —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        await channel.close()
    except asyncio.TimeoutError:
        print("‚ùå gRPC —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:50051")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd server && python main.py")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Edge TTS
    await test_edge_tts_via_grpc()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± Azure TTS
    await test_azure_tts_via_grpc()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 40)
    print("üé§ Edge TTS (gRPC)     - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
    print("üé§ Azure TTS (gRPC)    - —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π")
    print("\nüí° –ï—Å–ª–∏ Edge TTS —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏,")
    print("   –∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞!")

if __name__ == "__main__":
    asyncio.run(main())
