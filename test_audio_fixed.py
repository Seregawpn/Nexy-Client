#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞—É–¥–∏–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º WAV —Ñ–æ—Ä–º–∞—Ç–æ–º
"""

import asyncio
import logging
import sys
import wave
import struct
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent / "client"))
sys.path.append(str(Path(__file__).parent / "server" / "modules" / "grpc_service"))

import grpc.aio

# –ò–º–ø–æ—Ä—Ç—ã protobuf
try:
    import streaming_pb2
    import streaming_pb2_grpc
    print("‚úÖ Protobuf –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ protobuf: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def save_audio_as_wav(audio_data, sample_rate=48000, channels=1, filename="test_audio_fixed.wav"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º WAV —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        with wave.open(filename, 'wb') as wav_file:
            wav_file.setnchannels(channels)
            wav_file.setsampwidth(2)  # 16-bit = 2 bytes
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(audio_data)
        print(f"‚úÖ WAV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WAV: {e}")
        return False

async def test_audio_generation_fixed():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
        print("=" * 60)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        server_address = "localhost:50051"
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {server_address}")
        
        async with grpc.aio.insecure_channel(server_address) as channel:
            stub = streaming_pb2_grpc.StreamingServiceStub(channel)
            
            # –°–æ–∑–¥–∞–µ–º welcome –∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            request = streaming_pb2.WelcomeRequest(
                text="Hello! Test audio.",
                session_id="audio_test_fixed_session"
            )
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã
            audio_chunks = []
            metadata = {}
            
            async for response in stub.GenerateWelcomeAudio(request, timeout=30):
                content = response.WhichOneof('content')
                
                if content == 'audio_chunk':
                    chunk = response.audio_chunk
                    if chunk.audio_data:
                        audio_bytes = bytes(chunk.audio_data)
                        if audio_bytes:
                            audio_chunks.append(audio_bytes)
                            print(f"üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫: {len(audio_bytes)} –±–∞–π—Ç")
                
                elif content == 'metadata':
                    metadata = {
                        'method': response.metadata.method,
                        'duration_sec': response.metadata.duration_sec,
                        'sample_rate': response.metadata.sample_rate,
                        'channels': response.metadata.channels,
                    }
                    print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: method={metadata['method']}, duration={metadata['duration_sec']:.1f}s, sample_rate={metadata['sample_rate']}")
                
                elif content == 'end_message':
                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {response.end_message}")
                    break
                
                elif content == 'error_message':
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.error_message}")
                    return False
            
            if audio_chunks:
                total_bytes = sum(len(chunk) for chunk in audio_chunks)
                print(f"üéâ –£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω–æ {len(audio_chunks)} —á–∞–Ω–∫–æ–≤, –≤—Å–µ–≥–æ {total_bytes} –±–∞–π—Ç –∞—É–¥–∏–æ")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
                raw_audio = b''.join(audio_chunks)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º WAV —Ñ–æ—Ä–º–∞—Ç–µ
                sample_rate = metadata.get('sample_rate', 48000)
                channels = metadata.get('channels', 1)
                
                if save_audio_as_wav(raw_audio, sample_rate, channels):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = Path("test_audio_fixed.wav").stat().st_size
                    print(f"üìÅ –†–∞–∑–º–µ—Ä WAV —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    
                    if file_size > 1000:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 1KB, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∞—É–¥–∏–æ
                        print("‚úÖ WAV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
                        return True
                    else:
                        print("‚ùå WAV —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π")
                        return False
                else:
                    return False
            else:
                print("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = await test_audio_generation_fixed()
    
    print()
    print("=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢ –ê–£–î–ò–û –ì–ï–ù–ï–†–ê–¶–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        print("üîä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª test_audio_fixed.wav - –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π WAV –∞—É–¥–∏–æ")
    else:
        print("‚ùå –¢–ï–°–¢ –ê–£–î–ò–û –ì–ï–ù–ï–†–ê–¶–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) –ù–ï –ü–†–û–®–ï–õ")
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
